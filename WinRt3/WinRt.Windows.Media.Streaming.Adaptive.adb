--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.Web.Http;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Streaming.Adaptive is

   package IAsyncOperation_AdaptiveMediaSourceCreationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult);
   package AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSource

   procedure Initialize (this : in out AdaptiveMediaSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSource, IAdaptiveMediaSource_Ptr);
   begin
      if this.m_IAdaptiveMediaSource /= null then
         if this.m_IAdaptiveMediaSource.all /= null then
            RefCount := this.m_IAdaptiveMediaSource.all.Release;
            Free (this.m_IAdaptiveMediaSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AdaptiveMediaSource

   function IsContentTypeSupported
   (
      contentType : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Streaming.Adaptive.AdaptiveMediaSource");
      m_Factory        : access WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_contentType : WinRt.HString := To_HString (contentType);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAdaptiveMediaSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsContentTypeSupported (HStr_contentType, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_contentType);
      return m_ComRetVal;
   end;

   function CreateFromUriAsync
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Streaming.Adaptive.AdaptiveMediaSource");
      m_Factory        : access WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
      m_IID            : aliased WinRt.IID := (3188444189, 54790, 22994, (178, 249, 255, 32, 69, 67, 218, 18 )); -- Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (3177761792, 29260, 23158, (164, 55, 20, 100, 235, 221, 164, 172 ));
      m_Handler        : AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind := new AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult do
         Hr := RoGetActivationFactory (m_hString, IID_IAdaptiveMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUriAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAdaptiveMediaSourceCreationResult := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
                     Retval.m_IAdaptiveMediaSourceCreationResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromUriAsync
   (
      uri : Windows.Foundation.Uri'Class;
      httpClient : Windows.Web.Http.HttpClient'Class
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Streaming.Adaptive.AdaptiveMediaSource");
      m_Factory        : access WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
      m_IID            : aliased WinRt.IID := (3188444189, 54790, 22994, (178, 249, 255, 32, 69, 67, 218, 18 )); -- Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (3177761792, 29260, 23158, (164, 55, 20, 100, 235, 221, 164, 172 ));
      m_Handler        : AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind := new AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult do
         Hr := RoGetActivationFactory (m_hString, IID_IAdaptiveMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUriAsync (uri.m_IUriRuntimeClass.all, httpClient.m_IHttpClient.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAdaptiveMediaSourceCreationResult := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
                     Retval.m_IAdaptiveMediaSourceCreationResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStreamAsync
   (
      stream : Windows.Storage.Streams.IInputStream;
      uri : Windows.Foundation.Uri'Class;
      contentType : WinRt.WString
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Streaming.Adaptive.AdaptiveMediaSource");
      m_Factory        : access WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentType : WinRt.HString := To_HString (contentType);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
      m_IID            : aliased WinRt.IID := (3188444189, 54790, 22994, (178, 249, 255, 32, 69, 67, 218, 18 )); -- Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (3177761792, 29260, 23158, (164, 55, 20, 100, 235, 221, 164, 172 ));
      m_Handler        : AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind := new AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult do
         Hr := RoGetActivationFactory (m_hString, IID_IAdaptiveMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamAsync (stream, uri.m_IUriRuntimeClass.all, HStr_contentType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAdaptiveMediaSourceCreationResult := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
                     Retval.m_IAdaptiveMediaSourceCreationResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentType);
      end return;
   end;

   function CreateFromStreamAsync
   (
      stream : Windows.Storage.Streams.IInputStream;
      uri : Windows.Foundation.Uri'Class;
      contentType : WinRt.WString;
      httpClient : Windows.Web.Http.HttpClient'Class
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Streaming.Adaptive.AdaptiveMediaSource");
      m_Factory        : access WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentType : WinRt.HString := To_HString (contentType);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
      m_IID            : aliased WinRt.IID := (3188444189, 54790, 22994, (178, 249, 255, 32, 69, 67, 218, 18 )); -- Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (3177761792, 29260, 23158, (164, 55, 20, 100, 235, 221, 164, 172 ));
      m_Handler        : AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind := new AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdaptiveMediaSourceCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_AdaptiveMediaSourceCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult do
         Hr := RoGetActivationFactory (m_hString, IID_IAdaptiveMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamAsync (stream, uri.m_IUriRuntimeClass.all, HStr_contentType, httpClient.m_IHttpClient.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAdaptiveMediaSourceCreationResult := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult;
                     Retval.m_IAdaptiveMediaSourceCreationResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSource

   function get_IsLive
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_IsLive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DesiredLiveOffset
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_DesiredLiveOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredLiveOffset
   (
      this : in out AdaptiveMediaSource;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.put_DesiredLiveOffset (value);
   end;

   function get_InitialBitrate
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_InitialBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialBitrate
   (
      this : in out AdaptiveMediaSource;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.put_InitialBitrate (value);
   end;

   function get_CurrentDownloadBitrate
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_CurrentDownloadBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrentPlaybackBitrate
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_CurrentPlaybackBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AvailableBitrates
   (
      this : in out AdaptiveMediaSource
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_AvailableBitrates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DesiredMinBitrate
   (
      this : in out AdaptiveMediaSource
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_DesiredMinBitrate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DesiredMinBitrate
   (
      this : in out AdaptiveMediaSource;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.put_DesiredMinBitrate (value);
   end;

   function get_DesiredMaxBitrate
   (
      this : in out AdaptiveMediaSource
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_DesiredMaxBitrate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DesiredMaxBitrate
   (
      this : in out AdaptiveMediaSource;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.put_DesiredMaxBitrate (value);
   end;

   function get_AudioOnlyPlayback
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_AudioOnlyPlayback (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InboundBitsPerSecond
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_InboundBitsPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InboundBitsPerSecondWindow
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.get_InboundBitsPerSecondWindow (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InboundBitsPerSecondWindow
   (
      this : in out AdaptiveMediaSource;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.put_InboundBitsPerSecondWindow (value);
   end;

   function add_DownloadBitrateChanged
   (
      this : in out AdaptiveMediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.add_DownloadBitrateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadBitrateChanged
   (
      this : in out AdaptiveMediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.remove_DownloadBitrateChanged (token);
   end;

   function add_PlaybackBitrateChanged
   (
      this : in out AdaptiveMediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.add_PlaybackBitrateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlaybackBitrateChanged
   (
      this : in out AdaptiveMediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.remove_PlaybackBitrateChanged (token);
   end;

   function add_DownloadRequested
   (
      this : in out AdaptiveMediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.add_DownloadRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadRequested
   (
      this : in out AdaptiveMediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.remove_DownloadRequested (token);
   end;

   function add_DownloadCompleted
   (
      this : in out AdaptiveMediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.add_DownloadCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadCompleted
   (
      this : in out AdaptiveMediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.remove_DownloadCompleted (token);
   end;

   function add_DownloadFailed
   (
      this : in out AdaptiveMediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.add_DownloadFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadFailed
   (
      this : in out AdaptiveMediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSource.all.remove_DownloadFailed (token);
   end;

   function get_AdvancedSettings
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceAdvancedSettings;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings do
         m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
         Hr := m_Interface.get_AdvancedSettings (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdaptiveMediaSourceAdvancedSettings := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceAdvancedSettings;
         Retval.m_IAdaptiveMediaSourceAdvancedSettings.all := m_ComRetVal;
      end return;
   end;

   function get_MinLiveOffset
   (
      this : in out AdaptiveMediaSource
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
      Hr := m_Interface.get_MinLiveOffset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaxSeekableWindowSize
   (
      this : in out AdaptiveMediaSource
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
      Hr := m_Interface.get_MaxSeekableWindowSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DesiredSeekableWindowSize
   (
      this : in out AdaptiveMediaSource
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
      Hr := m_Interface.get_DesiredSeekableWindowSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DesiredSeekableWindowSize
   (
      this : in out AdaptiveMediaSource;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
      Hr := m_Interface.put_DesiredSeekableWindowSize (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Diagnostics
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnostics;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics do
         m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
         Hr := m_Interface.get_Diagnostics (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdaptiveMediaSourceDiagnostics := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnostics;
         Retval.m_IAdaptiveMediaSourceDiagnostics.all := m_ComRetVal;
      end return;
   end;

   function GetCorrelatedTimes
   (
      this : in out AdaptiveMediaSource
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCorrelatedTimes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCorrelatedTimes;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSource3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCorrelatedTimes do
         m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
         Hr := m_Interface.GetCorrelatedTimes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdaptiveMediaSourceCorrelatedTimes := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCorrelatedTimes;
         Retval.m_IAdaptiveMediaSourceCorrelatedTimes.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out AdaptiveMediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSource.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceAdvancedSettings

   procedure Initialize (this : in out AdaptiveMediaSourceAdvancedSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceAdvancedSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceAdvancedSettings, IAdaptiveMediaSourceAdvancedSettings_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceAdvancedSettings /= null then
         if this.m_IAdaptiveMediaSourceAdvancedSettings.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceAdvancedSettings.all.Release;
            Free (this.m_IAdaptiveMediaSourceAdvancedSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceAdvancedSettings

   function get_AllSegmentsIndependent
   (
      this : in out AdaptiveMediaSourceAdvancedSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdaptiveMediaSourceAdvancedSettings.all.get_AllSegmentsIndependent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllSegmentsIndependent
   (
      this : in out AdaptiveMediaSourceAdvancedSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceAdvancedSettings.all.put_AllSegmentsIndependent (value);
   end;

   function get_DesiredBitrateHeadroomRatio
   (
      this : in out AdaptiveMediaSourceAdvancedSettings
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceAdvancedSettings.all.get_DesiredBitrateHeadroomRatio (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DesiredBitrateHeadroomRatio
   (
      this : in out AdaptiveMediaSourceAdvancedSettings;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceAdvancedSettings.all.put_DesiredBitrateHeadroomRatio (value);
   end;

   function get_BitrateDowngradeTriggerRatio
   (
      this : in out AdaptiveMediaSourceAdvancedSettings
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceAdvancedSettings.all.get_BitrateDowngradeTriggerRatio (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_BitrateDowngradeTriggerRatio
   (
      this : in out AdaptiveMediaSourceAdvancedSettings;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceAdvancedSettings.all.put_BitrateDowngradeTriggerRatio (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceCorrelatedTimes

   procedure Initialize (this : in out AdaptiveMediaSourceCorrelatedTimes) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceCorrelatedTimes) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceCorrelatedTimes, IAdaptiveMediaSourceCorrelatedTimes_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceCorrelatedTimes /= null then
         if this.m_IAdaptiveMediaSourceCorrelatedTimes.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceCorrelatedTimes.all.Release;
            Free (this.m_IAdaptiveMediaSourceCorrelatedTimes);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceCorrelatedTimes

   function get_Position
   (
      this : in out AdaptiveMediaSourceCorrelatedTimes
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceCorrelatedTimes.all.get_Position (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PresentationTimeStamp
   (
      this : in out AdaptiveMediaSourceCorrelatedTimes
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceCorrelatedTimes.all.get_PresentationTimeStamp (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProgramDateTime
   (
      this : in out AdaptiveMediaSourceCorrelatedTimes
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceCorrelatedTimes.all.get_ProgramDateTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceCreationResult

   procedure Initialize (this : in out AdaptiveMediaSourceCreationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceCreationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceCreationResult, IAdaptiveMediaSourceCreationResult_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceCreationResult /= null then
         if this.m_IAdaptiveMediaSourceCreationResult.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceCreationResult.all.Release;
            Free (this.m_IAdaptiveMediaSourceCreationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceCreationResult

   function get_Status
   (
      this : in out AdaptiveMediaSourceCreationResult
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationStatus;
   begin
      Hr := this.m_IAdaptiveMediaSourceCreationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaSource
   (
      this : in out AdaptiveMediaSourceCreationResult
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource;
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSource do
         Hr := this.m_IAdaptiveMediaSourceCreationResult.all.get_MediaSource (m_ComRetVal'Access);
         Retval.m_IAdaptiveMediaSource := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource;
         Retval.m_IAdaptiveMediaSource.all := m_ComRetVal;
      end return;
   end;

   function get_HttpResponseMessage
   (
      this : in out AdaptiveMediaSourceCreationResult
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IAdaptiveMediaSourceCreationResult.all.get_HttpResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out AdaptiveMediaSourceCreationResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceCreationResult2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceCreationResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceCreationResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDiagnosticAvailableEventArgs

   procedure Initialize (this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDiagnosticAvailableEventArgs, IAdaptiveMediaSourceDiagnosticAvailableEventArgs_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs /= null then
         if this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.Release;
            Free (this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDiagnosticAvailableEventArgs

   function get_DiagnosticType
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticType;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_DiagnosticType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestId
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_RequestId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Position
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_Position (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SegmentId
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_SegmentId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceType
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_AdaptiveMediaSourceResourceType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_AdaptiveMediaSourceResourceType.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_ResourceType (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_AdaptiveMediaSourceResourceType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceUri
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_ResourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ResourceByteRangeOffset
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_ResourceByteRangeOffset (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceByteRangeLength
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_ResourceByteRangeLength (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Bitrate
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all.get_Bitrate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExtendedError
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDiagnosticAvailableEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ResourceDuration
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDiagnosticAvailableEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all);
      Hr := m_Interface.get_ResourceDuration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceContentType
   (
      this : in out AdaptiveMediaSourceDiagnosticAvailableEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDiagnosticAvailableEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDiagnosticAvailableEventArgs.all);
      Hr := m_Interface.get_ResourceContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDiagnostics

   procedure Initialize (this : in out AdaptiveMediaSourceDiagnostics) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDiagnostics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDiagnostics, IAdaptiveMediaSourceDiagnostics_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDiagnostics /= null then
         if this.m_IAdaptiveMediaSourceDiagnostics.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDiagnostics.all.Release;
            Free (this.m_IAdaptiveMediaSourceDiagnostics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDiagnostics

   function add_DiagnosticAvailable
   (
      this : in out AdaptiveMediaSourceDiagnostics;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnostics.all.add_DiagnosticAvailable (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DiagnosticAvailable
   (
      this : in out AdaptiveMediaSourceDiagnostics;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceDiagnostics.all.remove_DiagnosticAvailable (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadBitrateChangedEventArgs

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadBitrateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadBitrateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadBitrateChangedEventArgs, IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs /= null then
         if this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadBitrateChangedEventArgs

   function get_OldValue
   (
      this : in out AdaptiveMediaSourceDownloadBitrateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs.all.get_OldValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewValue
   (
      this : in out AdaptiveMediaSourceDownloadBitrateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs.all.get_NewValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Reason
   (
      this : in out AdaptiveMediaSourceDownloadBitrateChangedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedReason is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedReason;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs.all);
      Hr := m_Interface.get_Reason (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadCompletedEventArgs

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadCompletedEventArgs, IAdaptiveMediaSourceDownloadCompletedEventArgs_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs /= null then
         if this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadCompletedEventArgs

   function get_ResourceType
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all.get_ResourceType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResourceUri
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all.get_ResourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ResourceByteRangeOffset
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all.get_ResourceByteRangeOffset (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceByteRangeLength
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all.get_ResourceByteRangeLength (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_HttpResponseMessage
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all.get_HttpResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_RequestId
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadCompletedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all);
      Hr := m_Interface.get_RequestId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Statistics
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadStatistics;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadCompletedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics do
         m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all);
         Hr := m_Interface.get_Statistics (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdaptiveMediaSourceDownloadStatistics := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadStatistics;
         Retval.m_IAdaptiveMediaSourceDownloadStatistics.all := m_ComRetVal;
      end return;
   end;

   function get_Position
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadCompletedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceDuration
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadCompletedEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all);
      Hr := m_Interface.get_ResourceDuration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceContentType
   (
      this : in out AdaptiveMediaSourceDownloadCompletedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadCompletedEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadCompletedEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadCompletedEventArgs.all);
      Hr := m_Interface.get_ResourceContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadFailedEventArgs

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadFailedEventArgs, IAdaptiveMediaSourceDownloadFailedEventArgs_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadFailedEventArgs /= null then
         if this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadFailedEventArgs

   function get_ResourceType
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all.get_ResourceType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResourceUri
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all.get_ResourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ResourceByteRangeOffset
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all.get_ResourceByteRangeOffset (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceByteRangeLength
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all.get_ResourceByteRangeLength (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_HttpResponseMessage
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all.get_HttpResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_RequestId
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadFailedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all);
      Hr := m_Interface.get_RequestId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadFailedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Statistics
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadStatistics;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadFailedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics do
         m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all);
         Hr := m_Interface.get_Statistics (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdaptiveMediaSourceDownloadStatistics := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadStatistics;
         Retval.m_IAdaptiveMediaSourceDownloadStatistics.all := m_ComRetVal;
      end return;
   end;

   function get_Position
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadFailedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceDuration
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadFailedEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all);
      Hr := m_Interface.get_ResourceDuration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceContentType
   (
      this : in out AdaptiveMediaSourceDownloadFailedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadFailedEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadFailedEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadFailedEventArgs.all);
      Hr := m_Interface.get_ResourceContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadRequestedDeferral

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadRequestedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadRequestedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadRequestedDeferral, IAdaptiveMediaSourceDownloadRequestedDeferral_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadRequestedDeferral /= null then
         if this.m_IAdaptiveMediaSourceDownloadRequestedDeferral.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadRequestedDeferral.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadRequestedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadRequestedDeferral

   procedure Complete
   (
      this : in out AdaptiveMediaSourceDownloadRequestedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadRequestedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadRequestedEventArgs

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadRequestedEventArgs, IAdaptiveMediaSourceDownloadRequestedEventArgs_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs /= null then
         if this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadRequestedEventArgs

   function get_ResourceType
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.get_ResourceType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResourceUri
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.get_ResourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ResourceByteRangeOffset
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.get_ResourceByteRangeOffset (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceByteRangeLength
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.get_ResourceByteRangeLength (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Result
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult;
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult do
         Hr := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.get_Result (m_ComRetVal'Access);
         Retval.m_IAdaptiveMediaSourceDownloadResult := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult;
         Retval.m_IAdaptiveMediaSourceDownloadResult.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedDeferral;
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedDeferral do
         Hr := this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IAdaptiveMediaSourceDownloadRequestedDeferral := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedDeferral;
         Retval.m_IAdaptiveMediaSourceDownloadRequestedDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_RequestId
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadRequestedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all);
      Hr := m_Interface.get_RequestId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadRequestedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceDuration
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadRequestedEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all);
      Hr := m_Interface.get_ResourceDuration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResourceContentType
   (
      this : in out AdaptiveMediaSourceDownloadRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs3, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadRequestedEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadRequestedEventArgs.all);
      Hr := m_Interface.get_ResourceContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadResult

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadResult, IAdaptiveMediaSourceDownloadResult_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadResult /= null then
         if this.m_IAdaptiveMediaSourceDownloadResult.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadResult.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadResult

   function get_ResourceUri
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.get_ResourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ResourceUri
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.put_ResourceUri (value.m_IUriRuntimeClass.all);
   end;

   function get_InputStream
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.get_InputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InputStream
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.put_InputStream (value);
   end;

   function get_Buffer
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.get_Buffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Buffer
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.put_Buffer (value);
   end;

   function get_ContentType
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.get_ContentType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContentType
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.put_ContentType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ExtendedStatus
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.get_ExtendedStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ExtendedStatus
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadResult.all.put_ExtendedStatus (value);
   end;

   function get_ResourceByteRangeOffset
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadResult.all);
      Hr := m_Interface.get_ResourceByteRangeOffset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ResourceByteRangeOffset
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadResult.all);
      Hr := m_Interface.put_ResourceByteRangeOffset (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResourceByteRangeLength
   (
      this : in out AdaptiveMediaSourceDownloadResult
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadResult.all);
      Hr := m_Interface.get_ResourceByteRangeLength (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ResourceByteRangeLength
   (
      this : in out AdaptiveMediaSourceDownloadResult;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult_Interface, WinRt.Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadResult2, WinRt.Windows.Media.Streaming.Adaptive.IID_IAdaptiveMediaSourceDownloadResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveMediaSourceDownloadResult.all);
      Hr := m_Interface.put_ResourceByteRangeLength (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourceDownloadStatistics

   procedure Initialize (this : in out AdaptiveMediaSourceDownloadStatistics) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourceDownloadStatistics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourceDownloadStatistics, IAdaptiveMediaSourceDownloadStatistics_Ptr);
   begin
      if this.m_IAdaptiveMediaSourceDownloadStatistics /= null then
         if this.m_IAdaptiveMediaSourceDownloadStatistics.all /= null then
            RefCount := this.m_IAdaptiveMediaSourceDownloadStatistics.all.Release;
            Free (this.m_IAdaptiveMediaSourceDownloadStatistics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourceDownloadStatistics

   function get_ContentBytesReceivedCount
   (
      this : in out AdaptiveMediaSourceDownloadStatistics
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadStatistics.all.get_ContentBytesReceivedCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeToHeadersReceived
   (
      this : in out AdaptiveMediaSourceDownloadStatistics
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadStatistics.all.get_TimeToHeadersReceived (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimeToFirstByteReceived
   (
      this : in out AdaptiveMediaSourceDownloadStatistics
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadStatistics.all.get_TimeToFirstByteReceived (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimeToLastByteReceived
   (
      this : in out AdaptiveMediaSourceDownloadStatistics
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAdaptiveMediaSourceDownloadStatistics.all.get_TimeToLastByteReceived (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveMediaSourcePlaybackBitrateChangedEventArgs

   procedure Initialize (this : in out AdaptiveMediaSourcePlaybackBitrateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveMediaSourcePlaybackBitrateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs, IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_Ptr);
   begin
      if this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs /= null then
         if this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs.all /= null then
            RefCount := this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs.all.Release;
            Free (this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveMediaSourcePlaybackBitrateChangedEventArgs

   function get_OldValue
   (
      this : in out AdaptiveMediaSourcePlaybackBitrateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs.all.get_OldValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewValue
   (
      this : in out AdaptiveMediaSourcePlaybackBitrateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs.all.get_NewValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AudioOnly
   (
      this : in out AdaptiveMediaSourcePlaybackBitrateChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs.all.get_AudioOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

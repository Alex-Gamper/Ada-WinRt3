--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Bluetooth.Advertisement is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisement

   procedure Initialize (this : in out BluetoothLEAdvertisement) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisement, IBluetoothLEAdvertisement_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisement /= null then
         if this.m_IBluetoothLEAdvertisement.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisement.all.Release;
            Free (this.m_IBluetoothLEAdvertisement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisement

   function Constructor return BluetoothLEAdvertisement is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
   begin
      return RetVal : BluetoothLEAdvertisement do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisement := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
            Retval.m_IBluetoothLEAdvertisement.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisement

   function get_Flags
   (
      this : in out BluetoothLEAdvertisement
   )
   return IReference_BluetoothLEAdvertisementFlags.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_BluetoothLEAdvertisementFlags.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.get_Flags (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_BluetoothLEAdvertisementFlags (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Flags
   (
      this : in out BluetoothLEAdvertisement;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.put_Flags (value);
   end;

   function get_LocalName
   (
      this : in out BluetoothLEAdvertisement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.get_LocalName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LocalName
   (
      this : in out BluetoothLEAdvertisement;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.put_LocalName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ServiceUuids
   (
      this : in out BluetoothLEAdvertisement
   )
   return IVector_Guid.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_Guid.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.get_ServiceUuids (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_Guid (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ManufacturerData
   (
      this : in out BluetoothLEAdvertisement
   )
   return IVector_IBluetoothLEManufacturerData.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IBluetoothLEManufacturerData.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.get_ManufacturerData (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IBluetoothLEManufacturerData (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DataSections
   (
      this : in out BluetoothLEAdvertisement
   )
   return IVector_IBluetoothLEAdvertisementDataSection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IBluetoothLEAdvertisementDataSection.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.get_DataSections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IBluetoothLEAdvertisementDataSection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetManufacturerDataByCompanyId
   (
      this : in out BluetoothLEAdvertisement;
      companyId : WinRt.UInt16
   )
   return IVectorView_IBluetoothLEManufacturerData.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IBluetoothLEManufacturerData.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.GetManufacturerDataByCompanyId (companyId, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IBluetoothLEManufacturerData (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetSectionsByType
   (
      this : in out BluetoothLEAdvertisement;
      type_x : WinRt.Byte
   )
   return IVectorView_IBluetoothLEAdvertisementDataSection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IBluetoothLEAdvertisementDataSection.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisement.all.GetSectionsByType (type_x, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IBluetoothLEAdvertisementDataSection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementBytePattern

   procedure Initialize (this : in out BluetoothLEAdvertisementBytePattern) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementBytePattern) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementBytePattern, IBluetoothLEAdvertisementBytePattern_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementBytePattern /= null then
         if this.m_IBluetoothLEAdvertisementBytePattern.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementBytePattern.all.Release;
            Free (this.m_IBluetoothLEAdvertisementBytePattern);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementBytePattern

   function Constructor return BluetoothLEAdvertisementBytePattern is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementBytePattern");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementBytePattern;
   begin
      return RetVal : BluetoothLEAdvertisementBytePattern do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementBytePattern := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementBytePattern;
            Retval.m_IBluetoothLEAdvertisementBytePattern.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      dataType : WinRt.Byte;
      offset : WinRt.Int16;
      data : Windows.Storage.Streams.IBuffer
   )
   return BluetoothLEAdvertisementBytePattern is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementBytePattern");
      m_Factory    : access IBluetoothLEAdvertisementBytePatternFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementBytePattern;
   begin
      return RetVal : BluetoothLEAdvertisementBytePattern do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementBytePatternFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (dataType, offset, data, m_ComRetVal'Access);
            Retval.m_IBluetoothLEAdvertisementBytePattern := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementBytePattern;
            Retval.m_IBluetoothLEAdvertisementBytePattern.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementBytePattern

   function get_DataType
   (
      this : in out BluetoothLEAdvertisementBytePattern
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IBluetoothLEAdvertisementBytePattern.all.get_DataType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataType
   (
      this : in out BluetoothLEAdvertisementBytePattern;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementBytePattern.all.put_DataType (value);
   end;

   function get_Offset
   (
      this : in out BluetoothLEAdvertisementBytePattern
   )
   return WinRt.Int16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int16;
   begin
      Hr := this.m_IBluetoothLEAdvertisementBytePattern.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out BluetoothLEAdvertisementBytePattern;
      value : WinRt.Int16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementBytePattern.all.put_Offset (value);
   end;

   function get_Data
   (
      this : in out BluetoothLEAdvertisementBytePattern
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBluetoothLEAdvertisementBytePattern.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Data
   (
      this : in out BluetoothLEAdvertisementBytePattern;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementBytePattern.all.put_Data (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementDataSection

   procedure Initialize (this : in out BluetoothLEAdvertisementDataSection) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementDataSection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementDataSection, IBluetoothLEAdvertisementDataSection_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementDataSection /= null then
         if this.m_IBluetoothLEAdvertisementDataSection.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementDataSection.all.Release;
            Free (this.m_IBluetoothLEAdvertisementDataSection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementDataSection

   function Constructor return BluetoothLEAdvertisementDataSection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataSection");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataSection;
   begin
      return RetVal : BluetoothLEAdvertisementDataSection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementDataSection := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataSection;
            Retval.m_IBluetoothLEAdvertisementDataSection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      dataType : WinRt.Byte;
      data : Windows.Storage.Streams.IBuffer
   )
   return BluetoothLEAdvertisementDataSection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataSection");
      m_Factory    : access IBluetoothLEAdvertisementDataSectionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataSection;
   begin
      return RetVal : BluetoothLEAdvertisementDataSection do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataSectionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (dataType, data, m_ComRetVal'Access);
            Retval.m_IBluetoothLEAdvertisementDataSection := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataSection;
            Retval.m_IBluetoothLEAdvertisementDataSection.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementDataSection

   function get_DataType
   (
      this : in out BluetoothLEAdvertisementDataSection
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IBluetoothLEAdvertisementDataSection.all.get_DataType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataType
   (
      this : in out BluetoothLEAdvertisementDataSection;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementDataSection.all.put_DataType (value);
   end;

   function get_Data
   (
      this : in out BluetoothLEAdvertisementDataSection
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBluetoothLEAdvertisementDataSection.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Data
   (
      this : in out BluetoothLEAdvertisementDataSection;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementDataSection.all.put_Data (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BluetoothLEAdvertisementDataTypes is

      function get_Flags
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Flags (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IncompleteService16BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IncompleteService16BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CompleteService16BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CompleteService16BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IncompleteService32BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IncompleteService32BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CompleteService32BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CompleteService32BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IncompleteService128BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IncompleteService128BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CompleteService128BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CompleteService128BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ShortenedLocalName
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShortenedLocalName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CompleteLocalName
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CompleteLocalName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TxPowerLevel
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TxPowerLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SlaveConnectionIntervalRange
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SlaveConnectionIntervalRange (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServiceSolicitation16BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServiceSolicitation16BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServiceSolicitation32BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServiceSolicitation32BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServiceSolicitation128BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServiceSolicitation128BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServiceData16BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServiceData16BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServiceData32BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServiceData32BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServiceData128BitUuids
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServiceData128BitUuids (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PublicTargetAddress
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PublicTargetAddress (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RandomTargetAddress
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RandomTargetAddress (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Appearance
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Appearance (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AdvertisingInterval
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AdvertisingInterval (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ManufacturerSpecificData
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementDataTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ManufacturerSpecificData (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BluetoothLEAdvertisementDataTypes;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementFilter

   procedure Initialize (this : in out BluetoothLEAdvertisementFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementFilter, IBluetoothLEAdvertisementFilter_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementFilter /= null then
         if this.m_IBluetoothLEAdvertisementFilter.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementFilter.all.Release;
            Free (this.m_IBluetoothLEAdvertisementFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementFilter

   function Constructor return BluetoothLEAdvertisementFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementFilter;
   begin
      return RetVal : BluetoothLEAdvertisementFilter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementFilter := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementFilter;
            Retval.m_IBluetoothLEAdvertisementFilter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementFilter

   function get_Advertisement
   (
      this : in out BluetoothLEAdvertisementFilter
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement do
         Hr := this.m_IBluetoothLEAdvertisementFilter.all.get_Advertisement (m_ComRetVal'Access);
         Retval.m_IBluetoothLEAdvertisement := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
         Retval.m_IBluetoothLEAdvertisement.all := m_ComRetVal;
      end return;
   end;

   procedure put_Advertisement
   (
      this : in out BluetoothLEAdvertisementFilter;
      value : Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementFilter.all.put_Advertisement (value.m_IBluetoothLEAdvertisement.all);
   end;

   function get_BytePatterns
   (
      this : in out BluetoothLEAdvertisementFilter
   )
   return IVector_IBluetoothLEAdvertisementBytePattern.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IBluetoothLEAdvertisementBytePattern.Kind;
   begin
      Hr := this.m_IBluetoothLEAdvertisementFilter.all.get_BytePatterns (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IBluetoothLEAdvertisementBytePattern (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementPublisher

   procedure Initialize (this : in out BluetoothLEAdvertisementPublisher) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementPublisher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementPublisher, IBluetoothLEAdvertisementPublisher_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementPublisher /= null then
         if this.m_IBluetoothLEAdvertisementPublisher.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementPublisher.all.Release;
            Free (this.m_IBluetoothLEAdvertisementPublisher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementPublisher

   function Constructor return BluetoothLEAdvertisementPublisher is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher;
   begin
      return RetVal : BluetoothLEAdvertisementPublisher do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementPublisher := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher;
            Retval.m_IBluetoothLEAdvertisementPublisher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      advertisement : Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement'Class
   )
   return BluetoothLEAdvertisementPublisher is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher");
      m_Factory    : access IBluetoothLEAdvertisementPublisherFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher;
   begin
      return RetVal : BluetoothLEAdvertisementPublisher do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementPublisherFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (advertisement.m_IBluetoothLEAdvertisement.all, m_ComRetVal'Access);
            Retval.m_IBluetoothLEAdvertisementPublisher := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher;
            Retval.m_IBluetoothLEAdvertisementPublisher.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementPublisher

   function get_Status
   (
      this : in out BluetoothLEAdvertisementPublisher
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatus;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Advertisement
   (
      this : in out BluetoothLEAdvertisementPublisher
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement do
         Hr := this.m_IBluetoothLEAdvertisementPublisher.all.get_Advertisement (m_ComRetVal'Access);
         Retval.m_IBluetoothLEAdvertisement := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
         Retval.m_IBluetoothLEAdvertisement.all := m_ComRetVal;
      end return;
   end;

   procedure Start
   (
      this : in out BluetoothLEAdvertisementPublisher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisher.all.Start;
   end;

   procedure Stop
   (
      this : in out BluetoothLEAdvertisementPublisher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisher.all.Stop;
   end;

   function add_StatusChanged
   (
      this : in out BluetoothLEAdvertisementPublisher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisher.all.add_StatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out BluetoothLEAdvertisementPublisher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisher.all.remove_StatusChanged (token);
   end;

   function get_PreferredTransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementPublisher
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.get_PreferredTransmitPowerLevelInDBm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_PreferredTransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementPublisher;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.put_PreferredTransmitPowerLevelInDBm (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_UseExtendedAdvertisement
   (
      this : in out BluetoothLEAdvertisementPublisher
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.get_UseExtendedAdvertisement (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_UseExtendedAdvertisement
   (
      this : in out BluetoothLEAdvertisementPublisher;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.put_UseExtendedAdvertisement (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsAnonymous
   (
      this : in out BluetoothLEAdvertisementPublisher
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.get_IsAnonymous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsAnonymous
   (
      this : in out BluetoothLEAdvertisementPublisher;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.put_IsAnonymous (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IncludeTransmitPowerLevel
   (
      this : in out BluetoothLEAdvertisementPublisher
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.get_IncludeTransmitPowerLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IncludeTransmitPowerLevel
   (
      this : in out BluetoothLEAdvertisementPublisher;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisher.all);
      Hr := m_Interface.put_IncludeTransmitPowerLevel (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementPublisherStatusChangedEventArgs

   procedure Initialize (this : in out BluetoothLEAdvertisementPublisherStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementPublisherStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementPublisherStatusChangedEventArgs, IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs /= null then
         if this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs.all.Release;
            Free (this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementPublisherStatusChangedEventArgs

   function get_Status
   (
      this : in out BluetoothLEAdvertisementPublisherStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatus;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Error
   (
      this : in out BluetoothLEAdvertisementPublisherStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedTransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementPublisherStatusChangedEventArgs
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisherStatusChangedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisherStatusChangedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs.all);
      Hr := m_Interface.get_SelectedTransmitPowerLevelInDBm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementReceivedEventArgs

   procedure Initialize (this : in out BluetoothLEAdvertisementReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementReceivedEventArgs, IBluetoothLEAdvertisementReceivedEventArgs_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementReceivedEventArgs /= null then
         if this.m_IBluetoothLEAdvertisementReceivedEventArgs.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementReceivedEventArgs.all.Release;
            Free (this.m_IBluetoothLEAdvertisementReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementReceivedEventArgs

   function get_RawSignalStrengthInDBm
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Int16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int16;
   begin
      Hr := this.m_IBluetoothLEAdvertisementReceivedEventArgs.all.get_RawSignalStrengthInDBm (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BluetoothAddress
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IBluetoothLEAdvertisementReceivedEventArgs.all.get_BluetoothAddress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdvertisementType
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementType;
   begin
      Hr := this.m_IBluetoothLEAdvertisementReceivedEventArgs.all.get_AdvertisementType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IBluetoothLEAdvertisementReceivedEventArgs.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Advertisement
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement do
         Hr := this.m_IBluetoothLEAdvertisementReceivedEventArgs.all.get_Advertisement (m_ComRetVal'Access);
         Retval.m_IBluetoothLEAdvertisement := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
         Retval.m_IBluetoothLEAdvertisement.all := m_ComRetVal;
      end return;
   end;

   function get_BluetoothAddressType
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothAddressType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothAddressType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_BluetoothAddressType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_TransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_TransmitPowerLevelInDBm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsAnonymous
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_IsAnonymous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsConnectable
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_IsConnectable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsScannable
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_IsScannable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDirected
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_IsDirected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsScanResponse
   (
      this : in out BluetoothLEAdvertisementReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementReceivedEventArgs.all);
      Hr := m_Interface.get_IsScanResponse (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementWatcher

   procedure Initialize (this : in out BluetoothLEAdvertisementWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementWatcher, IBluetoothLEAdvertisementWatcher_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementWatcher /= null then
         if this.m_IBluetoothLEAdvertisementWatcher.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementWatcher.all.Release;
            Free (this.m_IBluetoothLEAdvertisementWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementWatcher

   function Constructor return BluetoothLEAdvertisementWatcher is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher;
   begin
      return RetVal : BluetoothLEAdvertisementWatcher do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementWatcher := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher;
            Retval.m_IBluetoothLEAdvertisementWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      advertisementFilter : Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter'Class
   )
   return BluetoothLEAdvertisementWatcher is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher");
      m_Factory    : access IBluetoothLEAdvertisementWatcherFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher;
   begin
      return RetVal : BluetoothLEAdvertisementWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAdvertisementWatcherFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (advertisementFilter.m_IBluetoothLEAdvertisementFilter.all, m_ComRetVal'Access);
            Retval.m_IBluetoothLEAdvertisementWatcher := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher;
            Retval.m_IBluetoothLEAdvertisementWatcher.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementWatcher

   function get_MinSamplingInterval
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_MinSamplingInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxSamplingInterval
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_MaxSamplingInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinOutOfRangeTimeout
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_MinOutOfRangeTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxOutOfRangeTimeout
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_MaxOutOfRangeTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStatus;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScanningMode
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEScanningMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.BluetoothLEScanningMode;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_ScanningMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScanningMode
   (
      this : in out BluetoothLEAdvertisementWatcher;
      value : Windows.Devices.Bluetooth.Advertisement.BluetoothLEScanningMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.put_ScanningMode (value);
   end;

   function get_SignalStrengthFilter
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter do
         Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_SignalStrengthFilter (m_ComRetVal'Access);
         Retval.m_IBluetoothSignalStrengthFilter := new Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
         Retval.m_IBluetoothSignalStrengthFilter.all := m_ComRetVal;
      end return;
   end;

   procedure put_SignalStrengthFilter
   (
      this : in out BluetoothLEAdvertisementWatcher;
      value : Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.put_SignalStrengthFilter (value.m_IBluetoothSignalStrengthFilter.all);
   end;

   function get_AdvertisementFilter
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementFilter;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter do
         Hr := this.m_IBluetoothLEAdvertisementWatcher.all.get_AdvertisementFilter (m_ComRetVal'Access);
         Retval.m_IBluetoothLEAdvertisementFilter := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementFilter;
         Retval.m_IBluetoothLEAdvertisementFilter.all := m_ComRetVal;
      end return;
   end;

   procedure put_AdvertisementFilter
   (
      this : in out BluetoothLEAdvertisementWatcher;
      value : Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.put_AdvertisementFilter (value.m_IBluetoothLEAdvertisementFilter.all);
   end;

   procedure Start
   (
      this : in out BluetoothLEAdvertisementWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out BluetoothLEAdvertisementWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.Stop;
   end;

   function add_Received
   (
      this : in out BluetoothLEAdvertisementWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.add_Received (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Received
   (
      this : in out BluetoothLEAdvertisementWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.remove_Received (token);
   end;

   function add_Stopped
   (
      this : in out BluetoothLEAdvertisementWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out BluetoothLEAdvertisementWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcher.all.remove_Stopped (token);
   end;

   function get_AllowExtendedAdvertisements
   (
      this : in out BluetoothLEAdvertisementWatcher
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementWatcher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementWatcher.all);
      Hr := m_Interface.get_AllowExtendedAdvertisements (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowExtendedAdvertisements
   (
      this : in out BluetoothLEAdvertisementWatcher;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher_Interface, WinRt.Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher2, WinRt.Windows.Devices.Bluetooth.Advertisement.IID_IBluetoothLEAdvertisementWatcher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementWatcher.all);
      Hr := m_Interface.put_AllowExtendedAdvertisements (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementWatcherStoppedEventArgs

   procedure Initialize (this : in out BluetoothLEAdvertisementWatcherStoppedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementWatcherStoppedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementWatcherStoppedEventArgs, IBluetoothLEAdvertisementWatcherStoppedEventArgs_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementWatcherStoppedEventArgs /= null then
         if this.m_IBluetoothLEAdvertisementWatcherStoppedEventArgs.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementWatcherStoppedEventArgs.all.Release;
            Free (this.m_IBluetoothLEAdvertisementWatcherStoppedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementWatcherStoppedEventArgs

   function get_Error
   (
      this : in out BluetoothLEAdvertisementWatcherStoppedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherStoppedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEManufacturerData

   procedure Initialize (this : in out BluetoothLEManufacturerData) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEManufacturerData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEManufacturerData, IBluetoothLEManufacturerData_Ptr);
   begin
      if this.m_IBluetoothLEManufacturerData /= null then
         if this.m_IBluetoothLEManufacturerData.all /= null then
            RefCount := this.m_IBluetoothLEManufacturerData.all.Release;
            Free (this.m_IBluetoothLEManufacturerData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEManufacturerData

   function Constructor return BluetoothLEManufacturerData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEManufacturerData");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEManufacturerData;
   begin
      return RetVal : BluetoothLEManufacturerData do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEManufacturerData := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEManufacturerData;
            Retval.m_IBluetoothLEManufacturerData.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      companyId : WinRt.UInt16;
      data : Windows.Storage.Streams.IBuffer
   )
   return BluetoothLEManufacturerData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Advertisement.BluetoothLEManufacturerData");
      m_Factory    : access IBluetoothLEManufacturerDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEManufacturerData;
   begin
      return RetVal : BluetoothLEManufacturerData do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEManufacturerDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (companyId, data, m_ComRetVal'Access);
            Retval.m_IBluetoothLEManufacturerData := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEManufacturerData;
            Retval.m_IBluetoothLEManufacturerData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEManufacturerData

   function get_CompanyId
   (
      this : in out BluetoothLEManufacturerData
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IBluetoothLEManufacturerData.all.get_CompanyId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CompanyId
   (
      this : in out BluetoothLEManufacturerData;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEManufacturerData.all.put_CompanyId (value);
   end;

   function get_Data
   (
      this : in out BluetoothLEManufacturerData
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBluetoothLEManufacturerData.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Data
   (
      this : in out BluetoothLEManufacturerData;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEManufacturerData.all.put_Data (value);
   end;

end;

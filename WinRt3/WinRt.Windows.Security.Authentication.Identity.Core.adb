--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.Identity.Core is

   package IAsyncOperation_MicrosoftAccountMultiFactorOneTimeCodedInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorOneTimeCodedInfo);
   package AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorOneTimeCodedInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorOneTimeCodedInfo);

   package IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse);
   package AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse);

   package IAsyncOperation_MicrosoftAccountMultiFactorGetSessionsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorGetSessionsResult);
   package AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorGetSessionsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorGetSessionsResult);

   package IAsyncOperation_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo);
   package AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MicrosoftAccountMultiFactorAuthenticationManager

   procedure Initialize (this : in out MicrosoftAccountMultiFactorAuthenticationManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MicrosoftAccountMultiFactorAuthenticationManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMicrosoftAccountMultiFactorAuthenticationManager, IMicrosoftAccountMultiFactorAuthenticationManager_Ptr);
   begin
      if this.m_IMicrosoftAccountMultiFactorAuthenticationManager /= null then
         if this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all /= null then
            RefCount := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.Release;
            Free (this.m_IMicrosoftAccountMultiFactorAuthenticationManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MicrosoftAccountMultiFactorAuthenticationManager

   function get_Current
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationManager");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorAuthenticatorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorAuthenticationManager;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationManager do
         Hr := RoGetActivationFactory (m_hString, IID_IMicrosoftAccountMultiFactorAuthenticatorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMicrosoftAccountMultiFactorAuthenticationManager := new Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorAuthenticationManager;
            Retval.m_IMicrosoftAccountMultiFactorAuthenticationManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MicrosoftAccountMultiFactorAuthenticationManager

   function GetOneTimePassCodeAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountId : WinRt.WString;
      codeLength : WinRt.UInt32
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorOneTimeCodedInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userAccountId : WinRt.HString := To_HString (userAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorOneTimeCodedInfo;
      m_IID            : aliased WinRt.IID := (2925746318, 8130, 22691, (175, 54, 111, 103, 184, 146, 43, 231 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorOneTimeCodedInfo;
      m_HandlerIID     : aliased WinRt.IID := (48776512, 62625, 22687, (147, 96, 160, 80, 46, 109, 201, 192 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorOneTimeCodedInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorOneTimeCodedInfo do
         Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.GetOneTimePassCodeAsync (HStr_userAccountId, codeLength, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo := new Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorOneTimeCodedInfo;
                  Retval.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_userAccountId);
      end return;
   end;

   function AddDeviceAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountId : WinRt.WString;
      authenticationToken : WinRt.WString;
      wnsChannelId : WinRt.WString
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userAccountId : WinRt.HString := To_HString (userAccountId);
      HStr_authenticationToken : WinRt.HString := To_HString (authenticationToken);
      HStr_wnsChannelId : WinRt.HString := To_HString (wnsChannelId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.AddDeviceAsync (HStr_userAccountId, HStr_authenticationToken, HStr_wnsChannelId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userAccountId);
      Hr := WindowsDeleteString (HStr_authenticationToken);
      Hr := WindowsDeleteString (HStr_wnsChannelId);
      return m_RetVal;
   end;

   function RemoveDeviceAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountId : WinRt.WString
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userAccountId : WinRt.HString := To_HString (userAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.RemoveDeviceAsync (HStr_userAccountId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userAccountId);
      return m_RetVal;
   end;

   function UpdateWnsChannelAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountId : WinRt.WString;
      channelUri : WinRt.WString
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userAccountId : WinRt.HString := To_HString (userAccountId);
      HStr_channelUri : WinRt.HString := To_HString (channelUri);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.UpdateWnsChannelAsync (HStr_userAccountId, HStr_channelUri, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userAccountId);
      Hr := WindowsDeleteString (HStr_channelUri);
      return m_RetVal;
   end;

   function GetSessionsAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountIdList : GenericObject
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorGetSessionsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorGetSessionsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorGetSessionsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorGetSessionsResult;
      m_IID            : aliased WinRt.IID := (1414317289, 41946, 21400, (163, 8, 227, 50, 165, 137, 97, 246 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorGetSessionsResult;
      m_HandlerIID     : aliased WinRt.IID := (3469455562, 2599, 22484, (163, 93, 73, 152, 241, 153, 218, 201 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorGetSessionsResult.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorGetSessionsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorGetSessionsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorGetSessionsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorGetSessionsResult.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorGetSessionsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorGetSessionsResult do
         Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.GetSessionsAsync (userAccountIdList, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMicrosoftAccountMultiFactorGetSessionsResult := new Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorGetSessionsResult;
                  Retval.m_IMicrosoftAccountMultiFactorGetSessionsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSessionsAndUnregisteredAccountsAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountIdList : GenericObject
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo;
      m_IID            : aliased WinRt.IID := (2560576545, 61289, 22189, (186, 140, 229, 210, 90, 60, 98, 78 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo;
      m_HandlerIID     : aliased WinRt.IID := (1824865932, 53476, 24045, (148, 244, 124, 115, 177, 50, 210, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo do
         Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.GetSessionsAndUnregisteredAccountsAsync (userAccountIdList, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo := new Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo;
                  Retval.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ApproveSessionAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      sessionAuthentictionStatus : Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorSessionAuthenticationStatus;
      authenticationSessionInfo : Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorSessionInfo'Class
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.ApproveSessionAsync (sessionAuthentictionStatus, authenticationSessionInfo.m_IMicrosoftAccountMultiFactorSessionInfo.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ApproveSessionAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      sessionAuthentictionStatus : Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorSessionAuthenticationStatus;
      userAccountId : WinRt.WString;
      sessionId : WinRt.WString;
      sessionAuthenticationType : Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationType
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userAccountId : WinRt.HString := To_HString (userAccountId);
      HStr_sessionId : WinRt.HString := To_HString (sessionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.ApproveSessionAsync (sessionAuthentictionStatus, HStr_userAccountId, HStr_sessionId, sessionAuthenticationType, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userAccountId);
      Hr := WindowsDeleteString (HStr_sessionId);
      return m_RetVal;
   end;

   function DenySessionAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      authenticationSessionInfo : Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorSessionInfo'Class
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.DenySessionAsync (authenticationSessionInfo.m_IMicrosoftAccountMultiFactorSessionInfo.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DenySessionAsync
   (
      this : in out MicrosoftAccountMultiFactorAuthenticationManager;
      userAccountId : WinRt.WString;
      sessionId : WinRt.WString;
      sessionAuthenticationType : Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationType
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userAccountId : WinRt.HString := To_HString (userAccountId);
      HStr_sessionId : WinRt.HString := To_HString (sessionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_IID            : aliased WinRt.IID := (93666190, 23259, 20921, (169, 74, 173, 3, 0, 48, 184, 227 )); -- Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2373943872, 33231, 22678, (149, 250, 231, 178, 35, 247, 105, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind := new AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MicrosoftAccountMultiFactorServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_MicrosoftAccountMultiFactorServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMicrosoftAccountMultiFactorAuthenticationManager.all.DenySessionAsync (HStr_userAccountId, HStr_sessionId, sessionAuthenticationType, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userAccountId);
      Hr := WindowsDeleteString (HStr_sessionId);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MicrosoftAccountMultiFactorGetSessionsResult

   procedure Initialize (this : in out MicrosoftAccountMultiFactorGetSessionsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MicrosoftAccountMultiFactorGetSessionsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMicrosoftAccountMultiFactorGetSessionsResult, IMicrosoftAccountMultiFactorGetSessionsResult_Ptr);
   begin
      if this.m_IMicrosoftAccountMultiFactorGetSessionsResult /= null then
         if this.m_IMicrosoftAccountMultiFactorGetSessionsResult.all /= null then
            RefCount := this.m_IMicrosoftAccountMultiFactorGetSessionsResult.all.Release;
            Free (this.m_IMicrosoftAccountMultiFactorGetSessionsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MicrosoftAccountMultiFactorGetSessionsResult

   function get_Sessions
   (
      this : in out MicrosoftAccountMultiFactorGetSessionsResult
   )
   return IVectorView_IMicrosoftAccountMultiFactorSessionInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMicrosoftAccountMultiFactorSessionInfo.Kind;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorGetSessionsResult.all.get_Sessions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMicrosoftAccountMultiFactorSessionInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServiceResponse
   (
      this : in out MicrosoftAccountMultiFactorGetSessionsResult
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorGetSessionsResult.all.get_ServiceResponse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MicrosoftAccountMultiFactorOneTimeCodedInfo

   procedure Initialize (this : in out MicrosoftAccountMultiFactorOneTimeCodedInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out MicrosoftAccountMultiFactorOneTimeCodedInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMicrosoftAccountMultiFactorOneTimeCodedInfo, IMicrosoftAccountMultiFactorOneTimeCodedInfo_Ptr);
   begin
      if this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo /= null then
         if this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all /= null then
            RefCount := this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all.Release;
            Free (this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MicrosoftAccountMultiFactorOneTimeCodedInfo

   function get_Code
   (
      this : in out MicrosoftAccountMultiFactorOneTimeCodedInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all.get_Code (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TimeInterval
   (
      this : in out MicrosoftAccountMultiFactorOneTimeCodedInfo
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all.get_TimeInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeToLive
   (
      this : in out MicrosoftAccountMultiFactorOneTimeCodedInfo
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all.get_TimeToLive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceResponse
   (
      this : in out MicrosoftAccountMultiFactorOneTimeCodedInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorOneTimeCodedInfo.all.get_ServiceResponse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MicrosoftAccountMultiFactorSessionInfo

   procedure Initialize (this : in out MicrosoftAccountMultiFactorSessionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out MicrosoftAccountMultiFactorSessionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMicrosoftAccountMultiFactorSessionInfo, IMicrosoftAccountMultiFactorSessionInfo_Ptr);
   begin
      if this.m_IMicrosoftAccountMultiFactorSessionInfo /= null then
         if this.m_IMicrosoftAccountMultiFactorSessionInfo.all /= null then
            RefCount := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.Release;
            Free (this.m_IMicrosoftAccountMultiFactorSessionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MicrosoftAccountMultiFactorSessionInfo

   function get_UserAccountId
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_UserAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SessionId
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_SessionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplaySessionId
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_DisplaySessionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ApprovalStatus
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorSessionApprovalStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorSessionApprovalStatus;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_ApprovalStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AuthenticationType
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationType;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_AuthenticationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestTime
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_RequestTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpirationTime
   (
      this : in out MicrosoftAccountMultiFactorSessionInfo
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorSessionInfo.all.get_ExpirationTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo

   procedure Initialize (this : in out MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo, IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo_Ptr);
   begin
      if this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo /= null then
         if this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.all /= null then
            RefCount := this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.all.Release;
            Free (this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo

   function get_Sessions
   (
      this : in out MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo
   )
   return IVectorView_IMicrosoftAccountMultiFactorSessionInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMicrosoftAccountMultiFactorSessionInfo.Kind;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.all.get_Sessions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMicrosoftAccountMultiFactorSessionInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_UnregisteredAccounts
   (
      this : in out MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.all.get_UnregisteredAccounts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServiceResponse
   (
      this : in out MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorServiceResponse;
   begin
      Hr := this.m_IMicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo.all.get_ServiceResponse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Security.ExchangeActiveSyncProvisioning is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IEasClientDeviceInformation_Interface is interface and WinRt.IInspectable_Interface;
   type IEasClientDeviceInformation is access all IEasClientDeviceInformation_Interface'Class;
   type IEasClientDeviceInformation_Ptr is access all IEasClientDeviceInformation;

   type IEasClientDeviceInformation2_Interface is interface and WinRt.IInspectable_Interface;
   type IEasClientDeviceInformation2 is access all IEasClientDeviceInformation2_Interface'Class;

   type IEasClientSecurityPolicy_Interface is interface and WinRt.IInspectable_Interface;
   type IEasClientSecurityPolicy is access all IEasClientSecurityPolicy_Interface'Class;
   type IEasClientSecurityPolicy_Ptr is access all IEasClientSecurityPolicy;

   type IEasComplianceResults_Interface is interface and WinRt.IInspectable_Interface;
   type IEasComplianceResults is access all IEasComplianceResults_Interface'Class;
   type IEasComplianceResults_Ptr is access all IEasComplianceResults;

   type IEasComplianceResults2_Interface is interface and WinRt.IInspectable_Interface;
   type IEasComplianceResults2 is access all IEasComplianceResults2_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type EasClientDeviceInformation is new Ada.Finalization.Limited_Controlled with
      record
         m_IEasClientDeviceInformation : access Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation;
      end record;
   type EasClientDeviceInformation_Ptr is access all EasClientDeviceInformation;

   type EasClientSecurityPolicy is new Ada.Finalization.Limited_Controlled with
      record
         m_IEasClientSecurityPolicy : access Windows.Security.ExchangeActiveSyncProvisioning.IEasClientSecurityPolicy;
      end record;
   type EasClientSecurityPolicy_Ptr is access all EasClientSecurityPolicy;

   type EasComplianceResults is new Ada.Finalization.Limited_Controlled with
      record
         m_IEasComplianceResults : access Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults;
      end record;
   type EasComplianceResults_Ptr is access all EasComplianceResults;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type EasDisallowConvenienceLogonResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e
   );
   for EasDisallowConvenienceLogonResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3
   );
   type EasDisallowConvenienceLogonResult_Ptr is access all EasDisallowConvenienceLogonResult;

   type EasEncryptionProviderType is (
      NotEvaluated_e,
      WindowsEncryption_e,
      OtherEncryption_e
   );
   for EasEncryptionProviderType use (
      NotEvaluated_e => 0,
      WindowsEncryption_e => 1,
      OtherEncryption_e => 2
   );
   type EasEncryptionProviderType_Ptr is access all EasEncryptionProviderType;

   type EasMaxInactivityTimeLockResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e,
      InvalidParameter_e
   );
   for EasMaxInactivityTimeLockResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3,
      InvalidParameter_e => 4
   );
   type EasMaxInactivityTimeLockResult_Ptr is access all EasMaxInactivityTimeLockResult;

   type EasMaxPasswordFailedAttemptsResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e,
      InvalidParameter_e
   );
   for EasMaxPasswordFailedAttemptsResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3,
      InvalidParameter_e => 4
   );
   type EasMaxPasswordFailedAttemptsResult_Ptr is access all EasMaxPasswordFailedAttemptsResult;

   type EasMinPasswordComplexCharactersResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e,
      RequestedPolicyNotEnforceable_e,
      InvalidParameter_e,
      CurrentUserHasBlankPassword_e,
      AdminsHaveBlankPassword_e,
      UserCannotChangePassword_e,
      AdminsCannotChangePassword_e,
      LocalControlledUsersCannotChangePassword_e,
      ConnectedAdminsProviderPolicyIsWeak_e,
      ConnectedUserProviderPolicyIsWeak_e,
      ChangeConnectedAdminsPassword_e,
      ChangeConnectedUserPassword_e
   );
   for EasMinPasswordComplexCharactersResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3,
      RequestedPolicyNotEnforceable_e => 4,
      InvalidParameter_e => 5,
      CurrentUserHasBlankPassword_e => 6,
      AdminsHaveBlankPassword_e => 7,
      UserCannotChangePassword_e => 8,
      AdminsCannotChangePassword_e => 9,
      LocalControlledUsersCannotChangePassword_e => 10,
      ConnectedAdminsProviderPolicyIsWeak_e => 11,
      ConnectedUserProviderPolicyIsWeak_e => 12,
      ChangeConnectedAdminsPassword_e => 13,
      ChangeConnectedUserPassword_e => 14
   );
   type EasMinPasswordComplexCharactersResult_Ptr is access all EasMinPasswordComplexCharactersResult;

   type EasMinPasswordLengthResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e,
      RequestedPolicyNotEnforceable_e,
      InvalidParameter_e,
      CurrentUserHasBlankPassword_e,
      AdminsHaveBlankPassword_e,
      UserCannotChangePassword_e,
      AdminsCannotChangePassword_e,
      LocalControlledUsersCannotChangePassword_e,
      ConnectedAdminsProviderPolicyIsWeak_e,
      ConnectedUserProviderPolicyIsWeak_e,
      ChangeConnectedAdminsPassword_e,
      ChangeConnectedUserPassword_e
   );
   for EasMinPasswordLengthResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3,
      RequestedPolicyNotEnforceable_e => 4,
      InvalidParameter_e => 5,
      CurrentUserHasBlankPassword_e => 6,
      AdminsHaveBlankPassword_e => 7,
      UserCannotChangePassword_e => 8,
      AdminsCannotChangePassword_e => 9,
      LocalControlledUsersCannotChangePassword_e => 10,
      ConnectedAdminsProviderPolicyIsWeak_e => 11,
      ConnectedUserProviderPolicyIsWeak_e => 12,
      ChangeConnectedAdminsPassword_e => 13,
      ChangeConnectedUserPassword_e => 14
   );
   type EasMinPasswordLengthResult_Ptr is access all EasMinPasswordLengthResult;

   type EasPasswordExpirationResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e,
      RequestedExpirationIncompatible_e,
      InvalidParameter_e,
      UserCannotChangePassword_e,
      AdminsCannotChangePassword_e,
      LocalControlledUsersCannotChangePassword_e
   );
   for EasPasswordExpirationResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3,
      RequestedExpirationIncompatible_e => 4,
      InvalidParameter_e => 5,
      UserCannotChangePassword_e => 6,
      AdminsCannotChangePassword_e => 7,
      LocalControlledUsersCannotChangePassword_e => 8
   );
   type EasPasswordExpirationResult_Ptr is access all EasPasswordExpirationResult;

   type EasPasswordHistoryResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      RequestedPolicyIsStricter_e,
      InvalidParameter_e
   );
   for EasPasswordHistoryResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      RequestedPolicyIsStricter_e => 3,
      InvalidParameter_e => 4
   );
   type EasPasswordHistoryResult_Ptr is access all EasPasswordHistoryResult;

   type EasRequireEncryptionResult is (
      NotEvaluated_e,
      Compliant_e,
      CanBeCompliant_e,
      NotProvisionedOnAllVolumes_e,
      DeFixedDataNotSupported_e,
      DeHardwareNotCompliant_e,
      DeWinReNotConfigured_e,
      DeProtectionSuspended_e,
      DeOsVolumeNotProtected_e,
      DeProtectionNotYetEnabled_e,
      NoFeatureLicense_e,
      OsNotProtected_e,
      UnexpectedFailure_e
   );
   for EasRequireEncryptionResult use (
      NotEvaluated_e => 0,
      Compliant_e => 1,
      CanBeCompliant_e => 2,
      NotProvisionedOnAllVolumes_e => 3,
      DeFixedDataNotSupported_e => 4,
      DeHardwareNotCompliant_e => 5,
      DeWinReNotConfigured_e => 6,
      DeProtectionSuspended_e => 7,
      DeOsVolumeNotProtected_e => 8,
      DeProtectionNotYetEnabled_e => 9,
      NoFeatureLicense_e => 10,
      OsNotProtected_e => 11,
      UnexpectedFailure_e => 12
   );
   type EasRequireEncryptionResult_Ptr is access all EasRequireEncryptionResult;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type EasContract is record
      null;
   end record with Convention => C_Pass_By_Copy;
   type EasContract_Ptr is access all EasContract;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IEasClientDeviceInformation is interface and WinRt.IInspectable;

      function get_Id
      (
         this : access IEasClientDeviceInformation_Interface;
         RetVal : access WinRt.Guid
      )
      return WinRt.Hresult is abstract;

      function get_OperatingSystem
      (
         this : access IEasClientDeviceInformation_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_FriendlyName
      (
         this : access IEasClientDeviceInformation_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SystemManufacturer
      (
         this : access IEasClientDeviceInformation_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SystemProductName
      (
         this : access IEasClientDeviceInformation_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SystemSku
      (
         this : access IEasClientDeviceInformation_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IEasClientDeviceInformation : aliased WinRt.IID := (1423956353, 6504, 19619, (185, 88, 229, 149, 209, 101, 5, 235 ));

   -----------------------------------------------------------------------------
   -- type IEasClientDeviceInformation2 is interface and WinRt.IInspectable;

      function get_SystemHardwareVersion
      (
         this : access IEasClientDeviceInformation2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SystemFirmwareVersion
      (
         this : access IEasClientDeviceInformation2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IEasClientDeviceInformation2 : aliased WinRt.IID := (4289943843, 47910, 19818, (129, 188, 22, 90, 238, 10, 215, 84 ));

   -----------------------------------------------------------------------------
   -- type IEasClientSecurityPolicy is interface and WinRt.IInspectable;

      function get_RequireEncryption
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function put_RequireEncryption
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_MinPasswordLength
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access WinRt.Byte
      )
      return WinRt.Hresult is abstract;

      function put_MinPasswordLength
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : WinRt.Byte
      )
      return WinRt.Hresult is abstract;

      function get_DisallowConvenienceLogon
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function put_DisallowConvenienceLogon
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_MinPasswordComplexCharacters
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access WinRt.Byte
      )
      return WinRt.Hresult is abstract;

      function put_MinPasswordComplexCharacters
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : WinRt.Byte
      )
      return WinRt.Hresult is abstract;

      function get_PasswordExpiration
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function put_PasswordExpiration
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function get_PasswordHistory
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function put_PasswordHistory
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function get_MaxPasswordFailedAttempts
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access WinRt.Byte
      )
      return WinRt.Hresult is abstract;

      function put_MaxPasswordFailedAttempts
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : WinRt.Byte
      )
      return WinRt.Hresult is abstract;

      function get_MaxInactivityTimeLock
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function put_MaxInactivityTimeLock
      (
         this : access IEasClientSecurityPolicy_Interface;
         value : Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function CheckCompliance
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults
      )
      return WinRt.Hresult is abstract;

      function ApplyAsync
      (
         this : access IEasClientSecurityPolicy_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IEasClientSecurityPolicy : aliased WinRt.IID := (1169630050, 57274, 19099, (172, 237, 111, 226, 173, 203, 100, 32 ));

   -----------------------------------------------------------------------------
   -- type IEasComplianceResults is interface and WinRt.IInspectable;

      function get_Compliant
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_RequireEncryptionResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasRequireEncryptionResult
      )
      return WinRt.Hresult is abstract;

      function get_MinPasswordLengthResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordLengthResult
      )
      return WinRt.Hresult is abstract;

      function get_DisallowConvenienceLogonResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasDisallowConvenienceLogonResult
      )
      return WinRt.Hresult is abstract;

      function get_MinPasswordComplexCharactersResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordComplexCharactersResult
      )
      return WinRt.Hresult is abstract;

      function get_PasswordExpirationResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordExpirationResult
      )
      return WinRt.Hresult is abstract;

      function get_PasswordHistoryResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordHistoryResult
      )
      return WinRt.Hresult is abstract;

      function get_MaxPasswordFailedAttemptsResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasMaxPasswordFailedAttemptsResult
      )
      return WinRt.Hresult is abstract;

      function get_MaxInactivityTimeLockResult
      (
         this : access IEasComplianceResults_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasMaxInactivityTimeLockResult
      )
      return WinRt.Hresult is abstract;

      IID_IEasComplianceResults : aliased WinRt.IID := (1178347932, 32537, 19558, (180, 3, 203, 69, 221, 87, 162, 179 ));

   -----------------------------------------------------------------------------
   -- type IEasComplianceResults2 is interface and WinRt.IInspectable;

      function get_EncryptionProviderType
      (
         this : access IEasComplianceResults2_Interface;
         RetVal : access Windows.Security.ExchangeActiveSyncProvisioning.EasEncryptionProviderType
      )
      return WinRt.Hresult is abstract;

      IID_IEasComplianceResults2 : aliased WinRt.IID := (801005769, 6824, 18421, (136, 187, 203, 62, 240, 191, 251, 21 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EasClientDeviceInformation

   overriding procedure Initialize (this : in out EasClientDeviceInformation);
   overriding procedure Finalize (this : in out EasClientDeviceInformation);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EasClientDeviceInformation

   function Constructor return EasClientDeviceInformation;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EasClientDeviceInformation

   function get_Id
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.Guid;

   function get_OperatingSystem
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   function get_FriendlyName
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   function get_SystemManufacturer
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   function get_SystemProductName
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   function get_SystemSku
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   function get_SystemHardwareVersion
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   function get_SystemFirmwareVersion
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EasClientSecurityPolicy

   overriding procedure Initialize (this : in out EasClientSecurityPolicy);
   overriding procedure Finalize (this : in out EasClientSecurityPolicy);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EasClientSecurityPolicy

   function Constructor return EasClientSecurityPolicy;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EasClientSecurityPolicy

   function get_RequireEncryption
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Boolean;

   procedure put_RequireEncryption
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Boolean
   );

   function get_MinPasswordLength
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Byte;

   procedure put_MinPasswordLength
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Byte
   );

   function get_DisallowConvenienceLogon
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Boolean;

   procedure put_DisallowConvenienceLogon
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Boolean
   );

   function get_MinPasswordComplexCharacters
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Byte;

   procedure put_MinPasswordComplexCharacters
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Byte
   );

   function get_PasswordExpiration
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Foundation.TimeSpan;

   procedure put_PasswordExpiration
   (
      this : in out EasClientSecurityPolicy;
      value : Windows.Foundation.TimeSpan
   );

   function get_PasswordHistory
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.UInt32;

   procedure put_PasswordHistory
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.UInt32
   );

   function get_MaxPasswordFailedAttempts
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Byte;

   procedure put_MaxPasswordFailedAttempts
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Byte
   );

   function get_MaxInactivityTimeLock
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Foundation.TimeSpan;

   procedure put_MaxInactivityTimeLock
   (
      this : in out EasClientSecurityPolicy;
      value : Windows.Foundation.TimeSpan
   );

   function CheckCompliance
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults'Class;

   function ApplyAsync
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EasComplianceResults

   overriding procedure Initialize (this : in out EasComplianceResults);
   overriding procedure Finalize (this : in out EasComplianceResults);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EasComplianceResults

   function get_Compliant
   (
      this : in out EasComplianceResults
   )
   return WinRt.Boolean;

   function get_RequireEncryptionResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasRequireEncryptionResult;

   function get_MinPasswordLengthResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordLengthResult;

   function get_DisallowConvenienceLogonResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasDisallowConvenienceLogonResult;

   function get_MinPasswordComplexCharactersResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordComplexCharactersResult;

   function get_PasswordExpirationResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordExpirationResult;

   function get_PasswordHistoryResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordHistoryResult;

   function get_MaxPasswordFailedAttemptsResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMaxPasswordFailedAttemptsResult;

   function get_MaxInactivityTimeLockResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMaxInactivityTimeLockResult;

   function get_EncryptionProviderType
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasEncryptionProviderType;

end;

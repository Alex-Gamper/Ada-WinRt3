--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_DeviceAccountConfiguration is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration);
   package AsyncOperationCompletedHandler_DeviceAccountConfiguration is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceAccountConfiguration

   procedure Initialize (this : in out DeviceAccountConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceAccountConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceAccountConfiguration, IDeviceAccountConfiguration_Ptr);
   begin
      if this.m_IDeviceAccountConfiguration /= null then
         if this.m_IDeviceAccountConfiguration.all /= null then
            RefCount := this.m_IDeviceAccountConfiguration.all.Release;
            Free (this.m_IDeviceAccountConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DeviceAccountConfiguration

   function Constructor return DeviceAccountConfiguration is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountConfiguration");
      m_ComRetVal  : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration;
   begin
      return RetVal : DeviceAccountConfiguration do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDeviceAccountConfiguration := new Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration;
            Retval.m_IDeviceAccountConfiguration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceAccountConfiguration

   function get_AccountName
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_AccountName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AccountName
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_AccountName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DeviceAccountTypeId
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_DeviceAccountTypeId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DeviceAccountTypeId
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_DeviceAccountTypeId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ServerType
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountServerType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountServerType;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_ServerType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServerType
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountServerType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_ServerType (value);
   end;

   function get_EmailAddress
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_EmailAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_EmailAddress
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_EmailAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Domain
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_Domain (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Domain
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_Domain (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_EmailSyncEnabled
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_EmailSyncEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EmailSyncEnabled
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_EmailSyncEnabled (value);
   end;

   function get_ContactsSyncEnabled
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_ContactsSyncEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ContactsSyncEnabled
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_ContactsSyncEnabled (value);
   end;

   function get_CalendarSyncEnabled
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_CalendarSyncEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CalendarSyncEnabled
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_CalendarSyncEnabled (value);
   end;

   function get_IncomingServerAddress
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_IncomingServerAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IncomingServerAddress
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_IncomingServerAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IncomingServerPort
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_IncomingServerPort (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncomingServerPort
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_IncomingServerPort (value);
   end;

   function get_IncomingServerRequiresSsl
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_IncomingServerRequiresSsl (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncomingServerRequiresSsl
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_IncomingServerRequiresSsl (value);
   end;

   function get_IncomingServerUsername
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_IncomingServerUsername (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IncomingServerUsername
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_IncomingServerUsername (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_OutgoingServerAddress
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_OutgoingServerAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_OutgoingServerAddress
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_OutgoingServerAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_OutgoingServerPort
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_OutgoingServerPort (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutgoingServerPort
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_OutgoingServerPort (value);
   end;

   function get_OutgoingServerRequiresSsl
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_OutgoingServerRequiresSsl (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutgoingServerRequiresSsl
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_OutgoingServerRequiresSsl (value);
   end;

   function get_OutgoingServerUsername
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.get_OutgoingServerUsername (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_OutgoingServerUsername
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDeviceAccountConfiguration.all.put_OutgoingServerUsername (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IncomingServerCredential
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
         Hr := m_Interface.get_IncomingServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_IncomingServerCredential
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IncomingServerCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingServerCredential
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
         Hr := m_Interface.get_OutgoingServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_OutgoingServerCredential
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_OutgoingServerCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_OAuthRefreshToken
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_OAuthRefreshToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_OAuthRefreshToken
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_OAuthRefreshToken (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsExternallyManaged
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IsExternallyManaged (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsExternallyManaged
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IsExternallyManaged (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AccountIconId
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountIconId is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountIconId;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_AccountIconId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AccountIconId
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountIconId
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_AccountIconId (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AuthenticationType
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountAuthenticationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountAuthenticationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_AuthenticationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AuthenticationType
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountAuthenticationType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_AuthenticationType (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsSsoAuthenticationSupported
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IsSsoAuthenticationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SsoAccountId
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_SsoAccountId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SsoAccountId
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_SsoAccountId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AlwaysDownloadFullMessage
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_AlwaysDownloadFullMessage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AlwaysDownloadFullMessage
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_AlwaysDownloadFullMessage (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DoesPolicyAllowMailSync
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_DoesPolicyAllowMailSync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SyncScheduleKind
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_SyncScheduleKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SyncScheduleKind
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_SyncScheduleKind (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MailAgeFilter
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountMailAgeFilter is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountMailAgeFilter;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_MailAgeFilter (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MailAgeFilter
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountMailAgeFilter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_MailAgeFilter (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsClientAuthenticationCertificateRequired
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IsClientAuthenticationCertificateRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsClientAuthenticationCertificateRequired
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IsClientAuthenticationCertificateRequired (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AutoSelectAuthenticationCertificate
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_AutoSelectAuthenticationCertificate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoSelectAuthenticationCertificate
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_AutoSelectAuthenticationCertificate (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AuthenticationCertificateId
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_AuthenticationCertificateId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AuthenticationCertificateId
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_AuthenticationCertificateId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CardDavSyncScheduleKind
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_CardDavSyncScheduleKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CardDavSyncScheduleKind
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_CardDavSyncScheduleKind (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CalDavSyncScheduleKind
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_CalDavSyncScheduleKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CalDavSyncScheduleKind
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountSyncScheduleKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_CalDavSyncScheduleKind (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CardDavServerUrl
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
         Hr := m_Interface.get_CardDavServerUrl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_CardDavServerUrl
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_CardDavServerUrl (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_CardDavRequiresSsl
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_CardDavRequiresSsl (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CardDavRequiresSsl
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_CardDavRequiresSsl (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CalDavServerUrl
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
         Hr := m_Interface.get_CalDavServerUrl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_CalDavServerUrl
   (
      this : in out DeviceAccountConfiguration;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_CalDavServerUrl (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_CalDavRequiresSsl
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_CalDavRequiresSsl (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CalDavRequiresSsl
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_CalDavRequiresSsl (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_WasModifiedByUser
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_WasModifiedByUser (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_WasModifiedByUser
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_WasModifiedByUser (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_WasIncomingServerCertificateHashConfirmed
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_WasIncomingServerCertificateHashConfirmed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_WasIncomingServerCertificateHashConfirmed
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_WasIncomingServerCertificateHashConfirmed (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IncomingServerCertificateHash
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IncomingServerCertificateHash (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IncomingServerCertificateHash
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IncomingServerCertificateHash (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsOutgoingServerAuthenticationRequired
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IsOutgoingServerAuthenticationRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsOutgoingServerAuthenticationRequired
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IsOutgoingServerAuthenticationRequired (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsOutgoingServerAuthenticationEnabled
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IsOutgoingServerAuthenticationEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsOutgoingServerAuthenticationEnabled
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IsOutgoingServerAuthenticationEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_WasOutgoingServerCertificateHashConfirmed
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_WasOutgoingServerCertificateHashConfirmed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_WasOutgoingServerCertificateHashConfirmed
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_WasOutgoingServerCertificateHashConfirmed (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingServerCertificateHash
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_OutgoingServerCertificateHash (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_OutgoingServerCertificateHash
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_OutgoingServerCertificateHash (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsSyncScheduleManagedBySystem
   (
      this : in out DeviceAccountConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.get_IsSyncScheduleManagedBySystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsSyncScheduleManagedBySystem
   (
      this : in out DeviceAccountConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2, WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IID_IDeviceAccountConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccountConfiguration.all);
      Hr := m_Interface.put_IsSyncScheduleManagedBySystem (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body UserDataAccountSystemAccessManager is

      function AddAndShowDeviceAccountsAsync
      (
         accounts : GenericObject
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataAccounts.SystemAccess.UserDataAccountSystemAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IUserDataAccountSystemAccessManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (798143785, 4507, 22362, (164, 25, 57, 4, 180, 228, 26, 242 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (2088278462, 24366, 23539, (173, 229, 173, 152, 183, 114, 199, 205 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserDataAccountSystemAccessManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AddAndShowDeviceAccountsAsync (accounts, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure SuppressLocalAccountWithAccountAsync
      (
         userDataAccountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataAccounts.SystemAccess.UserDataAccountSystemAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IUserDataAccountSystemAccessManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_userDataAccountId : WinRt.HString := To_HString (userDataAccountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserDataAccountSystemAccessManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SuppressLocalAccountWithAccountAsync (HStr_userDataAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_userDataAccountId);
      end;

      function CreateDeviceAccountAsync
      (
         account : Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountConfiguration'Class
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataAccounts.SystemAccess.UserDataAccountSystemAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IUserDataAccountSystemAccessManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserDataAccountSystemAccessManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDeviceAccountAsync (account.m_IDeviceAccountConfiguration.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      procedure DeleteDeviceAccountAsync
      (
         accountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataAccounts.SystemAccess.UserDataAccountSystemAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IUserDataAccountSystemAccessManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_accountId : WinRt.HString := To_HString (accountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserDataAccountSystemAccessManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeleteDeviceAccountAsync (HStr_accountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_accountId);
      end;

      function GetDeviceAccountConfigurationAsync
      (
         accountId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountConfiguration is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataAccounts.SystemAccess.UserDataAccountSystemAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IUserDataAccountSystemAccessManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_accountId : WinRt.HString := To_HString (accountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_DeviceAccountConfiguration.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_DeviceAccountConfiguration.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration;
         m_IID            : aliased WinRt.IID := (1184389619, 27515, 21401, (138, 140, 254, 97, 91, 149, 174, 7 )); -- Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountConfiguration;
         m_HandlerIID     : aliased WinRt.IID := (3421383752, 58349, 24253, (164, 174, 86, 88, 51, 136, 164, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_DeviceAccountConfiguration.Kind := new AsyncOperationCompletedHandler_DeviceAccountConfiguration.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceAccountConfiguration.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceAccountConfiguration.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceAccountConfiguration.Kind_Delegate, AsyncOperationCompletedHandler_DeviceAccountConfiguration.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountConfiguration do
            Hr := RoGetActivationFactory (m_hString, IID_IUserDataAccountSystemAccessManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetDeviceAccountConfigurationAsync (HStr_accountId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IDeviceAccountConfiguration := new Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration;
                        Retval.m_IDeviceAccountConfiguration.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_accountId);
         end return;
      end;

   end UserDataAccountSystemAccessManager;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
limited with WinRt.Windows.Storage.Streams;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Gaming.Input.Custom is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type ICustomGameControllerFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ICustomGameControllerFactory is access ICustomGameControllerFactory_Interface'Class;

   type IGameControllerFactoryManagerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IGameControllerFactoryManagerStatics is access IGameControllerFactoryManagerStatics_Interface'Class;

   type IGameControllerFactoryManagerStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IGameControllerFactoryManagerStatics2 is access IGameControllerFactoryManagerStatics2_Interface'Class;

   type IGameControllerInputSink_Interface is interface and WinRt.IInspectable_Interface;
   type IGameControllerInputSink is access IGameControllerInputSink_Interface'Class;

   type IGameControllerProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IGameControllerProvider is access IGameControllerProvider_Interface'Class;

   type IGipFirmwareUpdateResult_Interface is interface and WinRt.IInspectable_Interface;
   type IGipFirmwareUpdateResult is access IGipFirmwareUpdateResult_Interface'Class;
   type IGipFirmwareUpdateResult_Ptr is access all IGipFirmwareUpdateResult;

   type IGipGameControllerInputSink_Interface is interface and WinRt.IInspectable_Interface;
   type IGipGameControllerInputSink is access IGipGameControllerInputSink_Interface'Class;

   type IGipGameControllerProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IGipGameControllerProvider is access IGipGameControllerProvider_Interface'Class;
   type IGipGameControllerProvider_Ptr is access all IGipGameControllerProvider;

   type IHidGameControllerInputSink_Interface is interface and WinRt.IInspectable_Interface;
   type IHidGameControllerInputSink is access IHidGameControllerInputSink_Interface'Class;

   type IHidGameControllerProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IHidGameControllerProvider is access IHidGameControllerProvider_Interface'Class;
   type IHidGameControllerProvider_Ptr is access all IHidGameControllerProvider;

   type IXusbGameControllerInputSink_Interface is interface and WinRt.IInspectable_Interface;
   type IXusbGameControllerInputSink is access IXusbGameControllerInputSink_Interface'Class;

   type IXusbGameControllerProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IXusbGameControllerProvider is access IXusbGameControllerProvider_Interface'Class;
   type IXusbGameControllerProvider_Ptr is access all IXusbGameControllerProvider;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type GipFirmwareUpdateResult is new Ada.Finalization.Limited_Controlled with
      record
         m_IGipFirmwareUpdateResult : access Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult;
      end record;
   type GipFirmwareUpdateResult_Ptr is access all GipFirmwareUpdateResult;

   type GipGameControllerProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IGipGameControllerProvider : access Windows.Gaming.Input.Custom.IGipGameControllerProvider;
      end record;
   type GipGameControllerProvider_Ptr is access all GipGameControllerProvider;

   type HidGameControllerProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IHidGameControllerProvider : access Windows.Gaming.Input.Custom.IHidGameControllerProvider;
      end record;
   type HidGameControllerProvider_Ptr is access all HidGameControllerProvider;

   type XusbGameControllerProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IXusbGameControllerProvider : access Windows.Gaming.Input.Custom.IXusbGameControllerProvider;
      end record;
   type XusbGameControllerProvider_Ptr is access all XusbGameControllerProvider;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type GipFirmwareUpdateStatus is (
      Completed_e,
      UpToDate_e,
      Failed_e
   );
   for GipFirmwareUpdateStatus use (
      Completed_e => 0,
      UpToDate_e => 1,
      Failed_e => 2
   );
   type GipFirmwareUpdateStatus_Ptr is access all GipFirmwareUpdateStatus;

   type GipMessageClass is (
      Command_e,
      LowLatency_e,
      StandardLatency_e
   );
   for GipMessageClass use (
      Command_e => 0,
      LowLatency_e => 1,
      StandardLatency_e => 2
   );
   type GipMessageClass_Ptr is access all GipMessageClass;

   type XusbDeviceSubtype is (
      Unknown_e,
      Gamepad_e,
      ArcadePad_e,
      ArcadeStick_e,
      FlightStick_e,
      Wheel_e,
      Guitar_e,
      GuitarAlternate_e,
      GuitarBass_e,
      DrumKit_e,
      DancePad_e
   );
   for XusbDeviceSubtype use (
      Unknown_e => 0,
      Gamepad_e => 1,
      ArcadePad_e => 2,
      ArcadeStick_e => 3,
      FlightStick_e => 4,
      Wheel_e => 5,
      Guitar_e => 6,
      GuitarAlternate_e => 7,
      GuitarBass_e => 8,
      DrumKit_e => 9,
      DancePad_e => 10
   );
   type XusbDeviceSubtype_Ptr is access all XusbDeviceSubtype;

   type XusbDeviceType is (
      Unknown_e,
      Gamepad_e
   );
   for XusbDeviceType use (
      Unknown_e => 0,
      Gamepad_e => 1
   );
   type XusbDeviceType_Ptr is access all XusbDeviceType;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type GameControllerVersionInfo is record
      Major : WinRt.UInt16;
      Minor : WinRt.UInt16;
      Build : WinRt.UInt16;
      Revision : WinRt.UInt16;
   end record with Convention => C_Pass_By_Copy;
   type GameControllerVersionInfo_Ptr is access all GameControllerVersionInfo;

   type GipFirmwareUpdateProgress is record
      PercentCompleted : WinRt.Double;
      CurrentComponentId : WinRt.UInt32;
   end record with Convention => C_Pass_By_Copy;
   type GipFirmwareUpdateProgress_Ptr is access all GipFirmwareUpdateProgress;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type ICustomGameControllerFactory is interface and WinRt.IInspectable;

      function CreateGameController
      (
         this : access ICustomGameControllerFactory_Interface;
         provider : Windows.Gaming.Input.Custom.IGameControllerProvider;
         RetVal : access WinRt.IInspectable
      )
      return WinRt.Hresult is abstract;

      function OnGameControllerAdded
      (
         this : access ICustomGameControllerFactory_Interface;
         value : Windows.Gaming.Input.IGameController
      )
      return WinRt.Hresult is abstract;

      function OnGameControllerRemoved
      (
         this : access ICustomGameControllerFactory_Interface;
         value : Windows.Gaming.Input.IGameController
      )
      return WinRt.Hresult is abstract;

      IID_ICustomGameControllerFactory : aliased WinRt.IID := (1772138078, 30094, 19646, (172, 230, 98, 21, 95, 233, 18, 111 ));

   -----------------------------------------------------------------------------
   -- type IGameControllerFactoryManagerStatics is interface and WinRt.IInspectable;

      function RegisterCustomFactoryForGipInterface
      (
         this : access IGameControllerFactoryManagerStatics_Interface;
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         interfaceId : WinRt.Guid
      )
      return WinRt.Hresult is abstract;

      function RegisterCustomFactoryForHardwareId
      (
         this : access IGameControllerFactoryManagerStatics_Interface;
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         hardwareVendorId : WinRt.UInt16;
         hardwareProductId : WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function RegisterCustomFactoryForXusbType
      (
         this : access IGameControllerFactoryManagerStatics_Interface;
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         xusbType : Windows.Gaming.Input.Custom.XusbDeviceType;
         xusbSubtype : Windows.Gaming.Input.Custom.XusbDeviceSubtype
      )
      return WinRt.Hresult is abstract;

      IID_IGameControllerFactoryManagerStatics : aliased WinRt.IID := (919299811, 53409, 18822, (162, 76, 64, 177, 55, 222, 186, 158 ));

   -----------------------------------------------------------------------------
   -- type IGameControllerFactoryManagerStatics2 is interface and WinRt.IInspectable;

      function TryGetFactoryControllerFromGameController
      (
         this : access IGameControllerFactoryManagerStatics2_Interface;
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IGameController
      )
      return WinRt.Hresult is abstract;

      IID_IGameControllerFactoryManagerStatics2 : aliased WinRt.IID := (3939391044, 6623, 16661, (179, 42, 39, 147, 226, 174, 163, 187 ));

   -----------------------------------------------------------------------------
   -- type IGameControllerInputSink is interface and WinRt.IInspectable;

      function OnInputResumed
      (
         this : access IGameControllerInputSink_Interface;
         timestamp : WinRt.UInt64
      )
      return WinRt.Hresult is abstract;

      function OnInputSuspended
      (
         this : access IGameControllerInputSink_Interface;
         timestamp : WinRt.UInt64
      )
      return WinRt.Hresult is abstract;

      IID_IGameControllerInputSink : aliased WinRt.IID := (536279330, 50752, 19576, (168, 32, 154, 113, 92, 85, 139, 203 ));

   -----------------------------------------------------------------------------
   -- type IGameControllerProvider is interface and WinRt.IInspectable;

      function get_FirmwareVersionInfo
      (
         this : access IGameControllerProvider_Interface;
         RetVal : access Windows.Gaming.Input.Custom.GameControllerVersionInfo
      )
      return WinRt.Hresult is abstract;

      function get_HardwareProductId
      (
         this : access IGameControllerProvider_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_HardwareVendorId
      (
         this : access IGameControllerProvider_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_HardwareVersionInfo
      (
         this : access IGameControllerProvider_Interface;
         RetVal : access Windows.Gaming.Input.Custom.GameControllerVersionInfo
      )
      return WinRt.Hresult is abstract;

      function get_IsConnected
      (
         this : access IGameControllerProvider_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      IID_IGameControllerProvider : aliased WinRt.IID := (3872864642, 10646, 17753, (177, 108, 62, 87, 212, 110, 88, 214 ));

   -----------------------------------------------------------------------------
   -- type IGipFirmwareUpdateResult is interface and WinRt.IInspectable;

      function get_ExtendedErrorCode
      (
         this : access IGipFirmwareUpdateResult_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function get_FinalComponentId
      (
         this : access IGipFirmwareUpdateResult_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function get_Status
      (
         this : access IGipFirmwareUpdateResult_Interface;
         RetVal : access Windows.Gaming.Input.Custom.GipFirmwareUpdateStatus
      )
      return WinRt.Hresult is abstract;

      IID_IGipFirmwareUpdateResult : aliased WinRt.IID := (1803111730, 34131, 17042, (142, 3, 225, 102, 81, 162, 248, 188 ));

   -----------------------------------------------------------------------------
   -- type IGipGameControllerInputSink is interface and WinRt.IInspectable;

      function OnKeyReceived
      (
         this : access IGipGameControllerInputSink_Interface;
         timestamp : WinRt.UInt64;
         keyCode : WinRt.Byte;
         isPressed : WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function OnMessageReceived
      (
         this : access IGipGameControllerInputSink_Interface;
         timestamp : WinRt.UInt64;
         messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
         messageId : WinRt.Byte;
         sequenceId : WinRt.Byte;
         messageBufferSize : WinRt.UInt32;
         messageBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_IGipGameControllerInputSink : aliased WinRt.IID := (2718993087, 2545, 17340, (161, 64, 128, 248, 153, 236, 54, 251 ));

   -----------------------------------------------------------------------------
   -- type IGipGameControllerProvider is interface and WinRt.IInspectable;

      function SendMessage
      (
         this : access IGipGameControllerProvider_Interface;
         messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
         messageId : WinRt.Byte;
         messageBufferSize : WinRt.UInt32;
         messageBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function SendReceiveMessage
      (
         this : access IGipGameControllerProvider_Interface;
         messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
         messageId : WinRt.Byte;
         requestMessageBufferSize : WinRt.UInt32;
         requestMessageBuffer : WinRt.Byte_Ptr;
         responseMessageBufferSize : WinRt.UInt32;
         responseMessageBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function UpdateFirmwareAsync
      (
         this : access IGipGameControllerProvider_Interface;
         firmwareImage : Windows.Storage.Streams.IInputStream;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IGipGameControllerProvider : aliased WinRt.IID := (3687783961, 6901, 17832, (191, 2, 160, 238, 80, 200, 35, 252 ));

   -----------------------------------------------------------------------------
   -- type IHidGameControllerInputSink is interface and WinRt.IInspectable;

      function OnInputReportReceived
      (
         this : access IHidGameControllerInputSink_Interface;
         timestamp : WinRt.UInt64;
         reportId : WinRt.Byte;
         reportBufferSize : WinRt.UInt32;
         reportBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_IHidGameControllerInputSink : aliased WinRt.IID := (4149527330, 6189, 16612, (161, 38, 252, 238, 79, 250, 30, 49 ));

   -----------------------------------------------------------------------------
   -- type IHidGameControllerProvider is interface and WinRt.IInspectable;

      function get_UsageId
      (
         this : access IHidGameControllerProvider_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_UsagePage
      (
         this : access IHidGameControllerProvider_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function GetFeatureReport
      (
         this : access IHidGameControllerProvider_Interface;
         reportId : WinRt.Byte;
         reportBufferSize : WinRt.UInt32;
         reportBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function SendFeatureReport
      (
         this : access IHidGameControllerProvider_Interface;
         reportId : WinRt.Byte;
         reportBufferSize : WinRt.UInt32;
         reportBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function SendOutputReport
      (
         this : access IHidGameControllerProvider_Interface;
         reportId : WinRt.Byte;
         reportBufferSize : WinRt.UInt32;
         reportBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_IHidGameControllerProvider : aliased WinRt.IID := (2513320692, 44016, 19304, (160, 129, 59, 125, 231, 63, 240, 231 ));

   -----------------------------------------------------------------------------
   -- type IXusbGameControllerInputSink is interface and WinRt.IInspectable;

      function OnInputReceived
      (
         this : access IXusbGameControllerInputSink_Interface;
         timestamp : WinRt.UInt64;
         reportId : WinRt.Byte;
         inputBufferSize : WinRt.UInt32;
         inputBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_IXusbGameControllerInputSink : aliased WinRt.IID := (2997624213, 28363, 17075, (138, 171, 2, 84, 1, 202, 71, 18 ));

   -----------------------------------------------------------------------------
   -- type IXusbGameControllerProvider is interface and WinRt.IInspectable;

      function SetVibration
      (
         this : access IXusbGameControllerProvider_Interface;
         lowFrequencyMotorSpeed : WinRt.Double;
         highFrequencyMotorSpeed : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      IID_IXusbGameControllerProvider : aliased WinRt.IID := (1848209899, 3835, 18612, (128, 139, 131, 118, 67, 178, 242, 22 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package GameControllerFactoryManager is

      function TryGetFactoryControllerFromGameController
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         gameController : Windows.Gaming.Input.IGameController
      )
      return WinRt.Windows.Gaming.Input.IGameController;

      procedure RegisterCustomFactoryForGipInterface
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         interfaceId : WinRt.Guid
      );

      procedure RegisterCustomFactoryForHardwareId
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         hardwareVendorId : WinRt.UInt16;
         hardwareProductId : WinRt.UInt16
      );

      procedure RegisterCustomFactoryForXusbType
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         xusbType : Windows.Gaming.Input.Custom.XusbDeviceType;
         xusbSubtype : Windows.Gaming.Input.Custom.XusbDeviceSubtype
      );

   end GameControllerFactoryManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GipFirmwareUpdateResult

   overriding procedure Initialize (this : in out GipFirmwareUpdateResult);
   overriding procedure Finalize (this : in out GipFirmwareUpdateResult);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GipFirmwareUpdateResult

   function get_ExtendedErrorCode
   (
      this : in out GipFirmwareUpdateResult
   )
   return WinRt.UInt32;

   function get_FinalComponentId
   (
      this : in out GipFirmwareUpdateResult
   )
   return WinRt.UInt32;

   function get_Status
   (
      this : in out GipFirmwareUpdateResult
   )
   return WinRt.Windows.Gaming.Input.Custom.GipFirmwareUpdateStatus;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GipGameControllerProvider

   overriding procedure Initialize (this : in out GipGameControllerProvider);
   overriding procedure Finalize (this : in out GipGameControllerProvider);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GipGameControllerProvider

   procedure SendMessage
   (
      this : in out GipGameControllerProvider;
      messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
      messageId : WinRt.Byte;
      messageBuffer : WinRt.Byte_Array
   );

   procedure SendReceiveMessage
   (
      this : in out GipGameControllerProvider;
      messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
      messageId : WinRt.Byte;
      requestMessageBuffer : WinRt.Byte_Array;
      responseMessageBuffer : WinRt.Byte_Array
   );

   function UpdateFirmwareAsync
   (
      this : in out GipGameControllerProvider;
      firmwareImage : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.Gaming.Input.Custom.GipFirmwareUpdateResult'Class;

   function get_FirmwareVersionInfo
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo;

   function get_HardwareProductId
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.UInt16;

   function get_HardwareVendorId
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.UInt16;

   function get_HardwareVersionInfo
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo;

   function get_IsConnected
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.Boolean;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidGameControllerProvider

   overriding procedure Initialize (this : in out HidGameControllerProvider);
   overriding procedure Finalize (this : in out HidGameControllerProvider);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidGameControllerProvider

   function get_UsageId
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16;

   function get_UsagePage
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16;

   procedure GetFeatureReport
   (
      this : in out HidGameControllerProvider;
      reportId : WinRt.Byte;
      reportBuffer : WinRt.Byte_Array
   );

   procedure SendFeatureReport
   (
      this : in out HidGameControllerProvider;
      reportId : WinRt.Byte;
      reportBuffer : WinRt.Byte_Array
   );

   procedure SendOutputReport
   (
      this : in out HidGameControllerProvider;
      reportId : WinRt.Byte;
      reportBuffer : WinRt.Byte_Array
   );

   function get_FirmwareVersionInfo
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo;

   function get_HardwareProductId
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16;

   function get_HardwareVendorId
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16;

   function get_HardwareVersionInfo
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo;

   function get_IsConnected
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.Boolean;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XusbGameControllerProvider

   overriding procedure Initialize (this : in out XusbGameControllerProvider);
   overriding procedure Finalize (this : in out XusbGameControllerProvider);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XusbGameControllerProvider

   procedure SetVibration
   (
      this : in out XusbGameControllerProvider;
      lowFrequencyMotorSpeed : WinRt.Double;
      highFrequencyMotorSpeed : WinRt.Double
   );

   function get_FirmwareVersionInfo
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo;

   function get_HardwareProductId
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.UInt16;

   function get_HardwareVendorId
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.UInt16;

   function get_HardwareVersionInfo
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo;

   function get_IsConnected
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.Boolean;

end;

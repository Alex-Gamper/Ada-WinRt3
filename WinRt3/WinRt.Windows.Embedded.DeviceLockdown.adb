--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Embedded.DeviceLockdown is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body DeviceLockdownProfile is

      function GetSupportedLockdownProfiles
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Embedded.DeviceLockdown.DeviceLockdownProfile");
         m_Factory        : access WinRt.Windows.Embedded.DeviceLockdown.IDeviceLockdownProfileStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceLockdownProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetSupportedLockdownProfiles (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetCurrentLockdownProfile
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Embedded.DeviceLockdown.DeviceLockdownProfile");
         m_Factory        : access WinRt.Windows.Embedded.DeviceLockdown.IDeviceLockdownProfileStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceLockdownProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetCurrentLockdownProfile (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ApplyLockdownProfileAsync
      (
         profileID : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Embedded.DeviceLockdown.DeviceLockdownProfile");
         m_Factory        : access WinRt.Windows.Embedded.DeviceLockdown.IDeviceLockdownProfileStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceLockdownProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ApplyLockdownProfileAsync (profileID, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetLockdownProfileInformation
      (
         profileID : WinRt.Guid
      )
      return WinRt.Windows.Embedded.DeviceLockdown.DeviceLockdownProfileInformation is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Embedded.DeviceLockdown.DeviceLockdownProfile");
         m_Factory        : access WinRt.Windows.Embedded.DeviceLockdown.IDeviceLockdownProfileStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Embedded.DeviceLockdown.IDeviceLockdownProfileInformation;
      begin
         return RetVal : WinRt.Windows.Embedded.DeviceLockdown.DeviceLockdownProfileInformation do
            Hr := RoGetActivationFactory (m_hString, IID_IDeviceLockdownProfileStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetLockdownProfileInformation (profileID, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IDeviceLockdownProfileInformation := new Windows.Embedded.DeviceLockdown.IDeviceLockdownProfileInformation;
               Retval.m_IDeviceLockdownProfileInformation.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end DeviceLockdownProfile;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceLockdownProfileInformation

   procedure Initialize (this : in out DeviceLockdownProfileInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceLockdownProfileInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceLockdownProfileInformation, IDeviceLockdownProfileInformation_Ptr);
   begin
      if this.m_IDeviceLockdownProfileInformation /= null then
         if this.m_IDeviceLockdownProfileInformation.all /= null then
            RefCount := this.m_IDeviceLockdownProfileInformation.all.Release;
            Free (this.m_IDeviceLockdownProfileInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceLockdownProfileInformation

   function get_Name
   (
      this : in out DeviceLockdownProfileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceLockdownProfileInformation.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Haptics;
with WinRt.Windows.Devices.Power;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Perception;
with WinRt.Windows.Perception.People;
with WinRt.Windows.Perception.Spatial;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Input.Spatial is

   package IAsyncOperation_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_HandMeshObserver is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.People.IHandMeshObserver);
   package AsyncOperationCompletedHandler_HandMeshObserver is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.People.IHandMeshObserver);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialGestureRecognizer

   procedure Initialize (this : in out SpatialGestureRecognizer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialGestureRecognizer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialGestureRecognizer, ISpatialGestureRecognizer_Ptr);
   begin
      if this.m_ISpatialGestureRecognizer /= null then
         if this.m_ISpatialGestureRecognizer.all /= null then
            RefCount := this.m_ISpatialGestureRecognizer.all.Release;
            Free (this.m_ISpatialGestureRecognizer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpatialGestureRecognizer

   function Constructor
   (
      settings : Windows.UI.Input.Spatial.SpatialGestureSettings
   )
   return SpatialGestureRecognizer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Input.Spatial.SpatialGestureRecognizer");
      m_Factory    : access ISpatialGestureRecognizerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Input.Spatial.ISpatialGestureRecognizer;
   begin
      return RetVal : SpatialGestureRecognizer do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialGestureRecognizerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (settings, m_ComRetVal'Access);
            Retval.m_ISpatialGestureRecognizer := new Windows.UI.Input.Spatial.ISpatialGestureRecognizer;
            Retval.m_ISpatialGestureRecognizer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialGestureRecognizer

   function add_RecognitionStarted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_RecognitionStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RecognitionStarted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_RecognitionStarted (token);
   end;

   function add_RecognitionEnded
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_RecognitionEnded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RecognitionEnded
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_RecognitionEnded (token);
   end;

   function add_Tapped
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_Tapped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Tapped
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_Tapped (token);
   end;

   function add_HoldStarted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_HoldStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HoldStarted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_HoldStarted (token);
   end;

   function add_HoldCompleted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_HoldCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HoldCompleted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_HoldCompleted (token);
   end;

   function add_HoldCanceled
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_HoldCanceled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HoldCanceled
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_HoldCanceled (token);
   end;

   function add_ManipulationStarted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_ManipulationStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ManipulationStarted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_ManipulationStarted (token);
   end;

   function add_ManipulationUpdated
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_ManipulationUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ManipulationUpdated
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_ManipulationUpdated (token);
   end;

   function add_ManipulationCompleted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_ManipulationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ManipulationCompleted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_ManipulationCompleted (token);
   end;

   function add_ManipulationCanceled
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_ManipulationCanceled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ManipulationCanceled
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_ManipulationCanceled (token);
   end;

   function add_NavigationStarted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_NavigationStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NavigationStarted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_NavigationStarted (token);
   end;

   function add_NavigationUpdated
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_NavigationUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NavigationUpdated
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_NavigationUpdated (token);
   end;

   function add_NavigationCompleted
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_NavigationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NavigationCompleted
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_NavigationCompleted (token);
   end;

   function add_NavigationCanceled
   (
      this : in out SpatialGestureRecognizer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.add_NavigationCanceled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NavigationCanceled
   (
      this : in out SpatialGestureRecognizer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.remove_NavigationCanceled (token);
   end;

   procedure CaptureInteraction
   (
      this : in out SpatialGestureRecognizer;
      interaction : Windows.UI.Input.Spatial.SpatialInteraction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.CaptureInteraction (interaction.m_ISpatialInteraction.all);
   end;

   procedure CancelPendingGestures
   (
      this : in out SpatialGestureRecognizer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.CancelPendingGestures;
   end;

   function TrySetGestureSettings
   (
      this : in out SpatialGestureRecognizer;
      settings : Windows.UI.Input.Spatial.SpatialGestureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.TrySetGestureSettings (settings, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GestureSettings
   (
      this : in out SpatialGestureRecognizer
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialGestureSettings is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialGestureSettings;
   begin
      Hr := this.m_ISpatialGestureRecognizer.all.get_GestureSettings (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialHoldCanceledEventArgs

   procedure Initialize (this : in out SpatialHoldCanceledEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialHoldCanceledEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialHoldCanceledEventArgs, ISpatialHoldCanceledEventArgs_Ptr);
   begin
      if this.m_ISpatialHoldCanceledEventArgs /= null then
         if this.m_ISpatialHoldCanceledEventArgs.all /= null then
            RefCount := this.m_ISpatialHoldCanceledEventArgs.all.Release;
            Free (this.m_ISpatialHoldCanceledEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialHoldCanceledEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialHoldCanceledEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialHoldCanceledEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialHoldCompletedEventArgs

   procedure Initialize (this : in out SpatialHoldCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialHoldCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialHoldCompletedEventArgs, ISpatialHoldCompletedEventArgs_Ptr);
   begin
      if this.m_ISpatialHoldCompletedEventArgs /= null then
         if this.m_ISpatialHoldCompletedEventArgs.all /= null then
            RefCount := this.m_ISpatialHoldCompletedEventArgs.all.Release;
            Free (this.m_ISpatialHoldCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialHoldCompletedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialHoldCompletedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialHoldCompletedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialHoldStartedEventArgs

   procedure Initialize (this : in out SpatialHoldStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialHoldStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialHoldStartedEventArgs, ISpatialHoldStartedEventArgs_Ptr);
   begin
      if this.m_ISpatialHoldStartedEventArgs /= null then
         if this.m_ISpatialHoldStartedEventArgs.all /= null then
            RefCount := this.m_ISpatialHoldStartedEventArgs.all.Release;
            Free (this.m_ISpatialHoldStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialHoldStartedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialHoldStartedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialHoldStartedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialHoldStartedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialHoldStartedEventArgs.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteraction

   procedure Initialize (this : in out SpatialInteraction) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteraction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteraction, ISpatialInteraction_Ptr);
   begin
      if this.m_ISpatialInteraction /= null then
         if this.m_ISpatialInteraction.all /= null then
            RefCount := this.m_ISpatialInteraction.all.Release;
            Free (this.m_ISpatialInteraction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteraction

   function get_SourceState
   (
      this : in out SpatialInteraction
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSourceState;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceState do
         Hr := this.m_ISpatialInteraction.all.get_SourceState (m_ComRetVal'Access);
         Retval.m_ISpatialInteractionSourceState := new Windows.UI.Input.Spatial.ISpatialInteractionSourceState;
         Retval.m_ISpatialInteractionSourceState.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionController

   procedure Initialize (this : in out SpatialInteractionController) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionController, ISpatialInteractionController_Ptr);
   begin
      if this.m_ISpatialInteractionController /= null then
         if this.m_ISpatialInteractionController.all /= null then
            RefCount := this.m_ISpatialInteractionController.all.Release;
            Free (this.m_ISpatialInteractionController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionController

   function get_HasTouchpad
   (
      this : in out SpatialInteractionController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialInteractionController.all.get_HasTouchpad (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasThumbstick
   (
      this : in out SpatialInteractionController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialInteractionController.all.get_HasThumbstick (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SimpleHapticsController
   (
      this : in out SpatialInteractionController
   )
   return WinRt.Windows.Devices.Haptics.SimpleHapticsController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Haptics.ISimpleHapticsController;
   begin
      return RetVal : WinRt.Windows.Devices.Haptics.SimpleHapticsController do
         Hr := this.m_ISpatialInteractionController.all.get_SimpleHapticsController (m_ComRetVal'Access);
         Retval.m_ISimpleHapticsController := new Windows.Devices.Haptics.ISimpleHapticsController;
         Retval.m_ISimpleHapticsController.all := m_ComRetVal;
      end return;
   end;

   function get_VendorId
   (
      this : in out SpatialInteractionController
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISpatialInteractionController.all.get_VendorId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProductId
   (
      this : in out SpatialInteractionController
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISpatialInteractionController.all.get_ProductId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Version
   (
      this : in out SpatialInteractionController
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISpatialInteractionController.all.get_Version (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetRenderableModelAsync
   (
      this : in out SpatialInteractionController
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamWithContentType.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamWithContentType.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3299179614, 12976, 21939, (173, 19, 206, 28, 35, 4, 30, 214 )); -- Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_HandlerIID     : aliased WinRt.IID := (1037954292, 7481, 22760, (131, 177, 219, 237, 84, 28, 127, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamWithContentType.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionController_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionController2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionController.all);
      Hr := m_Interface.TryGetRenderableModelAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryGetBatteryReport
   (
      this : in out SpatialInteractionController
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionController3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Power.IBatteryReport;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionController_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionController3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionController3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Power.BatteryReport do
         m_Interface := QInterface (this.m_ISpatialInteractionController.all);
         Hr := m_Interface.TryGetBatteryReport (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBatteryReport := new Windows.Devices.Power.IBatteryReport;
         Retval.m_IBatteryReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionControllerProperties

   procedure Initialize (this : in out SpatialInteractionControllerProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionControllerProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionControllerProperties, ISpatialInteractionControllerProperties_Ptr);
   begin
      if this.m_ISpatialInteractionControllerProperties /= null then
         if this.m_ISpatialInteractionControllerProperties.all /= null then
            RefCount := this.m_ISpatialInteractionControllerProperties.all.Release;
            Free (this.m_ISpatialInteractionControllerProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionControllerProperties

   function get_IsTouchpadTouched
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_IsTouchpadTouched (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTouchpadPressed
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_IsTouchpadPressed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsThumbstickPressed
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_IsThumbstickPressed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ThumbstickX
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_ThumbstickX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ThumbstickY
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_ThumbstickY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TouchpadX
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_TouchpadX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TouchpadY
   (
      this : in out SpatialInteractionControllerProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialInteractionControllerProperties.all.get_TouchpadY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionDetectedEventArgs

   procedure Initialize (this : in out SpatialInteractionDetectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionDetectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionDetectedEventArgs, ISpatialInteractionDetectedEventArgs_Ptr);
   begin
      if this.m_ISpatialInteractionDetectedEventArgs /= null then
         if this.m_ISpatialInteractionDetectedEventArgs.all /= null then
            RefCount := this.m_ISpatialInteractionDetectedEventArgs.all.Release;
            Free (this.m_ISpatialInteractionDetectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionDetectedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialInteractionDetectedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialInteractionDetectedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialInteractionDetectedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialInteractionDetectedEventArgs.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   function get_Interaction
   (
      this : in out SpatialInteractionDetectedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteraction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteraction;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteraction do
         Hr := this.m_ISpatialInteractionDetectedEventArgs.all.get_Interaction (m_ComRetVal'Access);
         Retval.m_ISpatialInteraction := new Windows.UI.Input.Spatial.ISpatialInteraction;
         Retval.m_ISpatialInteraction.all := m_ComRetVal;
      end return;
   end;

   function get_InteractionSource
   (
      this : in out SpatialInteractionDetectedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionDetectedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionDetectedEventArgs_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionDetectedEventArgs2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionDetectedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSource do
         m_Interface := QInterface (this.m_ISpatialInteractionDetectedEventArgs.all);
         Hr := m_Interface.get_InteractionSource (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpatialInteractionSource := new Windows.UI.Input.Spatial.ISpatialInteractionSource;
         Retval.m_ISpatialInteractionSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionManager

   procedure Initialize (this : in out SpatialInteractionManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionManager, ISpatialInteractionManager_Ptr);
   begin
      if this.m_ISpatialInteractionManager /= null then
         if this.m_ISpatialInteractionManager.all /= null then
            RefCount := this.m_ISpatialInteractionManager.all.Release;
            Free (this.m_ISpatialInteractionManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialInteractionManager

   function IsSourceKindSupported
   (
      kind : Windows.UI.Input.Spatial.SpatialInteractionSourceKind
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Input.Spatial.SpatialInteractionManager");
      m_Factory        : access WinRt.Windows.UI.Input.Spatial.ISpatialInteractionManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialInteractionManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSourceKindSupported (kind, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetForCurrentView
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Input.Spatial.SpatialInteractionManager");
      m_Factory        : access WinRt.Windows.UI.Input.Spatial.ISpatialInteractionManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionManager;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionManager do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialInteractionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialInteractionManager := new Windows.UI.Input.Spatial.ISpatialInteractionManager;
            Retval.m_ISpatialInteractionManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionManager

   function add_SourceDetected
   (
      this : in out SpatialInteractionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialInteractionManager.all.add_SourceDetected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceDetected
   (
      this : in out SpatialInteractionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialInteractionManager.all.remove_SourceDetected (token);
   end;

   function add_SourceLost
   (
      this : in out SpatialInteractionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialInteractionManager.all.add_SourceLost (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceLost
   (
      this : in out SpatialInteractionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialInteractionManager.all.remove_SourceLost (token);
   end;

   function add_SourceUpdated
   (
      this : in out SpatialInteractionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialInteractionManager.all.add_SourceUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceUpdated
   (
      this : in out SpatialInteractionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialInteractionManager.all.remove_SourceUpdated (token);
   end;

   function add_SourcePressed
   (
      this : in out SpatialInteractionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialInteractionManager.all.add_SourcePressed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourcePressed
   (
      this : in out SpatialInteractionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialInteractionManager.all.remove_SourcePressed (token);
   end;

   function add_SourceReleased
   (
      this : in out SpatialInteractionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialInteractionManager.all.add_SourceReleased (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceReleased
   (
      this : in out SpatialInteractionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialInteractionManager.all.remove_SourceReleased (token);
   end;

   function add_InteractionDetected
   (
      this : in out SpatialInteractionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialInteractionManager.all.add_InteractionDetected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_InteractionDetected
   (
      this : in out SpatialInteractionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialInteractionManager.all.remove_InteractionDetected (token);
   end;

   function GetDetectedSourcesAtTimestamp
   (
      this : in out SpatialInteractionManager;
      timeStamp : Windows.Perception.PerceptionTimestamp'Class
   )
   return IVectorView_ISpatialInteractionSourceState.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISpatialInteractionSourceState.Kind;
   begin
      Hr := this.m_ISpatialInteractionManager.all.GetDetectedSourcesAtTimestamp (timeStamp.m_IPerceptionTimestamp.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISpatialInteractionSourceState (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionSource

   procedure Initialize (this : in out SpatialInteractionSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionSource, ISpatialInteractionSource_Ptr);
   begin
      if this.m_ISpatialInteractionSource /= null then
         if this.m_ISpatialInteractionSource.all /= null then
            RefCount := this.m_ISpatialInteractionSource.all.Release;
            Free (this.m_ISpatialInteractionSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionSource

   function get_Id
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISpatialInteractionSource.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialInteractionSource.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPointingSupported
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
      Hr := m_Interface.get_IsPointingSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsMenuSupported
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
      Hr := m_Interface.get_IsMenuSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsGraspSupported
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
      Hr := m_Interface.get_IsGraspSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Controller
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionController;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionController do
         m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
         Hr := m_Interface.get_Controller (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpatialInteractionController := new Windows.UI.Input.Spatial.ISpatialInteractionController;
         Retval.m_ISpatialInteractionController.all := m_ComRetVal;
      end return;
   end;

   function TryGetStateAtTimestamp
   (
      this : in out SpatialInteractionSource;
      timestamp : Windows.Perception.PerceptionTimestamp'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSourceState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceState do
         m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
         Hr := m_Interface.TryGetStateAtTimestamp (timestamp.m_IPerceptionTimestamp.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpatialInteractionSourceState := new Windows.UI.Input.Spatial.ISpatialInteractionSourceState;
         Retval.m_ISpatialInteractionSourceState.all := m_ComRetVal;
      end return;
   end;

   function get_Handedness
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceHandedness is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceHandedness;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
      Hr := m_Interface.get_Handedness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryCreateHandMeshObserver
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Windows.Perception.People.HandMeshObserver'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.IHandMeshObserver;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource4, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Perception.People.HandMeshObserver do
         m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
         Hr := m_Interface.TryCreateHandMeshObserver (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHandMeshObserver := new Windows.Perception.People.IHandMeshObserver;
         Retval.m_IHandMeshObserver.all := m_ComRetVal;
      end return;
   end;

   function TryCreateHandMeshObserverAsync
   (
      this : in out SpatialInteractionSource
   )
   return WinRt.Windows.Perception.People.HandMeshObserver'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HandMeshObserver.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HandMeshObserver.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.People.IHandMeshObserver;
      m_IID            : aliased WinRt.IID := (201255488, 39831, 23231, (175, 158, 46, 99, 103, 165, 11, 248 )); -- Windows.Perception.People.HandMeshObserver;
      m_HandlerIID     : aliased WinRt.IID := (1978116263, 46701, 24171, (160, 96, 238, 247, 0, 45, 158, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_HandMeshObserver.Kind := new AsyncOperationCompletedHandler_HandMeshObserver.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HandMeshObserver.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HandMeshObserver.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HandMeshObserver.Kind_Delegate, AsyncOperationCompletedHandler_HandMeshObserver.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSource4, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSource4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Perception.People.HandMeshObserver do
         m_Interface := QInterface (this.m_ISpatialInteractionSource.all);
         Hr := m_Interface.TryCreateHandMeshObserverAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHandMeshObserver := new Windows.Perception.People.IHandMeshObserver;
                  Retval.m_IHandMeshObserver.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionSourceEventArgs

   procedure Initialize (this : in out SpatialInteractionSourceEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionSourceEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionSourceEventArgs, ISpatialInteractionSourceEventArgs_Ptr);
   begin
      if this.m_ISpatialInteractionSourceEventArgs /= null then
         if this.m_ISpatialInteractionSourceEventArgs.all /= null then
            RefCount := this.m_ISpatialInteractionSourceEventArgs.all.Release;
            Free (this.m_ISpatialInteractionSourceEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionSourceEventArgs

   function get_State
   (
      this : in out SpatialInteractionSourceEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSourceState;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceState do
         Hr := this.m_ISpatialInteractionSourceEventArgs.all.get_State (m_ComRetVal'Access);
         Retval.m_ISpatialInteractionSourceState := new Windows.UI.Input.Spatial.ISpatialInteractionSourceState;
         Retval.m_ISpatialInteractionSourceState.all := m_ComRetVal;
      end return;
   end;

   function get_PressKind
   (
      this : in out SpatialInteractionSourceEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionPressKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionPressKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceEventArgs_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceEventArgs2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceEventArgs.all);
      Hr := m_Interface.get_PressKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionSourceLocation

   procedure Initialize (this : in out SpatialInteractionSourceLocation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionSourceLocation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionSourceLocation, ISpatialInteractionSourceLocation_Ptr);
   begin
      if this.m_ISpatialInteractionSourceLocation /= null then
         if this.m_ISpatialInteractionSourceLocation.all /= null then
            RefCount := this.m_ISpatialInteractionSourceLocation.all.Release;
            Free (this.m_ISpatialInteractionSourceLocation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionSourceLocation

   function get_Position
   (
      this : in out SpatialInteractionSourceLocation
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_ISpatialInteractionSourceLocation.all.get_Position (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Velocity
   (
      this : in out SpatialInteractionSourceLocation
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_ISpatialInteractionSourceLocation.all.get_Velocity (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Orientation
   (
      this : in out SpatialInteractionSourceLocation
   )
   return IReference_Quaternion.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Quaternion.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceLocation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceLocation.all);
      Hr := m_Interface.get_Orientation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Quaternion (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PositionAccuracy
   (
      this : in out SpatialInteractionSourceLocation
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourcePositionAccuracy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourcePositionAccuracy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceLocation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceLocation.all);
      Hr := m_Interface.get_PositionAccuracy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AngularVelocity
   (
      this : in out SpatialInteractionSourceLocation
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceLocation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceLocation.all);
      Hr := m_Interface.get_AngularVelocity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SourcePointerPose
   (
      this : in out SpatialInteractionSourceLocation
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerInteractionSourcePose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceLocation3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerInteractionSourcePose do
         m_Interface := QInterface (this.m_ISpatialInteractionSourceLocation.all);
         Hr := m_Interface.get_SourcePointerPose (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpatialPointerInteractionSourcePose := new Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose;
         Retval.m_ISpatialPointerInteractionSourcePose.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionSourceProperties

   procedure Initialize (this : in out SpatialInteractionSourceProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionSourceProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionSourceProperties, ISpatialInteractionSourceProperties_Ptr);
   begin
      if this.m_ISpatialInteractionSourceProperties /= null then
         if this.m_ISpatialInteractionSourceProperties.all /= null then
            RefCount := this.m_ISpatialInteractionSourceProperties.all.Release;
            Free (this.m_ISpatialInteractionSourceProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionSourceProperties

   function TryGetSourceLossMitigationDirection
   (
      this : in out SpatialInteractionSourceProperties;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_ISpatialInteractionSourceProperties.all.TryGetSourceLossMitigationDirection (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SourceLossRisk
   (
      this : in out SpatialInteractionSourceProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialInteractionSourceProperties.all.get_SourceLossRisk (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetLocation
   (
      this : in out SpatialInteractionSourceProperties;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceLocation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceLocation do
         Hr := this.m_ISpatialInteractionSourceProperties.all.TryGetLocation (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialInteractionSourceLocation := new Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation;
         Retval.m_ISpatialInteractionSourceLocation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialInteractionSourceState

   procedure Initialize (this : in out SpatialInteractionSourceState) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialInteractionSourceState) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialInteractionSourceState, ISpatialInteractionSourceState_Ptr);
   begin
      if this.m_ISpatialInteractionSourceState /= null then
         if this.m_ISpatialInteractionSourceState.all /= null then
            RefCount := this.m_ISpatialInteractionSourceState.all.Release;
            Free (this.m_ISpatialInteractionSourceState);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialInteractionSourceState

   function get_Source
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSource;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSource do
         Hr := this.m_ISpatialInteractionSourceState.all.get_Source (m_ComRetVal'Access);
         Retval.m_ISpatialInteractionSource := new Windows.UI.Input.Spatial.ISpatialInteractionSource;
         Retval.m_ISpatialInteractionSource.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSourceProperties;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceProperties do
         Hr := this.m_ISpatialInteractionSourceState.all.get_Properties (m_ComRetVal'Access);
         Retval.m_ISpatialInteractionSourceProperties := new Windows.UI.Input.Spatial.ISpatialInteractionSourceProperties;
         Retval.m_ISpatialInteractionSourceProperties.all := m_ComRetVal;
      end return;
   end;

   function get_IsPressed
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialInteractionSourceState.all.get_IsPressed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Windows.Perception.PerceptionTimestamp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.IPerceptionTimestamp;
   begin
      return RetVal : WinRt.Windows.Perception.PerceptionTimestamp do
         Hr := this.m_ISpatialInteractionSourceState.all.get_Timestamp (m_ComRetVal'Access);
         Retval.m_IPerceptionTimestamp := new Windows.Perception.IPerceptionTimestamp;
         Retval.m_IPerceptionTimestamp.all := m_ComRetVal;
      end return;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialInteractionSourceState;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialInteractionSourceState.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   function get_IsSelectPressed
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceState2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceState.all);
      Hr := m_Interface.get_IsSelectPressed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsMenuPressed
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceState2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceState.all);
      Hr := m_Interface.get_IsMenuPressed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsGrasped
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceState2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceState.all);
      Hr := m_Interface.get_IsGrasped (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectPressedValue
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceState2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialInteractionSourceState.all);
      Hr := m_Interface.get_SelectPressedValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ControllerProperties
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionControllerProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionControllerProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceState2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionControllerProperties do
         m_Interface := QInterface (this.m_ISpatialInteractionSourceState.all);
         Hr := m_Interface.get_ControllerProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpatialInteractionControllerProperties := new Windows.UI.Input.Spatial.ISpatialInteractionControllerProperties;
         Retval.m_ISpatialInteractionControllerProperties.all := m_ComRetVal;
      end return;
   end;

   function TryGetHandPose
   (
      this : in out SpatialInteractionSourceState
   )
   return WinRt.Windows.Perception.People.HandPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.IHandPose;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialInteractionSourceState3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialInteractionSourceState3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Perception.People.HandPose do
         m_Interface := QInterface (this.m_ISpatialInteractionSourceState.all);
         Hr := m_Interface.TryGetHandPose (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHandPose := new Windows.Perception.People.IHandPose;
         Retval.m_IHandPose.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialManipulationCanceledEventArgs

   procedure Initialize (this : in out SpatialManipulationCanceledEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialManipulationCanceledEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialManipulationCanceledEventArgs, ISpatialManipulationCanceledEventArgs_Ptr);
   begin
      if this.m_ISpatialManipulationCanceledEventArgs /= null then
         if this.m_ISpatialManipulationCanceledEventArgs.all /= null then
            RefCount := this.m_ISpatialManipulationCanceledEventArgs.all.Release;
            Free (this.m_ISpatialManipulationCanceledEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialManipulationCanceledEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialManipulationCanceledEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialManipulationCanceledEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialManipulationCompletedEventArgs

   procedure Initialize (this : in out SpatialManipulationCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialManipulationCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialManipulationCompletedEventArgs, ISpatialManipulationCompletedEventArgs_Ptr);
   begin
      if this.m_ISpatialManipulationCompletedEventArgs /= null then
         if this.m_ISpatialManipulationCompletedEventArgs.all /= null then
            RefCount := this.m_ISpatialManipulationCompletedEventArgs.all.Release;
            Free (this.m_ISpatialManipulationCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialManipulationCompletedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialManipulationCompletedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialManipulationCompletedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetCumulativeDelta
   (
      this : in out SpatialManipulationCompletedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialManipulationDelta'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialManipulationDelta;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialManipulationDelta do
         Hr := this.m_ISpatialManipulationCompletedEventArgs.all.TryGetCumulativeDelta (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialManipulationDelta := new Windows.UI.Input.Spatial.ISpatialManipulationDelta;
         Retval.m_ISpatialManipulationDelta.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialManipulationDelta

   procedure Initialize (this : in out SpatialManipulationDelta) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialManipulationDelta) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialManipulationDelta, ISpatialManipulationDelta_Ptr);
   begin
      if this.m_ISpatialManipulationDelta /= null then
         if this.m_ISpatialManipulationDelta.all /= null then
            RefCount := this.m_ISpatialManipulationDelta.all.Release;
            Free (this.m_ISpatialManipulationDelta);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialManipulationDelta

   function get_Translation
   (
      this : in out SpatialManipulationDelta
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialManipulationDelta.all.get_Translation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialManipulationStartedEventArgs

   procedure Initialize (this : in out SpatialManipulationStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialManipulationStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialManipulationStartedEventArgs, ISpatialManipulationStartedEventArgs_Ptr);
   begin
      if this.m_ISpatialManipulationStartedEventArgs /= null then
         if this.m_ISpatialManipulationStartedEventArgs.all /= null then
            RefCount := this.m_ISpatialManipulationStartedEventArgs.all.Release;
            Free (this.m_ISpatialManipulationStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialManipulationStartedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialManipulationStartedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialManipulationStartedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialManipulationStartedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialManipulationStartedEventArgs.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialManipulationUpdatedEventArgs

   procedure Initialize (this : in out SpatialManipulationUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialManipulationUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialManipulationUpdatedEventArgs, ISpatialManipulationUpdatedEventArgs_Ptr);
   begin
      if this.m_ISpatialManipulationUpdatedEventArgs /= null then
         if this.m_ISpatialManipulationUpdatedEventArgs.all /= null then
            RefCount := this.m_ISpatialManipulationUpdatedEventArgs.all.Release;
            Free (this.m_ISpatialManipulationUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialManipulationUpdatedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialManipulationUpdatedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialManipulationUpdatedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetCumulativeDelta
   (
      this : in out SpatialManipulationUpdatedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialManipulationDelta'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialManipulationDelta;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialManipulationDelta do
         Hr := this.m_ISpatialManipulationUpdatedEventArgs.all.TryGetCumulativeDelta (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialManipulationDelta := new Windows.UI.Input.Spatial.ISpatialManipulationDelta;
         Retval.m_ISpatialManipulationDelta.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialNavigationCanceledEventArgs

   procedure Initialize (this : in out SpatialNavigationCanceledEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialNavigationCanceledEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialNavigationCanceledEventArgs, ISpatialNavigationCanceledEventArgs_Ptr);
   begin
      if this.m_ISpatialNavigationCanceledEventArgs /= null then
         if this.m_ISpatialNavigationCanceledEventArgs.all /= null then
            RefCount := this.m_ISpatialNavigationCanceledEventArgs.all.Release;
            Free (this.m_ISpatialNavigationCanceledEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialNavigationCanceledEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialNavigationCanceledEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialNavigationCanceledEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialNavigationCompletedEventArgs

   procedure Initialize (this : in out SpatialNavigationCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialNavigationCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialNavigationCompletedEventArgs, ISpatialNavigationCompletedEventArgs_Ptr);
   begin
      if this.m_ISpatialNavigationCompletedEventArgs /= null then
         if this.m_ISpatialNavigationCompletedEventArgs.all /= null then
            RefCount := this.m_ISpatialNavigationCompletedEventArgs.all.Release;
            Free (this.m_ISpatialNavigationCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialNavigationCompletedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialNavigationCompletedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialNavigationCompletedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NormalizedOffset
   (
      this : in out SpatialNavigationCompletedEventArgs
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialNavigationCompletedEventArgs.all.get_NormalizedOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialNavigationStartedEventArgs

   procedure Initialize (this : in out SpatialNavigationStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialNavigationStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialNavigationStartedEventArgs, ISpatialNavigationStartedEventArgs_Ptr);
   begin
      if this.m_ISpatialNavigationStartedEventArgs /= null then
         if this.m_ISpatialNavigationStartedEventArgs.all /= null then
            RefCount := this.m_ISpatialNavigationStartedEventArgs.all.Release;
            Free (this.m_ISpatialNavigationStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialNavigationStartedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialNavigationStartedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialNavigationStartedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialNavigationStartedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialNavigationStartedEventArgs.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   function get_IsNavigatingX
   (
      this : in out SpatialNavigationStartedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialNavigationStartedEventArgs.all.get_IsNavigatingX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsNavigatingY
   (
      this : in out SpatialNavigationStartedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialNavigationStartedEventArgs.all.get_IsNavigatingY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsNavigatingZ
   (
      this : in out SpatialNavigationStartedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialNavigationStartedEventArgs.all.get_IsNavigatingZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialNavigationUpdatedEventArgs

   procedure Initialize (this : in out SpatialNavigationUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialNavigationUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialNavigationUpdatedEventArgs, ISpatialNavigationUpdatedEventArgs_Ptr);
   begin
      if this.m_ISpatialNavigationUpdatedEventArgs /= null then
         if this.m_ISpatialNavigationUpdatedEventArgs.all /= null then
            RefCount := this.m_ISpatialNavigationUpdatedEventArgs.all.Release;
            Free (this.m_ISpatialNavigationUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialNavigationUpdatedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialNavigationUpdatedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialNavigationUpdatedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NormalizedOffset
   (
      this : in out SpatialNavigationUpdatedEventArgs
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialNavigationUpdatedEventArgs.all.get_NormalizedOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialPointerInteractionSourcePose

   procedure Initialize (this : in out SpatialPointerInteractionSourcePose) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialPointerInteractionSourcePose) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialPointerInteractionSourcePose, ISpatialPointerInteractionSourcePose_Ptr);
   begin
      if this.m_ISpatialPointerInteractionSourcePose /= null then
         if this.m_ISpatialPointerInteractionSourcePose.all /= null then
            RefCount := this.m_ISpatialPointerInteractionSourcePose.all.Release;
            Free (this.m_ISpatialPointerInteractionSourcePose);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialPointerInteractionSourcePose

   function get_Position
   (
      this : in out SpatialPointerInteractionSourcePose
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialPointerInteractionSourcePose.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ForwardDirection
   (
      this : in out SpatialPointerInteractionSourcePose
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialPointerInteractionSourcePose.all.get_ForwardDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpDirection
   (
      this : in out SpatialPointerInteractionSourcePose
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialPointerInteractionSourcePose.all.get_UpDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Orientation
   (
      this : in out SpatialPointerInteractionSourcePose
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialPointerInteractionSourcePose2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialPointerInteractionSourcePose.all);
      Hr := m_Interface.get_Orientation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PositionAccuracy
   (
      this : in out SpatialPointerInteractionSourcePose
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourcePositionAccuracy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourcePositionAccuracy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialPointerInteractionSourcePose2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialPointerInteractionSourcePose.all);
      Hr := m_Interface.get_PositionAccuracy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialPointerPose

   procedure Initialize (this : in out SpatialPointerPose) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialPointerPose) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialPointerPose, ISpatialPointerPose_Ptr);
   begin
      if this.m_ISpatialPointerPose /= null then
         if this.m_ISpatialPointerPose.all /= null then
            RefCount := this.m_ISpatialPointerPose.all.Release;
            Free (this.m_ISpatialPointerPose);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialPointerPose

   function TryGetAtTimestamp
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      timestamp : Windows.Perception.PerceptionTimestamp'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Input.Spatial.SpatialPointerPose");
      m_Factory        : access WinRt.Windows.UI.Input.Spatial.ISpatialPointerPoseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialPointerPoseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryGetAtTimestamp (coordinateSystem.m_ISpatialCoordinateSystem.all, timestamp.m_IPerceptionTimestamp.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
            Retval.m_ISpatialPointerPose.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialPointerPose

   function get_Timestamp
   (
      this : in out SpatialPointerPose
   )
   return WinRt.Windows.Perception.PerceptionTimestamp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.IPerceptionTimestamp;
   begin
      return RetVal : WinRt.Windows.Perception.PerceptionTimestamp do
         Hr := this.m_ISpatialPointerPose.all.get_Timestamp (m_ComRetVal'Access);
         Retval.m_IPerceptionTimestamp := new Windows.Perception.IPerceptionTimestamp;
         Retval.m_IPerceptionTimestamp.all := m_ComRetVal;
      end return;
   end;

   function get_Head
   (
      this : in out SpatialPointerPose
   )
   return WinRt.Windows.Perception.People.HeadPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.IHeadPose;
   begin
      return RetVal : WinRt.Windows.Perception.People.HeadPose do
         Hr := this.m_ISpatialPointerPose.all.get_Head (m_ComRetVal'Access);
         Retval.m_IHeadPose := new Windows.Perception.People.IHeadPose;
         Retval.m_IHeadPose.all := m_ComRetVal;
      end return;
   end;

   function TryGetInteractionSourcePose
   (
      this : in out SpatialPointerPose;
      source : Windows.UI.Input.Spatial.SpatialInteractionSource'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerInteractionSourcePose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose2, WinRt.Windows.UI.Input.Spatial.IID_ISpatialPointerPose2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerInteractionSourcePose do
         m_Interface := QInterface (this.m_ISpatialPointerPose.all);
         Hr := m_Interface.TryGetInteractionSourcePose (source.m_ISpatialInteractionSource.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpatialPointerInteractionSourcePose := new Windows.UI.Input.Spatial.ISpatialPointerInteractionSourcePose;
         Retval.m_ISpatialPointerInteractionSourcePose.all := m_ComRetVal;
      end return;
   end;

   function get_Eyes
   (
      this : in out SpatialPointerPose
   )
   return WinRt.Windows.Perception.People.EyesPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.IEyesPose;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialPointerPose3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Perception.People.EyesPose do
         m_Interface := QInterface (this.m_ISpatialPointerPose.all);
         Hr := m_Interface.get_Eyes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IEyesPose := new Windows.Perception.People.IEyesPose;
         Retval.m_IEyesPose.all := m_ComRetVal;
      end return;
   end;

   function get_IsHeadCapturedBySystem
   (
      this : in out SpatialPointerPose
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose_Interface, WinRt.Windows.UI.Input.Spatial.ISpatialPointerPose3, WinRt.Windows.UI.Input.Spatial.IID_ISpatialPointerPose3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialPointerPose.all);
      Hr := m_Interface.get_IsHeadCapturedBySystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialRecognitionEndedEventArgs

   procedure Initialize (this : in out SpatialRecognitionEndedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialRecognitionEndedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialRecognitionEndedEventArgs, ISpatialRecognitionEndedEventArgs_Ptr);
   begin
      if this.m_ISpatialRecognitionEndedEventArgs /= null then
         if this.m_ISpatialRecognitionEndedEventArgs.all /= null then
            RefCount := this.m_ISpatialRecognitionEndedEventArgs.all.Release;
            Free (this.m_ISpatialRecognitionEndedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialRecognitionEndedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialRecognitionEndedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialRecognitionEndedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialRecognitionStartedEventArgs

   procedure Initialize (this : in out SpatialRecognitionStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialRecognitionStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialRecognitionStartedEventArgs, ISpatialRecognitionStartedEventArgs_Ptr);
   begin
      if this.m_ISpatialRecognitionStartedEventArgs /= null then
         if this.m_ISpatialRecognitionStartedEventArgs.all /= null then
            RefCount := this.m_ISpatialRecognitionStartedEventArgs.all.Release;
            Free (this.m_ISpatialRecognitionStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialRecognitionStartedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialRecognitionStartedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialRecognitionStartedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialRecognitionStartedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialRecognitionStartedEventArgs.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   function IsGesturePossible
   (
      this : in out SpatialRecognitionStartedEventArgs;
      gesture : Windows.UI.Input.Spatial.SpatialGestureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialRecognitionStartedEventArgs.all.IsGesturePossible (gesture, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialTappedEventArgs

   procedure Initialize (this : in out SpatialTappedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialTappedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialTappedEventArgs, ISpatialTappedEventArgs_Ptr);
   begin
      if this.m_ISpatialTappedEventArgs /= null then
         if this.m_ISpatialTappedEventArgs.all /= null then
            RefCount := this.m_ISpatialTappedEventArgs.all.Release;
            Free (this.m_ISpatialTappedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialTappedEventArgs

   function get_InteractionSourceKind
   (
      this : in out SpatialTappedEventArgs
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.SpatialInteractionSourceKind;
   begin
      Hr := this.m_ISpatialTappedEventArgs.all.get_InteractionSourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPointerPose
   (
      this : in out SpatialTappedEventArgs;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialPointerPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialPointerPose;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialPointerPose do
         Hr := this.m_ISpatialTappedEventArgs.all.TryGetPointerPose (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialPointerPose := new Windows.UI.Input.Spatial.ISpatialPointerPose;
         Retval.m_ISpatialPointerPose.all := m_ComRetVal;
      end return;
   end;

   function get_TapCount
   (
      this : in out SpatialTappedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISpatialTappedEventArgs.all.get_TapCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

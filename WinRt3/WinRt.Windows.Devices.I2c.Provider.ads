--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Devices.I2c.Provider is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type II2cControllerProvider_Interface is interface and WinRt.IInspectable_Interface;
   type II2cControllerProvider is access II2cControllerProvider_Interface'Class;

   type II2cDeviceProvider_Interface is interface and WinRt.IInspectable_Interface;
   type II2cDeviceProvider is access II2cDeviceProvider_Interface'Class;

   type II2cProvider_Interface is interface and WinRt.IInspectable_Interface;
   type II2cProvider is access II2cProvider_Interface'Class;

   type IProviderI2cConnectionSettings_Interface is interface and WinRt.IInspectable_Interface;
   type IProviderI2cConnectionSettings is access IProviderI2cConnectionSettings_Interface'Class;
   type IProviderI2cConnectionSettings_Ptr is access all IProviderI2cConnectionSettings;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type ProviderI2cConnectionSettings is new Ada.Finalization.Limited_Controlled with
      record
         m_IProviderI2cConnectionSettings : access Windows.Devices.I2c.Provider.IProviderI2cConnectionSettings;
      end record;
   type ProviderI2cConnectionSettings_Ptr is access all ProviderI2cConnectionSettings;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type ProviderI2cBusSpeed is (
      StandardMode_e,
      FastMode_e
   );
   for ProviderI2cBusSpeed use (
      StandardMode_e => 0,
      FastMode_e => 1
   );
   type ProviderI2cBusSpeed_Ptr is access all ProviderI2cBusSpeed;

   type ProviderI2cSharingMode is (
      Exclusive_e,
      Shared_e
   );
   for ProviderI2cSharingMode use (
      Exclusive_e => 0,
      Shared_e => 1
   );
   type ProviderI2cSharingMode_Ptr is access all ProviderI2cSharingMode;

   type ProviderI2cTransferStatus is (
      FullTransfer_e,
      PartialTransfer_e,
      SlaveAddressNotAcknowledged_e
   );
   for ProviderI2cTransferStatus use (
      FullTransfer_e => 0,
      PartialTransfer_e => 1,
      SlaveAddressNotAcknowledged_e => 2
   );
   type ProviderI2cTransferStatus_Ptr is access all ProviderI2cTransferStatus;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type ProviderI2cTransferResult is record
      Status : Windows.Devices.I2c.Provider.ProviderI2cTransferStatus;
      BytesTransferred : WinRt.UInt32;
   end record with Convention => C_Pass_By_Copy;
   type ProviderI2cTransferResult_Ptr is access all ProviderI2cTransferResult;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type II2cControllerProvider is interface and WinRt.IInspectable;

      function GetDeviceProvider
      (
         this : access II2cControllerProvider_Interface;
         settings : Windows.Devices.I2c.Provider.IProviderI2cConnectionSettings;
         RetVal : access Windows.Devices.I2c.Provider.II2cDeviceProvider
      )
      return WinRt.Hresult is abstract;

      IID_II2cControllerProvider : aliased WinRt.IID := (1640151938, 17680, 16739, (168, 124, 78, 21, 169, 85, 137, 128 ));

   -----------------------------------------------------------------------------
   -- type II2cDeviceProvider is interface and WinRt.IInspectable;

      function get_DeviceId
      (
         this : access II2cDeviceProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function Write
      (
         this : access II2cDeviceProvider_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function WritePartial
      (
         this : access II2cDeviceProvider_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr;
         RetVal : access Windows.Devices.I2c.Provider.ProviderI2cTransferResult
      )
      return WinRt.Hresult is abstract;

      function Read
      (
         this : access II2cDeviceProvider_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function ReadPartial
      (
         this : access II2cDeviceProvider_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr;
         RetVal : access Windows.Devices.I2c.Provider.ProviderI2cTransferResult
      )
      return WinRt.Hresult is abstract;

      function WriteRead
      (
         this : access II2cDeviceProvider_Interface;
         writeBufferSize : WinRt.UInt32;
         writeBuffer : WinRt.Byte_Ptr;
         readBufferSize : WinRt.UInt32;
         readBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function WriteReadPartial
      (
         this : access II2cDeviceProvider_Interface;
         writeBufferSize : WinRt.UInt32;
         writeBuffer : WinRt.Byte_Ptr;
         readBufferSize : WinRt.UInt32;
         readBuffer : WinRt.Byte_Ptr;
         RetVal : access Windows.Devices.I2c.Provider.ProviderI2cTransferResult
      )
      return WinRt.Hresult is abstract;

      IID_II2cDeviceProvider : aliased WinRt.IID := (2905876052, 22504, 17726, (131, 41, 209, 228, 71, 209, 3, 169 ));

   -----------------------------------------------------------------------------
   -- type II2cProvider is interface and WinRt.IInspectable;

      function GetControllersAsync
      (
         this : access II2cProvider_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_II2cProvider : aliased WinRt.IID := (1863518270, 48994, 20450, (169, 90, 240, 137, 153, 102, 152, 24 ));

   -----------------------------------------------------------------------------
   -- type IProviderI2cConnectionSettings is interface and WinRt.IInspectable;

      function get_SlaveAddress
      (
         this : access IProviderI2cConnectionSettings_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_SlaveAddress
      (
         this : access IProviderI2cConnectionSettings_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_BusSpeed
      (
         this : access IProviderI2cConnectionSettings_Interface;
         RetVal : access Windows.Devices.I2c.Provider.ProviderI2cBusSpeed
      )
      return WinRt.Hresult is abstract;

      function put_BusSpeed
      (
         this : access IProviderI2cConnectionSettings_Interface;
         value : Windows.Devices.I2c.Provider.ProviderI2cBusSpeed
      )
      return WinRt.Hresult is abstract;

      function get_SharingMode
      (
         this : access IProviderI2cConnectionSettings_Interface;
         RetVal : access Windows.Devices.I2c.Provider.ProviderI2cSharingMode
      )
      return WinRt.Hresult is abstract;

      function put_SharingMode
      (
         this : access IProviderI2cConnectionSettings_Interface;
         value : Windows.Devices.I2c.Provider.ProviderI2cSharingMode
      )
      return WinRt.Hresult is abstract;

      IID_IProviderI2cConnectionSettings : aliased WinRt.IID := (3923463732, 58640, 17591, (128, 157, 242, 248, 91, 85, 83, 57 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProviderI2cConnectionSettings

   overriding procedure Initialize (this : in out ProviderI2cConnectionSettings);
   overriding procedure Finalize (this : in out ProviderI2cConnectionSettings);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProviderI2cConnectionSettings

   function get_SlaveAddress
   (
      this : in out ProviderI2cConnectionSettings
   )
   return WinRt.Int32;

   procedure put_SlaveAddress
   (
      this : in out ProviderI2cConnectionSettings;
      value : WinRt.Int32
   );

   function get_BusSpeed
   (
      this : in out ProviderI2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.Provider.ProviderI2cBusSpeed;

   procedure put_BusSpeed
   (
      this : in out ProviderI2cConnectionSettings;
      value : Windows.Devices.I2c.Provider.ProviderI2cBusSpeed
   );

   function get_SharingMode
   (
      this : in out ProviderI2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.Provider.ProviderI2cSharingMode;

   procedure put_SharingMode
   (
      this : in out ProviderI2cConnectionSettings;
      value : Windows.Devices.I2c.Provider.ProviderI2cSharingMode
   );

end;

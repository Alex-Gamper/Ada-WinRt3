--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Cryptography.Core;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Credentials is

   package IAsyncOperation_KeyCredentialOperationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.IKeyCredentialOperationResult);
   package AsyncOperationCompletedHandler_KeyCredentialOperationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.IKeyCredentialOperationResult);

   package IAsyncOperation_KeyCredentialAttestationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.IKeyCredentialAttestationResult);
   package AsyncOperationCompletedHandler_KeyCredentialAttestationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.IKeyCredentialAttestationResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_KeyCredentialRetrievalResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.IKeyCredentialRetrievalResult);
   package AsyncOperationCompletedHandler_KeyCredentialRetrievalResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.IKeyCredentialRetrievalResult);

   package IObservableMap_HString_IInspectable is new WinRt.Windows.Foundation.Collections.IObservableMap (WinRt.HString, WinRt.IInspectable);
   package IMap_HString_IInspectable is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.IInspectable);
   package IAsyncOperation_IRandomAccessStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStream);
   package AsyncOperationCompletedHandler_IRandomAccessStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStream);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyCredential

   procedure Initialize (this : in out KeyCredential) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeyCredential) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeyCredential, IKeyCredential_Ptr);
   begin
      if this.m_IKeyCredential /= null then
         if this.m_IKeyCredential.all /= null then
            RefCount := this.m_IKeyCredential.all.Release;
            Free (this.m_IKeyCredential);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyCredential

   function get_Name
   (
      this : in out KeyCredential
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IKeyCredential.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function RetrievePublicKey
   (
      this : in out KeyCredential
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IKeyCredential.all.RetrievePublicKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RetrievePublicKey
   (
      this : in out KeyCredential;
      blobType : Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IKeyCredential.all.RetrievePublicKey (blobType, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestSignAsync
   (
      this : in out KeyCredential;
      data : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Credentials.KeyCredentialOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_KeyCredentialOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_KeyCredentialOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Credentials.IKeyCredentialOperationResult;
      m_IID            : aliased WinRt.IID := (1702290867, 38197, 20694, (152, 246, 198, 125, 106, 172, 162, 197 )); -- Windows.Security.Credentials.KeyCredentialOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (968122522, 514, 22010, (128, 5, 111, 131, 112, 158, 32, 243 ));
      m_Handler        : AsyncOperationCompletedHandler_KeyCredentialOperationResult.Kind := new AsyncOperationCompletedHandler_KeyCredentialOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_KeyCredentialOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_KeyCredentialOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_KeyCredentialOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_KeyCredentialOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Credentials.KeyCredentialOperationResult do
         Hr := this.m_IKeyCredential.all.RequestSignAsync (data, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IKeyCredentialOperationResult := new Windows.Security.Credentials.IKeyCredentialOperationResult;
                  Retval.m_IKeyCredentialOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAttestationAsync
   (
      this : in out KeyCredential
   )
   return WinRt.Windows.Security.Credentials.KeyCredentialAttestationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_KeyCredentialAttestationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_KeyCredentialAttestationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Credentials.IKeyCredentialAttestationResult;
      m_IID            : aliased WinRt.IID := (3091016169, 62692, 23204, (146, 213, 178, 98, 203, 64, 198, 34 )); -- Windows.Security.Credentials.KeyCredentialAttestationResult;
      m_HandlerIID     : aliased WinRt.IID := (739696899, 63363, 24025, (165, 243, 51, 98, 188, 189, 170, 189 ));
      m_Handler        : AsyncOperationCompletedHandler_KeyCredentialAttestationResult.Kind := new AsyncOperationCompletedHandler_KeyCredentialAttestationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_KeyCredentialAttestationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_KeyCredentialAttestationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_KeyCredentialAttestationResult.Kind_Delegate, AsyncOperationCompletedHandler_KeyCredentialAttestationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Credentials.KeyCredentialAttestationResult do
         Hr := this.m_IKeyCredential.all.GetAttestationAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IKeyCredentialAttestationResult := new Windows.Security.Credentials.IKeyCredentialAttestationResult;
                  Retval.m_IKeyCredentialAttestationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyCredentialAttestationResult

   procedure Initialize (this : in out KeyCredentialAttestationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeyCredentialAttestationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeyCredentialAttestationResult, IKeyCredentialAttestationResult_Ptr);
   begin
      if this.m_IKeyCredentialAttestationResult /= null then
         if this.m_IKeyCredentialAttestationResult.all /= null then
            RefCount := this.m_IKeyCredentialAttestationResult.all.Release;
            Free (this.m_IKeyCredentialAttestationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyCredentialAttestationResult

   function get_CertificateChainBuffer
   (
      this : in out KeyCredentialAttestationResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IKeyCredentialAttestationResult.all.get_CertificateChainBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttestationBuffer
   (
      this : in out KeyCredentialAttestationResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IKeyCredentialAttestationResult.all.get_AttestationBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out KeyCredentialAttestationResult
   )
   return WinRt.Windows.Security.Credentials.KeyCredentialAttestationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.KeyCredentialAttestationStatus;
   begin
      Hr := this.m_IKeyCredentialAttestationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KeyCredentialManager is

      function IsSupportedAsync
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.KeyCredentialManager");
         m_Factory        : access WinRt.Windows.Security.Credentials.IKeyCredentialManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKeyCredentialManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsSupportedAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure RenewAttestationAsync is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.KeyCredentialManager");
         m_Factory        : access WinRt.Windows.Security.Credentials.IKeyCredentialManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKeyCredentialManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RenewAttestationAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RequestCreateAsync
      (
         name : WinRt.WString;
         option : Windows.Security.Credentials.KeyCredentialCreationOption
      )
      return WinRt.Windows.Security.Credentials.KeyCredentialRetrievalResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.KeyCredentialManager");
         m_Factory        : access WinRt.Windows.Security.Credentials.IKeyCredentialManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_name : WinRt.HString := To_HString (name);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_KeyCredentialRetrievalResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_KeyCredentialRetrievalResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IKeyCredentialRetrievalResult;
         m_IID            : aliased WinRt.IID := (2312154398, 48460, 21940, (129, 14, 189, 221, 76, 236, 122, 42 )); -- Windows.Security.Credentials.KeyCredentialRetrievalResult;
         m_HandlerIID     : aliased WinRt.IID := (65691825, 43124, 22734, (142, 142, 255, 244, 72, 182, 115, 62 ));
         m_Handler        : AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind := new AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_KeyCredentialRetrievalResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind_Delegate, AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.KeyCredentialRetrievalResult do
            Hr := RoGetActivationFactory (m_hString, IID_IKeyCredentialManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestCreateAsync (HStr_name, option, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IKeyCredentialRetrievalResult := new Windows.Security.Credentials.IKeyCredentialRetrievalResult;
                        Retval.m_IKeyCredentialRetrievalResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_name);
         end return;
      end;

      function OpenAsync
      (
         name : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.KeyCredentialRetrievalResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.KeyCredentialManager");
         m_Factory        : access WinRt.Windows.Security.Credentials.IKeyCredentialManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_name : WinRt.HString := To_HString (name);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_KeyCredentialRetrievalResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_KeyCredentialRetrievalResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IKeyCredentialRetrievalResult;
         m_IID            : aliased WinRt.IID := (2312154398, 48460, 21940, (129, 14, 189, 221, 76, 236, 122, 42 )); -- Windows.Security.Credentials.KeyCredentialRetrievalResult;
         m_HandlerIID     : aliased WinRt.IID := (65691825, 43124, 22734, (142, 142, 255, 244, 72, 182, 115, 62 ));
         m_Handler        : AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind := new AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_KeyCredentialRetrievalResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind_Delegate, AsyncOperationCompletedHandler_KeyCredentialRetrievalResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.KeyCredentialRetrievalResult do
            Hr := RoGetActivationFactory (m_hString, IID_IKeyCredentialManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.OpenAsync (HStr_name, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IKeyCredentialRetrievalResult := new Windows.Security.Credentials.IKeyCredentialRetrievalResult;
                        Retval.m_IKeyCredentialRetrievalResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_name);
         end return;
      end;

      procedure DeleteAsync
      (
         name : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.KeyCredentialManager");
         m_Factory        : access WinRt.Windows.Security.Credentials.IKeyCredentialManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_name : WinRt.HString := To_HString (name);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKeyCredentialManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeleteAsync (HStr_name, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end;

   end KeyCredentialManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyCredentialOperationResult

   procedure Initialize (this : in out KeyCredentialOperationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeyCredentialOperationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeyCredentialOperationResult, IKeyCredentialOperationResult_Ptr);
   begin
      if this.m_IKeyCredentialOperationResult /= null then
         if this.m_IKeyCredentialOperationResult.all /= null then
            RefCount := this.m_IKeyCredentialOperationResult.all.Release;
            Free (this.m_IKeyCredentialOperationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyCredentialOperationResult

   function get_Result
   (
      this : in out KeyCredentialOperationResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IKeyCredentialOperationResult.all.get_Result (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out KeyCredentialOperationResult
   )
   return WinRt.Windows.Security.Credentials.KeyCredentialStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.KeyCredentialStatus;
   begin
      Hr := this.m_IKeyCredentialOperationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyCredentialRetrievalResult

   procedure Initialize (this : in out KeyCredentialRetrievalResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeyCredentialRetrievalResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeyCredentialRetrievalResult, IKeyCredentialRetrievalResult_Ptr);
   begin
      if this.m_IKeyCredentialRetrievalResult /= null then
         if this.m_IKeyCredentialRetrievalResult.all /= null then
            RefCount := this.m_IKeyCredentialRetrievalResult.all.Release;
            Free (this.m_IKeyCredentialRetrievalResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyCredentialRetrievalResult

   function get_Credential
   (
      this : in out KeyCredentialRetrievalResult
   )
   return WinRt.Windows.Security.Credentials.KeyCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IKeyCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.KeyCredential do
         Hr := this.m_IKeyCredentialRetrievalResult.all.get_Credential (m_ComRetVal'Access);
         Retval.m_IKeyCredential := new Windows.Security.Credentials.IKeyCredential;
         Retval.m_IKeyCredential.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out KeyCredentialRetrievalResult
   )
   return WinRt.Windows.Security.Credentials.KeyCredentialStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.KeyCredentialStatus;
   begin
      Hr := this.m_IKeyCredentialRetrievalResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PasswordCredential

   procedure Initialize (this : in out PasswordCredential) is
   begin
      null;
   end;

   procedure Finalize (this : in out PasswordCredential) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPasswordCredential, IPasswordCredential_Ptr);
   begin
      if this.m_IPasswordCredential /= null then
         if this.m_IPasswordCredential.all /= null then
            RefCount := this.m_IPasswordCredential.all.Release;
            Free (this.m_IPasswordCredential);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PasswordCredential

   function Constructor return PasswordCredential is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.PasswordCredential");
      m_ComRetVal  : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : PasswordCredential do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
            Retval.m_IPasswordCredential.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      resource : WinRt.WString;
      userName : WinRt.WString;
      password : WinRt.WString
   )
   return PasswordCredential is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.PasswordCredential");
      m_Factory    : access ICredentialFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Credentials.IPasswordCredential;
      HStr_resource : WinRt.HString := To_HString (resource);
      HStr_userName : WinRt.HString := To_HString (userName);
      HStr_password : WinRt.HString := To_HString (password);
   begin
      return RetVal : PasswordCredential do
         Hr := RoGetActivationFactory (m_hString, IID_ICredentialFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePasswordCredential (HStr_resource, HStr_userName, HStr_password, m_ComRetVal'Access);
            Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
            Retval.m_IPasswordCredential.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_resource);
         Hr := WindowsDeleteString (HStr_userName);
         Hr := WindowsDeleteString (HStr_password);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PasswordCredential

   function get_Resource
   (
      this : in out PasswordCredential
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPasswordCredential.all.get_Resource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Resource
   (
      this : in out PasswordCredential;
      resource : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_resource : WinRt.HString := To_HString (resource);
   begin
      Hr := this.m_IPasswordCredential.all.put_Resource (HStr_resource);
      Hr := WindowsDeleteString (HStr_resource);
   end;

   function get_UserName
   (
      this : in out PasswordCredential
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPasswordCredential.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_UserName
   (
      this : in out PasswordCredential;
      userName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userName : WinRt.HString := To_HString (userName);
   begin
      Hr := this.m_IPasswordCredential.all.put_UserName (HStr_userName);
      Hr := WindowsDeleteString (HStr_userName);
   end;

   function get_Password
   (
      this : in out PasswordCredential
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPasswordCredential.all.get_Password (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Password
   (
      this : in out PasswordCredential;
      password : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_password : WinRt.HString := To_HString (password);
   begin
      Hr := this.m_IPasswordCredential.all.put_Password (HStr_password);
      Hr := WindowsDeleteString (HStr_password);
   end;

   procedure RetrievePassword
   (
      this : in out PasswordCredential
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPasswordCredential.all.RetrievePassword;
   end;

   function get_Properties
   (
      this : in out PasswordCredential
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IPasswordCredential.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PasswordCredentialPropertyStore

   procedure Initialize (this : in out PasswordCredentialPropertyStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out PasswordCredentialPropertyStore) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Foundation.Collections.IPropertySet;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.Collections.IPropertySet, WinRt.Windows.Foundation.Collections.IPropertySet_Ptr);
   begin
      if this.m_IPropertySet /= null then
         if this.m_IPropertySet.all /= null then
            RefCount := this.m_IPropertySet.all.Release;
            Free (this.m_IPropertySet);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PasswordCredentialPropertyStore

   function Constructor return PasswordCredentialPropertyStore is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.PasswordCredentialPropertyStore");
      m_ComRetVal  : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : PasswordCredentialPropertyStore do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
            Retval.m_IPropertySet.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PasswordCredentialPropertyStore

   -- Generic Interface Windows.Foundation.Collections.IObservableMap`2<System.String,System.Object>
   function add_MapChanged
   (
      this : in out PasswordCredentialPropertyStore;
      vhnd : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IObservableMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      m_GenericIID     : aliased WinRt.IID := (594193565, 64274, 23629, (164, 28, 158, 68, 95, 180, 215, 236 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IObservableMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.add_MapChanged (vhnd, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_MapChanged
   (
      this : in out PasswordCredentialPropertyStore;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IObservableMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (594193565, 64274, 23629, (164, 28, 158, 68, 95, 180, 215, 236 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IObservableMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.remove_MapChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.Object>
   function Lookup
   (
      this : in out PasswordCredentialPropertyStore;
      key : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out PasswordCredentialPropertyStore
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out PasswordCredentialPropertyStore;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out PasswordCredentialPropertyStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out PasswordCredentialPropertyStore;
      key : WinRt.WString;
      value : WinRt.IInspectable
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.Insert (HStr_key, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out PasswordCredentialPropertyStore;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out PasswordCredentialPropertyStore
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Collections.IPropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPropertySet.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PasswordVault

   procedure Initialize (this : in out PasswordVault) is
   begin
      null;
   end;

   procedure Finalize (this : in out PasswordVault) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPasswordVault, IPasswordVault_Ptr);
   begin
      if this.m_IPasswordVault /= null then
         if this.m_IPasswordVault.all /= null then
            RefCount := this.m_IPasswordVault.all.Release;
            Free (this.m_IPasswordVault);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PasswordVault

   function Constructor return PasswordVault is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.PasswordVault");
      m_ComRetVal  : aliased Windows.Security.Credentials.IPasswordVault;
   begin
      return RetVal : PasswordVault do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPasswordVault := new Windows.Security.Credentials.IPasswordVault;
            Retval.m_IPasswordVault.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PasswordVault

   procedure Add
   (
      this : in out PasswordVault;
      credential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPasswordVault.all.Add (credential.m_IPasswordCredential.all);
   end;

   procedure Remove
   (
      this : in out PasswordVault;
      credential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPasswordVault.all.Remove (credential.m_IPasswordCredential.all);
   end;

   function Retrieve
   (
      this : in out PasswordVault;
      resource : WinRt.WString;
      userName : WinRt.WString
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      HStr_resource : WinRt.HString := To_HString (resource);
      HStr_userName : WinRt.HString := To_HString (userName);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IPasswordVault.all.Retrieve (HStr_resource, HStr_userName, m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_resource);
         Hr := WindowsDeleteString (HStr_userName);
      end return;
   end;

   function FindAllByResource
   (
      this : in out PasswordVault;
      resource : WinRt.WString
   )
   return IVectorView_IPasswordCredential.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPasswordCredential.Kind;
      HStr_resource : WinRt.HString := To_HString (resource);
   begin
      Hr := this.m_IPasswordVault.all.FindAllByResource (HStr_resource, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_resource);
      m_GenericRetVal := QInterface_IVectorView_IPasswordCredential (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function FindAllByUserName
   (
      this : in out PasswordVault;
      userName : WinRt.WString
   )
   return IVectorView_IPasswordCredential.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPasswordCredential.Kind;
      HStr_userName : WinRt.HString := To_HString (userName);
   begin
      Hr := this.m_IPasswordVault.all.FindAllByUserName (HStr_userName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userName);
      m_GenericRetVal := QInterface_IVectorView_IPasswordCredential (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function RetrieveAll
   (
      this : in out PasswordVault
   )
   return IVectorView_IPasswordCredential.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPasswordCredential.Kind;
   begin
      Hr := this.m_IPasswordVault.all.RetrieveAll (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPasswordCredential (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccount

   procedure Initialize (this : in out WebAccount) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccount) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccount, IWebAccount_Ptr);
   begin
      if this.m_IWebAccount /= null then
         if this.m_IWebAccount.all /= null then
            RefCount := this.m_IWebAccount.all.Release;
            Free (this.m_IWebAccount);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebAccount

   function Constructor
   (
      webAccountProvider_p : Windows.Security.Credentials.WebAccountProvider'Class;
      userName : WinRt.WString;
      state : Windows.Security.Credentials.WebAccountState
   )
   return WebAccount is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.WebAccount");
      m_Factory    : access IWebAccountFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Credentials.IWebAccount;
      HStr_userName : WinRt.HString := To_HString (userName);
   begin
      return RetVal : WebAccount do
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWebAccount (webAccountProvider_p.m_IWebAccountProvider.all, HStr_userName, state, m_ComRetVal'Access);
            Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
            Retval.m_IWebAccount.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_userName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccount

   function get_WebAccountProvider
   (
      this : in out WebAccount
   )
   return WinRt.Windows.Security.Credentials.WebAccountProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccountProvider;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
         Hr := this.m_IWebAccount.all.get_WebAccountProvider (m_ComRetVal'Access);
         Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
         Retval.m_IWebAccountProvider.all := m_ComRetVal;
      end return;
   end;

   function get_UserName
   (
      this : in out WebAccount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebAccount.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out WebAccount
   )
   return WinRt.Windows.Security.Credentials.WebAccountState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.WebAccountState;
   begin
      Hr := this.m_IWebAccount.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out WebAccount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccount2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccount_Interface, WinRt.Windows.Security.Credentials.IWebAccount2, WinRt.Windows.Security.Credentials.IID_IWebAccount2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccount.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out WebAccount
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccount2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccount_Interface, WinRt.Windows.Security.Credentials.IWebAccount2, WinRt.Windows.Security.Credentials.IID_IWebAccount2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccount.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetPictureAsync
   (
      this : in out WebAccount;
      desizedSize : Windows.Security.Credentials.WebAccountPictureSize
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccount2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccount_Interface, WinRt.Windows.Security.Credentials.IWebAccount2, WinRt.Windows.Security.Credentials.IID_IWebAccount2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccount.all);
      Hr := m_Interface.GetPictureAsync (desizedSize, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure SignOutAsync
   (
      this : in out WebAccount
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccount2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccount_Interface, WinRt.Windows.Security.Credentials.IWebAccount2, WinRt.Windows.Security.Credentials.IID_IWebAccount2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccount.all);
      Hr := m_Interface.SignOutAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SignOutAsync
   (
      this : in out WebAccount;
      clientId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccount2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_clientId : WinRt.HString := To_HString (clientId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccount_Interface, WinRt.Windows.Security.Credentials.IWebAccount2, WinRt.Windows.Security.Credentials.IID_IWebAccount2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccount.all);
      Hr := m_Interface.SignOutAsync (HStr_clientId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_clientId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProvider

   procedure Initialize (this : in out WebAccountProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProvider, IWebAccountProvider_Ptr);
   begin
      if this.m_IWebAccountProvider /= null then
         if this.m_IWebAccountProvider.all /= null then
            RefCount := this.m_IWebAccountProvider.all.Release;
            Free (this.m_IWebAccountProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebAccountProvider

   function Constructor
   (
      id : WinRt.WString;
      displayName : WinRt.WString;
      iconUri : Windows.Foundation.Uri'Class
   )
   return WebAccountProvider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.WebAccountProvider");
      m_Factory    : access IWebAccountProviderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Credentials.IWebAccountProvider;
      HStr_id : WinRt.HString := To_HString (id);
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      return RetVal : WebAccountProvider do
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountProviderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWebAccountProvider (HStr_id, HStr_displayName, iconUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
            Retval.m_IWebAccountProvider.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProvider

   function get_Id
   (
      this : in out WebAccountProvider
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebAccountProvider.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out WebAccountProvider
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebAccountProvider.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IconUri
   (
      this : in out WebAccountProvider
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebAccountProvider.all.get_IconUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_DisplayPurpose
   (
      this : in out WebAccountProvider
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccountProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccountProvider_Interface, WinRt.Windows.Security.Credentials.IWebAccountProvider2, WinRt.Windows.Security.Credentials.IID_IWebAccountProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProvider.all);
      Hr := m_Interface.get_DisplayPurpose (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Authority
   (
      this : in out WebAccountProvider
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccountProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccountProvider_Interface, WinRt.Windows.Security.Credentials.IWebAccountProvider2, WinRt.Windows.Security.Credentials.IID_IWebAccountProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProvider.all);
      Hr := m_Interface.get_Authority (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_User
   (
      this : in out WebAccountProvider
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccountProvider3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccountProvider_Interface, WinRt.Windows.Security.Credentials.IWebAccountProvider3, WinRt.Windows.Security.Credentials.IID_IWebAccountProvider3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IWebAccountProvider.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_IsSystemProvider
   (
      this : in out WebAccountProvider
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Credentials.IWebAccountProvider4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Credentials.IWebAccountProvider_Interface, WinRt.Windows.Security.Credentials.IWebAccountProvider4, WinRt.Windows.Security.Credentials.IID_IWebAccountProvider4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProvider.all);
      Hr := m_Interface.get_IsSystemProvider (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

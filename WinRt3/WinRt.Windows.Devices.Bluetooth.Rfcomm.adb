--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Bluetooth.Rfcomm is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_DeviceAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);
   package AsyncOperationCompletedHandler_DeviceAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);

   package IAsyncOperation_RfcommDeviceService is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService);
   package AsyncOperationCompletedHandler_RfcommDeviceService is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService);

   package IAsyncOperation_RfcommServiceProvider is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider);
   package AsyncOperationCompletedHandler_RfcommServiceProvider is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommDeviceService

   procedure Initialize (this : in out RfcommDeviceService) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommDeviceService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommDeviceService, IRfcommDeviceService_Ptr);
   begin
      if this.m_IRfcommDeviceService /= null then
         if this.m_IRfcommDeviceService.all /= null then
            RefCount := this.m_IRfcommDeviceService.all.Release;
            Free (this.m_IRfcommDeviceService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RfcommDeviceService

   function GetDeviceSelectorForBluetoothDevice
   (
      bluetoothDevice : Windows.Devices.Bluetooth.BluetoothDevice'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRfcommDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDevice (bluetoothDevice.m_IBluetoothDevice.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorForBluetoothDevice
   (
      bluetoothDevice : Windows.Devices.Bluetooth.BluetoothDevice'Class;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRfcommDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDevice (bluetoothDevice.m_IBluetoothDevice.all, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorForBluetoothDeviceAndServiceId
   (
      bluetoothDevice : Windows.Devices.Bluetooth.BluetoothDevice'Class;
      serviceId : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRfcommDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDeviceAndServiceId (bluetoothDevice.m_IBluetoothDevice.all, serviceId.m_IRfcommServiceId.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorForBluetoothDeviceAndServiceId
   (
      bluetoothDevice : Windows.Devices.Bluetooth.BluetoothDevice'Class;
      serviceId : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRfcommDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDeviceAndServiceId (bluetoothDevice.m_IBluetoothDevice.all, serviceId.m_IRfcommServiceId.all, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RfcommDeviceService.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RfcommDeviceService.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService;
      m_IID            : aliased WinRt.IID := (234187735, 51446, 23602, (150, 68, 170, 11, 207, 40, 215, 140 )); -- Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService;
      m_HandlerIID     : aliased WinRt.IID := (1551312152, 17455, 22765, (128, 203, 83, 141, 52, 184, 130, 149 ));
      m_Handler        : AsyncOperationCompletedHandler_RfcommDeviceService.Kind := new AsyncOperationCompletedHandler_RfcommDeviceService.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RfcommDeviceService.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RfcommDeviceService.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RfcommDeviceService.Kind_Delegate, AsyncOperationCompletedHandler_RfcommDeviceService.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommDeviceServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IRfcommDeviceService := new Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService;
                     Retval.m_IRfcommDeviceService.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector
   (
      serviceId : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRfcommDeviceServiceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (serviceId.m_IRfcommServiceId.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommDeviceService

   function get_ConnectionHostName
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IRfcommDeviceService.all.get_ConnectionHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_ConnectionServiceName
   (
      this : in out RfcommDeviceService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRfcommDeviceService.all.get_ConnectionServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceId
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := this.m_IRfcommDeviceService.all.get_ServiceId (m_ComRetVal'Access);
         Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
         Retval.m_IRfcommServiceId.all := m_ComRetVal;
      end return;
   end;

   function get_ProtectionLevel
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Networking.Sockets.SocketProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketProtectionLevel;
   begin
      Hr := this.m_IRfcommDeviceService.all.get_ProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxProtectionLevel
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Networking.Sockets.SocketProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketProtectionLevel;
   begin
      Hr := this.m_IRfcommDeviceService.all.get_MaxProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetSdpRawAttributesAsync
   (
      this : in out RfcommDeviceService
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3566226925, 48157, 22835, (174, 207, 228, 44, 93, 70, 91, 255 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2462246096, 31781, 22891, (145, 53, 16, 209, 71, 46, 105, 104 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRfcommDeviceService.all.GetSdpRawAttributesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetSdpRawAttributesAsync
   (
      this : in out RfcommDeviceService;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3566226925, 48157, 22835, (174, 207, 228, 44, 93, 70, 91, 255 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2462246096, 31781, 22891, (145, 53, 16, 209, 71, 46, 105, 104 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRfcommDeviceService.all.GetSdpRawAttributesAsync (cacheMode, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Device
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothDevice;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2, WinRt.Windows.Devices.Bluetooth.Rfcomm.IID_IRfcommDeviceService2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDevice do
         m_Interface := QInterface (this.m_IRfcommDeviceService.all);
         Hr := m_Interface.get_Device (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBluetoothDevice := new Windows.Devices.Bluetooth.IBluetoothDevice;
         Retval.m_IBluetoothDevice.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out RfcommDeviceService
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRfcommDeviceService.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_DeviceAccessInformation
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3, WinRt.Windows.Devices.Bluetooth.Rfcomm.IID_IRfcommDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         m_Interface := QInterface (this.m_IRfcommDeviceService.all);
         Hr := m_Interface.get_DeviceAccessInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
         Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
      end return;
   end;

   function RequestAccessAsync
   (
      this : in out RfcommDeviceService
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.DeviceAccessStatus;
      m_IID            : aliased WinRt.IID := (3221996274, 43000, 24383, (128, 209, 40, 8, 239, 107, 202, 16 )); -- Windows.Devices.Enumeration.DeviceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (3994373507, 32859, 21480, (132, 105, 144, 113, 80, 54, 208, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceAccessStatus.Kind := new AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_DeviceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3, WinRt.Windows.Devices.Bluetooth.Rfcomm.IID_IRfcommDeviceService3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRfcommDeviceService.all);
      Hr := m_Interface.RequestAccessAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommDeviceServicesResult

   procedure Initialize (this : in out RfcommDeviceServicesResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommDeviceServicesResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommDeviceServicesResult, IRfcommDeviceServicesResult_Ptr);
   begin
      if this.m_IRfcommDeviceServicesResult /= null then
         if this.m_IRfcommDeviceServicesResult.all /= null then
            RefCount := this.m_IRfcommDeviceServicesResult.all.Release;
            Free (this.m_IRfcommDeviceServicesResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommDeviceServicesResult

   function get_Error
   (
      this : in out RfcommDeviceServicesResult
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IRfcommDeviceServicesResult.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Services
   (
      this : in out RfcommDeviceServicesResult
   )
   return IVectorView_IRfcommDeviceService.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IRfcommDeviceService.Kind;
   begin
      Hr := this.m_IRfcommDeviceServicesResult.all.get_Services (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IRfcommDeviceService (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommServiceId

   procedure Initialize (this : in out RfcommServiceId) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommServiceId) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommServiceId, IRfcommServiceId_Ptr);
   begin
      if this.m_IRfcommServiceId /= null then
         if this.m_IRfcommServiceId.all /= null then
            RefCount := this.m_IRfcommServiceId.all.Release;
            Free (this.m_IRfcommServiceId);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RfcommServiceId

   function FromUuid
   (
      uuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromUuid (uuid, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromShortId
   (
      shortId : WinRt.UInt32
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromShortId (shortId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SerialPort
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SerialPort (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ObexObjectPush
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ObexObjectPush (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ObexFileTransfer
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ObexFileTransfer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PhoneBookAccessPce
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneBookAccessPce (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PhoneBookAccessPse
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneBookAccessPse (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GenericFileTransfer
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GenericFileTransfer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
            Retval.m_IRfcommServiceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommServiceId

   function get_Uuid
   (
      this : in out RfcommServiceId
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IRfcommServiceId.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function AsShortId
   (
      this : in out RfcommServiceId
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IRfcommServiceId.all.AsShortId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function AsString
   (
      this : in out RfcommServiceId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRfcommServiceId.all.AsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommServiceProvider

   procedure Initialize (this : in out RfcommServiceProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommServiceProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommServiceProvider, IRfcommServiceProvider_Ptr);
   begin
      if this.m_IRfcommServiceProvider /= null then
         if this.m_IRfcommServiceProvider.all /= null then
            RefCount := this.m_IRfcommServiceProvider.all.Release;
            Free (this.m_IRfcommServiceProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RfcommServiceProvider

   function CreateAsync
   (
      serviceId : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RfcommServiceProvider.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RfcommServiceProvider.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider;
      m_IID            : aliased WinRt.IID := (4275324968, 57906, 21837, (133, 209, 47, 4, 209, 50, 46, 105 )); -- Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider;
      m_HandlerIID     : aliased WinRt.IID := (1147830096, 36654, 20976, (174, 187, 27, 195, 209, 146, 144, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_RfcommServiceProvider.Kind := new AsyncOperationCompletedHandler_RfcommServiceProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RfcommServiceProvider.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RfcommServiceProvider.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RfcommServiceProvider.Kind_Delegate, AsyncOperationCompletedHandler_RfcommServiceProvider.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider do
         Hr := RoGetActivationFactory (m_hString, IID_IRfcommServiceProviderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (serviceId.m_IRfcommServiceId.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IRfcommServiceProvider := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider;
                     Retval.m_IRfcommServiceProvider.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommServiceProvider

   function get_ServiceId
   (
      this : in out RfcommServiceProvider
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := this.m_IRfcommServiceProvider.all.get_ServiceId (m_ComRetVal'Access);
         Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
         Retval.m_IRfcommServiceId.all := m_ComRetVal;
      end return;
   end;

   function get_SdpRawAttributes
   (
      this : in out RfcommServiceProvider
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IRfcommServiceProvider.all.get_SdpRawAttributes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StartAdvertising
   (
      this : in out RfcommServiceProvider;
      listener : Windows.Networking.Sockets.StreamSocketListener'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommServiceProvider.all.StartAdvertising (listener.m_IStreamSocketListener.all);
   end;

   procedure StopAdvertising
   (
      this : in out RfcommServiceProvider
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommServiceProvider.all.StopAdvertising;
   end;

   procedure StartAdvertising
   (
      this : in out RfcommServiceProvider;
      listener : Windows.Networking.Sockets.StreamSocketListener'Class;
      radioDiscoverable : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider_Interface, WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2, WinRt.Windows.Devices.Bluetooth.Rfcomm.IID_IRfcommServiceProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRfcommServiceProvider.all);
      Hr := m_Interface.StartAdvertising (listener.m_IStreamSocketListener.all, radioDiscoverable);
      m_RefCount := m_Interface.Release;
   end;

end;

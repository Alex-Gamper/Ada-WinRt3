--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.System.Power;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Power is

   package IAsyncOperation_Battery is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Power.IBattery);
   package AsyncOperationCompletedHandler_Battery is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Power.IBattery);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Battery

   procedure Initialize (this : in out Battery) is
   begin
      null;
   end;

   procedure Finalize (this : in out Battery) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBattery, IBattery_Ptr);
   begin
      if this.m_IBattery /= null then
         if this.m_IBattery.all /= null then
            RefCount := this.m_IBattery.all.Release;
            Free (this.m_IBattery);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Battery

   function get_AggregateBattery
   return WinRt.Windows.Devices.Power.Battery is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Power.Battery");
      m_Factory        : access WinRt.Windows.Devices.Power.IBatteryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Power.IBattery;
   begin
      return RetVal : WinRt.Windows.Devices.Power.Battery do
         Hr := RoGetActivationFactory (m_hString, IID_IBatteryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AggregateBattery (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBattery := new Windows.Devices.Power.IBattery;
            Retval.m_IBattery.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Power.Battery is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Power.Battery");
      m_Factory        : access WinRt.Windows.Devices.Power.IBatteryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Battery.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Battery.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Power.IBattery;
      m_IID            : aliased WinRt.IID := (3668170070, 5417, 22226, (165, 248, 191, 182, 194, 42, 61, 254 )); -- Windows.Devices.Power.Battery;
      m_HandlerIID     : aliased WinRt.IID := (2549621013, 14370, 20603, (130, 230, 39, 119, 179, 54, 233, 142 ));
      m_Handler        : AsyncOperationCompletedHandler_Battery.Kind := new AsyncOperationCompletedHandler_Battery.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Battery.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Battery.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Battery.Kind_Delegate, AsyncOperationCompletedHandler_Battery.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Power.Battery do
         Hr := RoGetActivationFactory (m_hString, IID_IBatteryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBattery := new Windows.Devices.Power.IBattery;
                     Retval.m_IBattery.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Power.Battery");
      m_Factory        : access WinRt.Windows.Devices.Power.IBatteryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBatteryStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Battery

   function get_DeviceId
   (
      this : in out Battery
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBattery.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetReport
   (
      this : in out Battery
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Power.IBatteryReport;
   begin
      return RetVal : WinRt.Windows.Devices.Power.BatteryReport do
         Hr := this.m_IBattery.all.GetReport (m_ComRetVal'Access);
         Retval.m_IBatteryReport := new Windows.Devices.Power.IBatteryReport;
         Retval.m_IBatteryReport.all := m_ComRetVal;
      end return;
   end;

   function add_ReportUpdated
   (
      this : in out Battery;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBattery.all.add_ReportUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReportUpdated
   (
      this : in out Battery;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBattery.all.remove_ReportUpdated (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BatteryReport

   procedure Initialize (this : in out BatteryReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out BatteryReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBatteryReport, IBatteryReport_Ptr);
   begin
      if this.m_IBatteryReport /= null then
         if this.m_IBatteryReport.all /= null then
            RefCount := this.m_IBatteryReport.all.Release;
            Free (this.m_IBatteryReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BatteryReport

   function get_ChargeRateInMilliwatts
   (
      this : in out BatteryReport
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IBatteryReport.all.get_ChargeRateInMilliwatts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DesignCapacityInMilliwattHours
   (
      this : in out BatteryReport
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IBatteryReport.all.get_DesignCapacityInMilliwattHours (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FullChargeCapacityInMilliwattHours
   (
      this : in out BatteryReport
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IBatteryReport.all.get_FullChargeCapacityInMilliwattHours (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RemainingCapacityInMilliwattHours
   (
      this : in out BatteryReport
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IBatteryReport.all.get_RemainingCapacityInMilliwattHours (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Status
   (
      this : in out BatteryReport
   )
   return WinRt.Windows.System.Power.BatteryStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Power.BatteryStatus;
   begin
      Hr := this.m_IBatteryReport.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

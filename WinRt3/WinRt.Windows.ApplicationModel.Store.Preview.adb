--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Authentication.Web.Core;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.UI.Xaml;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Store.Preview is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_IRandomAccessStreamReference is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);
   package AsyncOperationCompletedHandler_IRandomAccessStreamReference is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);

   package IAsyncOperation_StorePreviewPurchaseResults is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Store.Preview.IStorePreviewPurchaseResults);
   package AsyncOperationCompletedHandler_StorePreviewPurchaseResults is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Store.Preview.IStorePreviewPurchaseResults);

   package IAsyncOperation_WebTokenRequestResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult);
   package AsyncOperationCompletedHandler_WebTokenRequestResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeliveryOptimizationSettings

   procedure Initialize (this : in out DeliveryOptimizationSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeliveryOptimizationSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeliveryOptimizationSettings, IDeliveryOptimizationSettings_Ptr);
   begin
      if this.m_IDeliveryOptimizationSettings /= null then
         if this.m_IDeliveryOptimizationSettings.all /= null then
            RefCount := this.m_IDeliveryOptimizationSettings.all.Release;
            Free (this.m_IDeliveryOptimizationSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DeliveryOptimizationSettings

   function GetCurrentSettings
   return WinRt.Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings");
      m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IDeliveryOptimizationSettingsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.IDeliveryOptimizationSettings;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IDeliveryOptimizationSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetCurrentSettings (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeliveryOptimizationSettings := new Windows.ApplicationModel.Store.Preview.IDeliveryOptimizationSettings;
            Retval.m_IDeliveryOptimizationSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeliveryOptimizationSettings

   function get_DownloadMode
   (
      this : in out DeliveryOptimizationSettings
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.DeliveryOptimizationDownloadMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.DeliveryOptimizationDownloadMode;
   begin
      Hr := this.m_IDeliveryOptimizationSettings.all.get_DownloadMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DownloadModeSource
   (
      this : in out DeliveryOptimizationSettings
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.DeliveryOptimizationDownloadModeSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.DeliveryOptimizationDownloadModeSource;
   begin
      Hr := this.m_IDeliveryOptimizationSettings.all.get_DownloadModeSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StoreConfiguration is

      procedure SetSystemConfiguration
      (
         catalogHardwareManufacturerId : WinRt.WString;
         catalogStoreContentModifierId : WinRt.WString;
         systemConfigurationExpiration : Windows.Foundation.DateTime;
         catalogHardwareDescriptor : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_catalogHardwareManufacturerId : WinRt.HString := To_HString (catalogHardwareManufacturerId);
         HStr_catalogStoreContentModifierId : WinRt.HString := To_HString (catalogStoreContentModifierId);
         HStr_catalogHardwareDescriptor : WinRt.HString := To_HString (catalogHardwareDescriptor);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetSystemConfiguration (HStr_catalogHardwareManufacturerId, HStr_catalogStoreContentModifierId, systemConfigurationExpiration, HStr_catalogHardwareDescriptor);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_catalogHardwareManufacturerId);
         Hr := WindowsDeleteString (HStr_catalogStoreContentModifierId);
         Hr := WindowsDeleteString (HStr_catalogHardwareDescriptor);
      end;

      procedure SetMobileOperatorConfiguration
      (
         mobileOperatorId : WinRt.WString;
         appDownloadLimitInMegabytes : WinRt.UInt32;
         updateDownloadLimitInMegabytes : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_mobileOperatorId : WinRt.HString := To_HString (mobileOperatorId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetMobileOperatorConfiguration (HStr_mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_mobileOperatorId);
      end;

      procedure SetStoreWebAccountId
      (
         webAccountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetStoreWebAccountId (HStr_webAccountId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountId);
      end;

      function IsStoreWebAccountId
      (
         webAccountId : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsStoreWebAccountId (HStr_webAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountId);
         return m_ComRetVal;
      end;

      function get_HardwareManufacturerInfo
      return WinRt.Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.IStoreHardwareManufacturerInfo;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_HardwareManufacturerInfo (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStoreHardwareManufacturerInfo := new Windows.ApplicationModel.Store.Preview.IStoreHardwareManufacturerInfo;
               Retval.m_IStoreHardwareManufacturerInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function FilterUnsupportedSystemFeaturesAsync
      (
         systemFeatures : GenericObject
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (2976985443, 60955, 21136, (131, 22, 247, 235, 185, 213, 49, 99 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (2121877231, 63728, 21501, (150, 19, 114, 97, 203, 53, 218, 244 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FilterUnsupportedSystemFeaturesAsync (systemFeatures, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function HasStoreWebAccount
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.HasStoreWebAccount (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function HasStoreWebAccountForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.HasStoreWebAccountForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetStoreLogDataAsync
      (
         options : Windows.ApplicationModel.Store.Preview.StoreLogOptions
      )
      return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_IRandomAccessStreamReference.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamReference.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
         m_IID            : aliased WinRt.IID := (1696042320, 59042, 23830, (178, 68, 101, 233, 114, 94, 90, 12 )); -- Windows.Storage.Streams.IRandomAccessStreamReference;
         m_HandlerIID     : aliased WinRt.IID := (1619292809, 59915, 24054, (137, 223, 242, 198, 44, 186, 150, 147 ));
         m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStoreLogDataAsync (options, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure SetStoreWebAccountIdForUser
      (
         user : Windows.System.User'Class;
         webAccountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetStoreWebAccountIdForUser (user.m_IUser.all, HStr_webAccountId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountId);
      end;

      function IsStoreWebAccountIdForUser
      (
         user : Windows.System.User'Class;
         webAccountId : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsStoreWebAccountIdForUser (user.m_IUser.all, HStr_webAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountId);
         return m_ComRetVal;
      end;

      function GetPurchasePromptingPolicyForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetPurchasePromptingPolicyForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure SetPurchasePromptingPolicyForUser
      (
         user : Windows.System.User'Class;
         value : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetPurchasePromptingPolicyForUser (user.m_IUser.all, value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function IsPinToDesktopSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsPinToDesktopSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsPinToTaskbarSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsPinToTaskbarSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsPinToStartSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsPinToStartSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure PinToDesktop
      (
         appPackageFamilyName : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PinToDesktop (HStr_appPackageFamilyName);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      end;

      procedure PinToDesktopForUser
      (
         user : Windows.System.User'Class;
         appPackageFamilyName : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PinToDesktopForUser (user.m_IUser.all, HStr_appPackageFamilyName);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      end;

      function GetStoreWebAccountId
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStoreWebAccountId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetStoreWebAccountIdForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStoreWebAccountIdForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      procedure SetEnterpriseStoreWebAccountId
      (
         webAccountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetEnterpriseStoreWebAccountId (HStr_webAccountId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountId);
      end;

      procedure SetEnterpriseStoreWebAccountIdForUser
      (
         user : Windows.System.User'Class;
         webAccountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetEnterpriseStoreWebAccountIdForUser (user.m_IUser.all, HStr_webAccountId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountId);
      end;

      function GetEnterpriseStoreWebAccountId
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetEnterpriseStoreWebAccountId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetEnterpriseStoreWebAccountIdForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetEnterpriseStoreWebAccountIdForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function ShouldRestrictToEnterpriseStoreOnly
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShouldRestrictToEnterpriseStoreOnly (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function ShouldRestrictToEnterpriseStoreOnlyForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShouldRestrictToEnterpriseStoreOnlyForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PurchasePromptingPolicy
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PurchasePromptingPolicy (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_PurchasePromptingPolicy
      (
         value : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StoreConfiguration");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStoreConfigurationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_PurchasePromptingPolicy (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end StoreConfiguration;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreHardwareManufacturerInfo

   procedure Initialize (this : in out StoreHardwareManufacturerInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreHardwareManufacturerInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreHardwareManufacturerInfo, IStoreHardwareManufacturerInfo_Ptr);
   begin
      if this.m_IStoreHardwareManufacturerInfo /= null then
         if this.m_IStoreHardwareManufacturerInfo.all /= null then
            RefCount := this.m_IStoreHardwareManufacturerInfo.all.Release;
            Free (this.m_IStoreHardwareManufacturerInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreHardwareManufacturerInfo

   function get_HardwareManufacturerId
   (
      this : in out StoreHardwareManufacturerInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreHardwareManufacturerInfo.all.get_HardwareManufacturerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_StoreContentModifierId
   (
      this : in out StoreHardwareManufacturerInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreHardwareManufacturerInfo.all.get_StoreContentModifierId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelName
   (
      this : in out StoreHardwareManufacturerInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreHardwareManufacturerInfo.all.get_ModelName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ManufacturerName
   (
      this : in out StoreHardwareManufacturerInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreHardwareManufacturerInfo.all.get_ManufacturerName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StorePreview is

      function RequestProductPurchaseByProductIdAndSkuIdAsync
      (
         productId : WinRt.WString;
         skuId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StorePreview");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStorePreview_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_productId : WinRt.HString := To_HString (productId);
         HStr_skuId : WinRt.HString := To_HString (skuId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_StorePreviewPurchaseResults.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_StorePreviewPurchaseResults.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.IStorePreviewPurchaseResults;
         m_IID            : aliased WinRt.IID := (2594353024, 3531, 24257, (132, 53, 11, 104, 126, 211, 116, 165 )); -- Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults;
         m_HandlerIID     : aliased WinRt.IID := (2984908519, 33384, 20991, (129, 41, 220, 239, 212, 147, 243, 95 ));
         m_Handler        : AsyncOperationCompletedHandler_StorePreviewPurchaseResults.Kind := new AsyncOperationCompletedHandler_StorePreviewPurchaseResults.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePreviewPurchaseResults.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePreviewPurchaseResults.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePreviewPurchaseResults.Kind_Delegate, AsyncOperationCompletedHandler_StorePreviewPurchaseResults.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults do
            Hr := RoGetActivationFactory (m_hString, IID_IStorePreview'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestProductPurchaseByProductIdAndSkuIdAsync (HStr_productId, HStr_skuId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IStorePreviewPurchaseResults := new Windows.ApplicationModel.Store.Preview.IStorePreviewPurchaseResults;
                        Retval.m_IStorePreviewPurchaseResults.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_productId);
            Hr := WindowsDeleteString (HStr_skuId);
         end return;
      end;

      function LoadAddOnProductInfosAsync
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.StorePreview");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IStorePreview_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (1237543526, 14600, 20915, (132, 2, 235, 142, 148, 198, 136, 100 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (376792240, 50933, 20803, (182, 111, 166, 249, 202, 105, 231, 162 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStorePreview'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadAddOnProductInfosAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end StorePreview;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePreviewProductInfo

   procedure Initialize (this : in out StorePreviewProductInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePreviewProductInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePreviewProductInfo, IStorePreviewProductInfo_Ptr);
   begin
      if this.m_IStorePreviewProductInfo /= null then
         if this.m_IStorePreviewProductInfo.all /= null then
            RefCount := this.m_IStorePreviewProductInfo.all.Release;
            Free (this.m_IStorePreviewProductInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePreviewProductInfo

   function get_ProductId
   (
      this : in out StorePreviewProductInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewProductInfo.all.get_ProductId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProductType
   (
      this : in out StorePreviewProductInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewProductInfo.all.get_ProductType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Title
   (
      this : in out StorePreviewProductInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewProductInfo.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out StorePreviewProductInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewProductInfo.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SkuInfoList
   (
      this : in out StorePreviewProductInfo
   )
   return IVectorView_IStorePreviewSkuInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStorePreviewSkuInfo.Kind;
   begin
      Hr := this.m_IStorePreviewProductInfo.all.get_SkuInfoList (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStorePreviewSkuInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePreviewPurchaseResults

   procedure Initialize (this : in out StorePreviewPurchaseResults) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePreviewPurchaseResults) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePreviewPurchaseResults, IStorePreviewPurchaseResults_Ptr);
   begin
      if this.m_IStorePreviewPurchaseResults /= null then
         if this.m_IStorePreviewPurchaseResults.all /= null then
            RefCount := this.m_IStorePreviewPurchaseResults.all.Release;
            Free (this.m_IStorePreviewPurchaseResults);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePreviewPurchaseResults

   function get_ProductPurchaseStatus
   (
      this : in out StorePreviewPurchaseResults
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus;
   begin
      Hr := this.m_IStorePreviewPurchaseResults.all.get_ProductPurchaseStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePreviewSkuInfo

   procedure Initialize (this : in out StorePreviewSkuInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePreviewSkuInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePreviewSkuInfo, IStorePreviewSkuInfo_Ptr);
   begin
      if this.m_IStorePreviewSkuInfo /= null then
         if this.m_IStorePreviewSkuInfo.all /= null then
            RefCount := this.m_IStorePreviewSkuInfo.all.Release;
            Free (this.m_IStorePreviewSkuInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePreviewSkuInfo

   function get_ProductId
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_ProductId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SkuId
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_SkuId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SkuType
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_SkuType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Title
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CustomDeveloperData
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_CustomDeveloperData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CurrencyCode
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_CurrencyCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FormattedListPrice
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_FormattedListPrice (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ExtendedData
   (
      this : in out StorePreviewSkuInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePreviewSkuInfo.all.get_ExtendedData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebAuthenticationCoreManagerHelper is

      function RequestTokenWithUIElementHostingAsync
      (
         request : Windows.Security.Authentication.Web.Core.WebTokenRequest'Class;
         uiElement : Windows.UI.Xaml.UIElement'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IWebAuthenticationCoreManagerHelper_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebTokenRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebTokenRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
         m_IID            : aliased WinRt.IID := (176248914, 31812, 22132, (179, 210, 250, 46, 76, 30, 70, 201 )); -- Windows.Security.Authentication.Web.Core.WebTokenRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (3736423202, 28914, 21931, (151, 192, 108, 189, 197, 221, 182, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_WebTokenRequestResult.Kind := new AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebTokenRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_WebTokenRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerHelper'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestTokenWithUIElementHostingAsync (request.m_IWebTokenRequest.all, uiElement.m_IUIElement.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebTokenRequestResult := new Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
                        Retval.m_IWebTokenRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestTokenWithUIElementHostingAsync
      (
         request : Windows.Security.Authentication.Web.Core.WebTokenRequest'Class;
         webAccount : Windows.Security.Credentials.WebAccount'Class;
         uiElement : Windows.UI.Xaml.UIElement'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.Preview.IWebAuthenticationCoreManagerHelper_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebTokenRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebTokenRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
         m_IID            : aliased WinRt.IID := (176248914, 31812, 22132, (179, 210, 250, 46, 76, 30, 70, 201 )); -- Windows.Security.Authentication.Web.Core.WebTokenRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (3736423202, 28914, 21931, (151, 192, 108, 189, 197, 221, 182, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_WebTokenRequestResult.Kind := new AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebTokenRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_WebTokenRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerHelper'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestTokenWithUIElementHostingAsync (request.m_IWebTokenRequest.all, webAccount.m_IWebAccount.all, uiElement.m_IUIElement.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebTokenRequestResult := new Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
                        Retval.m_IWebTokenRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end WebAuthenticationCoreManagerHelper;

end;

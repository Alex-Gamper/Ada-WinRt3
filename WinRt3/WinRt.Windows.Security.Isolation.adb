--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Isolation is

   package IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentStartProcessResult);
   package AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentStartProcessResult);

   package IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderResult);
   package AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderResult);

   package IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentLaunchFileResult);
   package AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentLaunchFileResult);

   package IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentPostMessageResult);
   package AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentPostMessageResult);

   package IAsyncOperation_IsolatedWindowsEnvironmentCreateResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentCreateResult, GenericObject);
   package AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentCreateResult, GenericObject);

   -----------------------------------------------------------------------------
   -- Delegate HostMessageReceivedCallback

   function Invoke
   (
      this : access HostMessageReceivedCallback_Delegate;
      receiverId : WinRt.Guid;
      message : GenericObject
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (receiverId, message);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironment

   procedure Initialize (this : in out IsolatedWindowsEnvironment) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironment, IIsolatedWindowsEnvironment_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironment /= null then
         if this.m_IIsolatedWindowsEnvironment.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironment.all.Release;
            Free (this.m_IIsolatedWindowsEnvironment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for IsolatedWindowsEnvironment

   function CreateAsync
   (
      options : Windows.Security.Isolation.IsolatedWindowsEnvironmentOptions'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironment");
      m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentFactory_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentCreateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentCreateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentCreateResult;
      m_IID            : aliased WinRt.IID := (3744642228, 17672, 22858, (131, 11, 180, 108, 237, 42, 74, 224 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateResult;
      m_HandlerIID     : aliased WinRt.IID := (1817075896, 60819, 24080, (150, 197, 250, 250, 219, 104, 255, 49 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentCreateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateResult do
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (options.m_IIsolatedWindowsEnvironmentOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IIsolatedWindowsEnvironmentCreateResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentCreateResult;
                     Retval.m_IIsolatedWindowsEnvironmentCreateResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAsync
   (
      options : Windows.Security.Isolation.IsolatedWindowsEnvironmentOptions'Class;
      telemetryParameters : Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironment");
      m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentFactory_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentCreateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentCreateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentCreateResult;
      m_IID            : aliased WinRt.IID := (3744642228, 17672, 22858, (131, 11, 180, 108, 237, 42, 74, 224 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateResult;
      m_HandlerIID     : aliased WinRt.IID := (1817075896, 60819, 24080, (150, 197, 250, 250, 219, 104, 255, 49 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentCreateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentCreateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateResult do
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (options.m_IIsolatedWindowsEnvironmentOptions.all, telemetryParameters.m_IIsolatedWindowsEnvironmentTelemetryParameters.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IIsolatedWindowsEnvironmentCreateResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentCreateResult;
                     Retval.m_IIsolatedWindowsEnvironmentCreateResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetById
   (
      environmentId : WinRt.WString
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironment is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironment");
      m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentFactory_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironment;
      HStr_environmentId : WinRt.HString := To_HString (environmentId);
   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironment do
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetById (HStr_environmentId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IIsolatedWindowsEnvironment := new Windows.Security.Isolation.IIsolatedWindowsEnvironment;
            Retval.m_IIsolatedWindowsEnvironment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_environmentId);
      end return;
   end;

   function FindByOwnerId
   (
      environmentOwnerId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironment");
      m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentFactory_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_environmentOwnerId : WinRt.HString := To_HString (environmentOwnerId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentFactory'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindByOwnerId (HStr_environmentOwnerId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_environmentOwnerId);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironment

   function get_Id
   (
      this : in out IsolatedWindowsEnvironment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IIsolatedWindowsEnvironment.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function StartProcessSilentlyAsync
   (
      this : in out IsolatedWindowsEnvironment;
      hostExePath : WinRt.WString;
      arguments : WinRt.WString;
      activator : Windows.Security.Isolation.IsolatedWindowsEnvironmentActivator
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_hostExePath : WinRt.HString := To_HString (hostExePath);
      HStr_arguments : WinRt.HString := To_HString (arguments);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentStartProcessResult;
      m_IID            : aliased WinRt.IID := (2093728671, 11178, 22343, (169, 136, 255, 163, 143, 20, 164, 70 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessResult;
      m_HandlerIID     : aliased WinRt.IID := (109545084, 24127, 21435, (145, 192, 204, 147, 25, 72, 213, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessResult do
         Hr := this.m_IIsolatedWindowsEnvironment.all.StartProcessSilentlyAsync (HStr_hostExePath, HStr_arguments, activator, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentStartProcessResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentStartProcessResult;
                  Retval.m_IIsolatedWindowsEnvironmentStartProcessResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_hostExePath);
         Hr := WindowsDeleteString (HStr_arguments);
      end return;
   end;

   function StartProcessSilentlyAsync
   (
      this : in out IsolatedWindowsEnvironment;
      hostExePath : WinRt.WString;
      arguments : WinRt.WString;
      activator : Windows.Security.Isolation.IsolatedWindowsEnvironmentActivator;
      telemetryParameters : Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_hostExePath : WinRt.HString := To_HString (hostExePath);
      HStr_arguments : WinRt.HString := To_HString (arguments);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentStartProcessResult;
      m_IID            : aliased WinRt.IID := (2093728671, 11178, 22343, (169, 136, 255, 163, 143, 20, 164, 70 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessResult;
      m_HandlerIID     : aliased WinRt.IID := (109545084, 24127, 21435, (145, 192, 204, 147, 25, 72, 213, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentStartProcessResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentStartProcessResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessResult do
         Hr := this.m_IIsolatedWindowsEnvironment.all.StartProcessSilentlyAsync (HStr_hostExePath, HStr_arguments, activator, telemetryParameters.m_IIsolatedWindowsEnvironmentTelemetryParameters.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentStartProcessResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentStartProcessResult;
                  Retval.m_IIsolatedWindowsEnvironmentStartProcessResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_hostExePath);
         Hr := WindowsDeleteString (HStr_arguments);
      end return;
   end;

   function ShareFolderAsync
   (
      this : in out IsolatedWindowsEnvironment;
      hostFolder : WinRt.WString;
      requestOptions : Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderRequestOptions'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_hostFolder : WinRt.HString := To_HString (hostFolder);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderResult;
      m_IID            : aliased WinRt.IID := (2302823917, 45594, 21933, (157, 74, 142, 83, 241, 84, 100, 162 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderResult;
      m_HandlerIID     : aliased WinRt.IID := (1432112074, 54107, 24212, (184, 229, 167, 227, 196, 75, 209, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderResult do
         Hr := this.m_IIsolatedWindowsEnvironment.all.ShareFolderAsync (HStr_hostFolder, requestOptions.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentShareFolderResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderResult;
                  Retval.m_IIsolatedWindowsEnvironmentShareFolderResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_hostFolder);
      end return;
   end;

   function ShareFolderAsync
   (
      this : in out IsolatedWindowsEnvironment;
      hostFolder : WinRt.WString;
      requestOptions : Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderRequestOptions'Class;
      telemetryParameters : Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_hostFolder : WinRt.HString := To_HString (hostFolder);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderResult;
      m_IID            : aliased WinRt.IID := (2302823917, 45594, 21933, (157, 74, 142, 83, 241, 84, 100, 162 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderResult;
      m_HandlerIID     : aliased WinRt.IID := (1432112074, 54107, 24212, (184, 229, 167, 227, 196, 75, 209, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentShareFolderResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentShareFolderResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderResult do
         Hr := this.m_IIsolatedWindowsEnvironment.all.ShareFolderAsync (HStr_hostFolder, requestOptions.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all, telemetryParameters.m_IIsolatedWindowsEnvironmentTelemetryParameters.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentShareFolderResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderResult;
                  Retval.m_IIsolatedWindowsEnvironmentShareFolderResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_hostFolder);
      end return;
   end;

   function LaunchFileWithUIAsync
   (
      this : in out IsolatedWindowsEnvironment;
      appExePath : WinRt.WString;
      argumentsTemplate : WinRt.WString;
      filePath : WinRt.WString
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appExePath : WinRt.HString := To_HString (appExePath);
      HStr_argumentsTemplate : WinRt.HString := To_HString (argumentsTemplate);
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentLaunchFileResult;
      m_IID            : aliased WinRt.IID := (2944999330, 16265, 24155, (167, 43, 223, 147, 107, 177, 173, 69 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileResult;
      m_HandlerIID     : aliased WinRt.IID := (2484004965, 35980, 23403, (136, 246, 160, 55, 31, 88, 179, 134 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileResult do
         Hr := this.m_IIsolatedWindowsEnvironment.all.LaunchFileWithUIAsync (HStr_appExePath, HStr_argumentsTemplate, HStr_filePath, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentLaunchFileResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentLaunchFileResult;
                  Retval.m_IIsolatedWindowsEnvironmentLaunchFileResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_appExePath);
         Hr := WindowsDeleteString (HStr_argumentsTemplate);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   function LaunchFileWithUIAsync
   (
      this : in out IsolatedWindowsEnvironment;
      appExePath : WinRt.WString;
      argumentsTemplate : WinRt.WString;
      filePath : WinRt.WString;
      telemetryParameters : Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appExePath : WinRt.HString := To_HString (appExePath);
      HStr_argumentsTemplate : WinRt.HString := To_HString (argumentsTemplate);
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentLaunchFileResult;
      m_IID            : aliased WinRt.IID := (2944999330, 16265, 24155, (167, 43, 223, 147, 107, 177, 173, 69 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileResult;
      m_HandlerIID     : aliased WinRt.IID := (2484004965, 35980, 23403, (136, 246, 160, 55, 31, 88, 179, 134 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentLaunchFileResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentLaunchFileResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileResult do
         Hr := this.m_IIsolatedWindowsEnvironment.all.LaunchFileWithUIAsync (HStr_appExePath, HStr_argumentsTemplate, HStr_filePath, telemetryParameters.m_IIsolatedWindowsEnvironmentTelemetryParameters.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentLaunchFileResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentLaunchFileResult;
                  Retval.m_IIsolatedWindowsEnvironmentLaunchFileResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_appExePath);
         Hr := WindowsDeleteString (HStr_argumentsTemplate);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   procedure TerminateAsync
   (
      this : in out IsolatedWindowsEnvironment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IIsolatedWindowsEnvironment.all.TerminateAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure TerminateAsync
   (
      this : in out IsolatedWindowsEnvironment;
      telemetryParameters : Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IIsolatedWindowsEnvironment.all.TerminateAsync (telemetryParameters.m_IIsolatedWindowsEnvironmentTelemetryParameters.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RegisterMessageReceiver
   (
      this : in out IsolatedWindowsEnvironment;
      receiverId : WinRt.Guid;
      messageReceivedCallback : Windows.Security.Isolation.MessageReceivedCallback
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironment.all.RegisterMessageReceiver (receiverId, messageReceivedCallback);
   end;

   procedure UnregisterMessageReceiver
   (
      this : in out IsolatedWindowsEnvironment;
      receiverId : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironment.all.UnregisterMessageReceiver (receiverId);
   end;

   function PostMessageToReceiverAsync
   (
      this : in out IsolatedWindowsEnvironment;
      receiverId : WinRt.Guid;
      message : GenericObject
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentPostMessageResult;
      m_IID            : aliased WinRt.IID := (1041661360, 31107, 21289, (131, 160, 4, 119, 118, 60, 196, 203 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageResult;
      m_HandlerIID     : aliased WinRt.IID := (882935011, 56997, 24155, (141, 134, 163, 21, 132, 231, 72, 147 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironment_Interface, WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironment2, WinRt.Windows.Security.Isolation.IID_IIsolatedWindowsEnvironment2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageResult do
         m_Interface := QInterface (this.m_IIsolatedWindowsEnvironment.all);
         Hr := m_Interface.PostMessageToReceiverAsync (receiverId, message, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentPostMessageResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentPostMessageResult;
                  Retval.m_IIsolatedWindowsEnvironmentPostMessageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PostMessageToReceiverAsync
   (
      this : in out IsolatedWindowsEnvironment;
      receiverId : WinRt.Guid;
      message : GenericObject;
      telemetryParameters : Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters'Class
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentPostMessageResult;
      m_IID            : aliased WinRt.IID := (1041661360, 31107, 21289, (131, 160, 4, 119, 118, 60, 196, 203 )); -- Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageResult;
      m_HandlerIID     : aliased WinRt.IID := (882935011, 56997, 24155, (141, 134, 163, 21, 132, 231, 72, 147 ));
      m_Handler        : AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind := new AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IsolatedWindowsEnvironmentPostMessageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind_Delegate, AsyncOperationCompletedHandler_IsolatedWindowsEnvironmentPostMessageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironment_Interface, WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironment2, WinRt.Windows.Security.Isolation.IID_IIsolatedWindowsEnvironment2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageResult do
         m_Interface := QInterface (this.m_IIsolatedWindowsEnvironment.all);
         Hr := m_Interface.PostMessageToReceiverAsync (receiverId, message, telemetryParameters.m_IIsolatedWindowsEnvironmentTelemetryParameters.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IIsolatedWindowsEnvironmentPostMessageResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentPostMessageResult;
                  Retval.m_IIsolatedWindowsEnvironmentPostMessageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentCreateResult

   procedure Initialize (this : in out IsolatedWindowsEnvironmentCreateResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentCreateResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentCreateResult, IIsolatedWindowsEnvironmentCreateResult_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentCreateResult /= null then
         if this.m_IIsolatedWindowsEnvironmentCreateResult.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentCreateResult.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentCreateResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentCreateResult

   function get_Status
   (
      this : in out IsolatedWindowsEnvironmentCreateResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentCreateStatus;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentCreateResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out IsolatedWindowsEnvironmentCreateResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentCreateResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Environment
   (
      this : in out IsolatedWindowsEnvironmentCreateResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironment;
   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironment do
         Hr := this.m_IIsolatedWindowsEnvironmentCreateResult.all.get_Environment (m_ComRetVal'Access);
         Retval.m_IIsolatedWindowsEnvironment := new Windows.Security.Isolation.IIsolatedWindowsEnvironment;
         Retval.m_IIsolatedWindowsEnvironment.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentFile

   procedure Initialize (this : in out IsolatedWindowsEnvironmentFile) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentFile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentFile, IIsolatedWindowsEnvironmentFile_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentFile /= null then
         if this.m_IIsolatedWindowsEnvironmentFile.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentFile.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentFile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentFile

   function get_Id
   (
      this : in out IsolatedWindowsEnvironmentFile
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentFile.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HostPath
   (
      this : in out IsolatedWindowsEnvironmentFile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentFile.all.get_HostPath (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out IsolatedWindowsEnvironmentFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentFile.all.Close;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body IsolatedWindowsEnvironmentHost is

      function get_IsReady
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentHost");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentHostStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentHostStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsReady (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HostErrors
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentHost");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentHostStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentHostStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HostErrors (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end IsolatedWindowsEnvironmentHost;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentLaunchFileResult

   procedure Initialize (this : in out IsolatedWindowsEnvironmentLaunchFileResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentLaunchFileResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentLaunchFileResult, IIsolatedWindowsEnvironmentLaunchFileResult_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentLaunchFileResult /= null then
         if this.m_IIsolatedWindowsEnvironmentLaunchFileResult.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentLaunchFileResult.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentLaunchFileResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentLaunchFileResult

   function get_Status
   (
      this : in out IsolatedWindowsEnvironmentLaunchFileResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentLaunchFileStatus;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentLaunchFileResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out IsolatedWindowsEnvironmentLaunchFileResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentLaunchFileResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_File
   (
      this : in out IsolatedWindowsEnvironmentLaunchFileResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentFile;
   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentFile do
         Hr := this.m_IIsolatedWindowsEnvironmentLaunchFileResult.all.get_File (m_ComRetVal'Access);
         Retval.m_IIsolatedWindowsEnvironmentFile := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentFile;
         Retval.m_IIsolatedWindowsEnvironmentFile.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentOptions

   procedure Initialize (this : in out IsolatedWindowsEnvironmentOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentOptions, IIsolatedWindowsEnvironmentOptions_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentOptions /= null then
         if this.m_IIsolatedWindowsEnvironmentOptions.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentOptions.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for IsolatedWindowsEnvironmentOptions

   function Constructor return IsolatedWindowsEnvironmentOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentOptions");
      m_ComRetVal  : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentOptions;
   begin
      return RetVal : IsolatedWindowsEnvironmentOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IIsolatedWindowsEnvironmentOptions := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentOptions;
            Retval.m_IIsolatedWindowsEnvironmentOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentOptions

   function get_EnvironmentOwnerId
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_EnvironmentOwnerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_EnvironmentOwnerId
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_EnvironmentOwnerId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AllowedClipboardFormats
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentAllowedClipboardFormats is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentAllowedClipboardFormats;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_AllowedClipboardFormats (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowedClipboardFormats
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : Windows.Security.Isolation.IsolatedWindowsEnvironmentAllowedClipboardFormats
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_AllowedClipboardFormats (value);
   end;

   function get_ClipboardCopyPasteDirections
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentClipboardCopyPasteDirections is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentClipboardCopyPasteDirections;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_ClipboardCopyPasteDirections (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ClipboardCopyPasteDirections
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : Windows.Security.Isolation.IsolatedWindowsEnvironmentClipboardCopyPasteDirections
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_ClipboardCopyPasteDirections (value);
   end;

   function get_AvailablePrinters
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentAvailablePrinters is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentAvailablePrinters;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_AvailablePrinters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AvailablePrinters
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : Windows.Security.Isolation.IsolatedWindowsEnvironmentAvailablePrinters
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_AvailablePrinters (value);
   end;

   function get_SharedHostFolderPath
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_SharedHostFolderPath (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SharedFolderNameInEnvironment
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_SharedFolderNameInEnvironment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ShareHostFolderForUntrustedItems
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      SharedHostFolderPath : WinRt.WString;
      ShareFolderNameInEnvironment : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_SharedHostFolderPath : WinRt.HString := To_HString (SharedHostFolderPath);
      HStr_ShareFolderNameInEnvironment : WinRt.HString := To_HString (ShareFolderNameInEnvironment);
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.ShareHostFolderForUntrustedItems (HStr_SharedHostFolderPath, HStr_ShareFolderNameInEnvironment);
      Hr := WindowsDeleteString (HStr_SharedHostFolderPath);
      Hr := WindowsDeleteString (HStr_ShareFolderNameInEnvironment);
   end;

   function get_PersistUserProfile
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_PersistUserProfile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PersistUserProfile
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_PersistUserProfile (value);
   end;

   function get_AllowGraphicsHardwareAcceleration
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_AllowGraphicsHardwareAcceleration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowGraphicsHardwareAcceleration
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_AllowGraphicsHardwareAcceleration (value);
   end;

   function get_AllowCameraAndMicrophoneAccess
   (
      this : in out IsolatedWindowsEnvironmentOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.get_AllowCameraAndMicrophoneAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowCameraAndMicrophoneAccess
   (
      this : in out IsolatedWindowsEnvironmentOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOptions.all.put_AllowCameraAndMicrophoneAccess (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body IsolatedWindowsEnvironmentOwnerRegistration is

      function Register
      (
         ownerName : WinRt.WString;
         ownerRegistrationData : Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistrationData'Class
      )
      return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistrationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistration");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentOwnerRegistrationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentOwnerRegistrationResult;
         HStr_ownerName : WinRt.HString := To_HString (ownerName);
      begin
         return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistrationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentOwnerRegistrationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.Register (HStr_ownerName, ownerRegistrationData.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentOwnerRegistrationResult;
               Retval.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_ownerName);
         end return;
      end;

      procedure Unregister
      (
         ownerName : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistration");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsEnvironmentOwnerRegistrationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_ownerName : WinRt.HString := To_HString (ownerName);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsEnvironmentOwnerRegistrationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Unregister (HStr_ownerName);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_ownerName);
      end;

   end IsolatedWindowsEnvironmentOwnerRegistration;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentOwnerRegistrationData

   procedure Initialize (this : in out IsolatedWindowsEnvironmentOwnerRegistrationData) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentOwnerRegistrationData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentOwnerRegistrationData, IIsolatedWindowsEnvironmentOwnerRegistrationData_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData /= null then
         if this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for IsolatedWindowsEnvironmentOwnerRegistrationData

   function Constructor return IsolatedWindowsEnvironmentOwnerRegistrationData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistrationData");
      m_ComRetVal  : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentOwnerRegistrationData;
   begin
      return RetVal : IsolatedWindowsEnvironmentOwnerRegistrationData do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IIsolatedWindowsEnvironmentOwnerRegistrationData := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentOwnerRegistrationData;
            Retval.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentOwnerRegistrationData

   function get_ShareableFolders
   (
      this : in out IsolatedWindowsEnvironmentOwnerRegistrationData
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all.get_ShareableFolders (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProcessesRunnableAsSystem
   (
      this : in out IsolatedWindowsEnvironmentOwnerRegistrationData
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all.get_ProcessesRunnableAsSystem (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProcessesRunnableAsUser
   (
      this : in out IsolatedWindowsEnvironmentOwnerRegistrationData
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all.get_ProcessesRunnableAsUser (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ActivationFileExtensions
   (
      this : in out IsolatedWindowsEnvironmentOwnerRegistrationData
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationData.all.get_ActivationFileExtensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentOwnerRegistrationResult

   procedure Initialize (this : in out IsolatedWindowsEnvironmentOwnerRegistrationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentOwnerRegistrationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentOwnerRegistrationResult, IIsolatedWindowsEnvironmentOwnerRegistrationResult_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult /= null then
         if this.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentOwnerRegistrationResult

   function get_Status
   (
      this : in out IsolatedWindowsEnvironmentOwnerRegistrationResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistrationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentOwnerRegistrationStatus;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out IsolatedWindowsEnvironmentOwnerRegistrationResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentOwnerRegistrationResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentPostMessageResult

   procedure Initialize (this : in out IsolatedWindowsEnvironmentPostMessageResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentPostMessageResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentPostMessageResult, IIsolatedWindowsEnvironmentPostMessageResult_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentPostMessageResult /= null then
         if this.m_IIsolatedWindowsEnvironmentPostMessageResult.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentPostMessageResult.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentPostMessageResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentPostMessageResult

   function get_Status
   (
      this : in out IsolatedWindowsEnvironmentPostMessageResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentPostMessageStatus;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentPostMessageResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out IsolatedWindowsEnvironmentPostMessageResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentPostMessageResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentProcess

   procedure Initialize (this : in out IsolatedWindowsEnvironmentProcess) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentProcess) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentProcess, IIsolatedWindowsEnvironmentProcess_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentProcess /= null then
         if this.m_IIsolatedWindowsEnvironmentProcess.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentProcess.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentProcess);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentProcess

   function get_State
   (
      this : in out IsolatedWindowsEnvironmentProcess
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentProcessState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentProcessState;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentProcess.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExitCode
   (
      this : in out IsolatedWindowsEnvironmentProcess
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentProcess.all.get_ExitCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure WaitForExit
   (
      this : in out IsolatedWindowsEnvironmentProcess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentProcess.all.WaitForExit;
   end;

   procedure WaitForExitWithTimeout
   (
      this : in out IsolatedWindowsEnvironmentProcess;
      timeoutMilliseconds : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentProcess.all.WaitForExitWithTimeout (timeoutMilliseconds);
   end;

   procedure WaitForExitAsync
   (
      this : in out IsolatedWindowsEnvironmentProcess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IIsolatedWindowsEnvironmentProcess.all.WaitForExitAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentShareFolderRequestOptions

   procedure Initialize (this : in out IsolatedWindowsEnvironmentShareFolderRequestOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentShareFolderRequestOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentShareFolderRequestOptions, IIsolatedWindowsEnvironmentShareFolderRequestOptions_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions /= null then
         if this.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for IsolatedWindowsEnvironmentShareFolderRequestOptions

   function Constructor return IsolatedWindowsEnvironmentShareFolderRequestOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderRequestOptions");
      m_ComRetVal  : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderRequestOptions;
   begin
      return RetVal : IsolatedWindowsEnvironmentShareFolderRequestOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentShareFolderRequestOptions;
            Retval.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentShareFolderRequestOptions

   function get_AllowWrite
   (
      this : in out IsolatedWindowsEnvironmentShareFolderRequestOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all.get_AllowWrite (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowWrite
   (
      this : in out IsolatedWindowsEnvironmentShareFolderRequestOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentShareFolderRequestOptions.all.put_AllowWrite (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentShareFolderResult

   procedure Initialize (this : in out IsolatedWindowsEnvironmentShareFolderResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentShareFolderResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentShareFolderResult, IIsolatedWindowsEnvironmentShareFolderResult_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentShareFolderResult /= null then
         if this.m_IIsolatedWindowsEnvironmentShareFolderResult.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentShareFolderResult.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentShareFolderResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentShareFolderResult

   function get_Status
   (
      this : in out IsolatedWindowsEnvironmentShareFolderResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentShareFolderStatus;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentShareFolderResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out IsolatedWindowsEnvironmentShareFolderResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentShareFolderResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentStartProcessResult

   procedure Initialize (this : in out IsolatedWindowsEnvironmentStartProcessResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentStartProcessResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentStartProcessResult, IIsolatedWindowsEnvironmentStartProcessResult_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentStartProcessResult /= null then
         if this.m_IIsolatedWindowsEnvironmentStartProcessResult.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentStartProcessResult.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentStartProcessResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentStartProcessResult

   function get_Status
   (
      this : in out IsolatedWindowsEnvironmentStartProcessResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IsolatedWindowsEnvironmentStartProcessStatus;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentStartProcessResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out IsolatedWindowsEnvironmentStartProcessResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentStartProcessResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Process
   (
      this : in out IsolatedWindowsEnvironmentStartProcessResult
   )
   return WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentProcess'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentProcess;
   begin
      return RetVal : WinRt.Windows.Security.Isolation.IsolatedWindowsEnvironmentProcess do
         Hr := this.m_IIsolatedWindowsEnvironmentStartProcessResult.all.get_Process (m_ComRetVal'Access);
         Retval.m_IIsolatedWindowsEnvironmentProcess := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentProcess;
         Retval.m_IIsolatedWindowsEnvironmentProcess.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsolatedWindowsEnvironmentTelemetryParameters

   procedure Initialize (this : in out IsolatedWindowsEnvironmentTelemetryParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsolatedWindowsEnvironmentTelemetryParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsolatedWindowsEnvironmentTelemetryParameters, IIsolatedWindowsEnvironmentTelemetryParameters_Ptr);
   begin
      if this.m_IIsolatedWindowsEnvironmentTelemetryParameters /= null then
         if this.m_IIsolatedWindowsEnvironmentTelemetryParameters.all /= null then
            RefCount := this.m_IIsolatedWindowsEnvironmentTelemetryParameters.all.Release;
            Free (this.m_IIsolatedWindowsEnvironmentTelemetryParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for IsolatedWindowsEnvironmentTelemetryParameters

   function Constructor return IsolatedWindowsEnvironmentTelemetryParameters is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsEnvironmentTelemetryParameters");
      m_ComRetVal  : aliased Windows.Security.Isolation.IIsolatedWindowsEnvironmentTelemetryParameters;
   begin
      return RetVal : IsolatedWindowsEnvironmentTelemetryParameters do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IIsolatedWindowsEnvironmentTelemetryParameters := new Windows.Security.Isolation.IIsolatedWindowsEnvironmentTelemetryParameters;
            Retval.m_IIsolatedWindowsEnvironmentTelemetryParameters.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsolatedWindowsEnvironmentTelemetryParameters

   function get_CorrelationId
   (
      this : in out IsolatedWindowsEnvironmentTelemetryParameters
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentTelemetryParameters.all.get_CorrelationId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CorrelationId
   (
      this : in out IsolatedWindowsEnvironmentTelemetryParameters;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IIsolatedWindowsEnvironmentTelemetryParameters.all.put_CorrelationId (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body IsolatedWindowsHostMessenger is

      procedure RegisterHostMessageReceiver
      (
         receiverId : WinRt.Guid;
         hostMessageReceivedCallback : Windows.Security.Isolation.HostMessageReceivedCallback
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsHostMessenger");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsHostMessengerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsHostMessengerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterHostMessageReceiver (receiverId, hostMessageReceivedCallback);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure UnregisterHostMessageReceiver
      (
         receiverId : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsHostMessenger");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsHostMessengerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsHostMessengerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UnregisterHostMessageReceiver (receiverId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure PostMessageToReceiver
      (
         receiverId : WinRt.Guid;
         message : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsHostMessenger");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsHostMessengerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsHostMessengerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PostMessageToReceiver (receiverId, message);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetFileId
      (
         filePath : WinRt.WString
      )
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Isolation.IsolatedWindowsHostMessenger");
         m_Factory        : access WinRt.Windows.Security.Isolation.IIsolatedWindowsHostMessengerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
         HStr_filePath : WinRt.HString := To_HString (filePath);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IIsolatedWindowsHostMessengerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFileId (HStr_filePath, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
         return m_ComRetVal;
      end;

   end IsolatedWindowsHostMessenger;

   -----------------------------------------------------------------------------
   -- Delegate MessageReceivedCallback

   function Invoke
   (
      this : access MessageReceivedCallback_Delegate;
      receiverId : WinRt.Guid;
      message : GenericObject
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (receiverId, message);
      return Hr;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.UI.Composition;
with WinRt.Windows.UI.WindowManagement;
with WinRt.Windows.UI.Xaml.Controls;
with WinRt.Windows.UI.Xaml.Controls.Primitives;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Hosting is

   package IAsyncOperation_DesignerAppView is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Xaml.Hosting.IDesignerAppView);
   package AsyncOperationCompletedHandler_DesignerAppView is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Xaml.Hosting.IDesignerAppView);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DesignerAppExitedEventArgs

   procedure Initialize (this : in out DesignerAppExitedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DesignerAppExitedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDesignerAppExitedEventArgs, IDesignerAppExitedEventArgs_Ptr);
   begin
      if this.m_IDesignerAppExitedEventArgs /= null then
         if this.m_IDesignerAppExitedEventArgs.all /= null then
            RefCount := this.m_IDesignerAppExitedEventArgs.all.Release;
            Free (this.m_IDesignerAppExitedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DesignerAppExitedEventArgs

   function get_ExitCode
   (
      this : in out DesignerAppExitedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IDesignerAppExitedEventArgs.all.get_ExitCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DesignerAppManager

   procedure Initialize (this : in out DesignerAppManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out DesignerAppManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDesignerAppManager, IDesignerAppManager_Ptr);
   begin
      if this.m_IDesignerAppManager /= null then
         if this.m_IDesignerAppManager.all /= null then
            RefCount := this.m_IDesignerAppManager.all.Release;
            Free (this.m_IDesignerAppManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DesignerAppManager

   function Constructor
   (
      appUserModelId : WinRt.WString
   )
   return DesignerAppManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.DesignerAppManager");
      m_Factory    : access IDesignerAppManagerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Hosting.IDesignerAppManager;
      HStr_appUserModelId : WinRt.HString := To_HString (appUserModelId);
   begin
      return RetVal : DesignerAppManager do
         Hr := RoGetActivationFactory (m_hString, IID_IDesignerAppManagerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_appUserModelId, m_ComRetVal'Access);
            Retval.m_IDesignerAppManager := new Windows.UI.Xaml.Hosting.IDesignerAppManager;
            Retval.m_IDesignerAppManager.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appUserModelId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DesignerAppManager

   function get_AppUserModelId
   (
      this : in out DesignerAppManager
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDesignerAppManager.all.get_AppUserModelId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_DesignerAppExited
   (
      this : in out DesignerAppManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDesignerAppManager.all.add_DesignerAppExited (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DesignerAppExited
   (
      this : in out DesignerAppManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDesignerAppManager.all.remove_DesignerAppExited (token);
   end;

   function CreateNewViewAsync
   (
      this : in out DesignerAppManager;
      initialViewState : Windows.UI.Xaml.Hosting.DesignerAppViewState;
      initialViewSize : Windows.Foundation.Size
   )
   return WinRt.Windows.UI.Xaml.Hosting.DesignerAppView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DesignerAppView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DesignerAppView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Xaml.Hosting.IDesignerAppView;
      m_IID            : aliased WinRt.IID := (1237763672, 7122, 22558, (163, 133, 110, 179, 253, 155, 254, 227 )); -- Windows.UI.Xaml.Hosting.DesignerAppView;
      m_HandlerIID     : aliased WinRt.IID := (2934646574, 43028, 22913, (162, 195, 98, 62, 34, 110, 74, 113 ));
      m_Handler        : AsyncOperationCompletedHandler_DesignerAppView.Kind := new AsyncOperationCompletedHandler_DesignerAppView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DesignerAppView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DesignerAppView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DesignerAppView.Kind_Delegate, AsyncOperationCompletedHandler_DesignerAppView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.UI.Xaml.Hosting.DesignerAppView do
         Hr := this.m_IDesignerAppManager.all.CreateNewViewAsync (initialViewState, initialViewSize, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDesignerAppView := new Windows.UI.Xaml.Hosting.IDesignerAppView;
                  Retval.m_IDesignerAppView.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure LoadObjectIntoAppAsync
   (
      this : in out DesignerAppManager;
      dllName : WinRt.WString;
      classId : WinRt.Guid;
      initializationData : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_dllName : WinRt.HString := To_HString (dllName);
      HStr_initializationData : WinRt.HString := To_HString (initializationData);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDesignerAppManager.all.LoadObjectIntoAppAsync (HStr_dllName, classId, HStr_initializationData, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_dllName);
      Hr := WindowsDeleteString (HStr_initializationData);
   end;

   procedure Close
   (
      this : in out DesignerAppManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Hosting.IDesignerAppManager_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDesignerAppManager.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DesignerAppView

   procedure Initialize (this : in out DesignerAppView) is
   begin
      null;
   end;

   procedure Finalize (this : in out DesignerAppView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDesignerAppView, IDesignerAppView_Ptr);
   begin
      if this.m_IDesignerAppView /= null then
         if this.m_IDesignerAppView.all /= null then
            RefCount := this.m_IDesignerAppView.all.Release;
            Free (this.m_IDesignerAppView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DesignerAppView

   function get_ApplicationViewId
   (
      this : in out DesignerAppView
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IDesignerAppView.all.get_ApplicationViewId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppUserModelId
   (
      this : in out DesignerAppView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDesignerAppView.all.get_AppUserModelId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ViewState
   (
      this : in out DesignerAppView
   )
   return WinRt.Windows.UI.Xaml.Hosting.DesignerAppViewState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Hosting.DesignerAppViewState;
   begin
      Hr := this.m_IDesignerAppView.all.get_ViewState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewSize
   (
      this : in out DesignerAppView
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IDesignerAppView.all.get_ViewSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure UpdateViewAsync
   (
      this : in out DesignerAppView;
      viewState : Windows.UI.Xaml.Hosting.DesignerAppViewState;
      viewSize : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDesignerAppView.all.UpdateViewAsync (viewState, viewSize, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out DesignerAppView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Hosting.IDesignerAppView_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDesignerAppView.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DesktopWindowXamlSource

   procedure Initialize (this : in out DesktopWindowXamlSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out DesktopWindowXamlSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDesktopWindowXamlSource, IDesktopWindowXamlSource_Ptr);
   begin
      if this.m_IDesktopWindowXamlSource /= null then
         if this.m_IDesktopWindowXamlSource.all /= null then
            RefCount := this.m_IDesktopWindowXamlSource.all.Release;
            Free (this.m_IDesktopWindowXamlSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DesktopWindowXamlSource

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return DesktopWindowXamlSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.DesktopWindowXamlSource");
      m_Factory    : access IDesktopWindowXamlSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Hosting.IDesktopWindowXamlSource;
   begin
      return RetVal : DesktopWindowXamlSource do
         Hr := RoGetActivationFactory (m_hString, IID_IDesktopWindowXamlSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IDesktopWindowXamlSource := new Windows.UI.Xaml.Hosting.IDesktopWindowXamlSource;
            Retval.m_IDesktopWindowXamlSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DesktopWindowXamlSource

   function get_Content
   (
      this : in out DesktopWindowXamlSource
   )
   return WinRt.Windows.UI.Xaml.UIElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := this.m_IDesktopWindowXamlSource.all.get_Content (m_ComRetVal'Access);
         Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
         Retval.m_IUIElement.all := m_ComRetVal;
      end return;
   end;

   procedure put_Content
   (
      this : in out DesktopWindowXamlSource;
      value : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDesktopWindowXamlSource.all.put_Content (value.m_IUIElement.all);
   end;

   function get_HasFocus
   (
      this : in out DesktopWindowXamlSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDesktopWindowXamlSource.all.get_HasFocus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_TakeFocusRequested
   (
      this : in out DesktopWindowXamlSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDesktopWindowXamlSource.all.add_TakeFocusRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TakeFocusRequested
   (
      this : in out DesktopWindowXamlSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDesktopWindowXamlSource.all.remove_TakeFocusRequested (token);
   end;

   function add_GotFocus
   (
      this : in out DesktopWindowXamlSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDesktopWindowXamlSource.all.add_GotFocus (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GotFocus
   (
      this : in out DesktopWindowXamlSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDesktopWindowXamlSource.all.remove_GotFocus (token);
   end;

   function NavigateFocus
   (
      this : in out DesktopWindowXamlSource;
      request : Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest'Class
   )
   return WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult do
         Hr := this.m_IDesktopWindowXamlSource.all.NavigateFocus (request.m_IXamlSourceFocusNavigationRequest.all, m_ComRetVal'Access);
         Retval.m_IXamlSourceFocusNavigationResult := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult;
         Retval.m_IXamlSourceFocusNavigationResult.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out DesktopWindowXamlSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Hosting.IDesktopWindowXamlSource_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDesktopWindowXamlSource.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DesktopWindowXamlSourceGotFocusEventArgs

   procedure Initialize (this : in out DesktopWindowXamlSourceGotFocusEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DesktopWindowXamlSourceGotFocusEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDesktopWindowXamlSourceGotFocusEventArgs, IDesktopWindowXamlSourceGotFocusEventArgs_Ptr);
   begin
      if this.m_IDesktopWindowXamlSourceGotFocusEventArgs /= null then
         if this.m_IDesktopWindowXamlSourceGotFocusEventArgs.all /= null then
            RefCount := this.m_IDesktopWindowXamlSourceGotFocusEventArgs.all.Release;
            Free (this.m_IDesktopWindowXamlSourceGotFocusEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DesktopWindowXamlSourceGotFocusEventArgs

   function get_Request
   (
      this : in out DesktopWindowXamlSourceGotFocusEventArgs
   )
   return WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest do
         Hr := this.m_IDesktopWindowXamlSourceGotFocusEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IXamlSourceFocusNavigationRequest := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
         Retval.m_IXamlSourceFocusNavigationRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DesktopWindowXamlSourceTakeFocusRequestedEventArgs

   procedure Initialize (this : in out DesktopWindowXamlSourceTakeFocusRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DesktopWindowXamlSourceTakeFocusRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDesktopWindowXamlSourceTakeFocusRequestedEventArgs, IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Ptr);
   begin
      if this.m_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs /= null then
         if this.m_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs.all /= null then
            RefCount := this.m_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs.all.Release;
            Free (this.m_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DesktopWindowXamlSourceTakeFocusRequestedEventArgs

   function get_Request
   (
      this : in out DesktopWindowXamlSourceTakeFocusRequestedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest do
         Hr := this.m_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IXamlSourceFocusNavigationRequest := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
         Retval.m_IXamlSourceFocusNavigationRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ElementCompositionPreview

   procedure Initialize (this : in out ElementCompositionPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out ElementCompositionPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IElementCompositionPreview, IElementCompositionPreview_Ptr);
   begin
      if this.m_IElementCompositionPreview /= null then
         if this.m_IElementCompositionPreview.all /= null then
            RefCount := this.m_IElementCompositionPreview.all.Release;
            Free (this.m_IElementCompositionPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ElementCompositionPreview

   procedure SetAppWindowContent
   (
      appWindow : Windows.UI.WindowManagement.AppWindow'Class;
      xamlContent : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetAppWindowContent (appWindow.m_IAppWindow.all, xamlContent.m_IUIElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetAppWindowContent
   (
      appWindow : Windows.UI.WindowManagement.AppWindow'Class
   )
   return WinRt.Windows.UI.Xaml.UIElement is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAppWindowContent (appWindow.m_IAppWindow.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
            Retval.m_IUIElement.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetImplicitShowAnimation
   (
      element : Windows.UI.Xaml.UIElement'Class;
      animation : Windows.UI.Composition.ICompositionAnimationBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetImplicitShowAnimation (element.m_IUIElement.all, animation);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetImplicitHideAnimation
   (
      element : Windows.UI.Xaml.UIElement'Class;
      animation : Windows.UI.Composition.ICompositionAnimationBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetImplicitHideAnimation (element.m_IUIElement.all, animation);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetIsTranslationEnabled
   (
      element : Windows.UI.Xaml.UIElement'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetIsTranslationEnabled (element.m_IUIElement.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetPointerPositionPropertySet
   (
      targetElement : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.UI.Composition.CompositionPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPropertySet;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPropertySet do
         Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetPointerPositionPropertySet (targetElement.m_IUIElement.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICompositionPropertySet := new Windows.UI.Composition.ICompositionPropertySet;
            Retval.m_ICompositionPropertySet.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetElementVisual
   (
      element : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.UI.Composition.Visual is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetElementVisual (element.m_IUIElement.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVisual := new Windows.UI.Composition.IVisual;
            Retval.m_IVisual.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetElementChildVisual
   (
      element : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.UI.Composition.Visual is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetElementChildVisual (element.m_IUIElement.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVisual := new Windows.UI.Composition.IVisual;
            Retval.m_IVisual.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetElementChildVisual
   (
      element : Windows.UI.Xaml.UIElement'Class;
      visual : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetElementChildVisual (element.m_IUIElement.all, visual.m_IVisual.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetScrollViewerManipulationPropertySet
   (
      scrollViewer : Windows.UI.Xaml.Controls.ScrollViewer'Class
   )
   return WinRt.Windows.UI.Composition.CompositionPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.ElementCompositionPreview");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IElementCompositionPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPropertySet;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPropertySet do
         Hr := RoGetActivationFactory (m_hString, IID_IElementCompositionPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetScrollViewerManipulationPropertySet (scrollViewer.m_IScrollViewer.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICompositionPropertySet := new Windows.UI.Composition.ICompositionPropertySet;
            Retval.m_ICompositionPropertySet.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ElementCompositionPreview

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WindowsXamlManager

   procedure Initialize (this : in out WindowsXamlManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out WindowsXamlManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWindowsXamlManager, IWindowsXamlManager_Ptr);
   begin
      if this.m_IWindowsXamlManager /= null then
         if this.m_IWindowsXamlManager.all /= null then
            RefCount := this.m_IWindowsXamlManager.all.Release;
            Free (this.m_IWindowsXamlManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WindowsXamlManager

   function InitializeForCurrentThread
   return WinRt.Windows.UI.Xaml.Hosting.WindowsXamlManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.WindowsXamlManager");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IWindowsXamlManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Hosting.IWindowsXamlManager;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Hosting.WindowsXamlManager do
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsXamlManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.InitializeForCurrentThread (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IWindowsXamlManager := new Windows.UI.Xaml.Hosting.IWindowsXamlManager;
            Retval.m_IWindowsXamlManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WindowsXamlManager

   procedure Close
   (
      this : in out WindowsXamlManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Hosting.IWindowsXamlManager_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWindowsXamlManager.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlSourceFocusNavigationRequest

   procedure Initialize (this : in out XamlSourceFocusNavigationRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlSourceFocusNavigationRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlSourceFocusNavigationRequest, IXamlSourceFocusNavigationRequest_Ptr);
   begin
      if this.m_IXamlSourceFocusNavigationRequest /= null then
         if this.m_IXamlSourceFocusNavigationRequest.all /= null then
            RefCount := this.m_IXamlSourceFocusNavigationRequest.all.Release;
            Free (this.m_IXamlSourceFocusNavigationRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XamlSourceFocusNavigationRequest

   function Constructor
   (
      reason : Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason
   )
   return XamlSourceFocusNavigationRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest");
      m_Factory    : access IXamlSourceFocusNavigationRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
   begin
      return RetVal : XamlSourceFocusNavigationRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlSourceFocusNavigationRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (reason, m_ComRetVal'Access);
            Retval.m_IXamlSourceFocusNavigationRequest := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
            Retval.m_IXamlSourceFocusNavigationRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      reason : Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason;
      hintRect : Windows.Foundation.Rect
   )
   return XamlSourceFocusNavigationRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest");
      m_Factory    : access IXamlSourceFocusNavigationRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
   begin
      return RetVal : XamlSourceFocusNavigationRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlSourceFocusNavigationRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithHintRect (reason, hintRect, m_ComRetVal'Access);
            Retval.m_IXamlSourceFocusNavigationRequest := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
            Retval.m_IXamlSourceFocusNavigationRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      reason : Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason;
      hintRect : Windows.Foundation.Rect;
      correlationId : WinRt.Guid
   )
   return XamlSourceFocusNavigationRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest");
      m_Factory    : access IXamlSourceFocusNavigationRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
   begin
      return RetVal : XamlSourceFocusNavigationRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlSourceFocusNavigationRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithHintRectAndCorrelationId (reason, hintRect, correlationId, m_ComRetVal'Access);
            Retval.m_IXamlSourceFocusNavigationRequest := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest;
            Retval.m_IXamlSourceFocusNavigationRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlSourceFocusNavigationRequest

   function get_Reason
   (
      this : in out XamlSourceFocusNavigationRequest
   )
   return WinRt.Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason;
   begin
      Hr := this.m_IXamlSourceFocusNavigationRequest.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HintRect
   (
      this : in out XamlSourceFocusNavigationRequest
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IXamlSourceFocusNavigationRequest.all.get_HintRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CorrelationId
   (
      this : in out XamlSourceFocusNavigationRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IXamlSourceFocusNavigationRequest.all.get_CorrelationId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlSourceFocusNavigationResult

   procedure Initialize (this : in out XamlSourceFocusNavigationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlSourceFocusNavigationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlSourceFocusNavigationResult, IXamlSourceFocusNavigationResult_Ptr);
   begin
      if this.m_IXamlSourceFocusNavigationResult /= null then
         if this.m_IXamlSourceFocusNavigationResult.all /= null then
            RefCount := this.m_IXamlSourceFocusNavigationResult.all.Release;
            Free (this.m_IXamlSourceFocusNavigationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XamlSourceFocusNavigationResult

   function Constructor
   (
      focusMoved : WinRt.Boolean
   )
   return XamlSourceFocusNavigationResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult");
      m_Factory    : access IXamlSourceFocusNavigationResultFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult;
   begin
      return RetVal : XamlSourceFocusNavigationResult do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlSourceFocusNavigationResultFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (focusMoved, m_ComRetVal'Access);
            Retval.m_IXamlSourceFocusNavigationResult := new Windows.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult;
            Retval.m_IXamlSourceFocusNavigationResult.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlSourceFocusNavigationResult

   function get_WasFocusMoved
   (
      this : in out XamlSourceFocusNavigationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXamlSourceFocusNavigationResult.all.get_WasFocusMoved (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlUIPresenter

   procedure Initialize (this : in out XamlUIPresenter) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlUIPresenter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlUIPresenter, IXamlUIPresenter_Ptr);
   begin
      if this.m_IXamlUIPresenter /= null then
         if this.m_IXamlUIPresenter.all /= null then
            RefCount := this.m_IXamlUIPresenter.all.Release;
            Free (this.m_IXamlUIPresenter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlUIPresenter

   function get_CompleteTimelinesAutomatically
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlUIPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IXamlUIPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlUIPresenterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_CompleteTimelinesAutomatically (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_CompleteTimelinesAutomatically
   (
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlUIPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IXamlUIPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlUIPresenterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_CompleteTimelinesAutomatically (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetHost
   (
      host : Windows.UI.Xaml.Hosting.IXamlUIPresenterHost
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlUIPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IXamlUIPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlUIPresenterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetHost (host);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure NotifyWindowSizeChanged is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlUIPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IXamlUIPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlUIPresenterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.NotifyWindowSizeChanged;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetFlyoutPlacementTargetInfo
   (
      placementTarget : Windows.UI.Xaml.FrameworkElement'Class;
      preferredPlacement : Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode;
      targetPreferredPlacement : Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode_Ptr;
      allowFallbacks : WinRt.Boolean_Ptr
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlUIPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IXamlUIPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlUIPresenterStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetFlyoutPlacementTargetInfo (placementTarget.m_IFrameworkElement.all, preferredPlacement, targetPreferredPlacement, allowFallbacks, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetFlyoutPlacement
   (
      placementTargetBounds : Windows.Foundation.Rect;
      controlSize : Windows.Foundation.Size;
      minControlSize : Windows.Foundation.Size;
      containerRect : Windows.Foundation.Rect;
      targetPreferredPlacement : Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode;
      allowFallbacks : WinRt.Boolean;
      chosenPlacement : Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode_Ptr
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Hosting.XamlUIPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Hosting.IXamlUIPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlUIPresenterStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetFlyoutPlacement (placementTargetBounds, controlSize, minControlSize, containerRect, targetPreferredPlacement, allowFallbacks, chosenPlacement, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlUIPresenter

   function get_RootElement
   (
      this : in out XamlUIPresenter
   )
   return WinRt.Windows.UI.Xaml.UIElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := this.m_IXamlUIPresenter.all.get_RootElement (m_ComRetVal'Access);
         Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
         Retval.m_IUIElement.all := m_ComRetVal;
      end return;
   end;

   procedure put_RootElement
   (
      this : in out XamlUIPresenter;
      value : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXamlUIPresenter.all.put_RootElement (value.m_IUIElement.all);
   end;

   function get_ThemeKey
   (
      this : in out XamlUIPresenter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXamlUIPresenter.all.get_ThemeKey (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ThemeKey
   (
      this : in out XamlUIPresenter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IXamlUIPresenter.all.put_ThemeKey (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ThemeResourcesXaml
   (
      this : in out XamlUIPresenter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXamlUIPresenter.all.get_ThemeResourcesXaml (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ThemeResourcesXaml
   (
      this : in out XamlUIPresenter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IXamlUIPresenter.all.put_ThemeResourcesXaml (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetSize
   (
      this : in out XamlUIPresenter;
      width : WinRt.Int32;
      height : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXamlUIPresenter.all.SetSize (width, height);
   end;

   procedure Render
   (
      this : in out XamlUIPresenter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXamlUIPresenter.all.Render;
   end;

   procedure Present
   (
      this : in out XamlUIPresenter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXamlUIPresenter.all.Present;
   end;

end;

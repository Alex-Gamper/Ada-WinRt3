--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Adc.Provider;
with WinRt.Windows.Devices.Gpio.Provider;
with WinRt.Windows.Devices.I2c.Provider;
with WinRt.Windows.Devices.Pwm.Provider;
with WinRt.Windows.Devices.Spi.Provider;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLevelDevicesAggregateProvider

   procedure Initialize (this : in out LowLevelDevicesAggregateProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLevelDevicesAggregateProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLevelDevicesAggregateProvider, ILowLevelDevicesAggregateProvider_Ptr);
   begin
      if this.m_ILowLevelDevicesAggregateProvider /= null then
         if this.m_ILowLevelDevicesAggregateProvider.all /= null then
            RefCount := this.m_ILowLevelDevicesAggregateProvider.all.Release;
            Free (this.m_ILowLevelDevicesAggregateProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LowLevelDevicesAggregateProvider

   function Constructor
   (
      adc : Windows.Devices.Adc.Provider.IAdcControllerProvider;
      pwm : Windows.Devices.Pwm.Provider.IPwmControllerProvider;
      gpio : Windows.Devices.Gpio.Provider.IGpioControllerProvider;
      i2c : Windows.Devices.I2c.Provider.II2cControllerProvider;
      spi : Windows.Devices.Spi.Provider.ISpiControllerProvider
   )
   return LowLevelDevicesAggregateProvider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.LowLevelDevicesAggregateProvider");
      m_Factory    : access ILowLevelDevicesAggregateProviderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.ILowLevelDevicesAggregateProvider;
   begin
      return RetVal : LowLevelDevicesAggregateProvider do
         Hr := RoGetActivationFactory (m_hString, IID_ILowLevelDevicesAggregateProviderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (adc, pwm, gpio, i2c, spi, m_ComRetVal'Access);
            Retval.m_ILowLevelDevicesAggregateProvider := new Windows.Devices.ILowLevelDevicesAggregateProvider;
            Retval.m_ILowLevelDevicesAggregateProvider.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLevelDevicesAggregateProvider

   function get_AdcControllerProvider
   (
      this : in out LowLevelDevicesAggregateProvider
   )
   return WinRt.Windows.Devices.Adc.Provider.IAdcControllerProvider is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Adc.Provider.IAdcControllerProvider;
   begin
      Hr := this.m_ILowLevelDevicesAggregateProvider.all.get_AdcControllerProvider (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PwmControllerProvider
   (
      this : in out LowLevelDevicesAggregateProvider
   )
   return WinRt.Windows.Devices.Pwm.Provider.IPwmControllerProvider is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Pwm.Provider.IPwmControllerProvider;
   begin
      Hr := this.m_ILowLevelDevicesAggregateProvider.all.get_PwmControllerProvider (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GpioControllerProvider
   (
      this : in out LowLevelDevicesAggregateProvider
   )
   return WinRt.Windows.Devices.Gpio.Provider.IGpioControllerProvider is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Gpio.Provider.IGpioControllerProvider;
   begin
      Hr := this.m_ILowLevelDevicesAggregateProvider.all.get_GpioControllerProvider (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_I2cControllerProvider
   (
      this : in out LowLevelDevicesAggregateProvider
   )
   return WinRt.Windows.Devices.I2c.Provider.II2cControllerProvider is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.Provider.II2cControllerProvider;
   begin
      Hr := this.m_ILowLevelDevicesAggregateProvider.all.get_I2cControllerProvider (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SpiControllerProvider
   (
      this : in out LowLevelDevicesAggregateProvider
   )
   return WinRt.Windows.Devices.Spi.Provider.ISpiControllerProvider is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Spi.Provider.ISpiControllerProvider;
   begin
      Hr := this.m_ILowLevelDevicesAggregateProvider.all.get_SpiControllerProvider (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLevelDevicesController

   procedure Initialize (this : in out LowLevelDevicesController) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLevelDevicesController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLevelDevicesController, ILowLevelDevicesController_Ptr);
   begin
      if this.m_ILowLevelDevicesController /= null then
         if this.m_ILowLevelDevicesController.all /= null then
            RefCount := this.m_ILowLevelDevicesController.all.Release;
            Free (this.m_ILowLevelDevicesController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LowLevelDevicesController

   function get_DefaultProvider
   return WinRt.Windows.Devices.ILowLevelDevicesAggregateProvider is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.LowLevelDevicesController");
      m_Factory        : access WinRt.Windows.Devices.ILowLevelDevicesControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.ILowLevelDevicesAggregateProvider;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILowLevelDevicesControllerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DefaultProvider (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_DefaultProvider
   (
      value : Windows.Devices.ILowLevelDevicesAggregateProvider
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.LowLevelDevicesController");
      m_Factory        : access WinRt.Windows.Devices.ILowLevelDevicesControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILowLevelDevicesControllerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_DefaultProvider (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLevelDevicesController

end;

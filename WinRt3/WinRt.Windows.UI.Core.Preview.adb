--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.UI.WindowManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Core.Preview is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreAppWindowPreview

   procedure Initialize (this : in out CoreAppWindowPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreAppWindowPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreAppWindowPreview, ICoreAppWindowPreview_Ptr);
   begin
      if this.m_ICoreAppWindowPreview /= null then
         if this.m_ICoreAppWindowPreview.all /= null then
            RefCount := this.m_ICoreAppWindowPreview.all.Release;
            Free (this.m_ICoreAppWindowPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CoreAppWindowPreview

   function GetIdFromWindow
   (
      window : Windows.UI.WindowManagement.AppWindow'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Core.Preview.CoreAppWindowPreview");
      m_Factory        : access WinRt.Windows.UI.Core.Preview.ICoreAppWindowPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICoreAppWindowPreviewStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetIdFromWindow (window.m_IAppWindow.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreAppWindowPreview

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemNavigationCloseRequestedPreviewEventArgs

   procedure Initialize (this : in out SystemNavigationCloseRequestedPreviewEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemNavigationCloseRequestedPreviewEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemNavigationCloseRequestedPreviewEventArgs, ISystemNavigationCloseRequestedPreviewEventArgs_Ptr);
   begin
      if this.m_ISystemNavigationCloseRequestedPreviewEventArgs /= null then
         if this.m_ISystemNavigationCloseRequestedPreviewEventArgs.all /= null then
            RefCount := this.m_ISystemNavigationCloseRequestedPreviewEventArgs.all.Release;
            Free (this.m_ISystemNavigationCloseRequestedPreviewEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemNavigationCloseRequestedPreviewEventArgs

   function get_Handled
   (
      this : in out SystemNavigationCloseRequestedPreviewEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemNavigationCloseRequestedPreviewEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out SystemNavigationCloseRequestedPreviewEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemNavigationCloseRequestedPreviewEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out SystemNavigationCloseRequestedPreviewEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ISystemNavigationCloseRequestedPreviewEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemNavigationManagerPreview

   procedure Initialize (this : in out SystemNavigationManagerPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemNavigationManagerPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemNavigationManagerPreview, ISystemNavigationManagerPreview_Ptr);
   begin
      if this.m_ISystemNavigationManagerPreview /= null then
         if this.m_ISystemNavigationManagerPreview.all /= null then
            RefCount := this.m_ISystemNavigationManagerPreview.all.Release;
            Free (this.m_ISystemNavigationManagerPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SystemNavigationManagerPreview

   function GetForCurrentView
   return WinRt.Windows.UI.Core.Preview.SystemNavigationManagerPreview is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Core.Preview.SystemNavigationManagerPreview");
      m_Factory        : access WinRt.Windows.UI.Core.Preview.ISystemNavigationManagerPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.Preview.ISystemNavigationManagerPreview;
   begin
      return RetVal : WinRt.Windows.UI.Core.Preview.SystemNavigationManagerPreview do
         Hr := RoGetActivationFactory (m_hString, IID_ISystemNavigationManagerPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISystemNavigationManagerPreview := new Windows.UI.Core.Preview.ISystemNavigationManagerPreview;
            Retval.m_ISystemNavigationManagerPreview.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemNavigationManagerPreview

   function add_CloseRequested
   (
      this : in out SystemNavigationManagerPreview;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISystemNavigationManagerPreview.all.add_CloseRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CloseRequested
   (
      this : in out SystemNavigationManagerPreview;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemNavigationManagerPreview.all.remove_CloseRequested (token);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with System;
with Ada.Strings.Wide_Unbounded;
--------------------------------------------------------------------------------
package WinRt is

   pragma PreElaborate;

   pragma PreElaborate;

   -----------------------------------------------------------------------------

   type Int8  is range -(2**(8  - Integer'(1))) .. +(2**(8  - Integer'(1))) -1;
   type Int16 is range -(2**(16 - Integer'(1))) .. +(2**(16 - Integer'(1))) -1;
   type Int32 is range -(2**(32 - Integer'(1))) .. +(2**(32 - Integer'(1))) -1;
   type Int64 is range -(2**(64 - Integer'(1))) .. +(2**(64 - Integer'(1))) -1;

   type Int8_Ptr  is access Int8;
   type Int16_Ptr is access Int16;
   type Int32_Ptr is access Int32;
   type Int64_Ptr is access Int64;
   type IntPtr is access Int64;

   type IntPtr_Ptr is access IntPtr;

   type Int8_Array  is array (Natural range <>) of aliased Int8;
   type Int16_Array is array (Natural range <>) of aliased Int16;
   type Int32_Array is array (Natural range <>) of aliased Int32;
   type Int64_Array is array (Natural range <>) of aliased Int64;
   type IntPtr_Array is array (Natural range <>) of aliased Int64;

   type UInt8  is mod 2 ** 8;
   type UInt16 is mod 2 ** 16;
   type UInt32 is mod 2 ** 32;
   type UInt64 is mod 2 ** 64;

   type UInt8_Ptr  is access UInt8;
   type UInt16_Ptr is access UInt16;
   type UInt32_Ptr is access UInt32;
   type UInt64_Ptr is access UInt64;
   type UIntPtr is access UInt64;

   type UIntPtr_Ptr is access UIntPtr;

   type UInt8_Array  is array (Natural range <>) of aliased UInt8;
   type UInt16_Array is array (Natural range <>) of aliased UInt16;
   type UInt32_Array is array (Natural range <>) of aliased UInt32;
   type UInt64_Array is array (Natural range <>) of aliased UInt64;
   type UIntPtr_Array is array (Natural range <>) of aliased UInt64;

   subtype SByte is Int8;
   subtype SByte_Ptr is Int8_Ptr;
   subtype SByte_Array is Int8_Array;

   subtype Byte is UInt8;
   subtype Byte_Ptr is UInt8_Ptr;
   subtype Byte_Array is UInt8_Array;

   subtype Wide_Char is Wide_character;
   type Wide_Char_Ptr is access all Wide_Char;
   type Wide_Char_Array is array (Natural range <>) of aliased Wide_Char;

   subtype WChar is Wide_Char;
   subtype WChar_Ptr is Wide_Char_Ptr;
   subtype WChar_Array is Wide_Char_Array;

   type Single is new Standard.Float;
   type Single_Ptr is access Single;
   type Single_Array is array (Natural range <>) of aliased Single;

   subtype FLOAT is Single;
   subtype FLOAT_Ptr is Single_Ptr;
   subtype FLOAT_Array is Single_Array;

   type Double is new Standard.Long_Float;
   type Double_Ptr is access Double;
   type Double_Array is array (Natural range <>) of aliased Double;

   type Boolean is new Standard.Boolean;
   type Boolean_Ptr is access Boolean;
   type Boolean_Array is array (Natural range <>) of aliased Boolean;

   subtype HString is System.Address;
   type HString_Ptr is access HString;
   type HString_Array is array (Natural range <>) of aliased HString;

   subtype WString is Ada.Strings.Wide_Unbounded.Unbounded_Wide_String;
   type WString_Ptr is access WString;
   type WString_Array is array (Natural range <>) of aliased WString;

   subtype Address is System.Address;
   type Address_Ptr is access all System.Address;
   type Address_Array is array (Natural range <>) of aliased System.Address;

   type Decimal is record
      Data1  : UInt32;
      Data2  : UInt32;
      Data3  : UInt32;
      Data4  : UInt32;
   end record;
   type Decimal_Ptr is access Decimal;
   type Decimal_Array is array (Natural range <>) of aliased Decimal;

   type GUID is record
      Data1  : UInt32;
      Data2  : UInt16;
      Data3  : UInt16;
      Data4  : UInt8_Array(0..7);
   end record;
   type GUID_Ptr is access all GUID;
   type GUID_Array is array (Natural range <>) of aliased GUID;

   subtype IID is GUID;
   type IID_Ptr is access all IID;
   type IID_Array is array (Natural range <>) of aliased IID;

   subtype CLSID is GUID;
   type CLSID_Ptr is access all CLSID;
   type CLSID_Array is array (Natural range <>) of aliased CLSID;

   type Void is null record;
   type Void_Ptr is access all Void;
   type Void_Array is array (Natural range <>) of aliased Void;

   subtype HResult is UInt32;
   subtype HResult_Ptr is UInt32_Ptr;

   -----------------------------------------------------------------------------

   type TrustLevel is
   (
      BaseTrust,
      PartialTrust,
      FullTrust
   );

   -----------------------------------------------------------------------------

   type IUnknown_Interface is interface;
   type IUnknown is access all IUnknown_Interface'Class;
   type IUnknown_Array is array (Natural range <>) of IUnknown;


      function QueryInterface
      (
         This       : access IUnknown_Interface;
         riid       : in WinRt.GUID_Ptr;
         ppvObject  : not null access IUnknown
      )
      return WinRt.HResult is abstract;

      function AddRef
      (
         This       : access IUnknown_Interface
      )
      return WinRt.UInt32 is abstract;

      function Release
      (
         This       : access IUnknown_Interface
      )
      return WinRt.UInt32 is abstract;

   -----------------------------------------------------------------------------

   type IMulticastDelegate_Interface;
   type IMulticastDelegate is access all IMulticastDelegate_Interface;
   type IMulticastDelegate_Array is array (Natural range <>) of IMulticastDelegate;

   type IMulticastDelegate_Interface (m_IID : GUID_Ptr) is new IUnknown_Interface with record
      m_RefCount    : aliased UInt32 := 0;
      m_Generic_IID : GUID_Ptr := m_IID;
   end record;

      function QueryInterface
      (
         This       : access IMulticastDelegate_Interface;
         riid       : in WinRt.GUID_Ptr;
         ppvObject  : not null access IUnknown
      )
      return WinRt.HResult;

      function AddRef
      (
         This       : access IMulticastDelegate_Interface
      )
      return WinRt.UInt32;

      function Release
      (
         This       : access IMulticastDelegate_Interface
      )
      return WinRt.UInt32;

   -----------------------------------------------------------------------------

   type IInspectable_Interface is interface and IUnknown_Interface;
   type IInspectable is access all IInspectable_Interface'Class;
   type IInspectable_Array is array (Natural range <>) of IInspectable;
   type IInspectable_Ptr is access all IInspectable;

      function GetIids
      (
         This       : access IInspectable_Interface;
         iidCount   : access WinRt.UInt32;
         iids       : in WinRt.IID_Ptr
      )
      return WinRt.HResult is abstract;

      function GetRuntimeClassName
      (
         This       : access IInspectable_Interface;
         className  : access WinRt.HString
      )
      return WinRt.HResult is abstract;

      function GetTrustLevel
      (
         This       : access IInspectable_Interface;
         trustLevel : access WinRt.TrustLevel
      )
      return WinRt.HResult is abstract;

   -----------------------------------------------------------------------------

   subtype Object_Interface is IInspectable_Interface;
   subtype Object is IInspectable;
   subtype Object_Array is IInspectable_Array;
   subtype Object_Ptr is IInspectable_Ptr;

   -----------------------------------------------------------------------------

   subtype GenericObject_Interface is IInspectable_Interface;
   subtype GenericObject is IInspectable;
   subtype GenericObject_Array is IInspectable_Array;
   subtype GenericObject_Ptr is IInspectable_Ptr;

   -----------------------------------------------------------------------------

   IID_IUnknown     : aliased constant  WinRt.GUID := (0, 0, 0, (192, 0, 0, 0, 0, 0, 0, 70));
   IID_IInspectable : aliased constant  WinRt.GUID := (2944852704, 45357, 19562, (156, 90, 215, 170, 101, 16, 30, 144));
   IID_IMarshal     : aliased constant  WinRt.GUID := (3, 0, 0, (192, 0, 0, 0, 0, 0, 0, 70));
   IID_IAgileObject : aliased constant  WinRt.GUID := (2498374548, 59852, 18912, (192, 255, 238, 100, 202, 143, 91, 144));

   -----------------------------------------------------------------------------

   S_OK             : constant := 0;
   S_FALSE          : constant := 1;
   E_NOTIMPL        : constant := 16#80004001#;
   E_NOINTERFACE    : constant := 16#80004002#;
   E_POINTER        : constant := 16#80004003#;

   -----------------------------------------------------------------------------

   function RoInitialize (InitType : WinRt.UInt32 := 1) return WinRt.HResult;
   pragma Import (StdCall, RoInitialize, "RoInitialize");

   procedure RoUninitialize;
   pragma Import (StdCall, RoUninitialize, "RoUninitialize");

   function RoActivateInstance(activatableClassId : WinRt.HString ; instance : System.Address) return WinRt.HResult;
   pragma Import (StdCall, RoActivateInstance, "RoActivateInstance");

   function WindowsCreateString(sourceString : System.Address ; length : WinRt.UInt32 ; string : access WinRt.HString) return WinRt.HResult;
   pragma Import (StdCall, WindowsCreateString, "WindowsCreateString");

   function WindowsDeleteString(string : WinRt.HString) return WinRt.HRESULT;
   pragma Import (StdCall, WindowsDeleteString, "WindowsDeleteString");

   function WindowsGetStringLen(string : WinRt.HString) return UInt32;
   pragma import(stdcall, WindowsGetStringLen,"WindowsGetStringLen");

   function WindowsGetStringRawBuffer(string : WinRt.HString ; length : access UInt32) return Wide_Char_Ptr;
   pragma import(stdcall, WindowsGetStringRawBuffer,"WindowsGetStringRawBuffer");

   function RoGetActivationFactory(activatableClassId : WinRt.HString ; iid : in WinRt.IID_Ptr ; instance : System.Address) return WinRt.HResult;
   pragma Import (StdCall, RoGetActivationFactory, "RoGetActivationFactory");

   function CoCreateFreeThreadedMarshaler(punkOuter : WinRt.IUnknown; ppunkMarshel : access IUnknown) return WinRt.HRESULT;
   pragma import(stdcall, CoCreateFreeThreadedMarshaler,"CoCreateFreeThreadedMarshaler");

   function WaitOnAddress
   (
      Address : System.Address;
      CompareAddress : System.Address;
      AddressSize : WinRt.UInt32;
      dwMilliseconds : WinRt.UInt32
   )
   return WinRt.Int32;
   pragma import(Stdcall, WaitOnAddress, "WaitOnAddress");

   procedure WakeByAddressSingle
   (
      Address : System.Address
   );
   pragma import(Stdcall, WakeByAddressSingle, "WakeByAddressSingle");

   -----------------------------------------------------------------------------

   function To_HString (Value : Wide_String) return WinRt.HString;
   function To_HString (Value : WString) return WinRt.HString;
   function To_HString_Array (Value : WString_Array) return WinRt.HString_Array;
   function To_Ada (Value : WinRt.HString) return WString;

   generic
      type ISource is interface and IInspectable_Interface;
      type IDestination is private;
      IID_Destination : GUID_Ptr;
   function Generic_QueryInterface (Object : access ISource'Class) return IDestination;

   generic
      type T is private;
      type T_Ptr is access T;
   function To_Ada_Type (Data : T_Ptr; Index : Integer) return T;

end;

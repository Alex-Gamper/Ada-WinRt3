--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
limited with WinRt.Windows.Networking.Connectivity;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Networking is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IEndpointPair_Interface is interface and WinRt.IInspectable_Interface;
   type IEndpointPair is access IEndpointPair_Interface'Class;
   type IEndpointPair_Ptr is access all IEndpointPair;

   type IEndpointPairFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IEndpointPairFactory is access IEndpointPairFactory_Interface'Class;

   type IHostName_Interface is interface and WinRt.IInspectable_Interface;
   type IHostName is access IHostName_Interface'Class;
   type IHostName_Ptr is access all IHostName;

   type IHostNameFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IHostNameFactory is access IHostNameFactory_Interface'Class;

   type IHostNameStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IHostNameStatics is access IHostNameStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type EndpointPair is new Ada.Finalization.Limited_Controlled with
      record
         m_IEndpointPair : access Windows.Networking.IEndpointPair;
      end record;
   type EndpointPair_Ptr is access all EndpointPair;

   type HostName is new Ada.Finalization.Limited_Controlled with
      record
         m_IHostName : access Windows.Networking.IHostName;
      end record;
   type HostName_Ptr is access all HostName;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type DomainNameType is (
      Suffix_e,
      FullyQualified_e
   );
   for DomainNameType use (
      Suffix_e => 0,
      FullyQualified_e => 1
   );
   type DomainNameType_Ptr is access all DomainNameType;

   type HostNameSortOptions is (
      None_e,
      OptimizeForLongConnections_e
   );
   for HostNameSortOptions use (
      None_e => 0,
      OptimizeForLongConnections_e => 2
   );
   type HostNameSortOptions_Ptr is access all HostNameSortOptions;

   type HostNameType is (
      DomainName_e,
      Ipv4_e,
      Ipv6_e,
      Bluetooth_e
   );
   for HostNameType use (
      DomainName_e => 0,
      Ipv4_e => 1,
      Ipv6_e => 2,
      Bluetooth_e => 3
   );
   type HostNameType_Ptr is access all HostNameType;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IEndpointPair is interface and WinRt.IInspectable;

      function get_LocalHostName
      (
         this : access IEndpointPair_Interface;
         RetVal : access Windows.Networking.IHostName
      )
      return WinRt.Hresult is abstract;

      function put_LocalHostName
      (
         this : access IEndpointPair_Interface;
         value : Windows.Networking.IHostName
      )
      return WinRt.Hresult is abstract;

      function get_LocalServiceName
      (
         this : access IEndpointPair_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function put_LocalServiceName
      (
         this : access IEndpointPair_Interface;
         value : WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RemoteHostName
      (
         this : access IEndpointPair_Interface;
         RetVal : access Windows.Networking.IHostName
      )
      return WinRt.Hresult is abstract;

      function put_RemoteHostName
      (
         this : access IEndpointPair_Interface;
         value : Windows.Networking.IHostName
      )
      return WinRt.Hresult is abstract;

      function get_RemoteServiceName
      (
         this : access IEndpointPair_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function put_RemoteServiceName
      (
         this : access IEndpointPair_Interface;
         value : WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IEndpointPair : aliased WinRt.IID := (866167350, 63738, 19248, (184, 86, 118, 81, 124, 59, 208, 109 ));

   -----------------------------------------------------------------------------
   -- type IEndpointPairFactory is interface and WinRt.IInspectable;

      function CreateEndpointPair
      (
         this : access IEndpointPairFactory_Interface;
         localHostName : Windows.Networking.IHostName;
         localServiceName : WinRt.HString;
         remoteHostName : Windows.Networking.IHostName;
         remoteServiceName : WinRt.HString;
         RetVal : access Windows.Networking.IEndpointPair
      )
      return WinRt.Hresult is abstract;

      IID_IEndpointPairFactory : aliased WinRt.IID := (3054098801, 25824, 17451, (170, 111, 204, 140, 143, 24, 31, 120 ));

   -----------------------------------------------------------------------------
   -- type IHostName is interface and WinRt.IInspectable;

      function get_IPInformation
      (
         this : access IHostName_Interface;
         RetVal : access Windows.Networking.Connectivity.IIPInformation
      )
      return WinRt.Hresult is abstract;

      function get_RawName
      (
         this : access IHostName_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DisplayName
      (
         this : access IHostName_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_CanonicalName
      (
         this : access IHostName_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Type
      (
         this : access IHostName_Interface;
         RetVal : access Windows.Networking.HostNameType
      )
      return WinRt.Hresult is abstract;

      function IsEqual
      (
         this : access IHostName_Interface;
         hostName_p : Windows.Networking.IHostName;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      IID_IHostName : aliased WinRt.IID := (3213806253, 60822, 18855, (144, 132, 212, 22, 202, 232, 141, 203 ));

   -----------------------------------------------------------------------------
   -- type IHostNameFactory is interface and WinRt.IInspectable;

      function CreateHostName
      (
         this : access IHostNameFactory_Interface;
         hostName_p : WinRt.HString;
         RetVal : access Windows.Networking.IHostName
      )
      return WinRt.Hresult is abstract;

      IID_IHostNameFactory : aliased WinRt.IID := (1166812141, 28975, 17782, (173, 241, 194, 11, 44, 100, 53, 88 ));

   -----------------------------------------------------------------------------
   -- type IHostNameStatics is interface and WinRt.IInspectable;

      function Compare
      (
         this : access IHostNameStatics_Interface;
         value1 : WinRt.HString;
         value2 : WinRt.HString;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      IID_IHostNameStatics : aliased WinRt.IID := (4136424639, 41864, 20107, (145, 234, 84, 221, 109, 217, 1, 192 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EndpointPair

   overriding procedure Initialize (this : in out EndpointPair);
   overriding procedure Finalize (this : in out EndpointPair);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EndpointPair

   function Constructor
   (
      localHostName : Windows.Networking.HostName'Class;
      localServiceName : WinRt.WString;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   )
   return EndpointPair;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EndpointPair

   function get_LocalHostName
   (
      this : in out EndpointPair
   )
   return WinRt.Windows.Networking.HostName'Class;

   procedure put_LocalHostName
   (
      this : in out EndpointPair;
      value : Windows.Networking.HostName'Class
   );

   function get_LocalServiceName
   (
      this : in out EndpointPair
   )
   return WinRt.WString;

   procedure put_LocalServiceName
   (
      this : in out EndpointPair;
      value : WinRt.WString
   );

   function get_RemoteHostName
   (
      this : in out EndpointPair
   )
   return WinRt.Windows.Networking.HostName'Class;

   procedure put_RemoteHostName
   (
      this : in out EndpointPair;
      value : Windows.Networking.HostName'Class
   );

   function get_RemoteServiceName
   (
      this : in out EndpointPair
   )
   return WinRt.WString;

   procedure put_RemoteServiceName
   (
      this : in out EndpointPair;
      value : WinRt.WString
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HostName

   overriding procedure Initialize (this : in out HostName);
   overriding procedure Finalize (this : in out HostName);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HostName

   function Constructor
   (
      hostName_p : WinRt.WString
   )
   return HostName;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HostName

   function Compare
   (
      value1 : WinRt.WString;
      value2 : WinRt.WString
   )
   return WinRt.Int32;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HostName

   function get_IPInformation
   (
      this : in out HostName
   )
   return WinRt.Windows.Networking.Connectivity.IPInformation'Class;

   function get_RawName
   (
      this : in out HostName
   )
   return WinRt.WString;

   function get_DisplayName
   (
      this : in out HostName
   )
   return WinRt.WString;

   function get_CanonicalName
   (
      this : in out HostName
   )
   return WinRt.WString;

   function get_Type
   (
      this : in out HostName
   )
   return WinRt.Windows.Networking.HostNameType;

   function IsEqual
   (
      this : in out HostName;
      hostName_p : Windows.Networking.HostName'Class
   )
   return WinRt.Boolean;

   function ToString
   (
      this : in out HostName
   )
   return WinRt.WString;

end;

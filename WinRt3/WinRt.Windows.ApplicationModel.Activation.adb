--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider;
with WinRt.Windows.ApplicationModel.Background;
with WinRt.Windows.ApplicationModel.Calls;
with WinRt.Windows.ApplicationModel.Contacts;
with WinRt.Windows.ApplicationModel.Contacts.Provider;
with WinRt.Windows.ApplicationModel.DataTransfer.ShareTarget;
with WinRt.Windows.ApplicationModel.Search;
with WinRt.Windows.ApplicationModel.UserDataAccounts.Provider;
with WinRt.Windows.ApplicationModel.Wallet;
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Devices.Printers.Extensions;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.SpeechRecognition;
with WinRt.Windows.Security.Authentication.Web;
with WinRt.Windows.Security.Authentication.Web.Provider;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Pickers.Provider;
with WinRt.Windows.Storage.Provider;
with WinRt.Windows.Storage.Search;
with WinRt.Windows.System;
with WinRt.Windows.UI.Notifications;
with WinRt.Windows.UI.ViewManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Activation is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentsProviderAddAppointmentActivatedEventArgs

   procedure Initialize (this : in out AppointmentsProviderAddAppointmentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentsProviderAddAppointmentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentsProviderAddAppointmentActivatedEventArgs, IAppointmentsProviderAddAppointmentActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentsProviderAddAppointmentActivatedEventArgs

   function get_AddAppointmentOperation
   (
      this : in out AppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentsProvider.IAddAppointmentOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation do
         Hr := this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all.get_AddAppointmentOperation (m_ComRetVal'Access);
         Retval.m_IAddAppointmentOperation := new Windows.ApplicationModel.Appointments.AppointmentsProvider.IAddAppointmentOperation;
         Retval.m_IAddAppointmentOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out AppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out AppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out AppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out AppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out AppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentsProviderRemoveAppointmentActivatedEventArgs

   procedure Initialize (this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentsProviderRemoveAppointmentActivatedEventArgs, IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentsProviderRemoveAppointmentActivatedEventArgs

   function get_RemoveAppointmentOperation
   (
      this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentsProvider.IRemoveAppointmentOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation do
         Hr := this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all.get_RemoveAppointmentOperation (m_ComRetVal'Access);
         Retval.m_IRemoveAppointmentOperation := new Windows.ApplicationModel.Appointments.AppointmentsProvider.IRemoveAppointmentOperation;
         Retval.m_IRemoveAppointmentOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out AppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentsProviderReplaceAppointmentActivatedEventArgs

   procedure Initialize (this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentsProviderReplaceAppointmentActivatedEventArgs, IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentsProviderReplaceAppointmentActivatedEventArgs

   function get_ReplaceAppointmentOperation
   (
      this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentsProvider.IReplaceAppointmentOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation do
         Hr := this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all.get_ReplaceAppointmentOperation (m_ComRetVal'Access);
         Retval.m_IReplaceAppointmentOperation := new Windows.ApplicationModel.Appointments.AppointmentsProvider.IReplaceAppointmentOperation;
         Retval.m_IReplaceAppointmentOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out AppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs

   procedure Initialize (this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs

   function get_InstanceStartDate
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.get_InstanceStartDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocalId
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.get_LocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RoamingId
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.get_RoamingId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Verb
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentsProviderShowTimeFrameActivatedEventArgs

   procedure Initialize (this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentsProviderShowTimeFrameActivatedEventArgs, IAppointmentsProviderShowTimeFrameActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentsProviderShowTimeFrameActivatedEventArgs

   function get_TimeToShow
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all.get_TimeToShow (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Verb
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out AppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundActivatedEventArgs

   procedure Initialize (this : in out BackgroundActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundActivatedEventArgs, IBackgroundActivatedEventArgs_Ptr);
   begin
      if this.m_IBackgroundActivatedEventArgs /= null then
         if this.m_IBackgroundActivatedEventArgs.all /= null then
            RefCount := this.m_IBackgroundActivatedEventArgs.all.Release;
            Free (this.m_IBackgroundActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundActivatedEventArgs

   function get_TaskInstance
   (
      this : in out BackgroundActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskInstance;
   begin
      Hr := this.m_IBackgroundActivatedEventArgs.all.get_TaskInstance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerPreviewActivatedEventArgs

   procedure Initialize (this : in out BarcodeScannerPreviewActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerPreviewActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerPreviewActivatedEventArgs, IBarcodeScannerPreviewActivatedEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerPreviewActivatedEventArgs /= null then
         if this.m_IBarcodeScannerPreviewActivatedEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerPreviewActivatedEventArgs.all.Release;
            Free (this.m_IBarcodeScannerPreviewActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerPreviewActivatedEventArgs

   function get_ConnectionId
   (
      this : in out BarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerPreviewActivatedEventArgs.all.get_ConnectionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out BarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out BarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out BarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out BarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CachedFileUpdaterActivatedEventArgs

   procedure Initialize (this : in out CachedFileUpdaterActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CachedFileUpdaterActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICachedFileUpdaterActivatedEventArgs, ICachedFileUpdaterActivatedEventArgs_Ptr);
   begin
      if this.m_ICachedFileUpdaterActivatedEventArgs /= null then
         if this.m_ICachedFileUpdaterActivatedEventArgs.all /= null then
            RefCount := this.m_ICachedFileUpdaterActivatedEventArgs.all.Release;
            Free (this.m_ICachedFileUpdaterActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CachedFileUpdaterActivatedEventArgs

   function get_CachedFileUpdaterUI
   (
      this : in out CachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.Storage.Provider.CachedFileUpdaterUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.ICachedFileUpdaterUI;
   begin
      return RetVal : WinRt.Windows.Storage.Provider.CachedFileUpdaterUI do
         Hr := this.m_ICachedFileUpdaterActivatedEventArgs.all.get_CachedFileUpdaterUI (m_ComRetVal'Access);
         Retval.m_ICachedFileUpdaterUI := new Windows.Storage.Provider.ICachedFileUpdaterUI;
         Retval.m_ICachedFileUpdaterUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out CachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out CachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out CachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out CachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CameraSettingsActivatedEventArgs

   procedure Initialize (this : in out CameraSettingsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CameraSettingsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICameraSettingsActivatedEventArgs, ICameraSettingsActivatedEventArgs_Ptr);
   begin
      if this.m_ICameraSettingsActivatedEventArgs /= null then
         if this.m_ICameraSettingsActivatedEventArgs.all /= null then
            RefCount := this.m_ICameraSettingsActivatedEventArgs.all.Release;
            Free (this.m_ICameraSettingsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CameraSettingsActivatedEventArgs

   function get_VideoDeviceController
   (
      this : in out CameraSettingsActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ICameraSettingsActivatedEventArgs.all.get_VideoDeviceController (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoDeviceExtension
   (
      this : in out CameraSettingsActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ICameraSettingsActivatedEventArgs.all.get_VideoDeviceExtension (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out CameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out CameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out CameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CommandLineActivatedEventArgs

   procedure Initialize (this : in out CommandLineActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CommandLineActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICommandLineActivatedEventArgs, ICommandLineActivatedEventArgs_Ptr);
   begin
      if this.m_ICommandLineActivatedEventArgs /= null then
         if this.m_ICommandLineActivatedEventArgs.all /= null then
            RefCount := this.m_ICommandLineActivatedEventArgs.all.Release;
            Free (this.m_ICommandLineActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CommandLineActivatedEventArgs

   function get_Operation
   (
      this : in out CommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.CommandLineActivationOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ICommandLineActivationOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.CommandLineActivationOperation do
         Hr := this.m_ICommandLineActivatedEventArgs.all.get_Operation (m_ComRetVal'Access);
         Retval.m_ICommandLineActivationOperation := new Windows.ApplicationModel.Activation.ICommandLineActivationOperation;
         Retval.m_ICommandLineActivationOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out CommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out CommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out CommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out CommandLineActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CommandLineActivationOperation

   procedure Initialize (this : in out CommandLineActivationOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out CommandLineActivationOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICommandLineActivationOperation, ICommandLineActivationOperation_Ptr);
   begin
      if this.m_ICommandLineActivationOperation /= null then
         if this.m_ICommandLineActivationOperation.all /= null then
            RefCount := this.m_ICommandLineActivationOperation.all.Release;
            Free (this.m_ICommandLineActivationOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CommandLineActivationOperation

   function get_Arguments
   (
      this : in out CommandLineActivationOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICommandLineActivationOperation.all.get_Arguments (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CurrentDirectoryPath
   (
      this : in out CommandLineActivationOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICommandLineActivationOperation.all.get_CurrentDirectoryPath (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ExitCode
   (
      this : in out CommandLineActivationOperation;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICommandLineActivationOperation.all.put_ExitCode (value);
   end;

   function get_ExitCode
   (
      this : in out CommandLineActivationOperation
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICommandLineActivationOperation.all.get_ExitCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CommandLineActivationOperation
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICommandLineActivationOperation.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactCallActivatedEventArgs

   procedure Initialize (this : in out ContactCallActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactCallActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactCallActivatedEventArgs, IContactCallActivatedEventArgs_Ptr);
   begin
      if this.m_IContactCallActivatedEventArgs /= null then
         if this.m_IContactCallActivatedEventArgs.all /= null then
            RefCount := this.m_IContactCallActivatedEventArgs.all.Release;
            Free (this.m_IContactCallActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactCallActivatedEventArgs

   function get_ServiceId
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactCallActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactCallActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactCallActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactMapActivatedEventArgs

   procedure Initialize (this : in out ContactMapActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactMapActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactMapActivatedEventArgs, IContactMapActivatedEventArgs_Ptr);
   begin
      if this.m_IContactMapActivatedEventArgs /= null then
         if this.m_IContactMapActivatedEventArgs.all /= null then
            RefCount := this.m_IContactMapActivatedEventArgs.all.Release;
            Free (this.m_IContactMapActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactMapActivatedEventArgs

   function get_Address
   (
      this : in out ContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactAddress;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAddress do
         Hr := this.m_IContactMapActivatedEventArgs.all.get_Address (m_ComRetVal'Access);
         Retval.m_IContactAddress := new Windows.ApplicationModel.Contacts.IContactAddress;
         Retval.m_IContactAddress.all := m_ComRetVal;
      end return;
   end;

   function get_Contact
   (
      this : in out ContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactMapActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out ContactMapActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactMessageActivatedEventArgs

   procedure Initialize (this : in out ContactMessageActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactMessageActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactMessageActivatedEventArgs, IContactMessageActivatedEventArgs_Ptr);
   begin
      if this.m_IContactMessageActivatedEventArgs /= null then
         if this.m_IContactMessageActivatedEventArgs.all /= null then
            RefCount := this.m_IContactMessageActivatedEventArgs.all.Release;
            Free (this.m_IContactMessageActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactMessageActivatedEventArgs

   function get_ServiceId
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactMessageActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactMessageActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactMessageActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPanelActivatedEventArgs

   procedure Initialize (this : in out ContactPanelActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPanelActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPanelActivatedEventArgs, IContactPanelActivatedEventArgs_Ptr);
   begin
      if this.m_IContactPanelActivatedEventArgs /= null then
         if this.m_IContactPanelActivatedEventArgs.all /= null then
            RefCount := this.m_IContactPanelActivatedEventArgs.all.Release;
            Free (this.m_IContactPanelActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPanelActivatedEventArgs

   function get_ContactPanel
   (
      this : in out ContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactPanel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactPanel;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactPanel do
         Hr := this.m_IContactPanelActivatedEventArgs.all.get_ContactPanel (m_ComRetVal'Access);
         Retval.m_IContactPanel := new Windows.ApplicationModel.Contacts.IContactPanel;
         Retval.m_IContactPanel.all := m_ComRetVal;
      end return;
   end;

   function get_Contact
   (
      this : in out ContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactPanelActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out ContactPanelActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPickerActivatedEventArgs

   procedure Initialize (this : in out ContactPickerActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPickerActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPickerActivatedEventArgs, IContactPickerActivatedEventArgs_Ptr);
   begin
      if this.m_IContactPickerActivatedEventArgs /= null then
         if this.m_IContactPickerActivatedEventArgs.all /= null then
            RefCount := this.m_IContactPickerActivatedEventArgs.all.Release;
            Free (this.m_IContactPickerActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPickerActivatedEventArgs

   function get_ContactPickerUI
   (
      this : in out ContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Provider.ContactPickerUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.Provider.IContactPickerUI;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Provider.ContactPickerUI do
         Hr := this.m_IContactPickerActivatedEventArgs.all.get_ContactPickerUI (m_ComRetVal'Access);
         Retval.m_IContactPickerUI := new Windows.ApplicationModel.Contacts.Provider.IContactPickerUI;
         Retval.m_IContactPickerUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPostActivatedEventArgs

   procedure Initialize (this : in out ContactPostActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPostActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPostActivatedEventArgs, IContactPostActivatedEventArgs_Ptr);
   begin
      if this.m_IContactPostActivatedEventArgs /= null then
         if this.m_IContactPostActivatedEventArgs.all /= null then
            RefCount := this.m_IContactPostActivatedEventArgs.all.Release;
            Free (this.m_IContactPostActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPostActivatedEventArgs

   function get_ServiceId
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPostActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPostActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactPostActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactVideoCallActivatedEventArgs

   procedure Initialize (this : in out ContactVideoCallActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactVideoCallActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactVideoCallActivatedEventArgs, IContactVideoCallActivatedEventArgs_Ptr);
   begin
      if this.m_IContactVideoCallActivatedEventArgs /= null then
         if this.m_IContactVideoCallActivatedEventArgs.all /= null then
            RefCount := this.m_IContactVideoCallActivatedEventArgs.all.Release;
            Free (this.m_IContactVideoCallActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactVideoCallActivatedEventArgs

   function get_ServiceId
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactVideoCallActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactVideoCallActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactVideoCallActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceActivatedEventArgs

   procedure Initialize (this : in out DeviceActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceActivatedEventArgs, IDeviceActivatedEventArgs_Ptr);
   begin
      if this.m_IDeviceActivatedEventArgs /= null then
         if this.m_IDeviceActivatedEventArgs.all /= null then
            RefCount := this.m_IDeviceActivatedEventArgs.all.Release;
            Free (this.m_IDeviceActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceActivatedEventArgs

   function get_DeviceInformationId
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceActivatedEventArgs.all.get_DeviceInformationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Verb
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceActivatedEventArgs.all.get_Verb (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out DeviceActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePairingActivatedEventArgs

   procedure Initialize (this : in out DevicePairingActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePairingActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePairingActivatedEventArgs, IDevicePairingActivatedEventArgs_Ptr);
   begin
      if this.m_IDevicePairingActivatedEventArgs /= null then
         if this.m_IDevicePairingActivatedEventArgs.all /= null then
            RefCount := this.m_IDevicePairingActivatedEventArgs.all.Release;
            Free (this.m_IDevicePairingActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePairingActivatedEventArgs

   function get_DeviceInformation
   (
      this : in out DevicePairingActivatedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDevicePairingActivatedEventArgs.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out DevicePairingActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out DevicePairingActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out DevicePairingActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out DevicePairingActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialReceiverActivatedEventArgs

   procedure Initialize (this : in out DialReceiverActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialReceiverActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialReceiverActivatedEventArgs, IDialReceiverActivatedEventArgs_Ptr);
   begin
      if this.m_IDialReceiverActivatedEventArgs /= null then
         if this.m_IDialReceiverActivatedEventArgs.all /= null then
            RefCount := this.m_IDialReceiverActivatedEventArgs.all.Release;
            Free (this.m_IDialReceiverActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialReceiverActivatedEventArgs

   function get_AppName
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDialReceiverActivatedEventArgs.all.get_AppName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Arguments
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_Arguments (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TileId
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_TileId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out DialReceiverActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileActivatedEventArgs

   procedure Initialize (this : in out FileActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileActivatedEventArgs, IFileActivatedEventArgs_Ptr);
   begin
      if this.m_IFileActivatedEventArgs /= null then
         if this.m_IFileActivatedEventArgs.all /= null then
            RefCount := this.m_IFileActivatedEventArgs.all.Release;
            Free (this.m_IFileActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileActivatedEventArgs

   function get_Files
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFileActivatedEventArgs.all.get_Files (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Verb
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileActivatedEventArgs.all.get_Verb (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_NeighboringFilesQuery
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Windows.Storage.Search.StorageFileQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgsWithNeighboringFiles := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFileQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgsWithNeighboringFiles, WinRt.Windows.ApplicationModel.Activation.IID_IFileActivatedEventArgsWithNeighboringFiles'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFileQueryResult do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_NeighboringFilesQuery (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFileQueryResult := new Windows.Storage.Search.IStorageFileQueryResult;
         Retval.m_IStorageFileQueryResult.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgsWithCallerPackageFamilyName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgsWithCallerPackageFamilyName, WinRt.Windows.ApplicationModel.Activation.IID_IFileActivatedEventArgsWithCallerPackageFamilyName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out FileActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileOpenPickerActivatedEventArgs

   procedure Initialize (this : in out FileOpenPickerActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileOpenPickerActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileOpenPickerActivatedEventArgs, IFileOpenPickerActivatedEventArgs_Ptr);
   begin
      if this.m_IFileOpenPickerActivatedEventArgs /= null then
         if this.m_IFileOpenPickerActivatedEventArgs.all /= null then
            RefCount := this.m_IFileOpenPickerActivatedEventArgs.all.Release;
            Free (this.m_IFileOpenPickerActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileOpenPickerActivatedEventArgs

   function get_FileOpenPickerUI
   (
      this : in out FileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.Storage.Pickers.Provider.FileOpenPickerUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.Provider.IFileOpenPickerUI;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.Provider.FileOpenPickerUI do
         Hr := this.m_IFileOpenPickerActivatedEventArgs.all.get_FileOpenPickerUI (m_ComRetVal'Access);
         Retval.m_IFileOpenPickerUI := new Windows.Storage.Pickers.Provider.IFileOpenPickerUI;
         Retval.m_IFileOpenPickerUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out FileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out FileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out FileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out FileOpenPickerActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_IFileOpenPickerActivatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_User
   (
      this : in out FileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileOpenPickerContinuationEventArgs

   procedure Initialize (this : in out FileOpenPickerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileOpenPickerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileOpenPickerContinuationEventArgs, IFileOpenPickerContinuationEventArgs_Ptr);
   begin
      if this.m_IFileOpenPickerContinuationEventArgs /= null then
         if this.m_IFileOpenPickerContinuationEventArgs.all /= null then
            RefCount := this.m_IFileOpenPickerContinuationEventArgs.all.Release;
            Free (this.m_IFileOpenPickerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileOpenPickerContinuationEventArgs

   function get_Files
   (
      this : in out FileOpenPickerContinuationEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFileOpenPickerContinuationEventArgs.all.get_Files (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContinuationData
   (
      this : in out FileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out FileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out FileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out FileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out FileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileSavePickerActivatedEventArgs

   procedure Initialize (this : in out FileSavePickerActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileSavePickerActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileSavePickerActivatedEventArgs, IFileSavePickerActivatedEventArgs_Ptr);
   begin
      if this.m_IFileSavePickerActivatedEventArgs /= null then
         if this.m_IFileSavePickerActivatedEventArgs.all /= null then
            RefCount := this.m_IFileSavePickerActivatedEventArgs.all.Release;
            Free (this.m_IFileSavePickerActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileSavePickerActivatedEventArgs

   function get_FileSavePickerUI
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.Storage.Pickers.Provider.FileSavePickerUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.Provider.IFileSavePickerUI;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.Provider.FileSavePickerUI do
         Hr := this.m_IFileSavePickerActivatedEventArgs.all.get_FileSavePickerUI (m_ComRetVal'Access);
         Retval.m_IFileSavePickerUI := new Windows.Storage.Pickers.Provider.IFileSavePickerUI;
         Retval.m_IFileSavePickerUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_IFileSavePickerActivatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EnterpriseId
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_IFileSavePickerActivatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_EnterpriseId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_User
   (
      this : in out FileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileSavePickerContinuationEventArgs

   procedure Initialize (this : in out FileSavePickerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileSavePickerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileSavePickerContinuationEventArgs, IFileSavePickerContinuationEventArgs_Ptr);
   begin
      if this.m_IFileSavePickerContinuationEventArgs /= null then
         if this.m_IFileSavePickerContinuationEventArgs.all /= null then
            RefCount := this.m_IFileSavePickerContinuationEventArgs.all.Release;
            Free (this.m_IFileSavePickerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileSavePickerContinuationEventArgs

   function get_File
   (
      this : in out FileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileSavePickerContinuationEventArgs.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_ContinuationData
   (
      this : in out FileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out FileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out FileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out FileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out FileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FolderPickerContinuationEventArgs

   procedure Initialize (this : in out FolderPickerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FolderPickerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFolderPickerContinuationEventArgs, IFolderPickerContinuationEventArgs_Ptr);
   begin
      if this.m_IFolderPickerContinuationEventArgs /= null then
         if this.m_IFolderPickerContinuationEventArgs.all /= null then
            RefCount := this.m_IFolderPickerContinuationEventArgs.all.Release;
            Free (this.m_IFolderPickerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FolderPickerContinuationEventArgs

   function get_Folder
   (
      this : in out FolderPickerContinuationEventArgs
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IFolderPickerContinuationEventArgs.all.get_Folder (m_ComRetVal'Access);
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_ContinuationData
   (
      this : in out FolderPickerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out FolderPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out FolderPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out FolderPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out FolderPickerContinuationEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LaunchActivatedEventArgs

   procedure Initialize (this : in out LaunchActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LaunchActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILaunchActivatedEventArgs, ILaunchActivatedEventArgs_Ptr);
   begin
      if this.m_ILaunchActivatedEventArgs /= null then
         if this.m_ILaunchActivatedEventArgs.all /= null then
            RefCount := this.m_ILaunchActivatedEventArgs.all.Release;
            Free (this.m_ILaunchActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LaunchActivatedEventArgs

   function get_Arguments
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILaunchActivatedEventArgs.all.get_Arguments (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TileId
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILaunchActivatedEventArgs.all.get_TileId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PrelaunchActivated
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IPrelaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_PrelaunchActivated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_TileActivatedInfo
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.TileActivatedInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ITileActivatedInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.TileActivatedInfo do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_TileActivatedInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITileActivatedInfo := new Windows.ApplicationModel.Activation.ITileActivatedInfo;
         Retval.m_ITileActivatedInfo.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out LaunchActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenActivatedEventArgs

   procedure Initialize (this : in out LockScreenActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenActivatedEventArgs, ILockScreenActivatedEventArgs_Ptr);
   begin
      if this.m_ILockScreenActivatedEventArgs /= null then
         if this.m_ILockScreenActivatedEventArgs.all /= null then
            RefCount := this.m_ILockScreenActivatedEventArgs.all.Release;
            Free (this.m_ILockScreenActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenActivatedEventArgs

   function get_Info
   (
      this : in out LockScreenActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ILockScreenActivatedEventArgs.all.get_Info (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out LockScreenActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out LockScreenActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out LockScreenActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out LockScreenActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenCallActivatedEventArgs

   procedure Initialize (this : in out LockScreenCallActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenCallActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenCallActivatedEventArgs, ILockScreenCallActivatedEventArgs_Ptr);
   begin
      if this.m_ILockScreenCallActivatedEventArgs /= null then
         if this.m_ILockScreenCallActivatedEventArgs.all /= null then
            RefCount := this.m_ILockScreenCallActivatedEventArgs.all.Release;
            Free (this.m_ILockScreenCallActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenCallActivatedEventArgs

   function get_CallUI
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Calls.LockScreenCallUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.ILockScreenCallUI;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.LockScreenCallUI do
         Hr := this.m_ILockScreenCallActivatedEventArgs.all.get_CallUI (m_ComRetVal'Access);
         Retval.m_ILockScreenCallUI := new Windows.ApplicationModel.Calls.ILockScreenCallUI;
         Retval.m_ILockScreenCallUI.all := m_ComRetVal;
      end return;
   end;

   function get_Arguments
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_Arguments (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TileId
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_TileId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out LockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenComponentActivatedEventArgs

   procedure Initialize (this : in out LockScreenComponentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenComponentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivatedEventArgs, IActivatedEventArgs_Ptr);
   begin
      if this.m_IActivatedEventArgs /= null then
         if this.m_IActivatedEventArgs.all /= null then
            RefCount := this.m_IActivatedEventArgs.all.Release;
            Free (this.m_IActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenComponentActivatedEventArgs

   function get_Kind
   (
      this : in out LockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
   begin
      Hr := this.m_IActivatedEventArgs.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out LockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
   begin
      Hr := this.m_IActivatedEventArgs.all.get_PreviousExecutionState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out LockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         Hr := this.m_IActivatedEventArgs.all.get_SplashScreen (m_ComRetVal'Access);
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PickerReturnedActivatedEventArgs

   procedure Initialize (this : in out PickerReturnedActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PickerReturnedActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPickerReturnedActivatedEventArgs, IPickerReturnedActivatedEventArgs_Ptr);
   begin
      if this.m_IPickerReturnedActivatedEventArgs /= null then
         if this.m_IPickerReturnedActivatedEventArgs.all /= null then
            RefCount := this.m_IPickerReturnedActivatedEventArgs.all.Release;
            Free (this.m_IPickerReturnedActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PickerReturnedActivatedEventArgs

   function get_PickerOperationId
   (
      this : in out PickerReturnedActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPickerReturnedActivatedEventArgs.all.get_PickerOperationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out PickerReturnedActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPickerReturnedActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPickerReturnedActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out PickerReturnedActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPickerReturnedActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPickerReturnedActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out PickerReturnedActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPickerReturnedActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IPickerReturnedActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DWorkflowActivatedEventArgs

   procedure Initialize (this : in out Print3DWorkflowActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DWorkflowActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DWorkflowActivatedEventArgs, IPrint3DWorkflowActivatedEventArgs_Ptr);
   begin
      if this.m_IPrint3DWorkflowActivatedEventArgs /= null then
         if this.m_IPrint3DWorkflowActivatedEventArgs.all /= null then
            RefCount := this.m_IPrint3DWorkflowActivatedEventArgs.all.Release;
            Free (this.m_IPrint3DWorkflowActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DWorkflowActivatedEventArgs

   function get_Workflow
   (
      this : in out Print3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.Devices.Printers.Extensions.Print3DWorkflow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.IPrint3DWorkflow;
   begin
      return RetVal : WinRt.Windows.Devices.Printers.Extensions.Print3DWorkflow do
         Hr := this.m_IPrint3DWorkflowActivatedEventArgs.all.get_Workflow (m_ComRetVal'Access);
         Retval.m_IPrint3DWorkflow := new Windows.Devices.Printers.Extensions.IPrint3DWorkflow;
         Retval.m_IPrint3DWorkflow.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out Print3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out Print3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out Print3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskSettingsActivatedEventArgs

   procedure Initialize (this : in out PrintTaskSettingsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskSettingsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskSettingsActivatedEventArgs, IPrintTaskSettingsActivatedEventArgs_Ptr);
   begin
      if this.m_IPrintTaskSettingsActivatedEventArgs /= null then
         if this.m_IPrintTaskSettingsActivatedEventArgs.all /= null then
            RefCount := this.m_IPrintTaskSettingsActivatedEventArgs.all.Release;
            Free (this.m_IPrintTaskSettingsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskSettingsActivatedEventArgs

   function get_Configuration
   (
      this : in out PrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.IPrintTaskConfiguration;
   begin
      return RetVal : WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfiguration do
         Hr := this.m_IPrintTaskSettingsActivatedEventArgs.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IPrintTaskConfiguration := new Windows.Devices.Printers.Extensions.IPrintTaskConfiguration;
         Retval.m_IPrintTaskConfiguration.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out PrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out PrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out PrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtocolActivatedEventArgs

   procedure Initialize (this : in out ProtocolActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtocolActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtocolActivatedEventArgs, IProtocolActivatedEventArgs_Ptr);
   begin
      if this.m_IProtocolActivatedEventArgs /= null then
         if this.m_IProtocolActivatedEventArgs.all /= null then
            RefCount := this.m_IProtocolActivatedEventArgs.all.Release;
            Free (this.m_IProtocolActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtocolActivatedEventArgs

   function get_Uri
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IProtocolActivatedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Data
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_Data (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out ProtocolActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtocolForResultsActivatedEventArgs

   procedure Initialize (this : in out ProtocolForResultsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtocolForResultsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtocolForResultsActivatedEventArgs, IProtocolForResultsActivatedEventArgs_Ptr);
   begin
      if this.m_IProtocolForResultsActivatedEventArgs /= null then
         if this.m_IProtocolForResultsActivatedEventArgs.all /= null then
            RefCount := this.m_IProtocolForResultsActivatedEventArgs.all.Release;
            Free (this.m_IProtocolForResultsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtocolForResultsActivatedEventArgs

   function get_ProtocolForResultsOperation
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.System.ProtocolForResultsOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IProtocolForResultsOperation;
   begin
      return RetVal : WinRt.Windows.System.ProtocolForResultsOperation do
         Hr := this.m_IProtocolForResultsActivatedEventArgs.all.get_ProtocolForResultsOperation (m_ComRetVal'Access);
         Retval.m_IProtocolForResultsOperation := new Windows.System.IProtocolForResultsOperation;
         Retval.m_IProtocolForResultsOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_Uri
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Data
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_Data (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ViewSwitcher
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out ProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RestrictedLaunchActivatedEventArgs

   procedure Initialize (this : in out RestrictedLaunchActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RestrictedLaunchActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRestrictedLaunchActivatedEventArgs, IRestrictedLaunchActivatedEventArgs_Ptr);
   begin
      if this.m_IRestrictedLaunchActivatedEventArgs /= null then
         if this.m_IRestrictedLaunchActivatedEventArgs.all /= null then
            RefCount := this.m_IRestrictedLaunchActivatedEventArgs.all.Release;
            Free (this.m_IRestrictedLaunchActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RestrictedLaunchActivatedEventArgs

   function get_SharedContext
   (
      this : in out RestrictedLaunchActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IRestrictedLaunchActivatedEventArgs.all.get_SharedContext (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out RestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out RestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out RestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out RestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchActivatedEventArgs

   procedure Initialize (this : in out SearchActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchActivatedEventArgs, ISearchActivatedEventArgs_Ptr);
   begin
      if this.m_ISearchActivatedEventArgs /= null then
         if this.m_ISearchActivatedEventArgs.all /= null then
            RefCount := this.m_ISearchActivatedEventArgs.all.Release;
            Free (this.m_ISearchActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchActivatedEventArgs

   function get_QueryText
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchActivatedEventArgs.all.get_QueryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchActivatedEventArgs.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LinguisticDetails
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgsWithLinguisticDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgsWithLinguisticDetails, WinRt.Windows.ApplicationModel.Activation.IID_ISearchActivatedEventArgsWithLinguisticDetails'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_LinguisticDetails (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISearchPaneQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
         Retval.m_ISearchPaneQueryLinguisticDetails.all := m_ComRetVal;
      end return;
   end;

   function get_ViewSwitcher
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IActivationViewSwitcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IViewSwitcherProvider, WinRt.Windows.ApplicationModel.Activation.IID_IViewSwitcherProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ActivationViewSwitcher do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_ViewSwitcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivationViewSwitcher := new Windows.UI.ViewManagement.IActivationViewSwitcher;
         Retval.m_IActivationViewSwitcher.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out SearchActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareTargetActivatedEventArgs

   procedure Initialize (this : in out ShareTargetActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareTargetActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareTargetActivatedEventArgs, IShareTargetActivatedEventArgs_Ptr);
   begin
      if this.m_IShareTargetActivatedEventArgs /= null then
         if this.m_IShareTargetActivatedEventArgs.all /= null then
            RefCount := this.m_IShareTargetActivatedEventArgs.all.Release;
            Free (this.m_IShareTargetActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareTargetActivatedEventArgs

   function get_ShareOperation
   (
      this : in out ShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.ShareTarget.IShareOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation do
         Hr := this.m_IShareTargetActivatedEventArgs.all.get_ShareOperation (m_ComRetVal'Access);
         Retval.m_IShareOperation := new Windows.ApplicationModel.DataTransfer.ShareTarget.IShareOperation;
         Retval.m_IShareOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out ShareTargetActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SplashScreen

   procedure Initialize (this : in out SplashScreen) is
   begin
      null;
   end;

   procedure Finalize (this : in out SplashScreen) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISplashScreen, ISplashScreen_Ptr);
   begin
      if this.m_ISplashScreen /= null then
         if this.m_ISplashScreen.all /= null then
            RefCount := this.m_ISplashScreen.all.Release;
            Free (this.m_ISplashScreen);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SplashScreen

   function get_ImageLocation
   (
      this : in out SplashScreen
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ISplashScreen.all.get_ImageLocation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Dismissed
   (
      this : in out SplashScreen;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISplashScreen.all.add_Dismissed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Dismissed
   (
      this : in out SplashScreen;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISplashScreen.all.remove_Dismissed (cookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StartupTaskActivatedEventArgs

   procedure Initialize (this : in out StartupTaskActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out StartupTaskActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStartupTaskActivatedEventArgs, IStartupTaskActivatedEventArgs_Ptr);
   begin
      if this.m_IStartupTaskActivatedEventArgs /= null then
         if this.m_IStartupTaskActivatedEventArgs.all /= null then
            RefCount := this.m_IStartupTaskActivatedEventArgs.all.Release;
            Free (this.m_IStartupTaskActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StartupTaskActivatedEventArgs

   function get_TaskId
   (
      this : in out StartupTaskActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStartupTaskActivatedEventArgs.all.get_TaskId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out StartupTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out StartupTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out StartupTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out StartupTaskActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileActivatedInfo

   procedure Initialize (this : in out TileActivatedInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileActivatedInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileActivatedInfo, ITileActivatedInfo_Ptr);
   begin
      if this.m_ITileActivatedInfo /= null then
         if this.m_ITileActivatedInfo.all /= null then
            RefCount := this.m_ITileActivatedInfo.all.Release;
            Free (this.m_ITileActivatedInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileActivatedInfo

   function get_RecentlyShownNotifications
   (
      this : in out TileActivatedInfo
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ITileActivatedInfo.all.get_RecentlyShownNotifications (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationActivatedEventArgs

   procedure Initialize (this : in out ToastNotificationActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotificationActivatedEventArgs, IToastNotificationActivatedEventArgs_Ptr);
   begin
      if this.m_IToastNotificationActivatedEventArgs /= null then
         if this.m_IToastNotificationActivatedEventArgs.all /= null then
            RefCount := this.m_IToastNotificationActivatedEventArgs.all.Release;
            Free (this.m_IToastNotificationActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationActivatedEventArgs

   function get_Argument
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationActivatedEventArgs.all.get_Argument (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserInput
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IToastNotificationActivatedEventArgs.all.get_UserInput (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out ToastNotificationActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataAccountProviderActivatedEventArgs

   procedure Initialize (this : in out UserDataAccountProviderActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataAccountProviderActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataAccountProviderActivatedEventArgs, IUserDataAccountProviderActivatedEventArgs_Ptr);
   begin
      if this.m_IUserDataAccountProviderActivatedEventArgs /= null then
         if this.m_IUserDataAccountProviderActivatedEventArgs.all /= null then
            RefCount := this.m_IUserDataAccountProviderActivatedEventArgs.all.Release;
            Free (this.m_IUserDataAccountProviderActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataAccountProviderActivatedEventArgs

   function get_Operation
   (
      this : in out UserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation;
   begin
      Hr := this.m_IUserDataAccountProviderActivatedEventArgs.all.get_Operation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out UserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out UserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out UserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandActivatedEventArgs

   procedure Initialize (this : in out VoiceCommandActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandActivatedEventArgs, IVoiceCommandActivatedEventArgs_Ptr);
   begin
      if this.m_IVoiceCommandActivatedEventArgs /= null then
         if this.m_IVoiceCommandActivatedEventArgs.all /= null then
            RefCount := this.m_IVoiceCommandActivatedEventArgs.all.Release;
            Free (this.m_IVoiceCommandActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandActivatedEventArgs

   function get_Result
   (
      this : in out VoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult do
         Hr := this.m_IVoiceCommandActivatedEventArgs.all.get_Result (m_ComRetVal'Access);
         Retval.m_ISpeechRecognitionResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
         Retval.m_ISpeechRecognitionResult.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out VoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out VoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out VoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out VoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletActionActivatedEventArgs

   procedure Initialize (this : in out WalletActionActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletActionActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletActionActivatedEventArgs, IWalletActionActivatedEventArgs_Ptr);
   begin
      if this.m_IWalletActionActivatedEventArgs /= null then
         if this.m_IWalletActionActivatedEventArgs.all /= null then
            RefCount := this.m_IWalletActionActivatedEventArgs.all.Release;
            Free (this.m_IWalletActionActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletActionActivatedEventArgs

   function get_ItemId
   (
      this : in out WalletActionActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletActionActivatedEventArgs.all.get_ItemId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ActionKind
   (
      this : in out WalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletActionKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.WalletActionKind;
   begin
      Hr := this.m_IWalletActionActivatedEventArgs.all.get_ActionKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActionId
   (
      this : in out WalletActionActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletActionActivatedEventArgs.all.get_ActionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderActivatedEventArgs

   procedure Initialize (this : in out WebAccountProviderActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderActivatedEventArgs, IWebAccountProviderActivatedEventArgs_Ptr);
   begin
      if this.m_IWebAccountProviderActivatedEventArgs /= null then
         if this.m_IWebAccountProviderActivatedEventArgs.all /= null then
            RefCount := this.m_IWebAccountProviderActivatedEventArgs.all.Release;
            Free (this.m_IWebAccountProviderActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderActivatedEventArgs

   function get_Operation
   (
      this : in out WebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation;
   begin
      Hr := this.m_IWebAccountProviderActivatedEventArgs.all.get_Operation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAuthenticationBrokerContinuationEventArgs

   procedure Initialize (this : in out WebAuthenticationBrokerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAuthenticationBrokerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAuthenticationBrokerContinuationEventArgs, IWebAuthenticationBrokerContinuationEventArgs_Ptr);
   begin
      if this.m_IWebAuthenticationBrokerContinuationEventArgs /= null then
         if this.m_IWebAuthenticationBrokerContinuationEventArgs.all /= null then
            RefCount := this.m_IWebAuthenticationBrokerContinuationEventArgs.all.Release;
            Free (this.m_IWebAuthenticationBrokerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAuthenticationBrokerContinuationEventArgs

   function get_WebAuthenticationResult
   (
      this : in out WebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.IWebAuthenticationResult;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
         Hr := this.m_IWebAuthenticationBrokerContinuationEventArgs.all.get_WebAuthenticationResult (m_ComRetVal'Access);
         Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
         Retval.m_IWebAuthenticationResult.all := m_ComRetVal;
      end return;
   end;

   function get_ContinuationData
   (
      this : in out WebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

end;

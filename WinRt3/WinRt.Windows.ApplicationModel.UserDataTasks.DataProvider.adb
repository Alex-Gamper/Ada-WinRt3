--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskDataProviderConnection

   procedure Initialize (this : in out UserDataTaskDataProviderConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskDataProviderConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskDataProviderConnection, IUserDataTaskDataProviderConnection_Ptr);
   begin
      if this.m_IUserDataTaskDataProviderConnection /= null then
         if this.m_IUserDataTaskDataProviderConnection.all /= null then
            RefCount := this.m_IUserDataTaskDataProviderConnection.all.Release;
            Free (this.m_IUserDataTaskDataProviderConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskDataProviderConnection

   function add_CreateOrUpdateTaskRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.add_CreateOrUpdateTaskRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CreateOrUpdateTaskRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.remove_CreateOrUpdateTaskRequested (token);
   end;

   function add_SyncRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.add_SyncRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SyncRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.remove_SyncRequested (token);
   end;

   function add_SkipOccurrenceRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.add_SkipOccurrenceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SkipOccurrenceRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.remove_SkipOccurrenceRequested (token);
   end;

   function add_CompleteTaskRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.add_CompleteTaskRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CompleteTaskRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.remove_CompleteTaskRequested (token);
   end;

   function add_DeleteTaskRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.add_DeleteTaskRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DeleteTaskRequested
   (
      this : in out UserDataTaskDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.remove_DeleteTaskRequested (token);
   end;

   procedure Start
   (
      this : in out UserDataTaskDataProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskDataProviderConnection.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskDataProviderTriggerDetails

   procedure Initialize (this : in out UserDataTaskDataProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskDataProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskDataProviderTriggerDetails, IUserDataTaskDataProviderTriggerDetails_Ptr);
   begin
      if this.m_IUserDataTaskDataProviderTriggerDetails /= null then
         if this.m_IUserDataTaskDataProviderTriggerDetails.all /= null then
            RefCount := this.m_IUserDataTaskDataProviderTriggerDetails.all.Release;
            Free (this.m_IUserDataTaskDataProviderTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskDataProviderTriggerDetails

   function get_Connection
   (
      this : in out UserDataTaskDataProviderTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskDataProviderConnection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskDataProviderConnection do
         Hr := this.m_IUserDataTaskDataProviderTriggerDetails.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IUserDataTaskDataProviderConnection := new Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskDataProviderConnection;
         Retval.m_IUserDataTaskDataProviderConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListCompleteTaskRequest

   procedure Initialize (this : in out UserDataTaskListCompleteTaskRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListCompleteTaskRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListCompleteTaskRequest, IUserDataTaskListCompleteTaskRequest_Ptr);
   begin
      if this.m_IUserDataTaskListCompleteTaskRequest /= null then
         if this.m_IUserDataTaskListCompleteTaskRequest.all /= null then
            RefCount := this.m_IUserDataTaskListCompleteTaskRequest.all.Release;
            Free (this.m_IUserDataTaskListCompleteTaskRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListCompleteTaskRequest

   function get_TaskListId
   (
      this : in out UserDataTaskListCompleteTaskRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListCompleteTaskRequest.all.get_TaskListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TaskId
   (
      this : in out UserDataTaskListCompleteTaskRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListCompleteTaskRequest.all.get_TaskId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out UserDataTaskListCompleteTaskRequest;
      completedTaskId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_completedTaskId : WinRt.HString := To_HString (completedTaskId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListCompleteTaskRequest.all.ReportCompletedAsync (HStr_completedTaskId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_completedTaskId);
   end;

   procedure ReportFailedAsync
   (
      this : in out UserDataTaskListCompleteTaskRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListCompleteTaskRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListCompleteTaskRequestEventArgs

   procedure Initialize (this : in out UserDataTaskListCompleteTaskRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListCompleteTaskRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListCompleteTaskRequestEventArgs, IUserDataTaskListCompleteTaskRequestEventArgs_Ptr);
   begin
      if this.m_IUserDataTaskListCompleteTaskRequestEventArgs /= null then
         if this.m_IUserDataTaskListCompleteTaskRequestEventArgs.all /= null then
            RefCount := this.m_IUserDataTaskListCompleteTaskRequestEventArgs.all.Release;
            Free (this.m_IUserDataTaskListCompleteTaskRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListCompleteTaskRequestEventArgs

   function get_Request
   (
      this : in out UserDataTaskListCompleteTaskRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCompleteTaskRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListCompleteTaskRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCompleteTaskRequest do
         Hr := this.m_IUserDataTaskListCompleteTaskRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListCompleteTaskRequest := new Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListCompleteTaskRequest;
         Retval.m_IUserDataTaskListCompleteTaskRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out UserDataTaskListCompleteTaskRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IUserDataTaskListCompleteTaskRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListCreateOrUpdateTaskRequest

   procedure Initialize (this : in out UserDataTaskListCreateOrUpdateTaskRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListCreateOrUpdateTaskRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListCreateOrUpdateTaskRequest, IUserDataTaskListCreateOrUpdateTaskRequest_Ptr);
   begin
      if this.m_IUserDataTaskListCreateOrUpdateTaskRequest /= null then
         if this.m_IUserDataTaskListCreateOrUpdateTaskRequest.all /= null then
            RefCount := this.m_IUserDataTaskListCreateOrUpdateTaskRequest.all.Release;
            Free (this.m_IUserDataTaskListCreateOrUpdateTaskRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListCreateOrUpdateTaskRequest

   function get_TaskListId
   (
      this : in out UserDataTaskListCreateOrUpdateTaskRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListCreateOrUpdateTaskRequest.all.get_TaskListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Task
   (
      this : in out UserDataTaskListCreateOrUpdateTaskRequest
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTask'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTask;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTask do
         Hr := this.m_IUserDataTaskListCreateOrUpdateTaskRequest.all.get_Task (m_ComRetVal'Access);
         Retval.m_IUserDataTask := new Windows.ApplicationModel.UserDataTasks.IUserDataTask;
         Retval.m_IUserDataTask.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCompletedAsync
   (
      this : in out UserDataTaskListCreateOrUpdateTaskRequest;
      createdOrUpdatedUserDataTask : Windows.ApplicationModel.UserDataTasks.UserDataTask'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListCreateOrUpdateTaskRequest.all.ReportCompletedAsync (createdOrUpdatedUserDataTask.m_IUserDataTask.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out UserDataTaskListCreateOrUpdateTaskRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListCreateOrUpdateTaskRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListCreateOrUpdateTaskRequestEventArgs

   procedure Initialize (this : in out UserDataTaskListCreateOrUpdateTaskRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListCreateOrUpdateTaskRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListCreateOrUpdateTaskRequestEventArgs, IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_Ptr);
   begin
      if this.m_IUserDataTaskListCreateOrUpdateTaskRequestEventArgs /= null then
         if this.m_IUserDataTaskListCreateOrUpdateTaskRequestEventArgs.all /= null then
            RefCount := this.m_IUserDataTaskListCreateOrUpdateTaskRequestEventArgs.all.Release;
            Free (this.m_IUserDataTaskListCreateOrUpdateTaskRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListCreateOrUpdateTaskRequestEventArgs

   function get_Request
   (
      this : in out UserDataTaskListCreateOrUpdateTaskRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCreateOrUpdateTaskRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListCreateOrUpdateTaskRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListCreateOrUpdateTaskRequest do
         Hr := this.m_IUserDataTaskListCreateOrUpdateTaskRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListCreateOrUpdateTaskRequest := new Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListCreateOrUpdateTaskRequest;
         Retval.m_IUserDataTaskListCreateOrUpdateTaskRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out UserDataTaskListCreateOrUpdateTaskRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IUserDataTaskListCreateOrUpdateTaskRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListDeleteTaskRequest

   procedure Initialize (this : in out UserDataTaskListDeleteTaskRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListDeleteTaskRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListDeleteTaskRequest, IUserDataTaskListDeleteTaskRequest_Ptr);
   begin
      if this.m_IUserDataTaskListDeleteTaskRequest /= null then
         if this.m_IUserDataTaskListDeleteTaskRequest.all /= null then
            RefCount := this.m_IUserDataTaskListDeleteTaskRequest.all.Release;
            Free (this.m_IUserDataTaskListDeleteTaskRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListDeleteTaskRequest

   function get_TaskListId
   (
      this : in out UserDataTaskListDeleteTaskRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListDeleteTaskRequest.all.get_TaskListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TaskId
   (
      this : in out UserDataTaskListDeleteTaskRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListDeleteTaskRequest.all.get_TaskId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out UserDataTaskListDeleteTaskRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListDeleteTaskRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out UserDataTaskListDeleteTaskRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListDeleteTaskRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListDeleteTaskRequestEventArgs

   procedure Initialize (this : in out UserDataTaskListDeleteTaskRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListDeleteTaskRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListDeleteTaskRequestEventArgs, IUserDataTaskListDeleteTaskRequestEventArgs_Ptr);
   begin
      if this.m_IUserDataTaskListDeleteTaskRequestEventArgs /= null then
         if this.m_IUserDataTaskListDeleteTaskRequestEventArgs.all /= null then
            RefCount := this.m_IUserDataTaskListDeleteTaskRequestEventArgs.all.Release;
            Free (this.m_IUserDataTaskListDeleteTaskRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListDeleteTaskRequestEventArgs

   function get_Request
   (
      this : in out UserDataTaskListDeleteTaskRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListDeleteTaskRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListDeleteTaskRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListDeleteTaskRequest do
         Hr := this.m_IUserDataTaskListDeleteTaskRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListDeleteTaskRequest := new Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListDeleteTaskRequest;
         Retval.m_IUserDataTaskListDeleteTaskRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out UserDataTaskListDeleteTaskRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IUserDataTaskListDeleteTaskRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListSkipOccurrenceRequest

   procedure Initialize (this : in out UserDataTaskListSkipOccurrenceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListSkipOccurrenceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListSkipOccurrenceRequest, IUserDataTaskListSkipOccurrenceRequest_Ptr);
   begin
      if this.m_IUserDataTaskListSkipOccurrenceRequest /= null then
         if this.m_IUserDataTaskListSkipOccurrenceRequest.all /= null then
            RefCount := this.m_IUserDataTaskListSkipOccurrenceRequest.all.Release;
            Free (this.m_IUserDataTaskListSkipOccurrenceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListSkipOccurrenceRequest

   function get_TaskListId
   (
      this : in out UserDataTaskListSkipOccurrenceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListSkipOccurrenceRequest.all.get_TaskListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TaskId
   (
      this : in out UserDataTaskListSkipOccurrenceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListSkipOccurrenceRequest.all.get_TaskId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out UserDataTaskListSkipOccurrenceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListSkipOccurrenceRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out UserDataTaskListSkipOccurrenceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListSkipOccurrenceRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListSkipOccurrenceRequestEventArgs

   procedure Initialize (this : in out UserDataTaskListSkipOccurrenceRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListSkipOccurrenceRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListSkipOccurrenceRequestEventArgs, IUserDataTaskListSkipOccurrenceRequestEventArgs_Ptr);
   begin
      if this.m_IUserDataTaskListSkipOccurrenceRequestEventArgs /= null then
         if this.m_IUserDataTaskListSkipOccurrenceRequestEventArgs.all /= null then
            RefCount := this.m_IUserDataTaskListSkipOccurrenceRequestEventArgs.all.Release;
            Free (this.m_IUserDataTaskListSkipOccurrenceRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListSkipOccurrenceRequestEventArgs

   function get_Request
   (
      this : in out UserDataTaskListSkipOccurrenceRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSkipOccurrenceRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListSkipOccurrenceRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSkipOccurrenceRequest do
         Hr := this.m_IUserDataTaskListSkipOccurrenceRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListSkipOccurrenceRequest := new Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListSkipOccurrenceRequest;
         Retval.m_IUserDataTaskListSkipOccurrenceRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out UserDataTaskListSkipOccurrenceRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IUserDataTaskListSkipOccurrenceRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListSyncManagerSyncRequest

   procedure Initialize (this : in out UserDataTaskListSyncManagerSyncRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListSyncManagerSyncRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListSyncManagerSyncRequest, IUserDataTaskListSyncManagerSyncRequest_Ptr);
   begin
      if this.m_IUserDataTaskListSyncManagerSyncRequest /= null then
         if this.m_IUserDataTaskListSyncManagerSyncRequest.all /= null then
            RefCount := this.m_IUserDataTaskListSyncManagerSyncRequest.all.Release;
            Free (this.m_IUserDataTaskListSyncManagerSyncRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListSyncManagerSyncRequest

   function get_TaskListId
   (
      this : in out UserDataTaskListSyncManagerSyncRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskListSyncManagerSyncRequest.all.get_TaskListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out UserDataTaskListSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListSyncManagerSyncRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out UserDataTaskListSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskListSyncManagerSyncRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListSyncManagerSyncRequestEventArgs

   procedure Initialize (this : in out UserDataTaskListSyncManagerSyncRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListSyncManagerSyncRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListSyncManagerSyncRequestEventArgs, IUserDataTaskListSyncManagerSyncRequestEventArgs_Ptr);
   begin
      if this.m_IUserDataTaskListSyncManagerSyncRequestEventArgs /= null then
         if this.m_IUserDataTaskListSyncManagerSyncRequestEventArgs.all /= null then
            RefCount := this.m_IUserDataTaskListSyncManagerSyncRequestEventArgs.all.Release;
            Free (this.m_IUserDataTaskListSyncManagerSyncRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListSyncManagerSyncRequestEventArgs

   function get_Request
   (
      this : in out UserDataTaskListSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSyncManagerSyncRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListSyncManagerSyncRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.DataProvider.UserDataTaskListSyncManagerSyncRequest do
         Hr := this.m_IUserDataTaskListSyncManagerSyncRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListSyncManagerSyncRequest := new Windows.ApplicationModel.UserDataTasks.DataProvider.IUserDataTaskListSyncManagerSyncRequest;
         Retval.m_IUserDataTaskListSyncManagerSyncRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out UserDataTaskListSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IUserDataTaskListSyncManagerSyncRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.EnterpriseData;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.DataTransfer is

   package IAsyncOperation_ClipboardHistoryItemsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.DataTransfer.IClipboardHistoryItemsResult);
   package AsyncOperationCompletedHandler_ClipboardHistoryItemsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.DataTransfer.IClipboardHistoryItemsResult);

   package IMap_HString_IInspectable is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.IInspectable);
   package IMapView_HString_IInspectable is new WinRt.Windows.Foundation.Collections.IMapView (WinRt.HString, WinRt.IInspectable);
   package IAsyncOperation_IInspectable is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.IInspectable);
   package AsyncOperationCompletedHandler_IInspectable is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.IInspectable);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_Uri is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Foundation.IUriRuntimeClass);
   package AsyncOperationCompletedHandler_Uri is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Foundation.IUriRuntimeClass);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_RandomAccessStreamReference is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);
   package AsyncOperationCompletedHandler_RandomAccessStreamReference is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);

   package IAsyncOperation_ProtectionPolicyEvaluationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult);
   package AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult);

   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body Clipboard is

      function GetHistoryItemsAsync
      return WinRt.Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ClipboardHistoryItemsResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ClipboardHistoryItemsResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.DataTransfer.IClipboardHistoryItemsResult;
         m_IID            : aliased WinRt.IID := (1736115896, 308, 22162, (180, 135, 76, 142, 36, 8, 202, 1 )); -- Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult;
         m_HandlerIID     : aliased WinRt.IID := (2216536109, 41772, 22935, (132, 80, 245, 74, 241, 213, 71, 126 ));
         m_Handler        : AsyncOperationCompletedHandler_ClipboardHistoryItemsResult.Kind := new AsyncOperationCompletedHandler_ClipboardHistoryItemsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClipboardHistoryItemsResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClipboardHistoryItemsResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClipboardHistoryItemsResult.Kind_Delegate, AsyncOperationCompletedHandler_ClipboardHistoryItemsResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult do
            Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetHistoryItemsAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IClipboardHistoryItemsResult := new Windows.ApplicationModel.DataTransfer.IClipboardHistoryItemsResult;
                        Retval.m_IClipboardHistoryItemsResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function ClearHistory
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ClearHistory (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function DeleteItemFromHistory
      (
         item : Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeleteItemFromHistory (item.m_IClipboardHistoryItem.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function SetHistoryItemAsContent
      (
         item : Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem'Class
      )
      return WinRt.Windows.ApplicationModel.DataTransfer.SetHistoryItemAsContentStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.SetHistoryItemAsContentStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetHistoryItemAsContent (item.m_IClipboardHistoryItem.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsHistoryEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsHistoryEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsRoamingEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsRoamingEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function SetContentWithOptions
      (
         content : Windows.ApplicationModel.DataTransfer.DataPackage'Class;
         options : Windows.ApplicationModel.DataTransfer.ClipboardContentOptions'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetContentWithOptions (content.m_IDataPackage.all, options.m_IClipboardContentOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_HistoryChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_HistoryChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_HistoryChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_HistoryChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_RoamingEnabledChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_RoamingEnabledChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_RoamingEnabledChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_RoamingEnabledChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_HistoryEnabledChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_HistoryEnabledChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_HistoryEnabledChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_HistoryEnabledChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetContent
      return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackageView;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView do
            Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetContent (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IDataPackageView := new Windows.ApplicationModel.DataTransfer.IDataPackageView;
               Retval.m_IDataPackageView.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure SetContent
      (
         content : Windows.ApplicationModel.DataTransfer.DataPackage'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetContent (content.m_IDataPackage.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure Flush is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Flush;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure Clear is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Clear;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_ContentChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ContentChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ContentChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.Clipboard");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IClipboardStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClipboardStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ContentChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end Clipboard;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClipboardContentOptions

   procedure Initialize (this : in out ClipboardContentOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClipboardContentOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClipboardContentOptions, IClipboardContentOptions_Ptr);
   begin
      if this.m_IClipboardContentOptions /= null then
         if this.m_IClipboardContentOptions.all /= null then
            RefCount := this.m_IClipboardContentOptions.all.Release;
            Free (this.m_IClipboardContentOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ClipboardContentOptions

   function Constructor return ClipboardContentOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.ClipboardContentOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.DataTransfer.IClipboardContentOptions;
   begin
      return RetVal : ClipboardContentOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IClipboardContentOptions := new Windows.ApplicationModel.DataTransfer.IClipboardContentOptions;
            Retval.m_IClipboardContentOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClipboardContentOptions

   function get_IsRoamable
   (
      this : in out ClipboardContentOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClipboardContentOptions.all.get_IsRoamable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsRoamable
   (
      this : in out ClipboardContentOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClipboardContentOptions.all.put_IsRoamable (value);
   end;

   function get_IsAllowedInHistory
   (
      this : in out ClipboardContentOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClipboardContentOptions.all.get_IsAllowedInHistory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAllowedInHistory
   (
      this : in out ClipboardContentOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClipboardContentOptions.all.put_IsAllowedInHistory (value);
   end;

   function get_RoamingFormats
   (
      this : in out ClipboardContentOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IClipboardContentOptions.all.get_RoamingFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_HistoryFormats
   (
      this : in out ClipboardContentOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IClipboardContentOptions.all.get_HistoryFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClipboardHistoryChangedEventArgs

   procedure Initialize (this : in out ClipboardHistoryChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClipboardHistoryChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClipboardHistoryChangedEventArgs, IClipboardHistoryChangedEventArgs_Ptr);
   begin
      if this.m_IClipboardHistoryChangedEventArgs /= null then
         if this.m_IClipboardHistoryChangedEventArgs.all /= null then
            RefCount := this.m_IClipboardHistoryChangedEventArgs.all.Release;
            Free (this.m_IClipboardHistoryChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClipboardHistoryChangedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClipboardHistoryItem

   procedure Initialize (this : in out ClipboardHistoryItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClipboardHistoryItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClipboardHistoryItem, IClipboardHistoryItem_Ptr);
   begin
      if this.m_IClipboardHistoryItem /= null then
         if this.m_IClipboardHistoryItem.all /= null then
            RefCount := this.m_IClipboardHistoryItem.all.Release;
            Free (this.m_IClipboardHistoryItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClipboardHistoryItem

   function get_Id
   (
      this : in out ClipboardHistoryItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClipboardHistoryItem.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Timestamp
   (
      this : in out ClipboardHistoryItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IClipboardHistoryItem.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Content
   (
      this : in out ClipboardHistoryItem
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackageView;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView do
         Hr := this.m_IClipboardHistoryItem.all.get_Content (m_ComRetVal'Access);
         Retval.m_IDataPackageView := new Windows.ApplicationModel.DataTransfer.IDataPackageView;
         Retval.m_IDataPackageView.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClipboardHistoryItemsResult

   procedure Initialize (this : in out ClipboardHistoryItemsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClipboardHistoryItemsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClipboardHistoryItemsResult, IClipboardHistoryItemsResult_Ptr);
   begin
      if this.m_IClipboardHistoryItemsResult /= null then
         if this.m_IClipboardHistoryItemsResult.all /= null then
            RefCount := this.m_IClipboardHistoryItemsResult.all.Release;
            Free (this.m_IClipboardHistoryItemsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClipboardHistoryItemsResult

   function get_Status
   (
      this : in out ClipboardHistoryItemsResult
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResultStatus;
   begin
      Hr := this.m_IClipboardHistoryItemsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Items
   (
      this : in out ClipboardHistoryItemsResult
   )
   return IVectorView_IClipboardHistoryItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IClipboardHistoryItem.Kind;
   begin
      Hr := this.m_IClipboardHistoryItemsResult.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IClipboardHistoryItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataPackage

   procedure Initialize (this : in out DataPackage) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataPackage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataPackage, IDataPackage_Ptr);
   begin
      if this.m_IDataPackage /= null then
         if this.m_IDataPackage.all /= null then
            RefCount := this.m_IDataPackage.all.Release;
            Free (this.m_IDataPackage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DataPackage

   function Constructor return DataPackage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.DataPackage");
      m_ComRetVal  : aliased Windows.ApplicationModel.DataTransfer.IDataPackage;
   begin
      return RetVal : DataPackage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDataPackage := new Windows.ApplicationModel.DataTransfer.IDataPackage;
            Retval.m_IDataPackage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataPackage

   function GetView
   (
      this : in out DataPackage
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackageView;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView do
         Hr := this.m_IDataPackage.all.GetView (m_ComRetVal'Access);
         Retval.m_IDataPackageView := new Windows.ApplicationModel.DataTransfer.IDataPackageView;
         Retval.m_IDataPackageView.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out DataPackage
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackagePropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackagePropertySet do
         Hr := this.m_IDataPackage.all.get_Properties (m_ComRetVal'Access);
         Retval.m_IDataPackagePropertySet := new Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet;
         Retval.m_IDataPackagePropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_RequestedOperation
   (
      this : in out DataPackage
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.DataPackageOperation;
   begin
      Hr := this.m_IDataPackage.all.get_RequestedOperation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequestedOperation
   (
      this : in out DataPackage;
      value : Windows.ApplicationModel.DataTransfer.DataPackageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.put_RequestedOperation (value);
   end;

   function add_OperationCompleted
   (
      this : in out DataPackage;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDataPackage.all.add_OperationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_OperationCompleted
   (
      this : in out DataPackage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.remove_OperationCompleted (token);
   end;

   function add_Destroyed
   (
      this : in out DataPackage;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDataPackage.all.add_Destroyed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Destroyed
   (
      this : in out DataPackage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.remove_Destroyed (token);
   end;

   procedure SetData
   (
      this : in out DataPackage;
      formatId : WinRt.WString;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_formatId : WinRt.HString := To_HString (formatId);
   begin
      Hr := this.m_IDataPackage.all.SetData (HStr_formatId, value);
      Hr := WindowsDeleteString (HStr_formatId);
   end;

   procedure SetDataProvider
   (
      this : in out DataPackage;
      formatId : WinRt.WString;
      delayRenderer : Windows.ApplicationModel.DataTransfer.DataProviderHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_formatId : WinRt.HString := To_HString (formatId);
   begin
      Hr := this.m_IDataPackage.all.SetDataProvider (HStr_formatId, delayRenderer);
      Hr := WindowsDeleteString (HStr_formatId);
   end;

   procedure SetText
   (
      this : in out DataPackage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataPackage.all.SetText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetUri
   (
      this : in out DataPackage;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.SetUri (value.m_IUriRuntimeClass.all);
   end;

   procedure SetHtmlFormat
   (
      this : in out DataPackage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataPackage.all.SetHtmlFormat (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ResourceMap
   (
      this : in out DataPackage
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IDataPackage.all.get_ResourceMap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetRtf
   (
      this : in out DataPackage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataPackage.all.SetRtf (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetBitmap
   (
      this : in out DataPackage;
      value : Windows.Storage.Streams.RandomAccessStreamReference'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.SetBitmap (value.m_IRandomAccessStreamReference.all);
   end;

   procedure SetStorageItems
   (
      this : in out DataPackage;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.SetStorageItems (value);
   end;

   procedure SetStorageItems
   (
      this : in out DataPackage;
      value : GenericObject;
      readOnly : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackage.all.SetStorageItems (value, readOnly);
   end;

   procedure SetApplicationLink
   (
      this : in out DataPackage;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackage.all);
      Hr := m_Interface.SetApplicationLink (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetWebLink
   (
      this : in out DataPackage;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackage.all);
      Hr := m_Interface.SetWebLink (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function add_ShareCompleted
   (
      this : in out DataPackage;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackage.all);
      Hr := m_Interface.add_ShareCompleted (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ShareCompleted
   (
      this : in out DataPackage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackage.all);
      Hr := m_Interface.remove_ShareCompleted (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_ShareCanceled
   (
      this : in out DataPackage;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage4, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackage.all);
      Hr := m_Interface.add_ShareCanceled (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ShareCanceled
   (
      this : in out DataPackage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage4, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackage.all);
      Hr := m_Interface.remove_ShareCanceled (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataPackagePropertySet

   procedure Initialize (this : in out DataPackagePropertySet) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataPackagePropertySet) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataPackagePropertySet, IDataPackagePropertySet_Ptr);
   begin
      if this.m_IDataPackagePropertySet /= null then
         if this.m_IDataPackagePropertySet.all /= null then
            RefCount := this.m_IDataPackagePropertySet.all.Release;
            Free (this.m_IDataPackagePropertySet);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataPackagePropertySet

   function get_Title
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataPackagePropertySet.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out DataPackagePropertySet;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataPackagePropertySet.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Description
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataPackagePropertySet.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out DataPackagePropertySet;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataPackagePropertySet.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Thumbnail
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IDataPackagePropertySet.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Thumbnail
   (
      this : in out DataPackagePropertySet;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackagePropertySet.all.put_Thumbnail (value);
   end;

   function get_FileTypes
   (
      this : in out DataPackagePropertySet
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IDataPackagePropertySet.all.get_FileTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ApplicationName
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataPackagePropertySet.all.get_ApplicationName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ApplicationName
   (
      this : in out DataPackagePropertySet;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataPackagePropertySet.all.put_ApplicationName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ApplicationListingUri
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IDataPackagePropertySet.all.get_ApplicationListingUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ApplicationListingUri
   (
      this : in out DataPackagePropertySet;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackagePropertySet.all.put_ApplicationListingUri (value.m_IUriRuntimeClass.all);
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.Object>
   function Lookup
   (
      this : in out DataPackagePropertySet;
      key : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out DataPackagePropertySet;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out DataPackagePropertySet;
      key : WinRt.WString;
      value : WinRt.IInspectable
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.Insert (HStr_key, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out DataPackagePropertySet;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out DataPackagePropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (453850480, 2167, 24258, (138, 44, 59, 149, 57, 80, 106, 202 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, IMap_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function get_ContentSourceWebLink
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
         Hr := m_Interface.get_ContentSourceWebLink (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentSourceWebLink
   (
      this : in out DataPackagePropertySet;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_ContentSourceWebLink (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ContentSourceApplicationLink
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
         Hr := m_Interface.get_ContentSourceApplicationLink (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentSourceApplicationLink
   (
      this : in out DataPackagePropertySet;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_ContentSourceApplicationLink (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_PackageFamilyName
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.get_PackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PackageFamilyName
   (
      this : in out DataPackagePropertySet;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_PackageFamilyName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Square30x30Logo
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.get_Square30x30Logo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Square30x30Logo
   (
      this : in out DataPackagePropertySet;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_Square30x30Logo (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LogoBackgroundColor
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.get_LogoBackgroundColor (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LogoBackgroundColor
   (
      this : in out DataPackagePropertySet;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_LogoBackgroundColor (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_EnterpriseId
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.get_EnterpriseId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_EnterpriseId
   (
      this : in out DataPackagePropertySet;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_EnterpriseId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ContentSourceUserActivityJson
   (
      this : in out DataPackagePropertySet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet4, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.get_ContentSourceUserActivityJson (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContentSourceUserActivityJson
   (
      this : in out DataPackagePropertySet;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet4, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySet4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySet.all);
      Hr := m_Interface.put_ContentSourceUserActivityJson (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataPackagePropertySetView

   procedure Initialize (this : in out DataPackagePropertySetView) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataPackagePropertySetView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataPackagePropertySetView, IDataPackagePropertySetView_Ptr);
   begin
      if this.m_IDataPackagePropertySetView /= null then
         if this.m_IDataPackagePropertySetView.all /= null then
            RefCount := this.m_IDataPackagePropertySetView.all.Release;
            Free (this.m_IDataPackagePropertySetView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataPackagePropertySetView

   function get_Title
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataPackagePropertySetView.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataPackagePropertySetView.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Thumbnail
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IDataPackagePropertySetView.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   function get_FileTypes
   (
      this : in out DataPackagePropertySetView
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IDataPackagePropertySetView.all.get_FileTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ApplicationName
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataPackagePropertySetView.all.get_ApplicationName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ApplicationListingUri
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IDataPackagePropertySetView.all.get_ApplicationListingUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_PackageFamilyName
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_PackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContentSourceWebLink
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
         Hr := m_Interface.get_ContentSourceWebLink (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ContentSourceApplicationLink
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
         Hr := m_Interface.get_ContentSourceApplicationLink (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Square30x30Logo
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_Square30x30Logo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LogoBackgroundColor
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_LogoBackgroundColor (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EnterpriseId
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_EnterpriseId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContentSourceUserActivityJson
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView4, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_ContentSourceUserActivityJson (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsFromRoamingClipboard
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView5, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackagePropertySetView5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_IsFromRoamingClipboard (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMapView`2<System.String,System.Object>
   function Lookup
   (
      this : in out DataPackagePropertySetView;
      key : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out DataPackagePropertySetView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out DataPackagePropertySetView;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Split
   (
      this : in out DataPackagePropertySetView;
      first : access GenericObject_Ptr;
      second : access GenericObject_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackagePropertySetView.all);
      Hr := m_Interface.Split (first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataPackageView

   procedure Initialize (this : in out DataPackageView) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataPackageView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataPackageView, IDataPackageView_Ptr);
   begin
      if this.m_IDataPackageView /= null then
         if this.m_IDataPackageView.all /= null then
            RefCount := this.m_IDataPackageView.all.Release;
            Free (this.m_IDataPackageView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataPackageView

   function get_Properties
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView do
         Hr := this.m_IDataPackageView.all.get_Properties (m_ComRetVal'Access);
         Retval.m_IDataPackagePropertySetView := new Windows.ApplicationModel.DataTransfer.IDataPackagePropertySetView;
         Retval.m_IDataPackagePropertySetView.all := m_ComRetVal;
      end return;
   end;

   function get_RequestedOperation
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.DataPackageOperation;
   begin
      Hr := this.m_IDataPackageView.all.get_RequestedOperation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportOperationCompleted
   (
      this : in out DataPackageView;
      value : Windows.ApplicationModel.DataTransfer.DataPackageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataPackageView.all.ReportOperationCompleted (value);
   end;

   function get_AvailableFormats
   (
      this : in out DataPackageView
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IDataPackageView.all.get_AvailableFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function Contains
   (
      this : in out DataPackageView;
      formatId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_formatId : WinRt.HString := To_HString (formatId);
   begin
      Hr := this.m_IDataPackageView.all.Contains (HStr_formatId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_formatId);
      return m_ComRetVal;
   end;

   function GetDataAsync
   (
      this : in out DataPackageView;
      formatId : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_formatId : WinRt.HString := To_HString (formatId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInspectable.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInspectable.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.IInspectable;
      m_IID            : aliased WinRt.IID := (2884975703, 61008, 21314, (181, 42, 38, 227, 184, 204, 2, 79 )); -- IInspectable;
      m_HandlerIID     : aliased WinRt.IID := (1057498670, 41697, 20788, (146, 151, 233, 33, 31, 72, 26, 45 ));
      m_Handler        : AsyncOperationCompletedHandler_IInspectable.Kind := new AsyncOperationCompletedHandler_IInspectable.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInspectable.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInspectable.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInspectable.Kind_Delegate, AsyncOperationCompletedHandler_IInspectable.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetDataAsync (HStr_formatId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_formatId);
      return m_RetVal;
   end;

   function GetTextAsync
   (
      this : in out DataPackageView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetTextAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetTextAsync
   (
      this : in out DataPackageView;
      formatId : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_formatId : WinRt.HString := To_HString (formatId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetTextAsync (HStr_formatId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_formatId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetUriAsync
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Uri.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Uri.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Foundation.IUriRuntimeClass;
      m_IID            : aliased WinRt.IID := (1679604189, 41613, 23010, (184, 219, 162, 39, 237, 166, 207, 46 )); -- Windows.Foundation.Uri;
      m_HandlerIID     : aliased WinRt.IID := (2907107788, 11184, 22620, (152, 133, 3, 194, 120, 13, 77, 88 ));
      m_Handler        : AsyncOperationCompletedHandler_Uri.Kind := new AsyncOperationCompletedHandler_Uri.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Uri.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Uri.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Uri.Kind_Delegate, AsyncOperationCompletedHandler_Uri.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IDataPackageView.all.GetUriAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
                  Retval.m_IUriRuntimeClass.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetHtmlFormatAsync
   (
      this : in out DataPackageView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetHtmlFormatAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetResourceMapAsync
   (
      this : in out DataPackageView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (4227935556, 11727, 20834, (190, 154, 118, 104, 103, 90, 165, 144 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3570101120, 33306, 23163, (137, 141, 213, 137, 23, 179, 26, 54 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetResourceMapAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetRtfAsync
   (
      this : in out DataPackageView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetRtfAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetBitmapAsync
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RandomAccessStreamReference.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RandomAccessStreamReference.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
      m_IID            : aliased WinRt.IID := (3640935114, 21564, 20555, (158, 185, 41, 75, 202, 216, 162, 131 )); -- Windows.Storage.Streams.RandomAccessStreamReference;
      m_HandlerIID     : aliased WinRt.IID := (1025521458, 57047, 23858, (135, 230, 193, 121, 120, 31, 121, 31 ));
      m_Handler        : AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IDataPackageView.all.GetBitmapAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
                  Retval.m_IRandomAccessStreamReference.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetStorageItemsAsync
   (
      this : in out DataPackageView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1260130263, 31233, 24186, (166, 254, 190, 69, 0, 40, 63, 35 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1363373685, 44257, 23144, (178, 96, 248, 67, 184, 70, 240, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataPackageView.all.GetStorageItemsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetApplicationLinkAsync
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Uri.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Uri.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Foundation.IUriRuntimeClass;
      m_IID            : aliased WinRt.IID := (1679604189, 41613, 23010, (184, 219, 162, 39, 237, 166, 207, 46 )); -- Windows.Foundation.Uri;
      m_HandlerIID     : aliased WinRt.IID := (2907107788, 11184, 22620, (152, 133, 3, 194, 120, 13, 77, 88 ));
      m_Handler        : AsyncOperationCompletedHandler_Uri.Kind := new AsyncOperationCompletedHandler_Uri.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Uri.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Uri.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Uri.Kind_Delegate, AsyncOperationCompletedHandler_Uri.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackageView2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDataPackageView.all);
         Hr := m_Interface.GetApplicationLinkAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
                  Retval.m_IUriRuntimeClass.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetWebLinkAsync
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Uri.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Uri.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Foundation.IUriRuntimeClass;
      m_IID            : aliased WinRt.IID := (1679604189, 41613, 23010, (184, 219, 162, 39, 237, 166, 207, 46 )); -- Windows.Foundation.Uri;
      m_HandlerIID     : aliased WinRt.IID := (2907107788, 11184, 22620, (152, 133, 3, 194, 120, 13, 77, 88 ));
      m_Handler        : AsyncOperationCompletedHandler_Uri.Kind := new AsyncOperationCompletedHandler_Uri.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Uri.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Uri.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Uri.Kind_Delegate, AsyncOperationCompletedHandler_Uri.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackageView2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDataPackageView.all);
         Hr := m_Interface.GetWebLinkAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
                  Retval.m_IUriRuntimeClass.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestAccessAsync
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackageView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackageView.all);
      Hr := m_Interface.RequestAccessAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestAccessAsync
   (
      this : in out DataPackageView;
      enterpriseId : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_enterpriseId : WinRt.HString := To_HString (enterpriseId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackageView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackageView.all);
      Hr := m_Interface.RequestAccessAsync (HStr_enterpriseId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_enterpriseId);
      return m_RetVal;
   end;

   function UnlockAndAssumeEnterpriseIdentity
   (
      this : in out DataPackageView
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView3, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackageView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackageView.all);
      Hr := m_Interface.UnlockAndAssumeEnterpriseIdentity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAcceptedFormatId
   (
      this : in out DataPackageView;
      formatId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_formatId : WinRt.HString := To_HString (formatId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataPackageView4, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataPackageView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataPackageView.all);
      Hr := m_Interface.SetAcceptedFormatId (HStr_formatId);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_formatId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataProviderDeferral

   procedure Initialize (this : in out DataProviderDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataProviderDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataProviderDeferral, IDataProviderDeferral_Ptr);
   begin
      if this.m_IDataProviderDeferral /= null then
         if this.m_IDataProviderDeferral.all /= null then
            RefCount := this.m_IDataProviderDeferral.all.Release;
            Free (this.m_IDataProviderDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataProviderDeferral

   procedure Complete
   (
      this : in out DataProviderDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataProviderDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DataProviderHandler

   function Invoke
   (
      this : access DataProviderHandler_Delegate;
      request : Windows.ApplicationModel.DataTransfer.IDataProviderRequest
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (request);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataProviderRequest

   procedure Initialize (this : in out DataProviderRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataProviderRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataProviderRequest, IDataProviderRequest_Ptr);
   begin
      if this.m_IDataProviderRequest /= null then
         if this.m_IDataProviderRequest.all /= null then
            RefCount := this.m_IDataProviderRequest.all.Release;
            Free (this.m_IDataProviderRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataProviderRequest

   function get_FormatId
   (
      this : in out DataProviderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataProviderRequest.all.get_FormatId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Deadline
   (
      this : in out DataProviderRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IDataProviderRequest.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out DataProviderRequest
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataProviderDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataProviderDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataProviderDeferral do
         Hr := this.m_IDataProviderRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDataProviderDeferral := new Windows.ApplicationModel.DataTransfer.IDataProviderDeferral;
         Retval.m_IDataProviderDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure SetData
   (
      this : in out DataProviderRequest;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataProviderRequest.all.SetData (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataRequest

   procedure Initialize (this : in out DataRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataRequest, IDataRequest_Ptr);
   begin
      if this.m_IDataRequest /= null then
         if this.m_IDataRequest.all /= null then
            RefCount := this.m_IDataRequest.all.Release;
            Free (this.m_IDataRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataRequest

   function get_Data
   (
      this : in out DataRequest
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackage do
         Hr := this.m_IDataRequest.all.get_Data (m_ComRetVal'Access);
         Retval.m_IDataPackage := new Windows.ApplicationModel.DataTransfer.IDataPackage;
         Retval.m_IDataPackage.all := m_ComRetVal;
      end return;
   end;

   procedure put_Data
   (
      this : in out DataRequest;
      value : Windows.ApplicationModel.DataTransfer.DataPackage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataRequest.all.put_Data (value.m_IDataPackage.all);
   end;

   function get_Deadline
   (
      this : in out DataRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IDataRequest.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure FailWithDisplayText
   (
      this : in out DataRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataRequest.all.FailWithDisplayText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetDeferral
   (
      this : in out DataRequest
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataRequestDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataRequestDeferral do
         Hr := this.m_IDataRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDataRequestDeferral := new Windows.ApplicationModel.DataTransfer.IDataRequestDeferral;
         Retval.m_IDataRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataRequestDeferral

   procedure Initialize (this : in out DataRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataRequestDeferral, IDataRequestDeferral_Ptr);
   begin
      if this.m_IDataRequestDeferral /= null then
         if this.m_IDataRequestDeferral.all /= null then
            RefCount := this.m_IDataRequestDeferral.all.Release;
            Free (this.m_IDataRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataRequestDeferral

   procedure Complete
   (
      this : in out DataRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataRequestDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataRequestedEventArgs

   procedure Initialize (this : in out DataRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataRequestedEventArgs, IDataRequestedEventArgs_Ptr);
   begin
      if this.m_IDataRequestedEventArgs /= null then
         if this.m_IDataRequestedEventArgs.all /= null then
            RefCount := this.m_IDataRequestedEventArgs.all.Release;
            Free (this.m_IDataRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataRequestedEventArgs

   function get_Request
   (
      this : in out DataRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataRequest do
         Hr := this.m_IDataRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IDataRequest := new Windows.ApplicationModel.DataTransfer.IDataRequest;
         Retval.m_IDataRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataTransferManager

   procedure Initialize (this : in out DataTransferManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataTransferManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataTransferManager, IDataTransferManager_Ptr);
   begin
      if this.m_IDataTransferManager /= null then
         if this.m_IDataTransferManager.all /= null then
            RefCount := this.m_IDataTransferManager.all.Release;
            Free (this.m_IDataTransferManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DataTransferManager

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.DataTransferManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDataTransferManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure ShowShareUI is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.DataTransferManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDataTransferManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowShareUI;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetForCurrentView
   return WinRt.Windows.ApplicationModel.DataTransfer.DataTransferManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.DataTransferManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataTransferManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataTransferManager do
         Hr := RoGetActivationFactory (m_hString, IID_IDataTransferManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDataTransferManager := new Windows.ApplicationModel.DataTransfer.IDataTransferManager;
            Retval.m_IDataTransferManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure ShowShareUI
   (
      options : Windows.ApplicationModel.DataTransfer.ShareUIOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.DataTransferManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDataTransferManagerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowShareUI (options.m_IShareUIOptions.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataTransferManager

   function add_DataRequested
   (
      this : in out DataTransferManager;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDataTransferManager.all.add_DataRequested (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DataRequested
   (
      this : in out DataTransferManager;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataTransferManager.all.remove_DataRequested (eventCookie);
   end;

   function add_TargetApplicationChosen
   (
      this : in out DataTransferManager;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDataTransferManager.all.add_TargetApplicationChosen (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TargetApplicationChosen
   (
      this : in out DataTransferManager;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataTransferManager.all.remove_TargetApplicationChosen (eventCookie);
   end;

   function add_ShareProvidersRequested
   (
      this : in out DataTransferManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManager_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManager2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataTransferManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataTransferManager.all);
      Hr := m_Interface.add_ShareProvidersRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ShareProvidersRequested
   (
      this : in out DataTransferManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManager_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IDataTransferManager2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IDataTransferManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataTransferManager.all);
      Hr := m_Interface.remove_ShareProvidersRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body HtmlFormatHelper is

      function GetStaticFragment
      (
         htmlFormat : WinRt.WString
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.HtmlFormatHelper");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IHtmlFormatHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
         HStr_htmlFormat : WinRt.HString := To_HString (htmlFormat);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHtmlFormatHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStaticFragment (HStr_htmlFormat, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_htmlFormat);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function CreateHtmlFormat
      (
         htmlFragment : WinRt.WString
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.HtmlFormatHelper");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IHtmlFormatHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
         HStr_htmlFragment : WinRt.HString := To_HString (htmlFragment);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHtmlFormatHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateHtmlFormat (HStr_htmlFragment, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_htmlFragment);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end HtmlFormatHelper;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OperationCompletedEventArgs

   procedure Initialize (this : in out OperationCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out OperationCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOperationCompletedEventArgs, IOperationCompletedEventArgs_Ptr);
   begin
      if this.m_IOperationCompletedEventArgs /= null then
         if this.m_IOperationCompletedEventArgs.all /= null then
            RefCount := this.m_IOperationCompletedEventArgs.all.Release;
            Free (this.m_IOperationCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OperationCompletedEventArgs

   function get_Operation
   (
      this : in out OperationCompletedEventArgs
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.DataPackageOperation;
   begin
      Hr := this.m_IOperationCompletedEventArgs.all.get_Operation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AcceptedFormatId
   (
      this : in out OperationCompletedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.DataTransfer.IOperationCompletedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.DataTransfer.IOperationCompletedEventArgs_Interface, WinRt.Windows.ApplicationModel.DataTransfer.IOperationCompletedEventArgs2, WinRt.Windows.ApplicationModel.DataTransfer.IID_IOperationCompletedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOperationCompletedEventArgs.all);
      Hr := m_Interface.get_AcceptedFormatId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareCompletedEventArgs

   procedure Initialize (this : in out ShareCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareCompletedEventArgs, IShareCompletedEventArgs_Ptr);
   begin
      if this.m_IShareCompletedEventArgs /= null then
         if this.m_IShareCompletedEventArgs.all /= null then
            RefCount := this.m_IShareCompletedEventArgs.all.Release;
            Free (this.m_IShareCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareCompletedEventArgs

   function get_ShareTarget
   (
      this : in out ShareCompletedEventArgs
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ShareTargetInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IShareTargetInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.ShareTargetInfo do
         Hr := this.m_IShareCompletedEventArgs.all.get_ShareTarget (m_ComRetVal'Access);
         Retval.m_IShareTargetInfo := new Windows.ApplicationModel.DataTransfer.IShareTargetInfo;
         Retval.m_IShareTargetInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareProvider

   procedure Initialize (this : in out ShareProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareProvider, IShareProvider_Ptr);
   begin
      if this.m_IShareProvider /= null then
         if this.m_IShareProvider.all /= null then
            RefCount := this.m_IShareProvider.all.Release;
            Free (this.m_IShareProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ShareProvider

   function Constructor
   (
      title : WinRt.WString;
      displayIcon : Windows.Storage.Streams.RandomAccessStreamReference'Class;
      backgroundColor : Windows.UI.Color;
      handler : Windows.ApplicationModel.DataTransfer.ShareProviderHandler
   )
   return ShareProvider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.ShareProvider");
      m_Factory    : access IShareProviderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.DataTransfer.IShareProvider;
      HStr_title : WinRt.HString := To_HString (title);
   begin
      return RetVal : ShareProvider do
         Hr := RoGetActivationFactory (m_hString, IID_IShareProviderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_title, displayIcon.m_IRandomAccessStreamReference.all, backgroundColor, handler, m_ComRetVal'Access);
            Retval.m_IShareProvider := new Windows.ApplicationModel.DataTransfer.IShareProvider;
            Retval.m_IShareProvider.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_title);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareProvider

   function get_Title
   (
      this : in out ShareProvider
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IShareProvider.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayIcon
   (
      this : in out ShareProvider
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IShareProvider.all.get_DisplayIcon (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   function get_BackgroundColor
   (
      this : in out ShareProvider
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IShareProvider.all.get_BackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Tag
   (
      this : in out ShareProvider
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IShareProvider.all.get_Tag (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Tag
   (
      this : in out ShareProvider;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShareProvider.all.put_Tag (value);
   end;

   -----------------------------------------------------------------------------
   -- Delegate ShareProviderHandler

   function Invoke
   (
      this : access ShareProviderHandler_Delegate;
      operation : Windows.ApplicationModel.DataTransfer.IShareProviderOperation
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (operation);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareProviderOperation

   procedure Initialize (this : in out ShareProviderOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareProviderOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareProviderOperation, IShareProviderOperation_Ptr);
   begin
      if this.m_IShareProviderOperation /= null then
         if this.m_IShareProviderOperation.all /= null then
            RefCount := this.m_IShareProviderOperation.all.Release;
            Free (this.m_IShareProviderOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareProviderOperation

   function get_Data
   (
      this : in out ShareProviderOperation
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackageView;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView do
         Hr := this.m_IShareProviderOperation.all.get_Data (m_ComRetVal'Access);
         Retval.m_IDataPackageView := new Windows.ApplicationModel.DataTransfer.IDataPackageView;
         Retval.m_IDataPackageView.all := m_ComRetVal;
      end return;
   end;

   function get_Provider
   (
      this : in out ShareProviderOperation
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ShareProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IShareProvider;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.ShareProvider do
         Hr := this.m_IShareProviderOperation.all.get_Provider (m_ComRetVal'Access);
         Retval.m_IShareProvider := new Windows.ApplicationModel.DataTransfer.IShareProvider;
         Retval.m_IShareProvider.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCompleted
   (
      this : in out ShareProviderOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShareProviderOperation.all.ReportCompleted;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareProvidersRequestedEventArgs

   procedure Initialize (this : in out ShareProvidersRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareProvidersRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareProvidersRequestedEventArgs, IShareProvidersRequestedEventArgs_Ptr);
   begin
      if this.m_IShareProvidersRequestedEventArgs /= null then
         if this.m_IShareProvidersRequestedEventArgs.all /= null then
            RefCount := this.m_IShareProvidersRequestedEventArgs.all.Release;
            Free (this.m_IShareProvidersRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareProvidersRequestedEventArgs

   function get_Providers
   (
      this : in out ShareProvidersRequestedEventArgs
   )
   return IVector_IShareProvider.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IShareProvider.Kind;
   begin
      Hr := this.m_IShareProvidersRequestedEventArgs.all.get_Providers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IShareProvider (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Data
   (
      this : in out ShareProvidersRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackageView;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackageView do
         Hr := this.m_IShareProvidersRequestedEventArgs.all.get_Data (m_ComRetVal'Access);
         Retval.m_IDataPackageView := new Windows.ApplicationModel.DataTransfer.IDataPackageView;
         Retval.m_IDataPackageView.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out ShareProvidersRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IShareProvidersRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareTargetInfo

   procedure Initialize (this : in out ShareTargetInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareTargetInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareTargetInfo, IShareTargetInfo_Ptr);
   begin
      if this.m_IShareTargetInfo /= null then
         if this.m_IShareTargetInfo.all /= null then
            RefCount := this.m_IShareTargetInfo.all.Release;
            Free (this.m_IShareTargetInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareTargetInfo

   function get_AppUserModelId
   (
      this : in out ShareTargetInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IShareTargetInfo.all.get_AppUserModelId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ShareProvider
   (
      this : in out ShareTargetInfo
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ShareProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IShareProvider;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.ShareProvider do
         Hr := this.m_IShareTargetInfo.all.get_ShareProvider (m_ComRetVal'Access);
         Retval.m_IShareProvider := new Windows.ApplicationModel.DataTransfer.IShareProvider;
         Retval.m_IShareProvider.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShareUIOptions

   procedure Initialize (this : in out ShareUIOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShareUIOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShareUIOptions, IShareUIOptions_Ptr);
   begin
      if this.m_IShareUIOptions /= null then
         if this.m_IShareUIOptions.all /= null then
            RefCount := this.m_IShareUIOptions.all.Release;
            Free (this.m_IShareUIOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ShareUIOptions

   function Constructor return ShareUIOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.ShareUIOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.DataTransfer.IShareUIOptions;
   begin
      return RetVal : ShareUIOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IShareUIOptions := new Windows.ApplicationModel.DataTransfer.IShareUIOptions;
            Retval.m_IShareUIOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShareUIOptions

   function get_Theme
   (
      this : in out ShareUIOptions
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ShareUITheme is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.ShareUITheme;
   begin
      Hr := this.m_IShareUIOptions.all.get_Theme (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Theme
   (
      this : in out ShareUIOptions;
      value : Windows.ApplicationModel.DataTransfer.ShareUITheme
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShareUIOptions.all.put_Theme (value);
   end;

   function get_SelectionRect
   (
      this : in out ShareUIOptions
   )
   return IReference_Rect.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Rect.Kind;
   begin
      Hr := this.m_IShareUIOptions.all.get_SelectionRect (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Rect (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SelectionRect
   (
      this : in out ShareUIOptions;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShareUIOptions.all.put_SelectionRect (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SharedStorageAccessManager is

      function AddFile
      (
         file : Windows.Storage.IStorageFile
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.ISharedStorageAccessManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISharedStorageAccessManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AddFile (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function RedeemTokenForFileAsync
      (
         token : WinRt.WString
      )
      return WinRt.Windows.Storage.StorageFile is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.ISharedStorageAccessManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_token : WinRt.HString := To_HString (token);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_StorageFile.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
         m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
         m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
         m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Storage.StorageFile do
            Hr := RoGetActivationFactory (m_hString, IID_ISharedStorageAccessManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RedeemTokenForFileAsync (HStr_token, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                        Retval.m_IStorageFile.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_token);
         end return;
      end;

      procedure RemoveFile
      (
         token : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.ISharedStorageAccessManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_token : WinRt.HString := To_HString (token);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISharedStorageAccessManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RemoveFile (HStr_token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_token);
      end;

   end SharedStorageAccessManager;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StandardDataFormats is

      function get_WebLink
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_WebLink (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ApplicationLink
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ApplicationLink (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Text
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Text (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Uri
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Uri (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Html
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Html (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Rtf
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Rtf (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Bitmap
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bitmap (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_StorageItems
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StorageItems (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UserActivityJsonArray
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DataTransfer.StandardDataFormats");
         m_Factory        : access WinRt.Windows.ApplicationModel.DataTransfer.IStandardDataFormatsStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardDataFormatsStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UserActivityJsonArray (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end StandardDataFormats;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetApplicationChosenEventArgs

   procedure Initialize (this : in out TargetApplicationChosenEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetApplicationChosenEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetApplicationChosenEventArgs, ITargetApplicationChosenEventArgs_Ptr);
   begin
      if this.m_ITargetApplicationChosenEventArgs /= null then
         if this.m_ITargetApplicationChosenEventArgs.all /= null then
            RefCount := this.m_ITargetApplicationChosenEventArgs.all.Release;
            Free (this.m_ITargetApplicationChosenEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetApplicationChosenEventArgs

   function get_ApplicationName
   (
      this : in out TargetApplicationChosenEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetApplicationChosenEventArgs.all.get_ApplicationName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

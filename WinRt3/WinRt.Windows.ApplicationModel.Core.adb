--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Activation;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with WinRt.Windows.UI.Core;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Core is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_AppRestartFailureReason is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason);
   package AsyncOperationCompletedHandler_AppRestartFailureReason is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppListEntry

   procedure Initialize (this : in out AppListEntry) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppListEntry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppListEntry, IAppListEntry_Ptr);
   begin
      if this.m_IAppListEntry /= null then
         if this.m_IAppListEntry.all /= null then
            RefCount := this.m_IAppListEntry.all.Release;
            Free (this.m_IAppListEntry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppListEntry

   function get_DisplayInfo
   (
      this : in out AppListEntry
   )
   return WinRt.Windows.ApplicationModel.AppDisplayInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppDisplayInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppDisplayInfo do
         Hr := this.m_IAppListEntry.all.get_DisplayInfo (m_ComRetVal'Access);
         Retval.m_IAppDisplayInfo := new Windows.ApplicationModel.IAppDisplayInfo;
         Retval.m_IAppDisplayInfo.all := m_ComRetVal;
      end return;
   end;

   function LaunchAsync
   (
      this : in out AppListEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppListEntry.all.LaunchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_AppUserModelId
   (
      this : in out AppListEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.IAppListEntry2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.IAppListEntry_Interface, WinRt.Windows.ApplicationModel.Core.IAppListEntry2, WinRt.Windows.ApplicationModel.Core.IID_IAppListEntry2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppListEntry.all);
      Hr := m_Interface.get_AppUserModelId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function LaunchForUserAsync
   (
      this : in out AppListEntry;
      user : Windows.System.User'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.IAppListEntry3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.IAppListEntry_Interface, WinRt.Windows.ApplicationModel.Core.IAppListEntry3, WinRt.Windows.ApplicationModel.Core.IID_IAppListEntry3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppListEntry.all);
      Hr := m_Interface.LaunchForUserAsync (user.m_IUser.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CoreApplication is

      procedure Exit_x is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationExit_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationExit'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Exit_x;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_Exiting
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationExit_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationExit'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Exiting (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Exiting
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationExit_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationExit'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Exiting (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_Views
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreImmersiveApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreImmersiveApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Views (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateNewView
      (
         runtimeType : WinRt.WString;
         entryPoint : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Core.CoreApplicationView is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreImmersiveApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Core.ICoreApplicationView;
         HStr_runtimeType : WinRt.HString := To_HString (runtimeType);
         HStr_entryPoint : WinRt.HString := To_HString (entryPoint);
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Core.CoreApplicationView do
            Hr := RoGetActivationFactory (m_hString, IID_ICoreImmersiveApplication'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateNewView (HStr_runtimeType, HStr_entryPoint, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ICoreApplicationView := new Windows.ApplicationModel.Core.ICoreApplicationView;
               Retval.m_ICoreApplicationView.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_runtimeType);
            Hr := WindowsDeleteString (HStr_entryPoint);
         end return;
      end;

      function get_MainView
      return WinRt.Windows.ApplicationModel.Core.CoreApplicationView is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreImmersiveApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Core.ICoreApplicationView;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Core.CoreApplicationView do
            Hr := RoGetActivationFactory (m_hString, IID_ICoreImmersiveApplication'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_MainView (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ICoreApplicationView := new Windows.ApplicationModel.Core.ICoreApplicationView;
               Retval.m_ICoreApplicationView.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateNewView
      return WinRt.Windows.ApplicationModel.Core.CoreApplicationView is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreImmersiveApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Core.ICoreApplicationView;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Core.CoreApplicationView do
            Hr := RoGetActivationFactory (m_hString, IID_ICoreImmersiveApplication2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateNewView (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ICoreApplicationView := new Windows.ApplicationModel.Core.ICoreApplicationView;
               Retval.m_ICoreApplicationView.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure IncrementApplicationUseCount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationUseCount_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationUseCount'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IncrementApplicationUseCount;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure DecrementApplicationUseCount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationUseCount_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationUseCount'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DecrementApplicationUseCount;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_Id
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Id (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function add_Suspending
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Suspending (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Suspending
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Suspending (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_Resuming
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Resuming (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Resuming
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Resuming (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_Properties
      return WinRt.Windows.Foundation.Collections.IPropertySet is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Properties (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetCurrentView
      return WinRt.Windows.ApplicationModel.Core.CoreApplicationView is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Core.ICoreApplicationView;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Core.CoreApplicationView do
            Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCurrentView (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ICoreApplicationView := new Windows.ApplicationModel.Core.ICoreApplicationView;
               Retval.m_ICoreApplicationView.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure Run
      (
         viewSource : Windows.ApplicationModel.Core.IFrameworkViewSource
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Run (viewSource);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RunWithActivationFactories
      (
         activationFactoryCallback : Windows.Foundation.IGetActivationFactory
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RunWithActivationFactories (activationFactoryCallback);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_BackgroundActivated
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_BackgroundActivated (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_BackgroundActivated
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_BackgroundActivated (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_LeavingBackground
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_LeavingBackground (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_LeavingBackground
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_LeavingBackground (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_EnteredBackground
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_EnteredBackground (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_EnteredBackground
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_EnteredBackground (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure EnablePrelaunch
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnablePrelaunch (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_UnhandledErrorDetected
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationUnhandledError_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationUnhandledError'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_UnhandledErrorDetected (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_UnhandledErrorDetected
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplicationUnhandledError_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplicationUnhandledError'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_UnhandledErrorDetected (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function CreateNewView
      (
         viewSource : Windows.ApplicationModel.Core.IFrameworkViewSource
      )
      return WinRt.Windows.ApplicationModel.Core.CoreApplicationView is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreImmersiveApplication3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Core.ICoreApplicationView;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Core.CoreApplicationView do
            Hr := RoGetActivationFactory (m_hString, IID_ICoreImmersiveApplication3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateNewView (viewSource, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ICoreApplicationView := new Windows.ApplicationModel.Core.ICoreApplicationView;
               Retval.m_ICoreApplicationView.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestRestartAsync
      (
         launchArguments : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_launchArguments : WinRt.HString := To_HString (launchArguments);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AppRestartFailureReason.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AppRestartFailureReason.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_IID            : aliased WinRt.IID := (154701917, 21696, 22319, (132, 81, 75, 253, 43, 82, 237, 218 )); -- Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_HandlerIID     : aliased WinRt.IID := (3706472330, 40743, 23645, (175, 219, 201, 26, 238, 79, 31, 2 ));
         m_Handler        : AsyncOperationCompletedHandler_AppRestartFailureReason.Kind := new AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppRestartFailureReason.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_AppRestartFailureReason.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestRestartAsync (HStr_launchArguments, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_launchArguments);
         return m_RetVal;
      end;

      function RequestRestartForUserAsync
      (
         user : Windows.System.User'Class;
         launchArguments : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Core.CoreApplication");
         m_Factory        : access WinRt.Windows.ApplicationModel.Core.ICoreApplication3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_launchArguments : WinRt.HString := To_HString (launchArguments);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AppRestartFailureReason.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AppRestartFailureReason.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_IID            : aliased WinRt.IID := (154701917, 21696, 22319, (132, 81, 75, 253, 43, 82, 237, 218 )); -- Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_HandlerIID     : aliased WinRt.IID := (3706472330, 40743, 23645, (175, 219, 201, 26, 238, 79, 31, 2 ));
         m_Handler        : AsyncOperationCompletedHandler_AppRestartFailureReason.Kind := new AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppRestartFailureReason.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_AppRestartFailureReason.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreApplication3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestRestartForUserAsync (user.m_IUser.all, HStr_launchArguments, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_launchArguments);
         return m_RetVal;
      end;

   end CoreApplication;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreApplicationView

   procedure Initialize (this : in out CoreApplicationView) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreApplicationView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreApplicationView, ICoreApplicationView_Ptr);
   begin
      if this.m_ICoreApplicationView /= null then
         if this.m_ICoreApplicationView.all /= null then
            RefCount := this.m_ICoreApplicationView.all.Release;
            Free (this.m_ICoreApplicationView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreApplicationView

   function get_CoreWindow
   (
      this : in out CoreApplicationView
   )
   return WinRt.Windows.UI.Core.CoreWindow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.ICoreWindow;
   begin
      return RetVal : WinRt.Windows.UI.Core.CoreWindow do
         Hr := this.m_ICoreApplicationView.all.get_CoreWindow (m_ComRetVal'Access);
         Retval.m_ICoreWindow := new Windows.UI.Core.ICoreWindow;
         Retval.m_ICoreWindow.all := m_ComRetVal;
      end return;
   end;

   function add_Activated
   (
      this : in out CoreApplicationView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreApplicationView.all.add_Activated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Activated
   (
      this : in out CoreApplicationView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreApplicationView.all.remove_Activated (token);
   end;

   function get_IsMain
   (
      this : in out CoreApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreApplicationView.all.get_IsMain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsHosted
   (
      this : in out CoreApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreApplicationView.all.get_IsHosted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Dispatcher
   (
      this : in out CoreApplicationView
   )
   return WinRt.Windows.UI.Core.CoreDispatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.ICoreDispatcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView2, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Core.CoreDispatcher do
         m_Interface := QInterface (this.m_ICoreApplicationView.all);
         Hr := m_Interface.get_Dispatcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICoreDispatcher := new Windows.UI.Core.ICoreDispatcher;
         Retval.m_ICoreDispatcher.all := m_ComRetVal;
      end return;
   end;

   function get_IsComponent
   (
      this : in out CoreApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICoreApplicationView.all);
      Hr := m_Interface.get_IsComponent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_TitleBar
   (
      this : in out CoreApplicationView
   )
   return WinRt.Windows.ApplicationModel.Core.CoreApplicationViewTitleBar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Core.ICoreApplicationViewTitleBar;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Core.CoreApplicationViewTitleBar do
         m_Interface := QInterface (this.m_ICoreApplicationView.all);
         Hr := m_Interface.get_TitleBar (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICoreApplicationViewTitleBar := new Windows.ApplicationModel.Core.ICoreApplicationViewTitleBar;
         Retval.m_ICoreApplicationViewTitleBar.all := m_ComRetVal;
      end return;
   end;

   function add_HostedViewClosing
   (
      this : in out CoreApplicationView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICoreApplicationView.all);
      Hr := m_Interface.add_HostedViewClosing (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_HostedViewClosing
   (
      this : in out CoreApplicationView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView3, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICoreApplicationView.all);
      Hr := m_Interface.remove_HostedViewClosing (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_Properties
   (
      this : in out CoreApplicationView
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView5, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICoreApplicationView.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DispatcherQueue
   (
      this : in out CoreApplicationView
   )
   return WinRt.Windows.System.DispatcherQueue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Core.ICoreApplicationView6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueue;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Core.ICoreApplicationView_Interface, WinRt.Windows.ApplicationModel.Core.ICoreApplicationView6, WinRt.Windows.ApplicationModel.Core.IID_ICoreApplicationView6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueue do
         m_Interface := QInterface (this.m_ICoreApplicationView.all);
         Hr := m_Interface.get_DispatcherQueue (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDispatcherQueue := new Windows.System.IDispatcherQueue;
         Retval.m_IDispatcherQueue.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreApplicationViewTitleBar

   procedure Initialize (this : in out CoreApplicationViewTitleBar) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreApplicationViewTitleBar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreApplicationViewTitleBar, ICoreApplicationViewTitleBar_Ptr);
   begin
      if this.m_ICoreApplicationViewTitleBar /= null then
         if this.m_ICoreApplicationViewTitleBar.all /= null then
            RefCount := this.m_ICoreApplicationViewTitleBar.all.Release;
            Free (this.m_ICoreApplicationViewTitleBar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreApplicationViewTitleBar

   procedure put_ExtendViewIntoTitleBar
   (
      this : in out CoreApplicationViewTitleBar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.put_ExtendViewIntoTitleBar (value);
   end;

   function get_ExtendViewIntoTitleBar
   (
      this : in out CoreApplicationViewTitleBar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.get_ExtendViewIntoTitleBar (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemOverlayLeftInset
   (
      this : in out CoreApplicationViewTitleBar
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.get_SystemOverlayLeftInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemOverlayRightInset
   (
      this : in out CoreApplicationViewTitleBar
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.get_SystemOverlayRightInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out CoreApplicationViewTitleBar
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_LayoutMetricsChanged
   (
      this : in out CoreApplicationViewTitleBar;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.add_LayoutMetricsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LayoutMetricsChanged
   (
      this : in out CoreApplicationViewTitleBar;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.remove_LayoutMetricsChanged (token);
   end;

   function get_IsVisible
   (
      this : in out CoreApplicationViewTitleBar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.get_IsVisible (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_IsVisibleChanged
   (
      this : in out CoreApplicationViewTitleBar;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.add_IsVisibleChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsVisibleChanged
   (
      this : in out CoreApplicationViewTitleBar;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreApplicationViewTitleBar.all.remove_IsVisibleChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HostedViewClosingEventArgs

   procedure Initialize (this : in out HostedViewClosingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out HostedViewClosingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHostedViewClosingEventArgs, IHostedViewClosingEventArgs_Ptr);
   begin
      if this.m_IHostedViewClosingEventArgs /= null then
         if this.m_IHostedViewClosingEventArgs.all /= null then
            RefCount := this.m_IHostedViewClosingEventArgs.all.Release;
            Free (this.m_IHostedViewClosingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HostedViewClosingEventArgs

   function GetDeferral
   (
      this : in out HostedViewClosingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IHostedViewClosingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UnhandledError

   procedure Initialize (this : in out UnhandledError) is
   begin
      null;
   end;

   procedure Finalize (this : in out UnhandledError) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUnhandledError, IUnhandledError_Ptr);
   begin
      if this.m_IUnhandledError /= null then
         if this.m_IUnhandledError.all /= null then
            RefCount := this.m_IUnhandledError.all.Release;
            Free (this.m_IUnhandledError);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UnhandledError

   function get_Handled
   (
      this : in out UnhandledError
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUnhandledError.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Propagate
   (
      this : in out UnhandledError
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUnhandledError.all.Propagate;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UnhandledErrorDetectedEventArgs

   procedure Initialize (this : in out UnhandledErrorDetectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UnhandledErrorDetectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUnhandledErrorDetectedEventArgs, IUnhandledErrorDetectedEventArgs_Ptr);
   begin
      if this.m_IUnhandledErrorDetectedEventArgs /= null then
         if this.m_IUnhandledErrorDetectedEventArgs.all /= null then
            RefCount := this.m_IUnhandledErrorDetectedEventArgs.all.Release;
            Free (this.m_IUnhandledErrorDetectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UnhandledErrorDetectedEventArgs

   function get_UnhandledError
   (
      this : in out UnhandledErrorDetectedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Core.UnhandledError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Core.IUnhandledError;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Core.UnhandledError do
         Hr := this.m_IUnhandledErrorDetectedEventArgs.all.get_UnhandledError (m_ComRetVal'Access);
         Retval.m_IUnhandledError := new Windows.ApplicationModel.Core.IUnhandledError;
         Retval.m_IUnhandledError.all := m_ComRetVal;
      end return;
   end;

end;

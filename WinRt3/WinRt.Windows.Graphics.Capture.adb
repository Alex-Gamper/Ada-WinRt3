--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Graphics.DirectX;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.System;
with WinRt.Windows.UI.Composition;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Capture is

   package IAsyncOperation_GraphicsCaptureItem is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Capture.IGraphicsCaptureItem);
   package AsyncOperationCompletedHandler_GraphicsCaptureItem is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Capture.IGraphicsCaptureItem);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Direct3D11CaptureFrame

   procedure Initialize (this : in out Direct3D11CaptureFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out Direct3D11CaptureFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDirect3D11CaptureFrame, IDirect3D11CaptureFrame_Ptr);
   begin
      if this.m_IDirect3D11CaptureFrame /= null then
         if this.m_IDirect3D11CaptureFrame.all /= null then
            RefCount := this.m_IDirect3D11CaptureFrame.all.Release;
            Free (this.m_IDirect3D11CaptureFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Direct3D11CaptureFrame

   function get_Surface
   (
      this : in out Direct3D11CaptureFrame
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
   begin
      Hr := this.m_IDirect3D11CaptureFrame.all.get_Surface (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativeTime
   (
      this : in out Direct3D11CaptureFrame
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IDirect3D11CaptureFrame.all.get_SystemRelativeTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContentSize
   (
      this : in out Direct3D11CaptureFrame
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_IDirect3D11CaptureFrame.all.get_ContentSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out Direct3D11CaptureFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Capture.IDirect3D11CaptureFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDirect3D11CaptureFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Direct3D11CaptureFramePool

   procedure Initialize (this : in out Direct3D11CaptureFramePool) is
   begin
      null;
   end;

   procedure Finalize (this : in out Direct3D11CaptureFramePool) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDirect3D11CaptureFramePool, IDirect3D11CaptureFramePool_Ptr);
   begin
      if this.m_IDirect3D11CaptureFramePool /= null then
         if this.m_IDirect3D11CaptureFramePool.all /= null then
            RefCount := this.m_IDirect3D11CaptureFramePool.all.Release;
            Free (this.m_IDirect3D11CaptureFramePool);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Direct3D11CaptureFramePool

   function CreateFreeThreaded
   (
      device : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      numberOfBuffers : WinRt.Int32;
      size : Windows.Graphics.SizeInt32
   )
   return WinRt.Windows.Graphics.Capture.Direct3D11CaptureFramePool is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Capture.Direct3D11CaptureFramePool");
      m_Factory        : access WinRt.Windows.Graphics.Capture.IDirect3D11CaptureFramePoolStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Capture.IDirect3D11CaptureFramePool;
   begin
      return RetVal : WinRt.Windows.Graphics.Capture.Direct3D11CaptureFramePool do
         Hr := RoGetActivationFactory (m_hString, IID_IDirect3D11CaptureFramePoolStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFreeThreaded (device, pixelFormat, numberOfBuffers, size, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDirect3D11CaptureFramePool := new Windows.Graphics.Capture.IDirect3D11CaptureFramePool;
            Retval.m_IDirect3D11CaptureFramePool.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      device : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      numberOfBuffers : WinRt.Int32;
      size : Windows.Graphics.SizeInt32
   )
   return WinRt.Windows.Graphics.Capture.Direct3D11CaptureFramePool is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Capture.Direct3D11CaptureFramePool");
      m_Factory        : access WinRt.Windows.Graphics.Capture.IDirect3D11CaptureFramePoolStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Capture.IDirect3D11CaptureFramePool;
   begin
      return RetVal : WinRt.Windows.Graphics.Capture.Direct3D11CaptureFramePool do
         Hr := RoGetActivationFactory (m_hString, IID_IDirect3D11CaptureFramePoolStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (device, pixelFormat, numberOfBuffers, size, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDirect3D11CaptureFramePool := new Windows.Graphics.Capture.IDirect3D11CaptureFramePool;
            Retval.m_IDirect3D11CaptureFramePool.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Direct3D11CaptureFramePool

   procedure Recreate
   (
      this : in out Direct3D11CaptureFramePool;
      device : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      numberOfBuffers : WinRt.Int32;
      size : Windows.Graphics.SizeInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDirect3D11CaptureFramePool.all.Recreate (device, pixelFormat, numberOfBuffers, size);
   end;

   function TryGetNextFrame
   (
      this : in out Direct3D11CaptureFramePool
   )
   return WinRt.Windows.Graphics.Capture.Direct3D11CaptureFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Capture.IDirect3D11CaptureFrame;
   begin
      return RetVal : WinRt.Windows.Graphics.Capture.Direct3D11CaptureFrame do
         Hr := this.m_IDirect3D11CaptureFramePool.all.TryGetNextFrame (m_ComRetVal'Access);
         Retval.m_IDirect3D11CaptureFrame := new Windows.Graphics.Capture.IDirect3D11CaptureFrame;
         Retval.m_IDirect3D11CaptureFrame.all := m_ComRetVal;
      end return;
   end;

   function add_FrameArrived
   (
      this : in out Direct3D11CaptureFramePool;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDirect3D11CaptureFramePool.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out Direct3D11CaptureFramePool;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDirect3D11CaptureFramePool.all.remove_FrameArrived (token);
   end;

   function CreateCaptureSession
   (
      this : in out Direct3D11CaptureFramePool;
      item : Windows.Graphics.Capture.GraphicsCaptureItem'Class
   )
   return WinRt.Windows.Graphics.Capture.GraphicsCaptureSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Capture.IGraphicsCaptureSession;
   begin
      return RetVal : WinRt.Windows.Graphics.Capture.GraphicsCaptureSession do
         Hr := this.m_IDirect3D11CaptureFramePool.all.CreateCaptureSession (item.m_IGraphicsCaptureItem.all, m_ComRetVal'Access);
         Retval.m_IGraphicsCaptureSession := new Windows.Graphics.Capture.IGraphicsCaptureSession;
         Retval.m_IGraphicsCaptureSession.all := m_ComRetVal;
      end return;
   end;

   function get_DispatcherQueue
   (
      this : in out Direct3D11CaptureFramePool
   )
   return WinRt.Windows.System.DispatcherQueue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueue;
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueue do
         Hr := this.m_IDirect3D11CaptureFramePool.all.get_DispatcherQueue (m_ComRetVal'Access);
         Retval.m_IDispatcherQueue := new Windows.System.IDispatcherQueue;
         Retval.m_IDispatcherQueue.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out Direct3D11CaptureFramePool
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Capture.IDirect3D11CaptureFramePool_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDirect3D11CaptureFramePool.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GraphicsCaptureItem

   procedure Initialize (this : in out GraphicsCaptureItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out GraphicsCaptureItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGraphicsCaptureItem, IGraphicsCaptureItem_Ptr);
   begin
      if this.m_IGraphicsCaptureItem /= null then
         if this.m_IGraphicsCaptureItem.all /= null then
            RefCount := this.m_IGraphicsCaptureItem.all.Release;
            Free (this.m_IGraphicsCaptureItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GraphicsCaptureItem

   function CreateFromVisual
   (
      visual : Windows.UI.Composition.Visual'Class
   )
   return WinRt.Windows.Graphics.Capture.GraphicsCaptureItem is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Capture.GraphicsCaptureItem");
      m_Factory        : access WinRt.Windows.Graphics.Capture.IGraphicsCaptureItemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Capture.IGraphicsCaptureItem;
   begin
      return RetVal : WinRt.Windows.Graphics.Capture.GraphicsCaptureItem do
         Hr := RoGetActivationFactory (m_hString, IID_IGraphicsCaptureItemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromVisual (visual.m_IVisual.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IGraphicsCaptureItem := new Windows.Graphics.Capture.IGraphicsCaptureItem;
            Retval.m_IGraphicsCaptureItem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GraphicsCaptureItem

   function get_DisplayName
   (
      this : in out GraphicsCaptureItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGraphicsCaptureItem.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out GraphicsCaptureItem
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_IGraphicsCaptureItem.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Closed
   (
      this : in out GraphicsCaptureItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGraphicsCaptureItem.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out GraphicsCaptureItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGraphicsCaptureItem.all.remove_Closed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GraphicsCapturePicker

   procedure Initialize (this : in out GraphicsCapturePicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out GraphicsCapturePicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGraphicsCapturePicker, IGraphicsCapturePicker_Ptr);
   begin
      if this.m_IGraphicsCapturePicker /= null then
         if this.m_IGraphicsCapturePicker.all /= null then
            RefCount := this.m_IGraphicsCapturePicker.all.Release;
            Free (this.m_IGraphicsCapturePicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GraphicsCapturePicker

   function Constructor return GraphicsCapturePicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Capture.GraphicsCapturePicker");
      m_ComRetVal  : aliased Windows.Graphics.Capture.IGraphicsCapturePicker;
   begin
      return RetVal : GraphicsCapturePicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGraphicsCapturePicker := new Windows.Graphics.Capture.IGraphicsCapturePicker;
            Retval.m_IGraphicsCapturePicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GraphicsCapturePicker

   function PickSingleItemAsync
   (
      this : in out GraphicsCapturePicker
   )
   return WinRt.Windows.Graphics.Capture.GraphicsCaptureItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GraphicsCaptureItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GraphicsCaptureItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Capture.IGraphicsCaptureItem;
      m_IID            : aliased WinRt.IID := (30208686, 4185, 23895, (168, 5, 10, 29, 252, 84, 202, 185 )); -- Windows.Graphics.Capture.GraphicsCaptureItem;
      m_HandlerIID     : aliased WinRt.IID := (1124092476, 65511, 21330, (133, 166, 123, 196, 27, 120, 47, 202 ));
      m_Handler        : AsyncOperationCompletedHandler_GraphicsCaptureItem.Kind := new AsyncOperationCompletedHandler_GraphicsCaptureItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GraphicsCaptureItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GraphicsCaptureItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GraphicsCaptureItem.Kind_Delegate, AsyncOperationCompletedHandler_GraphicsCaptureItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Capture.GraphicsCaptureItem do
         Hr := this.m_IGraphicsCapturePicker.all.PickSingleItemAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGraphicsCaptureItem := new Windows.Graphics.Capture.IGraphicsCaptureItem;
                  Retval.m_IGraphicsCaptureItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GraphicsCaptureSession

   procedure Initialize (this : in out GraphicsCaptureSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out GraphicsCaptureSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGraphicsCaptureSession, IGraphicsCaptureSession_Ptr);
   begin
      if this.m_IGraphicsCaptureSession /= null then
         if this.m_IGraphicsCaptureSession.all /= null then
            RefCount := this.m_IGraphicsCaptureSession.all.Release;
            Free (this.m_IGraphicsCaptureSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GraphicsCaptureSession

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Capture.GraphicsCaptureSession");
      m_Factory        : access WinRt.Windows.Graphics.Capture.IGraphicsCaptureSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGraphicsCaptureSessionStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GraphicsCaptureSession

   procedure StartCapture
   (
      this : in out GraphicsCaptureSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGraphicsCaptureSession.all.StartCapture;
   end;

   function get_IsCursorCaptureEnabled
   (
      this : in out GraphicsCaptureSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession_Interface, WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession2, WinRt.Windows.Graphics.Capture.IID_IGraphicsCaptureSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGraphicsCaptureSession.all);
      Hr := m_Interface.get_IsCursorCaptureEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsCursorCaptureEnabled
   (
      this : in out GraphicsCaptureSession;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession_Interface, WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession2, WinRt.Windows.Graphics.Capture.IID_IGraphicsCaptureSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGraphicsCaptureSession.all);
      Hr := m_Interface.put_IsCursorCaptureEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out GraphicsCaptureSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Capture.IGraphicsCaptureSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGraphicsCaptureSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

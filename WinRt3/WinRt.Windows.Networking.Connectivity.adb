--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.Connectivity is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_ConnectionProfileDeleteStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Connectivity.ConnectionProfileDeleteStatus);
   package AsyncOperationCompletedHandler_ConnectionProfileDeleteStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Connectivity.ConnectionProfileDeleteStatus);

   package IAsyncOperation_ConnectionSession is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Connectivity.IConnectionSession);
   package AsyncOperationCompletedHandler_ConnectionSession is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Connectivity.IConnectionSession);

   package IAsyncOperation_ConnectionProfile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Connectivity.IConnectionProfile);
   package AsyncOperationCompletedHandler_ConnectionProfile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Connectivity.IConnectionProfile);

   package IAsyncOperation_ProxyConfiguration is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Connectivity.IProxyConfiguration);
   package AsyncOperationCompletedHandler_ProxyConfiguration is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Connectivity.IProxyConfiguration);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AttributedNetworkUsage

   procedure Initialize (this : in out AttributedNetworkUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out AttributedNetworkUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAttributedNetworkUsage, IAttributedNetworkUsage_Ptr);
   begin
      if this.m_IAttributedNetworkUsage /= null then
         if this.m_IAttributedNetworkUsage.all /= null then
            RefCount := this.m_IAttributedNetworkUsage.all.Release;
            Free (this.m_IAttributedNetworkUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AttributedNetworkUsage

   function get_BytesSent
   (
      this : in out AttributedNetworkUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAttributedNetworkUsage.all.get_BytesSent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesReceived
   (
      this : in out AttributedNetworkUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAttributedNetworkUsage.all.get_BytesReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttributionId
   (
      this : in out AttributedNetworkUsage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAttributedNetworkUsage.all.get_AttributionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AttributionName
   (
      this : in out AttributedNetworkUsage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAttributedNetworkUsage.all.get_AttributionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AttributionThumbnail
   (
      this : in out AttributedNetworkUsage
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IAttributedNetworkUsage.all.get_AttributionThumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CellularApnContext

   procedure Initialize (this : in out CellularApnContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out CellularApnContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICellularApnContext, ICellularApnContext_Ptr);
   begin
      if this.m_ICellularApnContext /= null then
         if this.m_ICellularApnContext.all /= null then
            RefCount := this.m_ICellularApnContext.all.Release;
            Free (this.m_ICellularApnContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CellularApnContext

   function Constructor return CellularApnContext is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Connectivity.CellularApnContext");
      m_ComRetVal  : aliased Windows.Networking.Connectivity.ICellularApnContext;
   begin
      return RetVal : CellularApnContext do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICellularApnContext := new Windows.Networking.Connectivity.ICellularApnContext;
            Retval.m_ICellularApnContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CellularApnContext

   function get_ProviderId
   (
      this : in out CellularApnContext
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICellularApnContext.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ProviderId
   (
      this : in out CellularApnContext;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICellularApnContext.all.put_ProviderId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AccessPointName
   (
      this : in out CellularApnContext
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICellularApnContext.all.get_AccessPointName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AccessPointName
   (
      this : in out CellularApnContext;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICellularApnContext.all.put_AccessPointName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UserName
   (
      this : in out CellularApnContext
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICellularApnContext.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_UserName
   (
      this : in out CellularApnContext;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICellularApnContext.all.put_UserName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Password
   (
      this : in out CellularApnContext
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICellularApnContext.all.get_Password (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Password
   (
      this : in out CellularApnContext;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICellularApnContext.all.put_Password (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsCompressionEnabled
   (
      this : in out CellularApnContext
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICellularApnContext.all.get_IsCompressionEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCompressionEnabled
   (
      this : in out CellularApnContext;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICellularApnContext.all.put_IsCompressionEnabled (value);
   end;

   function get_AuthenticationType
   (
      this : in out CellularApnContext
   )
   return WinRt.Windows.Networking.Connectivity.CellularApnAuthenticationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.CellularApnAuthenticationType;
   begin
      Hr := this.m_ICellularApnContext.all.get_AuthenticationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AuthenticationType
   (
      this : in out CellularApnContext;
      value : Windows.Networking.Connectivity.CellularApnAuthenticationType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICellularApnContext.all.put_AuthenticationType (value);
   end;

   function get_ProfileName
   (
      this : in out CellularApnContext
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.ICellularApnContext2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.ICellularApnContext_Interface, WinRt.Windows.Networking.Connectivity.ICellularApnContext2, WinRt.Windows.Networking.Connectivity.IID_ICellularApnContext2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICellularApnContext.all);
      Hr := m_Interface.get_ProfileName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ProfileName
   (
      this : in out CellularApnContext;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.ICellularApnContext2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.ICellularApnContext_Interface, WinRt.Windows.Networking.Connectivity.ICellularApnContext2, WinRt.Windows.Networking.Connectivity.IID_ICellularApnContext2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICellularApnContext.all);
      Hr := m_Interface.put_ProfileName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConnectionCost

   procedure Initialize (this : in out ConnectionCost) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConnectionCost) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConnectionCost, IConnectionCost_Ptr);
   begin
      if this.m_IConnectionCost /= null then
         if this.m_IConnectionCost.all /= null then
            RefCount := this.m_IConnectionCost.all.Release;
            Free (this.m_IConnectionCost);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConnectionCost

   function get_NetworkCostType
   (
      this : in out ConnectionCost
   )
   return WinRt.Windows.Networking.Connectivity.NetworkCostType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.NetworkCostType;
   begin
      Hr := this.m_IConnectionCost.all.get_NetworkCostType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Roaming
   (
      this : in out ConnectionCost
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConnectionCost.all.get_Roaming (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverDataLimit
   (
      this : in out ConnectionCost
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConnectionCost.all.get_OverDataLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ApproachingDataLimit
   (
      this : in out ConnectionCost
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConnectionCost.all.get_ApproachingDataLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BackgroundDataUsageRestricted
   (
      this : in out ConnectionCost
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionCost2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionCost_Interface, WinRt.Windows.Networking.Connectivity.IConnectionCost2, WinRt.Windows.Networking.Connectivity.IID_IConnectionCost2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionCost.all);
      Hr := m_Interface.get_BackgroundDataUsageRestricted (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConnectionProfile

   procedure Initialize (this : in out ConnectionProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConnectionProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConnectionProfile, IConnectionProfile_Ptr);
   begin
      if this.m_IConnectionProfile /= null then
         if this.m_IConnectionProfile.all /= null then
            RefCount := this.m_IConnectionProfile.all.Release;
            Free (this.m_IConnectionProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConnectionProfile

   function get_ProfileName
   (
      this : in out ConnectionProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IConnectionProfile.all.get_ProfileName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNetworkConnectivityLevel
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.NetworkConnectivityLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.NetworkConnectivityLevel;
   begin
      Hr := this.m_IConnectionProfile.all.GetNetworkConnectivityLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetNetworkNames
   (
      this : in out ConnectionProfile
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IConnectionProfile.all.GetNetworkNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetConnectionCost
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.ConnectionCost'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IConnectionCost;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.ConnectionCost do
         Hr := this.m_IConnectionProfile.all.GetConnectionCost (m_ComRetVal'Access);
         Retval.m_IConnectionCost := new Windows.Networking.Connectivity.IConnectionCost;
         Retval.m_IConnectionCost.all := m_ComRetVal;
      end return;
   end;

   function GetDataPlanStatus
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.DataPlanStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IDataPlanStatus;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.DataPlanStatus do
         Hr := this.m_IConnectionProfile.all.GetDataPlanStatus (m_ComRetVal'Access);
         Retval.m_IDataPlanStatus := new Windows.Networking.Connectivity.IDataPlanStatus;
         Retval.m_IDataPlanStatus.all := m_ComRetVal;
      end return;
   end;

   function get_NetworkAdapter
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.NetworkAdapter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkAdapter;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkAdapter do
         Hr := this.m_IConnectionProfile.all.get_NetworkAdapter (m_ComRetVal'Access);
         Retval.m_INetworkAdapter := new Windows.Networking.Connectivity.INetworkAdapter;
         Retval.m_INetworkAdapter.all := m_ComRetVal;
      end return;
   end;

   function GetLocalUsage
   (
      this : in out ConnectionProfile;
      StartTime : Windows.Foundation.DateTime;
      EndTime : Windows.Foundation.DateTime
   )
   return WinRt.Windows.Networking.Connectivity.DataUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IDataUsage;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.DataUsage do
         Hr := this.m_IConnectionProfile.all.GetLocalUsage (StartTime, EndTime, m_ComRetVal'Access);
         Retval.m_IDataUsage := new Windows.Networking.Connectivity.IDataUsage;
         Retval.m_IDataUsage.all := m_ComRetVal;
      end return;
   end;

   function GetLocalUsage
   (
      this : in out ConnectionProfile;
      StartTime : Windows.Foundation.DateTime;
      EndTime : Windows.Foundation.DateTime;
      States : Windows.Networking.Connectivity.RoamingStates
   )
   return WinRt.Windows.Networking.Connectivity.DataUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IDataUsage;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.DataUsage do
         Hr := this.m_IConnectionProfile.all.GetLocalUsage (StartTime, EndTime, States, m_ComRetVal'Access);
         Retval.m_IDataUsage := new Windows.Networking.Connectivity.IDataUsage;
         Retval.m_IDataUsage.all := m_ComRetVal;
      end return;
   end;

   function get_NetworkSecuritySettings
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.NetworkSecuritySettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkSecuritySettings;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkSecuritySettings do
         Hr := this.m_IConnectionProfile.all.get_NetworkSecuritySettings (m_ComRetVal'Access);
         Retval.m_INetworkSecuritySettings := new Windows.Networking.Connectivity.INetworkSecuritySettings;
         Retval.m_INetworkSecuritySettings.all := m_ComRetVal;
      end return;
   end;

   function get_IsWwanConnectionProfile
   (
      this : in out ConnectionProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.get_IsWwanConnectionProfile (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsWlanConnectionProfile
   (
      this : in out ConnectionProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.get_IsWlanConnectionProfile (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_WwanConnectionProfileDetails
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.WwanConnectionProfileDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IWwanConnectionProfileDetails;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.WwanConnectionProfileDetails do
         m_Interface := QInterface (this.m_IConnectionProfile.all);
         Hr := m_Interface.get_WwanConnectionProfileDetails (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IWwanConnectionProfileDetails := new Windows.Networking.Connectivity.IWwanConnectionProfileDetails;
         Retval.m_IWwanConnectionProfileDetails.all := m_ComRetVal;
      end return;
   end;

   function get_WlanConnectionProfileDetails
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.WlanConnectionProfileDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IWlanConnectionProfileDetails;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.WlanConnectionProfileDetails do
         m_Interface := QInterface (this.m_IConnectionProfile.all);
         Hr := m_Interface.get_WlanConnectionProfileDetails (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IWlanConnectionProfileDetails := new Windows.Networking.Connectivity.IWlanConnectionProfileDetails;
         Retval.m_IWlanConnectionProfileDetails.all := m_ComRetVal;
      end return;
   end;

   function get_ServiceProviderGuid
   (
      this : in out ConnectionProfile
   )
   return IReference_Guid.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Guid.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.get_ServiceProviderGuid (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Guid (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetSignalBars
   (
      this : in out ConnectionProfile
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.GetSignalBars (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDomainConnectivityLevel
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.DomainConnectivityLevel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.DomainConnectivityLevel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.GetDomainConnectivityLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetNetworkUsageAsync
   (
      this : in out ConnectionProfile;
      startTime : Windows.Foundation.DateTime;
      endTime : Windows.Foundation.DateTime;
      granularity : Windows.Networking.Connectivity.DataUsageGranularity;
      states : Windows.Networking.Connectivity.NetworkUsageStates
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (97116289, 25129, 20553, (142, 234, 164, 152, 64, 124, 0, 213 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3810360958, 16755, 23665, (176, 75, 160, 150, 88, 0, 37, 144 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.GetNetworkUsageAsync (startTime, endTime, granularity, states, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetConnectivityIntervalsAsync
   (
      this : in out ConnectionProfile;
      startTime : Windows.Foundation.DateTime;
      endTime : Windows.Foundation.DateTime;
      states : Windows.Networking.Connectivity.NetworkUsageStates
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2945898251, 16839, 24006, (152, 149, 234, 4, 58, 136, 93, 141 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3027566924, 38385, 21264, (181, 209, 194, 48, 157, 148, 68, 64 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.GetConnectivityIntervalsAsync (startTime, endTime, states, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAttributedNetworkUsageAsync
   (
      this : in out ConnectionProfile;
      startTime : Windows.Foundation.DateTime;
      endTime : Windows.Foundation.DateTime;
      states : Windows.Networking.Connectivity.NetworkUsageStates
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2643083539, 59379, 21805, (154, 140, 28, 37, 226, 19, 114, 83 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2528056780, 61536, 22119, (146, 35, 224, 84, 209, 66, 57, 236 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile3, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.GetAttributedNetworkUsageAsync (startTime, endTime, states, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetProviderNetworkUsageAsync
   (
      this : in out ConnectionProfile;
      startTime : Windows.Foundation.DateTime;
      endTime : Windows.Foundation.DateTime;
      states : Windows.Networking.Connectivity.NetworkUsageStates
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2126142095, 58621, 20993, (164, 244, 149, 103, 89, 111, 33, 60 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3272615787, 14642, 23977, (154, 59, 197, 196, 35, 88, 107, 66 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile4, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.GetProviderNetworkUsageAsync (startTime, endTime, states, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_CanDelete
   (
      this : in out ConnectionProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile5, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.get_CanDelete (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryDeleteAsync
   (
      this : in out ConnectionProfile
   )
   return WinRt.Windows.Networking.Connectivity.ConnectionProfileDeleteStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfile5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ConnectionProfileDeleteStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ConnectionProfileDeleteStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Connectivity.ConnectionProfileDeleteStatus;
      m_IID            : aliased WinRt.IID := (805223582, 19437, 24381, (142, 85, 90, 188, 37, 152, 225, 68 )); -- Windows.Networking.Connectivity.ConnectionProfileDeleteStatus;
      m_HandlerIID     : aliased WinRt.IID := (974107152, 14020, 24050, (151, 7, 95, 50, 83, 105, 169, 176 ));
      m_Handler        : AsyncOperationCompletedHandler_ConnectionProfileDeleteStatus.Kind := new AsyncOperationCompletedHandler_ConnectionProfileDeleteStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConnectionProfileDeleteStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConnectionProfileDeleteStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConnectionProfileDeleteStatus.Kind_Delegate, AsyncOperationCompletedHandler_ConnectionProfileDeleteStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfile_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfile5, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfile5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfile.all);
      Hr := m_Interface.TryDeleteAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConnectionProfileFilter

   procedure Initialize (this : in out ConnectionProfileFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConnectionProfileFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConnectionProfileFilter, IConnectionProfileFilter_Ptr);
   begin
      if this.m_IConnectionProfileFilter /= null then
         if this.m_IConnectionProfileFilter.all /= null then
            RefCount := this.m_IConnectionProfileFilter.all.Release;
            Free (this.m_IConnectionProfileFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ConnectionProfileFilter

   function Constructor return ConnectionProfileFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Connectivity.ConnectionProfileFilter");
      m_ComRetVal  : aliased Windows.Networking.Connectivity.IConnectionProfileFilter;
   begin
      return RetVal : ConnectionProfileFilter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IConnectionProfileFilter := new Windows.Networking.Connectivity.IConnectionProfileFilter;
            Retval.m_IConnectionProfileFilter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConnectionProfileFilter

   procedure put_IsConnected
   (
      this : in out ConnectionProfileFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConnectionProfileFilter.all.put_IsConnected (value);
   end;

   function get_IsConnected
   (
      this : in out ConnectionProfileFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConnectionProfileFilter.all.get_IsConnected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsWwanConnectionProfile
   (
      this : in out ConnectionProfileFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConnectionProfileFilter.all.put_IsWwanConnectionProfile (value);
   end;

   function get_IsWwanConnectionProfile
   (
      this : in out ConnectionProfileFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConnectionProfileFilter.all.get_IsWwanConnectionProfile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsWlanConnectionProfile
   (
      this : in out ConnectionProfileFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConnectionProfileFilter.all.put_IsWlanConnectionProfile (value);
   end;

   function get_IsWlanConnectionProfile
   (
      this : in out ConnectionProfileFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConnectionProfileFilter.all.get_IsWlanConnectionProfile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_NetworkCostType
   (
      this : in out ConnectionProfileFilter;
      value : Windows.Networking.Connectivity.NetworkCostType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConnectionProfileFilter.all.put_NetworkCostType (value);
   end;

   function get_NetworkCostType
   (
      this : in out ConnectionProfileFilter
   )
   return WinRt.Windows.Networking.Connectivity.NetworkCostType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.NetworkCostType;
   begin
      Hr := this.m_IConnectionProfileFilter.all.get_NetworkCostType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServiceProviderGuid
   (
      this : in out ConnectionProfileFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConnectionProfileFilter.all.put_ServiceProviderGuid (value);
   end;

   function get_ServiceProviderGuid
   (
      this : in out ConnectionProfileFilter
   )
   return IReference_Guid.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Guid.Kind;
   begin
      Hr := this.m_IConnectionProfileFilter.all.get_ServiceProviderGuid (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Guid (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsRoaming
   (
      this : in out ConnectionProfileFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.put_IsRoaming (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsRoaming
   (
      this : in out ConnectionProfileFilter
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.get_IsRoaming (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsOverDataLimit
   (
      this : in out ConnectionProfileFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.put_IsOverDataLimit (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsOverDataLimit
   (
      this : in out ConnectionProfileFilter
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.get_IsOverDataLimit (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsBackgroundDataUsageRestricted
   (
      this : in out ConnectionProfileFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.put_IsBackgroundDataUsageRestricted (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsBackgroundDataUsageRestricted
   (
      this : in out ConnectionProfileFilter
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.get_IsBackgroundDataUsageRestricted (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RawData
   (
      this : in out ConnectionProfileFilter
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter2, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PurposeGuid
   (
      this : in out ConnectionProfileFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter3, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.put_PurposeGuid (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PurposeGuid
   (
      this : in out ConnectionProfileFilter
   )
   return IReference_Guid.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Guid.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter_Interface, WinRt.Windows.Networking.Connectivity.IConnectionProfileFilter3, WinRt.Windows.Networking.Connectivity.IID_IConnectionProfileFilter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionProfileFilter.all);
      Hr := m_Interface.get_PurposeGuid (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Guid (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConnectionSession

   procedure Initialize (this : in out ConnectionSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConnectionSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConnectionSession, IConnectionSession_Ptr);
   begin
      if this.m_IConnectionSession /= null then
         if this.m_IConnectionSession.all /= null then
            RefCount := this.m_IConnectionSession.all.Release;
            Free (this.m_IConnectionSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConnectionSession

   function get_ConnectionProfile
   (
      this : in out ConnectionSession
   )
   return WinRt.Windows.Networking.Connectivity.ConnectionProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IConnectionProfile;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.ConnectionProfile do
         Hr := this.m_IConnectionSession.all.get_ConnectionProfile (m_ComRetVal'Access);
         Retval.m_IConnectionProfile := new Windows.Networking.Connectivity.IConnectionProfile;
         Retval.m_IConnectionProfile.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out ConnectionSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IConnectionSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConnectionSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConnectivityInterval

   procedure Initialize (this : in out ConnectivityInterval) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConnectivityInterval) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConnectivityInterval, IConnectivityInterval_Ptr);
   begin
      if this.m_IConnectivityInterval /= null then
         if this.m_IConnectivityInterval.all /= null then
            RefCount := this.m_IConnectivityInterval.all.Release;
            Free (this.m_IConnectivityInterval);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConnectivityInterval

   function get_StartTime
   (
      this : in out ConnectivityInterval
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IConnectivityInterval.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConnectionDuration
   (
      this : in out ConnectivityInterval
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IConnectivityInterval.all.get_ConnectionDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ConnectivityManager is

      function AcquireConnectionAsync
      (
         cellularApnContext_p : Windows.Networking.Connectivity.CellularApnContext'Class
      )
      return WinRt.Windows.Networking.Connectivity.ConnectionSession is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.ConnectivityManager");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.IConnectivityManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ConnectionSession.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ConnectionSession.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Networking.Connectivity.IConnectionSession;
         m_IID            : aliased WinRt.IID := (2499568145, 18178, 23844, (129, 191, 23, 12, 167, 129, 137, 149 )); -- Windows.Networking.Connectivity.ConnectionSession;
         m_HandlerIID     : aliased WinRt.IID := (1002864856, 40579, 20614, (143, 73, 122, 41, 191, 177, 199, 225 ));
         m_Handler        : AsyncOperationCompletedHandler_ConnectionSession.Kind := new AsyncOperationCompletedHandler_ConnectionSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConnectionSession.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConnectionSession.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConnectionSession.Kind_Delegate, AsyncOperationCompletedHandler_ConnectionSession.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Networking.Connectivity.ConnectionSession do
            Hr := RoGetActivationFactory (m_hString, IID_IConnectivityManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AcquireConnectionAsync (cellularApnContext_p.m_ICellularApnContext.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IConnectionSession := new Windows.Networking.Connectivity.IConnectionSession;
                        Retval.m_IConnectionSession.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure AddHttpRoutePolicy
      (
         routePolicy_p : Windows.Networking.Connectivity.RoutePolicy'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.ConnectivityManager");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.IConnectivityManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IConnectivityManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AddHttpRoutePolicy (routePolicy_p.m_IRoutePolicy.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RemoveHttpRoutePolicy
      (
         routePolicy_p : Windows.Networking.Connectivity.RoutePolicy'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.ConnectivityManager");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.IConnectivityManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IConnectivityManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RemoveHttpRoutePolicy (routePolicy_p.m_IRoutePolicy.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end ConnectivityManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataPlanStatus

   procedure Initialize (this : in out DataPlanStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataPlanStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataPlanStatus, IDataPlanStatus_Ptr);
   begin
      if this.m_IDataPlanStatus /= null then
         if this.m_IDataPlanStatus.all /= null then
            RefCount := this.m_IDataPlanStatus.all.Release;
            Free (this.m_IDataPlanStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataPlanStatus

   function get_DataPlanUsage
   (
      this : in out DataPlanStatus
   )
   return WinRt.Windows.Networking.Connectivity.DataPlanUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IDataPlanUsage;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.DataPlanUsage do
         Hr := this.m_IDataPlanStatus.all.get_DataPlanUsage (m_ComRetVal'Access);
         Retval.m_IDataPlanUsage := new Windows.Networking.Connectivity.IDataPlanUsage;
         Retval.m_IDataPlanUsage.all := m_ComRetVal;
      end return;
   end;

   function get_DataLimitInMegabytes
   (
      this : in out DataPlanStatus
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IDataPlanStatus.all.get_DataLimitInMegabytes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_InboundBitsPerSecond
   (
      this : in out DataPlanStatus
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IDataPlanStatus.all.get_InboundBitsPerSecond (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_OutboundBitsPerSecond
   (
      this : in out DataPlanStatus
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IDataPlanStatus.all.get_OutboundBitsPerSecond (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NextBillingCycle
   (
      this : in out DataPlanStatus
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IDataPlanStatus.all.get_NextBillingCycle (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaxTransferSizeInMegabytes
   (
      this : in out DataPlanStatus
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IDataPlanStatus.all.get_MaxTransferSizeInMegabytes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataPlanUsage

   procedure Initialize (this : in out DataPlanUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataPlanUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataPlanUsage, IDataPlanUsage_Ptr);
   begin
      if this.m_IDataPlanUsage /= null then
         if this.m_IDataPlanUsage.all /= null then
            RefCount := this.m_IDataPlanUsage.all.Release;
            Free (this.m_IDataPlanUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataPlanUsage

   function get_MegabytesUsed
   (
      this : in out DataPlanUsage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IDataPlanUsage.all.get_MegabytesUsed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastSyncTime
   (
      this : in out DataPlanUsage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IDataPlanUsage.all.get_LastSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataUsage

   procedure Initialize (this : in out DataUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataUsage, IDataUsage_Ptr);
   begin
      if this.m_IDataUsage /= null then
         if this.m_IDataUsage.all /= null then
            RefCount := this.m_IDataUsage.all.Release;
            Free (this.m_IDataUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataUsage

   function get_BytesSent
   (
      this : in out DataUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IDataUsage.all.get_BytesSent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesReceived
   (
      this : in out DataUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IDataUsage.all.get_BytesReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IPInformation

   procedure Initialize (this : in out IPInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out IPInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIPInformation, IIPInformation_Ptr);
   begin
      if this.m_IIPInformation /= null then
         if this.m_IIPInformation.all /= null then
            RefCount := this.m_IIPInformation.all.Release;
            Free (this.m_IIPInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IPInformation

   function get_NetworkAdapter
   (
      this : in out IPInformation
   )
   return WinRt.Windows.Networking.Connectivity.NetworkAdapter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkAdapter;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkAdapter do
         Hr := this.m_IIPInformation.all.get_NetworkAdapter (m_ComRetVal'Access);
         Retval.m_INetworkAdapter := new Windows.Networking.Connectivity.INetworkAdapter;
         Retval.m_INetworkAdapter.all := m_ComRetVal;
      end return;
   end;

   function get_PrefixLength
   (
      this : in out IPInformation
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
   begin
      Hr := this.m_IIPInformation.all.get_PrefixLength (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LanIdentifier

   procedure Initialize (this : in out LanIdentifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out LanIdentifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILanIdentifier, ILanIdentifier_Ptr);
   begin
      if this.m_ILanIdentifier /= null then
         if this.m_ILanIdentifier.all /= null then
            RefCount := this.m_ILanIdentifier.all.Release;
            Free (this.m_ILanIdentifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LanIdentifier

   function get_InfrastructureId
   (
      this : in out LanIdentifier
   )
   return WinRt.Windows.Networking.Connectivity.LanIdentifierData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.ILanIdentifierData;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.LanIdentifierData do
         Hr := this.m_ILanIdentifier.all.get_InfrastructureId (m_ComRetVal'Access);
         Retval.m_ILanIdentifierData := new Windows.Networking.Connectivity.ILanIdentifierData;
         Retval.m_ILanIdentifierData.all := m_ComRetVal;
      end return;
   end;

   function get_PortId
   (
      this : in out LanIdentifier
   )
   return WinRt.Windows.Networking.Connectivity.LanIdentifierData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.ILanIdentifierData;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.LanIdentifierData do
         Hr := this.m_ILanIdentifier.all.get_PortId (m_ComRetVal'Access);
         Retval.m_ILanIdentifierData := new Windows.Networking.Connectivity.ILanIdentifierData;
         Retval.m_ILanIdentifierData.all := m_ComRetVal;
      end return;
   end;

   function get_NetworkAdapterId
   (
      this : in out LanIdentifier
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ILanIdentifier.all.get_NetworkAdapterId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LanIdentifierData

   procedure Initialize (this : in out LanIdentifierData) is
   begin
      null;
   end;

   procedure Finalize (this : in out LanIdentifierData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILanIdentifierData, ILanIdentifierData_Ptr);
   begin
      if this.m_ILanIdentifierData /= null then
         if this.m_ILanIdentifierData.all /= null then
            RefCount := this.m_ILanIdentifierData.all.Release;
            Free (this.m_ILanIdentifierData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LanIdentifierData

   function get_Type
   (
      this : in out LanIdentifierData
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILanIdentifierData.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out LanIdentifierData
   )
   return IVectorView_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Byte.Kind;
   begin
      Hr := this.m_ILanIdentifierData.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkAdapter

   procedure Initialize (this : in out NetworkAdapter) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkAdapter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkAdapter, INetworkAdapter_Ptr);
   begin
      if this.m_INetworkAdapter /= null then
         if this.m_INetworkAdapter.all /= null then
            RefCount := this.m_INetworkAdapter.all.Release;
            Free (this.m_INetworkAdapter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkAdapter

   function get_OutboundMaxBitsPerSecond
   (
      this : in out NetworkAdapter
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_INetworkAdapter.all.get_OutboundMaxBitsPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InboundMaxBitsPerSecond
   (
      this : in out NetworkAdapter
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_INetworkAdapter.all.get_InboundMaxBitsPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IanaInterfaceType
   (
      this : in out NetworkAdapter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_INetworkAdapter.all.get_IanaInterfaceType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkItem
   (
      this : in out NetworkAdapter
   )
   return WinRt.Windows.Networking.Connectivity.NetworkItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkItem;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkItem do
         Hr := this.m_INetworkAdapter.all.get_NetworkItem (m_ComRetVal'Access);
         Retval.m_INetworkItem := new Windows.Networking.Connectivity.INetworkItem;
         Retval.m_INetworkItem.all := m_ComRetVal;
      end return;
   end;

   function get_NetworkAdapterId
   (
      this : in out NetworkAdapter
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_INetworkAdapter.all.get_NetworkAdapterId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetConnectedProfileAsync
   (
      this : in out NetworkAdapter
   )
   return WinRt.Windows.Networking.Connectivity.ConnectionProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ConnectionProfile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ConnectionProfile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Connectivity.IConnectionProfile;
      m_IID            : aliased WinRt.IID := (1542789578, 35547, 23221, (171, 184, 255, 27, 190, 93, 45, 232 )); -- Windows.Networking.Connectivity.ConnectionProfile;
      m_HandlerIID     : aliased WinRt.IID := (3840985450, 1393, 23028, (169, 169, 175, 172, 62, 97, 202, 160 ));
      m_Handler        : AsyncOperationCompletedHandler_ConnectionProfile.Kind := new AsyncOperationCompletedHandler_ConnectionProfile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConnectionProfile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConnectionProfile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConnectionProfile.Kind_Delegate, AsyncOperationCompletedHandler_ConnectionProfile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.ConnectionProfile do
         Hr := this.m_INetworkAdapter.all.GetConnectedProfileAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IConnectionProfile := new Windows.Networking.Connectivity.IConnectionProfile;
                  Retval.m_IConnectionProfile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body NetworkInformation is

      function GetConnectionProfiles
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetConnectionProfiles (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetInternetConnectionProfile
      return WinRt.Windows.Networking.Connectivity.ConnectionProfile is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.Connectivity.IConnectionProfile;
      begin
         return RetVal : WinRt.Windows.Networking.Connectivity.ConnectionProfile do
            Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetInternetConnectionProfile (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IConnectionProfile := new Windows.Networking.Connectivity.IConnectionProfile;
               Retval.m_IConnectionProfile.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetLanIdentifiers
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetLanIdentifiers (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetHostNames
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetHostNames (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetProxyConfigurationAsync
      (
         uri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.Networking.Connectivity.ProxyConfiguration is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProxyConfiguration.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProxyConfiguration.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Networking.Connectivity.IProxyConfiguration;
         m_IID            : aliased WinRt.IID := (511070710, 25954, 22983, (154, 243, 135, 86, 99, 110, 238, 226 )); -- Windows.Networking.Connectivity.ProxyConfiguration;
         m_HandlerIID     : aliased WinRt.IID := (56304999, 61369, 23491, (182, 9, 249, 168, 194, 11, 112, 1 ));
         m_Handler        : AsyncOperationCompletedHandler_ProxyConfiguration.Kind := new AsyncOperationCompletedHandler_ProxyConfiguration.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProxyConfiguration.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProxyConfiguration.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProxyConfiguration.Kind_Delegate, AsyncOperationCompletedHandler_ProxyConfiguration.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Networking.Connectivity.ProxyConfiguration do
            Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetProxyConfigurationAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProxyConfiguration := new Windows.Networking.Connectivity.IProxyConfiguration;
                        Retval.m_IProxyConfiguration.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetSortedEndpointPairs
      (
         destinationList : GenericObject;
         sortOptions : Windows.Networking.HostNameSortOptions
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetSortedEndpointPairs (destinationList, sortOptions, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_NetworkStatusChanged
      (
         networkStatusHandler : Windows.Networking.Connectivity.NetworkStatusChangedEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_NetworkStatusChanged (networkStatusHandler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_NetworkStatusChanged
      (
         eventCookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_NetworkStatusChanged (eventCookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function FindConnectionProfilesAsync
      (
         pProfileFilter : Windows.Networking.Connectivity.ConnectionProfileFilter'Class
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Connectivity.NetworkInformation");
         m_Factory        : access WinRt.Windows.Networking.Connectivity.INetworkInformationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (3221369492, 49867, 21232, (169, 244, 33, 145, 96, 50, 246, 157 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (3307461085, 20134, 20757, (128, 233, 78, 122, 212, 118, 151, 152 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_INetworkInformationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindConnectionProfilesAsync (pProfileFilter.m_IConnectionProfileFilter.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end NetworkInformation;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkItem

   procedure Initialize (this : in out NetworkItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkItem, INetworkItem_Ptr);
   begin
      if this.m_INetworkItem /= null then
         if this.m_INetworkItem.all /= null then
            RefCount := this.m_INetworkItem.all.Release;
            Free (this.m_INetworkItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkItem

   function get_NetworkId
   (
      this : in out NetworkItem
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_INetworkItem.all.get_NetworkId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetNetworkTypes
   (
      this : in out NetworkItem
   )
   return WinRt.Windows.Networking.Connectivity.NetworkTypes is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.NetworkTypes;
   begin
      Hr := this.m_INetworkItem.all.GetNetworkTypes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkSecuritySettings

   procedure Initialize (this : in out NetworkSecuritySettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkSecuritySettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkSecuritySettings, INetworkSecuritySettings_Ptr);
   begin
      if this.m_INetworkSecuritySettings /= null then
         if this.m_INetworkSecuritySettings.all /= null then
            RefCount := this.m_INetworkSecuritySettings.all.Release;
            Free (this.m_INetworkSecuritySettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkSecuritySettings

   function get_NetworkAuthenticationType
   (
      this : in out NetworkSecuritySettings
   )
   return WinRt.Windows.Networking.Connectivity.NetworkAuthenticationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.NetworkAuthenticationType;
   begin
      Hr := this.m_INetworkSecuritySettings.all.get_NetworkAuthenticationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkEncryptionType
   (
      this : in out NetworkSecuritySettings
   )
   return WinRt.Windows.Networking.Connectivity.NetworkEncryptionType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.NetworkEncryptionType;
   begin
      Hr := this.m_INetworkSecuritySettings.all.get_NetworkEncryptionType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkStateChangeEventDetails

   procedure Initialize (this : in out NetworkStateChangeEventDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkStateChangeEventDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkStateChangeEventDetails, INetworkStateChangeEventDetails_Ptr);
   begin
      if this.m_INetworkStateChangeEventDetails /= null then
         if this.m_INetworkStateChangeEventDetails.all /= null then
            RefCount := this.m_INetworkStateChangeEventDetails.all.Release;
            Free (this.m_INetworkStateChangeEventDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkStateChangeEventDetails

   function get_HasNewInternetConnectionProfile
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INetworkStateChangeEventDetails.all.get_HasNewInternetConnectionProfile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNewConnectionCost
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INetworkStateChangeEventDetails.all.get_HasNewConnectionCost (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNewNetworkConnectivityLevel
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INetworkStateChangeEventDetails.all.get_HasNewNetworkConnectivityLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNewDomainConnectivityLevel
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INetworkStateChangeEventDetails.all.get_HasNewDomainConnectivityLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNewHostNameList
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INetworkStateChangeEventDetails.all.get_HasNewHostNameList (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNewWwanRegistrationState
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INetworkStateChangeEventDetails.all.get_HasNewWwanRegistrationState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNewTetheringOperationalState
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.INetworkStateChangeEventDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.INetworkStateChangeEventDetails_Interface, WinRt.Windows.Networking.Connectivity.INetworkStateChangeEventDetails2, WinRt.Windows.Networking.Connectivity.IID_INetworkStateChangeEventDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkStateChangeEventDetails.all);
      Hr := m_Interface.get_HasNewTetheringOperationalState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HasNewTetheringClientCount
   (
      this : in out NetworkStateChangeEventDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.INetworkStateChangeEventDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.INetworkStateChangeEventDetails_Interface, WinRt.Windows.Networking.Connectivity.INetworkStateChangeEventDetails2, WinRt.Windows.Networking.Connectivity.IID_INetworkStateChangeEventDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkStateChangeEventDetails.all);
      Hr := m_Interface.get_HasNewTetheringClientCount (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate NetworkStatusChangedEventHandler

   function Invoke
   (
      this : access NetworkStatusChangedEventHandler_Delegate;
      sender : WinRt.IInspectable
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkUsage

   procedure Initialize (this : in out NetworkUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkUsage, INetworkUsage_Ptr);
   begin
      if this.m_INetworkUsage /= null then
         if this.m_INetworkUsage.all /= null then
            RefCount := this.m_INetworkUsage.all.Release;
            Free (this.m_INetworkUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkUsage

   function get_BytesSent
   (
      this : in out NetworkUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_INetworkUsage.all.get_BytesSent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesReceived
   (
      this : in out NetworkUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_INetworkUsage.all.get_BytesReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConnectionDuration
   (
      this : in out NetworkUsage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_INetworkUsage.all.get_ConnectionDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProviderNetworkUsage

   procedure Initialize (this : in out ProviderNetworkUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProviderNetworkUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProviderNetworkUsage, IProviderNetworkUsage_Ptr);
   begin
      if this.m_IProviderNetworkUsage /= null then
         if this.m_IProviderNetworkUsage.all /= null then
            RefCount := this.m_IProviderNetworkUsage.all.Release;
            Free (this.m_IProviderNetworkUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProviderNetworkUsage

   function get_BytesSent
   (
      this : in out ProviderNetworkUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProviderNetworkUsage.all.get_BytesSent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesReceived
   (
      this : in out ProviderNetworkUsage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProviderNetworkUsage.all.get_BytesReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProviderId
   (
      this : in out ProviderNetworkUsage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProviderNetworkUsage.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProxyConfiguration

   procedure Initialize (this : in out ProxyConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProxyConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProxyConfiguration, IProxyConfiguration_Ptr);
   begin
      if this.m_IProxyConfiguration /= null then
         if this.m_IProxyConfiguration.all /= null then
            RefCount := this.m_IProxyConfiguration.all.Release;
            Free (this.m_IProxyConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProxyConfiguration

   function get_ProxyUris
   (
      this : in out ProxyConfiguration
   )
   return IVectorView_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IProxyConfiguration.all.get_ProxyUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CanConnectDirectly
   (
      this : in out ProxyConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IProxyConfiguration.all.get_CanConnectDirectly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RoutePolicy

   procedure Initialize (this : in out RoutePolicy) is
   begin
      null;
   end;

   procedure Finalize (this : in out RoutePolicy) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRoutePolicy, IRoutePolicy_Ptr);
   begin
      if this.m_IRoutePolicy /= null then
         if this.m_IRoutePolicy.all /= null then
            RefCount := this.m_IRoutePolicy.all.Release;
            Free (this.m_IRoutePolicy);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RoutePolicy

   function Constructor
   (
      connectionProfile_p : Windows.Networking.Connectivity.ConnectionProfile'Class;
      hostName : Windows.Networking.HostName'Class;
      type_x : Windows.Networking.DomainNameType
   )
   return RoutePolicy is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Connectivity.RoutePolicy");
      m_Factory    : access IRoutePolicyFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Connectivity.IRoutePolicy;
   begin
      return RetVal : RoutePolicy do
         Hr := RoGetActivationFactory (m_hString, IID_IRoutePolicyFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateRoutePolicy (connectionProfile_p.m_IConnectionProfile.all, hostName.m_IHostName.all, type_x, m_ComRetVal'Access);
            Retval.m_IRoutePolicy := new Windows.Networking.Connectivity.IRoutePolicy;
            Retval.m_IRoutePolicy.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RoutePolicy

   function get_ConnectionProfile
   (
      this : in out RoutePolicy
   )
   return WinRt.Windows.Networking.Connectivity.ConnectionProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IConnectionProfile;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.ConnectionProfile do
         Hr := this.m_IRoutePolicy.all.get_ConnectionProfile (m_ComRetVal'Access);
         Retval.m_IConnectionProfile := new Windows.Networking.Connectivity.IConnectionProfile;
         Retval.m_IConnectionProfile.all := m_ComRetVal;
      end return;
   end;

   function get_HostName
   (
      this : in out RoutePolicy
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IRoutePolicy.all.get_HostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_HostNameType
   (
      this : in out RoutePolicy
   )
   return WinRt.Windows.Networking.DomainNameType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.DomainNameType;
   begin
      Hr := this.m_IRoutePolicy.all.get_HostNameType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WlanConnectionProfileDetails

   procedure Initialize (this : in out WlanConnectionProfileDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out WlanConnectionProfileDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWlanConnectionProfileDetails, IWlanConnectionProfileDetails_Ptr);
   begin
      if this.m_IWlanConnectionProfileDetails /= null then
         if this.m_IWlanConnectionProfileDetails.all /= null then
            RefCount := this.m_IWlanConnectionProfileDetails.all.Release;
            Free (this.m_IWlanConnectionProfileDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WlanConnectionProfileDetails

   function GetConnectedSsid
   (
      this : in out WlanConnectionProfileDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWlanConnectionProfileDetails.all.GetConnectedSsid (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WwanConnectionProfileDetails

   procedure Initialize (this : in out WwanConnectionProfileDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out WwanConnectionProfileDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWwanConnectionProfileDetails, IWwanConnectionProfileDetails_Ptr);
   begin
      if this.m_IWwanConnectionProfileDetails /= null then
         if this.m_IWwanConnectionProfileDetails.all /= null then
            RefCount := this.m_IWwanConnectionProfileDetails.all.Release;
            Free (this.m_IWwanConnectionProfileDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WwanConnectionProfileDetails

   function get_HomeProviderId
   (
      this : in out WwanConnectionProfileDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWwanConnectionProfileDetails.all.get_HomeProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessPointName
   (
      this : in out WwanConnectionProfileDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWwanConnectionProfileDetails.all.get_AccessPointName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNetworkRegistrationState
   (
      this : in out WwanConnectionProfileDetails
   )
   return WinRt.Windows.Networking.Connectivity.WwanNetworkRegistrationState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.WwanNetworkRegistrationState;
   begin
      Hr := this.m_IWwanConnectionProfileDetails.all.GetNetworkRegistrationState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCurrentDataClass
   (
      this : in out WwanConnectionProfileDetails
   )
   return WinRt.Windows.Networking.Connectivity.WwanDataClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.WwanDataClass;
   begin
      Hr := this.m_IWwanConnectionProfileDetails.all.GetCurrentDataClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IPKind
   (
      this : in out WwanConnectionProfileDetails
   )
   return WinRt.Windows.Networking.Connectivity.WwanNetworkIPKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IWwanConnectionProfileDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.WwanNetworkIPKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IWwanConnectionProfileDetails_Interface, WinRt.Windows.Networking.Connectivity.IWwanConnectionProfileDetails2, WinRt.Windows.Networking.Connectivity.IID_IWwanConnectionProfileDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWwanConnectionProfileDetails.all);
      Hr := m_Interface.get_IPKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PurposeGuids
   (
      this : in out WwanConnectionProfileDetails
   )
   return IVectorView_Guid.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Connectivity.IWwanConnectionProfileDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Guid.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Connectivity.IWwanConnectionProfileDetails_Interface, WinRt.Windows.Networking.Connectivity.IWwanConnectionProfileDetails2, WinRt.Windows.Networking.Connectivity.IID_IWwanConnectionProfileDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWwanConnectionProfileDetails.all);
      Hr := m_Interface.get_PurposeGuids (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Guid (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

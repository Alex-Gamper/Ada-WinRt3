--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Playback;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.Composition;
with WinRt.Windows.UI.Xaml.Controls.Primitives;
with WinRt.Windows.UI.Xaml.Media.Media3D;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Media is

   package IVector_IBrush is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.IBrush);
   package IIterable_IBrush is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.IBrush);
   package IVector_Double is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Double);
   package IIterable_Double is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Double);
   package IVector_IGeometry is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.IGeometry);
   package IIterable_IGeometry is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.IGeometry);
   package IVector_IGradientStop is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.IGradientStop);
   package IIterable_IGradientStop is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.IGradientStop);
   package IVector_IPathFigure is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.IPathFigure);
   package IIterable_IPathFigure is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.IPathFigure);
   package IVector_IPathSegment is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.IPathSegment);
   package IIterable_IPathSegment is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.IPathSegment);
   package IVector_Point is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Foundation.Point);
   package IIterable_Point is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Foundation.Point);
   package IVector_ITimelineMarker is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.ITimelineMarker);
   package IIterable_ITimelineMarker is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.ITimelineMarker);
   package IVector_ITransform is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Media.ITransform);
   package IIterable_ITransform is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Media.ITransform);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Brush

   procedure Initialize (this : in out Brush) is
   begin
      null;
   end;

   procedure Finalize (this : in out Brush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBrush, IBrush_Ptr);
   begin
      if this.m_IBrush /= null then
         if this.m_IBrush.all /= null then
            RefCount := this.m_IBrush.all.Release;
            Free (this.m_IBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Brush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Brush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Brush");
      m_Factory    : access IBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : Brush do
         Hr := RoGetActivationFactory (m_hString, IID_IBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
            Retval.m_IBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Brush

   function get_OpacityProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Brush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TransformProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Brush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TransformProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RelativeTransformProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Brush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RelativeTransformProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Brush

   function get_Opacity
   (
      this : in out Brush
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBrush.all.get_Opacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Opacity
   (
      this : in out Brush;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrush.all.put_Opacity (value);
   end;

   function get_Transform
   (
      this : in out Brush
   )
   return WinRt.Windows.UI.Xaml.Media.Transform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITransform;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Transform do
         Hr := this.m_IBrush.all.get_Transform (m_ComRetVal'Access);
         Retval.m_ITransform := new Windows.UI.Xaml.Media.ITransform;
         Retval.m_ITransform.all := m_ComRetVal;
      end return;
   end;

   procedure put_Transform
   (
      this : in out Brush;
      value : Windows.UI.Xaml.Media.Transform'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrush.all.put_Transform (value.m_ITransform.all);
   end;

   function get_RelativeTransform
   (
      this : in out Brush
   )
   return WinRt.Windows.UI.Xaml.Media.Transform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITransform;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Transform do
         Hr := this.m_IBrush.all.get_RelativeTransform (m_ComRetVal'Access);
         Retval.m_ITransform := new Windows.UI.Xaml.Media.ITransform;
         Retval.m_ITransform.all := m_ComRetVal;
      end return;
   end;

   procedure put_RelativeTransform
   (
      this : in out Brush;
      value : Windows.UI.Xaml.Media.Transform'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrush.all.put_RelativeTransform (value.m_ITransform.all);
   end;

   procedure PopulatePropertyInfoOverride
   (
      this : in out Brush;
      propertyName : WinRt.WString;
      animationPropertyInfo : Windows.UI.Composition.AnimationPropertyInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IBrushOverrides2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IBrush_Interface, WinRt.Windows.UI.Xaml.Media.IBrushOverrides2, WinRt.Windows.UI.Xaml.Media.IID_IBrushOverrides2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBrush.all);
      Hr := m_Interface.PopulatePropertyInfoOverride (HStr_propertyName, animationPropertyInfo.m_IAnimationPropertyInfo.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure PopulatePropertyInfo
   (
      this : in out Brush;
      propertyName : WinRt.WString;
      propertyInfo : Windows.UI.Composition.AnimationPropertyInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IAnimationObject := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IBrush_Interface, WinRt.Windows.UI.Composition.IAnimationObject, WinRt.Windows.UI.Composition.IID_IAnimationObject'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBrush.all);
      Hr := m_Interface.PopulatePropertyInfo (HStr_propertyName, propertyInfo.m_IAnimationPropertyInfo.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileBrush

   procedure Initialize (this : in out TileBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileBrush, ITileBrush_Ptr);
   begin
      if this.m_ITileBrush /= null then
         if this.m_ITileBrush.all /= null then
            RefCount := this.m_ITileBrush.all.Release;
            Free (this.m_ITileBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TileBrush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TileBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TileBrush");
      m_Factory    : access ITileBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ITileBrush;
   begin
      return RetVal : TileBrush do
         Hr := RoGetActivationFactory (m_hString, IID_ITileBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITileBrush := new Windows.UI.Xaml.Media.ITileBrush;
            Retval.m_ITileBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TileBrush

   function get_AlignmentXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TileBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITileBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITileBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlignmentXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AlignmentYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TileBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITileBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITileBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlignmentYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StretchProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TileBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITileBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITileBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StretchProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileBrush

   function get_AlignmentX
   (
      this : in out TileBrush
   )
   return WinRt.Windows.UI.Xaml.Media.AlignmentX is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.AlignmentX;
   begin
      Hr := this.m_ITileBrush.all.get_AlignmentX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AlignmentX
   (
      this : in out TileBrush;
      value : Windows.UI.Xaml.Media.AlignmentX
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileBrush.all.put_AlignmentX (value);
   end;

   function get_AlignmentY
   (
      this : in out TileBrush
   )
   return WinRt.Windows.UI.Xaml.Media.AlignmentY is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.AlignmentY;
   begin
      Hr := this.m_ITileBrush.all.get_AlignmentY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AlignmentY
   (
      this : in out TileBrush;
      value : Windows.UI.Xaml.Media.AlignmentY
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileBrush.all.put_AlignmentY (value);
   end;

   function get_Stretch
   (
      this : in out TileBrush
   )
   return WinRt.Windows.UI.Xaml.Media.Stretch is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Stretch;
   begin
      Hr := this.m_ITileBrush.all.get_Stretch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Stretch
   (
      this : in out TileBrush;
      value : Windows.UI.Xaml.Media.Stretch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileBrush.all.put_Stretch (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlCompositionBrushBase

   procedure Initialize (this : in out XamlCompositionBrushBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlCompositionBrushBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlCompositionBrushBase, IXamlCompositionBrushBase_Ptr);
   begin
      if this.m_IXamlCompositionBrushBase /= null then
         if this.m_IXamlCompositionBrushBase.all /= null then
            RefCount := this.m_IXamlCompositionBrushBase.all.Release;
            Free (this.m_IXamlCompositionBrushBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XamlCompositionBrushBase

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return XamlCompositionBrushBase is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlCompositionBrushBase");
      m_Factory    : access IXamlCompositionBrushBaseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IXamlCompositionBrushBase;
   begin
      return RetVal : XamlCompositionBrushBase do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlCompositionBrushBaseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IXamlCompositionBrushBase := new Windows.UI.Xaml.Media.IXamlCompositionBrushBase;
            Retval.m_IXamlCompositionBrushBase.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlCompositionBrushBase

   function get_FallbackColorProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlCompositionBrushBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlCompositionBrushBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FallbackColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlCompositionBrushBase

   function get_FallbackColor
   (
      this : in out XamlCompositionBrushBase
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IXamlCompositionBrushBase.all.get_FallbackColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FallbackColor
   (
      this : in out XamlCompositionBrushBase;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXamlCompositionBrushBase.all.put_FallbackColor (value);
   end;

   function get_CompositionBrush
   (
      this : in out XamlCompositionBrushBase
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseProtected := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBase_Interface, WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseProtected, WinRt.Windows.UI.Xaml.Media.IID_IXamlCompositionBrushBaseProtected'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         m_Interface := QInterface (this.m_IXamlCompositionBrushBase.all);
         Hr := m_Interface.get_CompositionBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CompositionBrush
   (
      this : in out XamlCompositionBrushBase;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseProtected := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBase_Interface, WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseProtected, WinRt.Windows.UI.Xaml.Media.IID_IXamlCompositionBrushBaseProtected'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlCompositionBrushBase.all);
      Hr := m_Interface.put_CompositionBrush (value.m_ICompositionBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure OnConnected
   (
      this : in out XamlCompositionBrushBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBase_Interface, WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseOverrides, WinRt.Windows.UI.Xaml.Media.IID_IXamlCompositionBrushBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlCompositionBrushBase.all);
      Hr := m_Interface.OnConnected;
      m_RefCount := m_Interface.Release;
   end;

   procedure OnDisconnected
   (
      this : in out XamlCompositionBrushBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBase_Interface, WinRt.Windows.UI.Xaml.Media.IXamlCompositionBrushBaseOverrides, WinRt.Windows.UI.Xaml.Media.IID_IXamlCompositionBrushBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlCompositionBrushBase.all);
      Hr := m_Interface.OnDisconnected;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AcrylicBrush

   procedure Initialize (this : in out AcrylicBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out AcrylicBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAcrylicBrush, IAcrylicBrush_Ptr);
   begin
      if this.m_IAcrylicBrush /= null then
         if this.m_IAcrylicBrush.all /= null then
            RefCount := this.m_IAcrylicBrush.all.Release;
            Free (this.m_IAcrylicBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AcrylicBrush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return AcrylicBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory    : access IAcrylicBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IAcrylicBrush;
   begin
      return RetVal : AcrylicBrush do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IAcrylicBrush := new Windows.UI.Xaml.Media.IAcrylicBrush;
            Retval.m_IAcrylicBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AcrylicBrush

   function get_TintLuminosityOpacityProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IAcrylicBrushStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TintLuminosityOpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_BackgroundSourceProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IAcrylicBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BackgroundSourceProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TintColorProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IAcrylicBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TintColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TintOpacityProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IAcrylicBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TintOpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TintTransitionDurationProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IAcrylicBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TintTransitionDurationProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AlwaysUseFallbackProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.AcrylicBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IAcrylicBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAcrylicBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlwaysUseFallbackProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AcrylicBrush

   function get_BackgroundSource
   (
      this : in out AcrylicBrush
   )
   return WinRt.Windows.UI.Xaml.Media.AcrylicBackgroundSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.AcrylicBackgroundSource;
   begin
      Hr := this.m_IAcrylicBrush.all.get_BackgroundSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BackgroundSource
   (
      this : in out AcrylicBrush;
      value : Windows.UI.Xaml.Media.AcrylicBackgroundSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAcrylicBrush.all.put_BackgroundSource (value);
   end;

   function get_TintColor
   (
      this : in out AcrylicBrush
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IAcrylicBrush.all.get_TintColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TintColor
   (
      this : in out AcrylicBrush;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAcrylicBrush.all.put_TintColor (value);
   end;

   function get_TintOpacity
   (
      this : in out AcrylicBrush
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAcrylicBrush.all.get_TintOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TintOpacity
   (
      this : in out AcrylicBrush;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAcrylicBrush.all.put_TintOpacity (value);
   end;

   function get_TintTransitionDuration
   (
      this : in out AcrylicBrush
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAcrylicBrush.all.get_TintTransitionDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TintTransitionDuration
   (
      this : in out AcrylicBrush;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAcrylicBrush.all.put_TintTransitionDuration (value);
   end;

   function get_AlwaysUseFallback
   (
      this : in out AcrylicBrush
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAcrylicBrush.all.get_AlwaysUseFallback (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AlwaysUseFallback
   (
      this : in out AcrylicBrush;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAcrylicBrush.all.put_AlwaysUseFallback (value);
   end;

   function get_TintLuminosityOpacity
   (
      this : in out AcrylicBrush
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IAcrylicBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IAcrylicBrush_Interface, WinRt.Windows.UI.Xaml.Media.IAcrylicBrush2, WinRt.Windows.UI.Xaml.Media.IID_IAcrylicBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAcrylicBrush.all);
      Hr := m_Interface.get_TintLuminosityOpacity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_TintLuminosityOpacity
   (
      this : in out AcrylicBrush;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IAcrylicBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IAcrylicBrush_Interface, WinRt.Windows.UI.Xaml.Media.IAcrylicBrush2, WinRt.Windows.UI.Xaml.Media.IID_IAcrylicBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAcrylicBrush.all);
      Hr := m_Interface.put_TintLuminosityOpacity (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PathSegment

   procedure Initialize (this : in out PathSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out PathSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPathSegment, IPathSegment_Ptr);
   begin
      if this.m_IPathSegment /= null then
         if this.m_IPathSegment.all /= null then
            RefCount := this.m_IPathSegment.all.Release;
            Free (this.m_IPathSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PathSegment

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PathSegment

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ArcSegment

   procedure Initialize (this : in out ArcSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out ArcSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IArcSegment, IArcSegment_Ptr);
   begin
      if this.m_IArcSegment /= null then
         if this.m_IArcSegment.all /= null then
            RefCount := this.m_IArcSegment.all.Release;
            Free (this.m_IArcSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ArcSegment

   function Constructor return ArcSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ArcSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IArcSegment;
   begin
      return RetVal : ArcSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IArcSegment := new Windows.UI.Xaml.Media.IArcSegment;
            Retval.m_IArcSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ArcSegment

   function get_PointProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ArcSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IArcSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IArcSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SizeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ArcSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IArcSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IArcSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SizeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationAngleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ArcSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IArcSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IArcSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationAngleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsLargeArcProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ArcSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IArcSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IArcSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsLargeArcProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SweepDirectionProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ArcSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IArcSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IArcSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SweepDirectionProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ArcSegment

   function get_Point
   (
      this : in out ArcSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IArcSegment.all.get_Point (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point
   (
      this : in out ArcSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IArcSegment.all.put_Point (value);
   end;

   function get_Size
   (
      this : in out ArcSegment
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IArcSegment.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out ArcSegment;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IArcSegment.all.put_Size (value);
   end;

   function get_RotationAngle
   (
      this : in out ArcSegment
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IArcSegment.all.get_RotationAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngle
   (
      this : in out ArcSegment;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IArcSegment.all.put_RotationAngle (value);
   end;

   function get_IsLargeArc
   (
      this : in out ArcSegment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IArcSegment.all.get_IsLargeArc (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsLargeArc
   (
      this : in out ArcSegment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IArcSegment.all.put_IsLargeArc (value);
   end;

   function get_SweepDirection
   (
      this : in out ArcSegment
   )
   return WinRt.Windows.UI.Xaml.Media.SweepDirection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.SweepDirection;
   begin
      Hr := this.m_IArcSegment.all.get_SweepDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SweepDirection
   (
      this : in out ArcSegment;
      value : Windows.UI.Xaml.Media.SweepDirection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IArcSegment.all.put_SweepDirection (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BezierSegment

   procedure Initialize (this : in out BezierSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out BezierSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBezierSegment, IBezierSegment_Ptr);
   begin
      if this.m_IBezierSegment /= null then
         if this.m_IBezierSegment.all /= null then
            RefCount := this.m_IBezierSegment.all.Release;
            Free (this.m_IBezierSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BezierSegment

   function Constructor return BezierSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.BezierSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IBezierSegment;
   begin
      return RetVal : BezierSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBezierSegment := new Windows.UI.Xaml.Media.IBezierSegment;
            Retval.m_IBezierSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BezierSegment

   function get_Point1Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.BezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Point1Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Point2Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.BezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Point2Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Point3Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.BezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Point3Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BezierSegment

   function get_Point1
   (
      this : in out BezierSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IBezierSegment.all.get_Point1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point1
   (
      this : in out BezierSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBezierSegment.all.put_Point1 (value);
   end;

   function get_Point2
   (
      this : in out BezierSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IBezierSegment.all.get_Point2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point2
   (
      this : in out BezierSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBezierSegment.all.put_Point2 (value);
   end;

   function get_Point3
   (
      this : in out BezierSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IBezierSegment.all.get_Point3 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point3
   (
      this : in out BezierSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBezierSegment.all.put_Point3 (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CacheMode

   procedure Initialize (this : in out CacheMode) is
   begin
      null;
   end;

   procedure Finalize (this : in out CacheMode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICacheMode, ICacheMode_Ptr);
   begin
      if this.m_ICacheMode /= null then
         if this.m_ICacheMode.all /= null then
            RefCount := this.m_ICacheMode.all.Release;
            Free (this.m_ICacheMode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CacheMode

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CacheMode is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CacheMode");
      m_Factory    : access ICacheModeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ICacheMode;
   begin
      return RetVal : CacheMode do
         Hr := RoGetActivationFactory (m_hString, IID_ICacheModeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICacheMode := new Windows.UI.Xaml.Media.ICacheMode;
            Retval.m_ICacheMode.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CacheMode

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapCache

   procedure Initialize (this : in out BitmapCache) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapCache) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapCache, IBitmapCache_Ptr);
   begin
      if this.m_IBitmapCache /= null then
         if this.m_IBitmapCache.all /= null then
            RefCount := this.m_IBitmapCache.all.Release;
            Free (this.m_IBitmapCache);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BitmapCache

   function Constructor return BitmapCache is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.BitmapCache");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IBitmapCache;
   begin
      return RetVal : BitmapCache do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBitmapCache := new Windows.UI.Xaml.Media.IBitmapCache;
            Retval.m_IBitmapCache.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapCache

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BrushCollection

   procedure Initialize (this : in out BrushCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out BrushCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BrushCollection

   function Constructor return BrushCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.BrushCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : BrushCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BrushCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.Brush>
   function GetAt
   (
      this : in out BrushCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out BrushCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out BrushCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out BrushCollection;
      value : Windows.UI.Xaml.Media.Brush'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IBrush.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out BrushCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out BrushCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out BrushCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out BrushCollection;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out BrushCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out BrushCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out BrushCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.IBrush_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out BrushCollection;
      items : Windows.UI.Xaml.Media.IBrush_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2832041188, 16095, 20850, (143, 119, 16, 233, 16, 229, 220, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBrush.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.Brush>
   function First
   (
      this : in out BrushCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IBrush.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2961085141, 1715, 24018, (141, 73, 52, 159, 251, 216, 70, 52 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IBrush.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeneralTransform

   procedure Initialize (this : in out GeneralTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeneralTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeneralTransform, IGeneralTransform_Ptr);
   begin
      if this.m_IGeneralTransform /= null then
         if this.m_IGeneralTransform.all /= null then
            RefCount := this.m_IGeneralTransform.all.Release;
            Free (this.m_IGeneralTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GeneralTransform

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GeneralTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GeneralTransform");
      m_Factory    : access IGeneralTransformFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IGeneralTransform;
   begin
      return RetVal : GeneralTransform do
         Hr := RoGetActivationFactory (m_hString, IID_IGeneralTransformFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGeneralTransform := new Windows.UI.Xaml.Media.IGeneralTransform;
            Retval.m_IGeneralTransform.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeneralTransform

   function get_Inverse
   (
      this : in out GeneralTransform
   )
   return WinRt.Windows.UI.Xaml.Media.GeneralTransform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IGeneralTransform;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.GeneralTransform do
         Hr := this.m_IGeneralTransform.all.get_Inverse (m_ComRetVal'Access);
         Retval.m_IGeneralTransform := new Windows.UI.Xaml.Media.IGeneralTransform;
         Retval.m_IGeneralTransform.all := m_ComRetVal;
      end return;
   end;

   function TransformPoint
   (
      this : in out GeneralTransform;
      point : Windows.Foundation.Point
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IGeneralTransform.all.TransformPoint (point, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryTransform
   (
      this : in out GeneralTransform;
      inPoint : Windows.Foundation.Point;
      outPoint : Windows.Foundation.Point_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGeneralTransform.all.TryTransform (inPoint, outPoint, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TransformBounds
   (
      this : in out GeneralTransform;
      rect : Windows.Foundation.Rect
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IGeneralTransform.all.TransformBounds (rect, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InverseCore
   (
      this : in out GeneralTransform
   )
   return WinRt.Windows.UI.Xaml.Media.GeneralTransform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IGeneralTransformOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IGeneralTransform;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IGeneralTransform_Interface, WinRt.Windows.UI.Xaml.Media.IGeneralTransformOverrides, WinRt.Windows.UI.Xaml.Media.IID_IGeneralTransformOverrides'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.GeneralTransform do
         m_Interface := QInterface (this.m_IGeneralTransform.all);
         Hr := m_Interface.get_InverseCore (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IGeneralTransform := new Windows.UI.Xaml.Media.IGeneralTransform;
         Retval.m_IGeneralTransform.all := m_ComRetVal;
      end return;
   end;

   function TryTransformCore
   (
      this : in out GeneralTransform;
      inPoint : Windows.Foundation.Point;
      outPoint : Windows.Foundation.Point_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IGeneralTransformOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IGeneralTransform_Interface, WinRt.Windows.UI.Xaml.Media.IGeneralTransformOverrides, WinRt.Windows.UI.Xaml.Media.IID_IGeneralTransformOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGeneralTransform.all);
      Hr := m_Interface.TryTransformCore (inPoint, outPoint, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TransformBoundsCore
   (
      this : in out GeneralTransform;
      rect : Windows.Foundation.Rect
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IGeneralTransformOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IGeneralTransform_Interface, WinRt.Windows.UI.Xaml.Media.IGeneralTransformOverrides, WinRt.Windows.UI.Xaml.Media.IID_IGeneralTransformOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGeneralTransform.all);
      Hr := m_Interface.TransformBoundsCore (rect, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Transform

   procedure Initialize (this : in out Transform) is
   begin
      null;
   end;

   procedure Finalize (this : in out Transform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITransform, ITransform_Ptr);
   begin
      if this.m_ITransform /= null then
         if this.m_ITransform.all /= null then
            RefCount := this.m_ITransform.all.Release;
            Free (this.m_ITransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Transform

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Transform

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositeTransform

   procedure Initialize (this : in out CompositeTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositeTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositeTransform, ICompositeTransform_Ptr);
   begin
      if this.m_ICompositeTransform /= null then
         if this.m_ICompositeTransform.all /= null then
            RefCount := this.m_ICompositeTransform.all.Release;
            Free (this.m_ICompositeTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositeTransform

   function Constructor return CompositeTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ICompositeTransform;
   begin
      return RetVal : CompositeTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICompositeTransform := new Windows.UI.Xaml.Media.ICompositeTransform;
            Retval.m_ICompositeTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositeTransform

   function get_CenterXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SkewXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SkewXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SkewYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SkewYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TranslateXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TranslateXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TranslateYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositeTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositeTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TranslateYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositeTransform

   function get_CenterX
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_CenterX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterX
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_CenterX (value);
   end;

   function get_CenterY
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_CenterY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterY
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_CenterY (value);
   end;

   function get_ScaleX
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_ScaleX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleX
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_ScaleX (value);
   end;

   function get_ScaleY
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_ScaleY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleY
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_ScaleY (value);
   end;

   function get_SkewX
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_SkewX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SkewX
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_SkewX (value);
   end;

   function get_SkewY
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_SkewY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SkewY
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_SkewY (value);
   end;

   function get_Rotation
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_Rotation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Rotation
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_Rotation (value);
   end;

   function get_TranslateX
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_TranslateX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TranslateX
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_TranslateX (value);
   end;

   function get_TranslateY
   (
      this : in out CompositeTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform.all.get_TranslateY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TranslateY
   (
      this : in out CompositeTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform.all.put_TranslateY (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionTarget

   procedure Initialize (this : in out CompositionTarget) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionTarget) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionTarget, ICompositionTarget_Ptr);
   begin
      if this.m_ICompositionTarget /= null then
         if this.m_ICompositionTarget.all /= null then
            RefCount := this.m_ICompositionTarget.all.Release;
            Free (this.m_ICompositionTarget);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositionTarget

   function add_Rendering
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositionTarget");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositionTargetStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionTargetStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_Rendering (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_Rendering
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositionTarget");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositionTargetStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionTargetStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_Rendering (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function add_SurfaceContentsLost
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositionTarget");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositionTargetStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionTargetStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_SurfaceContentsLost (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_SurfaceContentsLost
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositionTarget");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositionTargetStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionTargetStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_SurfaceContentsLost (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function add_Rendered
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositionTarget");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositionTargetStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionTargetStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_Rendered (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_Rendered
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.CompositionTarget");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ICompositionTargetStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionTargetStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_Rendered (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionTarget

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DoubleCollection

   procedure Initialize (this : in out DoubleCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out DoubleCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DoubleCollection

   function Constructor return DoubleCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.DoubleCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : DoubleCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DoubleCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<System.Double>
   function GetAt
   (
      this : in out DoubleCollection;
      index : WinRt.UInt32
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Double;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out DoubleCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out DoubleCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out DoubleCollection;
      value : WinRt.Double;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out DoubleCollection;
      index : WinRt.UInt32;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out DoubleCollection;
      index : WinRt.UInt32;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out DoubleCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out DoubleCollection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out DoubleCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out DoubleCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out DoubleCollection;
      startIndex : WinRt.UInt32;
      items : WinRt.Double_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out DoubleCollection;
      items : WinRt.Double_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4099068476, 48901, 24382, (136, 231, 209, 122, 103, 22, 185, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Double.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<System.Double>
   function First
   (
      this : in out DoubleCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_Double.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3342374478, 40036, 23502, (181, 206, 97, 233, 162, 130, 236, 74 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_Double.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Geometry

   procedure Initialize (this : in out Geometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out Geometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeometry, IGeometry_Ptr);
   begin
      if this.m_IGeometry /= null then
         if this.m_IGeometry.all /= null then
            RefCount := this.m_IGeometry.all.Release;
            Free (this.m_IGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Geometry

   -----------------------------------------------------------------------------
   -- Static Interfaces for Geometry

   function get_Empty
   return WinRt.Windows.UI.Xaml.Media.Geometry is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Geometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IGeometry;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Geometry do
         Hr := RoGetActivationFactory (m_hString, IID_IGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Empty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IGeometry := new Windows.UI.Xaml.Media.IGeometry;
            Retval.m_IGeometry.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StandardFlatteningTolerance
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Geometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGeometryStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_StandardFlatteningTolerance (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_TransformProperty_Geometry
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Geometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TransformProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Geometry

   function get_Transform
   (
      this : in out Geometry
   )
   return WinRt.Windows.UI.Xaml.Media.Transform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITransform;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Transform do
         Hr := this.m_IGeometry.all.get_Transform (m_ComRetVal'Access);
         Retval.m_ITransform := new Windows.UI.Xaml.Media.ITransform;
         Retval.m_ITransform.all := m_ComRetVal;
      end return;
   end;

   procedure put_Transform
   (
      this : in out Geometry;
      value : Windows.UI.Xaml.Media.Transform'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGeometry.all.put_Transform (value.m_ITransform.all);
   end;

   function get_Bounds
   (
      this : in out Geometry
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IGeometry.all.get_Bounds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EllipseGeometry

   procedure Initialize (this : in out EllipseGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out EllipseGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEllipseGeometry, IEllipseGeometry_Ptr);
   begin
      if this.m_IEllipseGeometry /= null then
         if this.m_IEllipseGeometry.all /= null then
            RefCount := this.m_IEllipseGeometry.all.Release;
            Free (this.m_IEllipseGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EllipseGeometry

   function Constructor return EllipseGeometry is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.EllipseGeometry");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IEllipseGeometry;
   begin
      return RetVal : EllipseGeometry do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IEllipseGeometry := new Windows.UI.Xaml.Media.IEllipseGeometry;
            Retval.m_IEllipseGeometry.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for EllipseGeometry

   function get_CenterProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.EllipseGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IEllipseGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IEllipseGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RadiusXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.EllipseGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IEllipseGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IEllipseGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RadiusXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RadiusYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.EllipseGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IEllipseGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IEllipseGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RadiusYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EllipseGeometry

   function get_Center
   (
      this : in out EllipseGeometry
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IEllipseGeometry.all.get_Center (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Center
   (
      this : in out EllipseGeometry;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEllipseGeometry.all.put_Center (value);
   end;

   function get_RadiusX
   (
      this : in out EllipseGeometry
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEllipseGeometry.all.get_RadiusX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RadiusX
   (
      this : in out EllipseGeometry;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEllipseGeometry.all.put_RadiusX (value);
   end;

   function get_RadiusY
   (
      this : in out EllipseGeometry
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEllipseGeometry.all.get_RadiusY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RadiusY
   (
      this : in out EllipseGeometry;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEllipseGeometry.all.put_RadiusY (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FontFamily

   procedure Initialize (this : in out FontFamily) is
   begin
      null;
   end;

   procedure Finalize (this : in out FontFamily) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFontFamily, IFontFamily_Ptr);
   begin
      if this.m_IFontFamily /= null then
         if this.m_IFontFamily.all /= null then
            RefCount := this.m_IFontFamily.all.Release;
            Free (this.m_IFontFamily);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FontFamily

   function Constructor
   (
      familyName : WinRt.WString;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FontFamily is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.FontFamily");
      m_Factory    : access IFontFamilyFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IFontFamily;
      HStr_familyName : WinRt.HString := To_HString (familyName);
   begin
      return RetVal : FontFamily do
         Hr := RoGetActivationFactory (m_hString, IID_IFontFamilyFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithName (HStr_familyName, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFontFamily := new Windows.UI.Xaml.Media.IFontFamily;
            Retval.m_IFontFamily.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_familyName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FontFamily

   function get_XamlAutoFontFamily
   return WinRt.Windows.UI.Xaml.Media.FontFamily is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.FontFamily");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IFontFamilyStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IFontFamily;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.FontFamily do
         Hr := RoGetActivationFactory (m_hString, IID_IFontFamilyStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XamlAutoFontFamily (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IFontFamily := new Windows.UI.Xaml.Media.IFontFamily;
            Retval.m_IFontFamily.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FontFamily

   function get_Source
   (
      this : in out FontFamily
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFontFamily.all.get_Source (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeometryCollection

   procedure Initialize (this : in out GeometryCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeometryCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GeometryCollection

   function Constructor return GeometryCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GeometryCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : GeometryCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeometryCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.Geometry>
   function GetAt
   (
      this : in out GeometryCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.Geometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IGeometry;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Geometry do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IGeometry := new Windows.UI.Xaml.Media.IGeometry;
         Retval.m_IGeometry.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out GeometryCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out GeometryCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out GeometryCollection;
      value : Windows.UI.Xaml.Media.Geometry'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IGeometry.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out GeometryCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.Geometry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IGeometry.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out GeometryCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.Geometry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IGeometry.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out GeometryCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out GeometryCollection;
      value : Windows.UI.Xaml.Media.Geometry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IGeometry.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out GeometryCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out GeometryCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out GeometryCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.IGeometry_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out GeometryCollection;
      items : Windows.UI.Xaml.Media.IGeometry_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2227612730, 33287, 21913, (149, 131, 96, 106, 194, 19, 157, 221 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGeometry.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.Geometry>
   function First
   (
      this : in out GeometryCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IGeometry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (892600377, 3580, 21172, (135, 72, 13, 154, 117, 93, 184, 168 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IGeometry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeometryGroup

   procedure Initialize (this : in out GeometryGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeometryGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeometryGroup, IGeometryGroup_Ptr);
   begin
      if this.m_IGeometryGroup /= null then
         if this.m_IGeometryGroup.all /= null then
            RefCount := this.m_IGeometryGroup.all.Release;
            Free (this.m_IGeometryGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GeometryGroup

   function Constructor return GeometryGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GeometryGroup");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IGeometryGroup;
   begin
      return RetVal : GeometryGroup do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGeometryGroup := new Windows.UI.Xaml.Media.IGeometryGroup;
            Retval.m_IGeometryGroup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GeometryGroup

   function get_FillRuleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GeometryGroup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGeometryGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGeometryGroupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillRuleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ChildrenProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GeometryGroup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGeometryGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGeometryGroupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChildrenProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeometryGroup

   function get_FillRule
   (
      this : in out GeometryGroup
   )
   return WinRt.Windows.UI.Xaml.Media.FillRule is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.FillRule;
   begin
      Hr := this.m_IGeometryGroup.all.get_FillRule (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FillRule
   (
      this : in out GeometryGroup;
      value : Windows.UI.Xaml.Media.FillRule
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGeometryGroup.all.put_FillRule (value);
   end;

   function get_Children
   (
      this : in out GeometryGroup
   )
   return WinRt.Windows.UI.Xaml.Media.GeometryCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.GeometryCollection do
         Hr := this.m_IGeometryGroup.all.get_Children (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Children
   (
      this : in out GeometryGroup;
      value : Windows.UI.Xaml.Media.GeometryCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGeometryGroup.all.put_Children (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GradientBrush

   procedure Initialize (this : in out GradientBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out GradientBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGradientBrush, IGradientBrush_Ptr);
   begin
      if this.m_IGradientBrush /= null then
         if this.m_IGradientBrush.all /= null then
            RefCount := this.m_IGradientBrush.all.Release;
            Free (this.m_IGradientBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GradientBrush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GradientBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientBrush");
      m_Factory    : access IGradientBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IGradientBrush;
   begin
      return RetVal : GradientBrush do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGradientBrush := new Windows.UI.Xaml.Media.IGradientBrush;
            Retval.m_IGradientBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GradientBrush

   function get_SpreadMethodProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGradientBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SpreadMethodProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MappingModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGradientBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MappingModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ColorInterpolationModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGradientBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorInterpolationModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GradientStopsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGradientBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GradientStopsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GradientBrush

   function get_SpreadMethod
   (
      this : in out GradientBrush
   )
   return WinRt.Windows.UI.Xaml.Media.GradientSpreadMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.GradientSpreadMethod;
   begin
      Hr := this.m_IGradientBrush.all.get_SpreadMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SpreadMethod
   (
      this : in out GradientBrush;
      value : Windows.UI.Xaml.Media.GradientSpreadMethod
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGradientBrush.all.put_SpreadMethod (value);
   end;

   function get_MappingMode
   (
      this : in out GradientBrush
   )
   return WinRt.Windows.UI.Xaml.Media.BrushMappingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.BrushMappingMode;
   begin
      Hr := this.m_IGradientBrush.all.get_MappingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MappingMode
   (
      this : in out GradientBrush;
      value : Windows.UI.Xaml.Media.BrushMappingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGradientBrush.all.put_MappingMode (value);
   end;

   function get_ColorInterpolationMode
   (
      this : in out GradientBrush
   )
   return WinRt.Windows.UI.Xaml.Media.ColorInterpolationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ColorInterpolationMode;
   begin
      Hr := this.m_IGradientBrush.all.get_ColorInterpolationMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ColorInterpolationMode
   (
      this : in out GradientBrush;
      value : Windows.UI.Xaml.Media.ColorInterpolationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGradientBrush.all.put_ColorInterpolationMode (value);
   end;

   function get_GradientStops
   (
      this : in out GradientBrush
   )
   return WinRt.Windows.UI.Xaml.Media.GradientStopCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.GradientStopCollection do
         Hr := this.m_IGradientBrush.all.get_GradientStops (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_GradientStops
   (
      this : in out GradientBrush;
      value : Windows.UI.Xaml.Media.GradientStopCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGradientBrush.all.put_GradientStops (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GradientStop

   procedure Initialize (this : in out GradientStop) is
   begin
      null;
   end;

   procedure Finalize (this : in out GradientStop) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGradientStop, IGradientStop_Ptr);
   begin
      if this.m_IGradientStop /= null then
         if this.m_IGradientStop.all /= null then
            RefCount := this.m_IGradientStop.all.Release;
            Free (this.m_IGradientStop);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GradientStop

   function Constructor return GradientStop is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientStop");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IGradientStop;
   begin
      return RetVal : GradientStop do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGradientStop := new Windows.UI.Xaml.Media.IGradientStop;
            Retval.m_IGradientStop.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GradientStop

   function get_ColorProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientStop");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGradientStopStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientStopStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_OffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientStop");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IGradientStopStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGradientStopStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GradientStop

   function get_Color
   (
      this : in out GradientStop
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IGradientStop.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out GradientStop;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGradientStop.all.put_Color (value);
   end;

   function get_Offset
   (
      this : in out GradientStop
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGradientStop.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out GradientStop;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGradientStop.all.put_Offset (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GradientStopCollection

   procedure Initialize (this : in out GradientStopCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out GradientStopCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GradientStopCollection

   function Constructor return GradientStopCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.GradientStopCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : GradientStopCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GradientStopCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.GradientStop>
   function GetAt
   (
      this : in out GradientStopCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.GradientStop'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IGradientStop;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.GradientStop do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IGradientStop := new Windows.UI.Xaml.Media.IGradientStop;
         Retval.m_IGradientStop.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out GradientStopCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out GradientStopCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out GradientStopCollection;
      value : Windows.UI.Xaml.Media.GradientStop'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IGradientStop.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out GradientStopCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.GradientStop'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IGradientStop.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out GradientStopCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.GradientStop'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IGradientStop.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out GradientStopCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out GradientStopCollection;
      value : Windows.UI.Xaml.Media.GradientStop'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IGradientStop.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out GradientStopCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out GradientStopCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out GradientStopCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.IGradientStop_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out GradientStopCollection;
      items : Windows.UI.Xaml.Media.IGradientStop_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (859975076, 9459, 23378, (158, 141, 17, 221, 113, 240, 139, 177 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.GradientStop>
   function First
   (
      this : in out GradientStopCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2433072019, 44070, 23470, (140, 30, 223, 142, 207, 0, 222, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageBrush

   procedure Initialize (this : in out ImageBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageBrush, IImageBrush_Ptr);
   begin
      if this.m_IImageBrush /= null then
         if this.m_IImageBrush.all /= null then
            RefCount := this.m_IImageBrush.all.Release;
            Free (this.m_IImageBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ImageBrush

   function Constructor return ImageBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ImageBrush");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IImageBrush;
   begin
      return RetVal : ImageBrush do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IImageBrush := new Windows.UI.Xaml.Media.IImageBrush;
            Retval.m_IImageBrush.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ImageBrush

   function get_ImageSourceProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ImageBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IImageBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IImageBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ImageSourceProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageBrush

   function get_ImageSource
   (
      this : in out ImageBrush
   )
   return WinRt.Windows.UI.Xaml.Media.ImageSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IImageSource;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.ImageSource do
         Hr := this.m_IImageBrush.all.get_ImageSource (m_ComRetVal'Access);
         Retval.m_IImageSource := new Windows.UI.Xaml.Media.IImageSource;
         Retval.m_IImageSource.all := m_ComRetVal;
      end return;
   end;

   procedure put_ImageSource
   (
      this : in out ImageBrush;
      value : Windows.UI.Xaml.Media.ImageSource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageBrush.all.put_ImageSource (value.m_IImageSource.all);
   end;

   function add_ImageFailed
   (
      this : in out ImageBrush;
      handler : Windows.UI.Xaml.ExceptionRoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IImageBrush.all.add_ImageFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ImageFailed
   (
      this : in out ImageBrush;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageBrush.all.remove_ImageFailed (token);
   end;

   function add_ImageOpened
   (
      this : in out ImageBrush;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IImageBrush.all.add_ImageOpened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ImageOpened
   (
      this : in out ImageBrush;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageBrush.all.remove_ImageOpened (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageSource

   procedure Initialize (this : in out ImageSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageSource, IImageSource_Ptr);
   begin
      if this.m_IImageSource /= null then
         if this.m_IImageSource.all /= null then
            RefCount := this.m_IImageSource.all.Release;
            Free (this.m_IImageSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ImageSource

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageSource

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineGeometry

   procedure Initialize (this : in out LineGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineGeometry, ILineGeometry_Ptr);
   begin
      if this.m_ILineGeometry /= null then
         if this.m_ILineGeometry.all /= null then
            RefCount := this.m_ILineGeometry.all.Release;
            Free (this.m_ILineGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LineGeometry

   function Constructor return LineGeometry is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LineGeometry");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ILineGeometry;
   begin
      return RetVal : LineGeometry do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILineGeometry := new Windows.UI.Xaml.Media.ILineGeometry;
            Retval.m_ILineGeometry.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LineGeometry

   function get_StartPointProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LineGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILineGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StartPointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_EndPointProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LineGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILineGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EndPointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineGeometry

   function get_StartPoint
   (
      this : in out LineGeometry
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ILineGeometry.all.get_StartPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartPoint
   (
      this : in out LineGeometry;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineGeometry.all.put_StartPoint (value);
   end;

   function get_EndPoint
   (
      this : in out LineGeometry
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ILineGeometry.all.get_EndPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EndPoint
   (
      this : in out LineGeometry;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineGeometry.all.put_EndPoint (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineSegment

   procedure Initialize (this : in out LineSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineSegment, ILineSegment_Ptr);
   begin
      if this.m_ILineSegment /= null then
         if this.m_ILineSegment.all /= null then
            RefCount := this.m_ILineSegment.all.Release;
            Free (this.m_ILineSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LineSegment

   function Constructor return LineSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LineSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ILineSegment;
   begin
      return RetVal : LineSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILineSegment := new Windows.UI.Xaml.Media.ILineSegment;
            Retval.m_ILineSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LineSegment

   function get_PointProperty_LineSegment
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LineSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILineSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineSegment

   function get_Point
   (
      this : in out LineSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ILineSegment.all.get_Point (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point
   (
      this : in out LineSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineSegment.all.put_Point (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LinearGradientBrush

   procedure Initialize (this : in out LinearGradientBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out LinearGradientBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILinearGradientBrush, ILinearGradientBrush_Ptr);
   begin
      if this.m_ILinearGradientBrush /= null then
         if this.m_ILinearGradientBrush.all /= null then
            RefCount := this.m_ILinearGradientBrush.all.Release;
            Free (this.m_ILinearGradientBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LinearGradientBrush

   function Constructor
   (
      gradientStopCollection_p : Windows.UI.Xaml.Media.GradientStopCollection'Class;
      angle : WinRt.Double
   )
   return LinearGradientBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LinearGradientBrush");
      m_Factory    : access ILinearGradientBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ILinearGradientBrush;
   begin
      return RetVal : LinearGradientBrush do
         Hr := RoGetActivationFactory (m_hString, IID_ILinearGradientBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithGradientStopCollectionAndAngle (gradientStopCollection_p.m_GenericObject.all, angle, m_ComRetVal'Access);
            Retval.m_ILinearGradientBrush := new Windows.UI.Xaml.Media.ILinearGradientBrush;
            Retval.m_ILinearGradientBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return LinearGradientBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LinearGradientBrush");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ILinearGradientBrush;
   begin
      return RetVal : LinearGradientBrush do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILinearGradientBrush := new Windows.UI.Xaml.Media.ILinearGradientBrush;
            Retval.m_ILinearGradientBrush.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LinearGradientBrush

   function get_StartPointProperty_LinearGradientBrush
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LinearGradientBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILinearGradientBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILinearGradientBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StartPointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_EndPointProperty_LinearGradientBrush
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LinearGradientBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILinearGradientBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILinearGradientBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EndPointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LinearGradientBrush

   function get_StartPoint
   (
      this : in out LinearGradientBrush
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ILinearGradientBrush.all.get_StartPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartPoint
   (
      this : in out LinearGradientBrush;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILinearGradientBrush.all.put_StartPoint (value);
   end;

   function get_EndPoint
   (
      this : in out LinearGradientBrush
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ILinearGradientBrush.all.get_EndPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EndPoint
   (
      this : in out LinearGradientBrush;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILinearGradientBrush.all.put_EndPoint (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoadedImageSourceLoadCompletedEventArgs

   procedure Initialize (this : in out LoadedImageSourceLoadCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoadedImageSourceLoadCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoadedImageSourceLoadCompletedEventArgs, ILoadedImageSourceLoadCompletedEventArgs_Ptr);
   begin
      if this.m_ILoadedImageSourceLoadCompletedEventArgs /= null then
         if this.m_ILoadedImageSourceLoadCompletedEventArgs.all /= null then
            RefCount := this.m_ILoadedImageSourceLoadCompletedEventArgs.all.Release;
            Free (this.m_ILoadedImageSourceLoadCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoadedImageSourceLoadCompletedEventArgs

   function get_Status
   (
      this : in out LoadedImageSourceLoadCompletedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Media.LoadedImageSourceLoadStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.LoadedImageSourceLoadStatus;
   begin
      Hr := this.m_ILoadedImageSourceLoadCompletedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoadedImageSurface

   procedure Initialize (this : in out LoadedImageSurface) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoadedImageSurface) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoadedImageSurface, ILoadedImageSurface_Ptr);
   begin
      if this.m_ILoadedImageSurface /= null then
         if this.m_ILoadedImageSurface.all /= null then
            RefCount := this.m_ILoadedImageSurface.all.Release;
            Free (this.m_ILoadedImageSurface);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LoadedImageSurface

   function StartLoadFromUri
   (
      uri : Windows.Foundation.Uri'Class;
      desiredMaxSize : Windows.Foundation.Size
   )
   return WinRt.Windows.UI.Xaml.Media.LoadedImageSurface is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LoadedImageSurface");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILoadedImageSurfaceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ILoadedImageSurface;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.LoadedImageSurface do
         Hr := RoGetActivationFactory (m_hString, IID_ILoadedImageSurfaceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartLoadFromUri (uri.m_IUriRuntimeClass.all, desiredMaxSize, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILoadedImageSurface := new Windows.UI.Xaml.Media.ILoadedImageSurface;
            Retval.m_ILoadedImageSurface.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function StartLoadFromUri
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.UI.Xaml.Media.LoadedImageSurface is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LoadedImageSurface");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILoadedImageSurfaceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ILoadedImageSurface;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.LoadedImageSurface do
         Hr := RoGetActivationFactory (m_hString, IID_ILoadedImageSurfaceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartLoadFromUri (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILoadedImageSurface := new Windows.UI.Xaml.Media.ILoadedImageSurface;
            Retval.m_ILoadedImageSurface.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function StartLoadFromStream
   (
      stream : Windows.Storage.Streams.IRandomAccessStream;
      desiredMaxSize : Windows.Foundation.Size
   )
   return WinRt.Windows.UI.Xaml.Media.LoadedImageSurface is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LoadedImageSurface");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILoadedImageSurfaceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ILoadedImageSurface;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.LoadedImageSurface do
         Hr := RoGetActivationFactory (m_hString, IID_ILoadedImageSurfaceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartLoadFromStream (stream, desiredMaxSize, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILoadedImageSurface := new Windows.UI.Xaml.Media.ILoadedImageSurface;
            Retval.m_ILoadedImageSurface.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function StartLoadFromStream
   (
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.UI.Xaml.Media.LoadedImageSurface is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.LoadedImageSurface");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ILoadedImageSurfaceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ILoadedImageSurface;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.LoadedImageSurface do
         Hr := RoGetActivationFactory (m_hString, IID_ILoadedImageSurfaceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartLoadFromStream (stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILoadedImageSurface := new Windows.UI.Xaml.Media.ILoadedImageSurface;
            Retval.m_ILoadedImageSurface.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoadedImageSurface

   function get_DecodedPhysicalSize
   (
      this : in out LoadedImageSurface
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ILoadedImageSurface.all.get_DecodedPhysicalSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DecodedSize
   (
      this : in out LoadedImageSurface
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ILoadedImageSurface.all.get_DecodedSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NaturalSize
   (
      this : in out LoadedImageSurface
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ILoadedImageSurface.all.get_NaturalSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_LoadCompleted
   (
      this : in out LoadedImageSurface;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILoadedImageSurface.all.add_LoadCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LoadCompleted
   (
      this : in out LoadedImageSurface;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoadedImageSurface.all.remove_LoadCompleted (token);
   end;

   procedure Close
   (
      this : in out LoadedImageSurface
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.ILoadedImageSurface_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoadedImageSurface.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Projection

   procedure Initialize (this : in out Projection) is
   begin
      null;
   end;

   procedure Finalize (this : in out Projection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProjection, IProjection_Ptr);
   begin
      if this.m_IProjection /= null then
         if this.m_IProjection.all /= null then
            RefCount := this.m_IProjection.all.Release;
            Free (this.m_IProjection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Projection

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Projection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Projection");
      m_Factory    : access IProjectionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IProjection;
   begin
      return RetVal : Projection do
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IProjection := new Windows.UI.Xaml.Media.IProjection;
            Retval.m_IProjection.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Projection

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Matrix3DProjection

   procedure Initialize (this : in out Matrix3DProjection) is
   begin
      null;
   end;

   procedure Finalize (this : in out Matrix3DProjection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMatrix3DProjection, IMatrix3DProjection_Ptr);
   begin
      if this.m_IMatrix3DProjection /= null then
         if this.m_IMatrix3DProjection.all /= null then
            RefCount := this.m_IMatrix3DProjection.all.Release;
            Free (this.m_IMatrix3DProjection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Matrix3DProjection

   function Constructor return Matrix3DProjection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Matrix3DProjection");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IMatrix3DProjection;
   begin
      return RetVal : Matrix3DProjection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMatrix3DProjection := new Windows.UI.Xaml.Media.IMatrix3DProjection;
            Retval.m_IMatrix3DProjection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Matrix3DProjection

   function get_ProjectionMatrixProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Matrix3DProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IMatrix3DProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProjectionMatrixProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Matrix3DProjection

   function get_ProjectionMatrix
   (
      this : in out Matrix3DProjection
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Media3D.Matrix3D;
   begin
      Hr := this.m_IMatrix3DProjection.all.get_ProjectionMatrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProjectionMatrix
   (
      this : in out Matrix3DProjection;
      value : Windows.UI.Xaml.Media.Media3D.Matrix3D
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMatrix3DProjection.all.put_ProjectionMatrix (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MatrixHelper

   procedure Initialize (this : in out MatrixHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out MatrixHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMatrixHelper, IMatrixHelper_Ptr);
   begin
      if this.m_IMatrixHelper /= null then
         if this.m_IMatrixHelper.all /= null then
            RefCount := this.m_IMatrixHelper.all.Release;
            Free (this.m_IMatrixHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MatrixHelper

   function get_Identity
   return WinRt.Windows.UI.Xaml.Media.Matrix is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.MatrixHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IMatrixHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Matrix;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrixHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Identity (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function FromElements
   (
      m11 : WinRt.Double;
      m12 : WinRt.Double;
      m21 : WinRt.Double;
      m22 : WinRt.Double;
      offsetX : WinRt.Double;
      offsetY : WinRt.Double
   )
   return WinRt.Windows.UI.Xaml.Media.Matrix is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.MatrixHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IMatrixHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Matrix;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrixHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FromElements (m11, m12, m21, m22, offsetX, offsetY, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetIsIdentity
   (
      target : Windows.UI.Xaml.Media.Matrix
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.MatrixHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IMatrixHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrixHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetIsIdentity (target, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function Transform_x
   (
      target : Windows.UI.Xaml.Media.Matrix;
      point : Windows.Foundation.Point
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.MatrixHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IMatrixHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrixHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Transform_x (target, point, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MatrixHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MatrixTransform

   procedure Initialize (this : in out MatrixTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out MatrixTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMatrixTransform, IMatrixTransform_Ptr);
   begin
      if this.m_IMatrixTransform /= null then
         if this.m_IMatrixTransform.all /= null then
            RefCount := this.m_IMatrixTransform.all.Release;
            Free (this.m_IMatrixTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MatrixTransform

   function Constructor return MatrixTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.MatrixTransform");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IMatrixTransform;
   begin
      return RetVal : MatrixTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMatrixTransform := new Windows.UI.Xaml.Media.IMatrixTransform;
            Retval.m_IMatrixTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MatrixTransform

   function get_MatrixProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.MatrixTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IMatrixTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IMatrixTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MatrixProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MatrixTransform

   function get_Matrix
   (
      this : in out MatrixTransform
   )
   return WinRt.Windows.UI.Xaml.Media.Matrix is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Matrix;
   begin
      Hr := this.m_IMatrixTransform.all.get_Matrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Matrix
   (
      this : in out MatrixTransform;
      value : Windows.UI.Xaml.Media.Matrix
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMatrixTransform.all.put_Matrix (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaTransportControlsThumbnailRequestedEventArgs

   procedure Initialize (this : in out MediaTransportControlsThumbnailRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaTransportControlsThumbnailRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTransportControlsThumbnailRequestedEventArgs, IMediaTransportControlsThumbnailRequestedEventArgs_Ptr);
   begin
      if this.m_IMediaTransportControlsThumbnailRequestedEventArgs /= null then
         if this.m_IMediaTransportControlsThumbnailRequestedEventArgs.all /= null then
            RefCount := this.m_IMediaTransportControlsThumbnailRequestedEventArgs.all.Release;
            Free (this.m_IMediaTransportControlsThumbnailRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaTransportControlsThumbnailRequestedEventArgs

   procedure SetThumbnailImage
   (
      this : in out MediaTransportControlsThumbnailRequestedEventArgs;
      source : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTransportControlsThumbnailRequestedEventArgs.all.SetThumbnailImage (source);
   end;

   function GetDeferral
   (
      this : in out MediaTransportControlsThumbnailRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaTransportControlsThumbnailRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PartialMediaFailureDetectedEventArgs

   procedure Initialize (this : in out PartialMediaFailureDetectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PartialMediaFailureDetectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPartialMediaFailureDetectedEventArgs, IPartialMediaFailureDetectedEventArgs_Ptr);
   begin
      if this.m_IPartialMediaFailureDetectedEventArgs /= null then
         if this.m_IPartialMediaFailureDetectedEventArgs.all /= null then
            RefCount := this.m_IPartialMediaFailureDetectedEventArgs.all.Release;
            Free (this.m_IPartialMediaFailureDetectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PartialMediaFailureDetectedEventArgs

   function Constructor return PartialMediaFailureDetectedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs;
   begin
      return RetVal : PartialMediaFailureDetectedEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPartialMediaFailureDetectedEventArgs := new Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs;
            Retval.m_IPartialMediaFailureDetectedEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PartialMediaFailureDetectedEventArgs

   function get_StreamKind
   (
      this : in out PartialMediaFailureDetectedEventArgs
   )
   return WinRt.Windows.Media.Playback.FailedMediaStreamKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.FailedMediaStreamKind;
   begin
      Hr := this.m_IPartialMediaFailureDetectedEventArgs.all.get_StreamKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out PartialMediaFailureDetectedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs_Interface, WinRt.Windows.UI.Xaml.Media.IPartialMediaFailureDetectedEventArgs2, WinRt.Windows.UI.Xaml.Media.IID_IPartialMediaFailureDetectedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPartialMediaFailureDetectedEventArgs.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PathFigure

   procedure Initialize (this : in out PathFigure) is
   begin
      null;
   end;

   procedure Finalize (this : in out PathFigure) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPathFigure, IPathFigure_Ptr);
   begin
      if this.m_IPathFigure /= null then
         if this.m_IPathFigure.all /= null then
            RefCount := this.m_IPathFigure.all.Release;
            Free (this.m_IPathFigure);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PathFigure

   function Constructor return PathFigure is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathFigure");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPathFigure;
   begin
      return RetVal : PathFigure do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPathFigure := new Windows.UI.Xaml.Media.IPathFigure;
            Retval.m_IPathFigure.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PathFigure

   function get_SegmentsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathFigure");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPathFigureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathFigureStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SegmentsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StartPointProperty_PathFigure
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathFigure");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPathFigureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathFigureStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StartPointProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsClosedProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathFigure");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPathFigureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathFigureStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsClosedProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsFilledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathFigure");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPathFigureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathFigureStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsFilledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PathFigure

   function get_Segments
   (
      this : in out PathFigure
   )
   return WinRt.Windows.UI.Xaml.Media.PathSegmentCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PathSegmentCollection do
         Hr := this.m_IPathFigure.all.get_Segments (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Segments
   (
      this : in out PathFigure;
      value : Windows.UI.Xaml.Media.PathSegmentCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathFigure.all.put_Segments (value.m_GenericObject.all);
   end;

   function get_StartPoint
   (
      this : in out PathFigure
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IPathFigure.all.get_StartPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartPoint
   (
      this : in out PathFigure;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathFigure.all.put_StartPoint (value);
   end;

   function get_IsClosed
   (
      this : in out PathFigure
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPathFigure.all.get_IsClosed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsClosed
   (
      this : in out PathFigure;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathFigure.all.put_IsClosed (value);
   end;

   function get_IsFilled
   (
      this : in out PathFigure
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPathFigure.all.get_IsFilled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsFilled
   (
      this : in out PathFigure;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathFigure.all.put_IsFilled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PathFigureCollection

   procedure Initialize (this : in out PathFigureCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out PathFigureCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PathFigureCollection

   function Constructor return PathFigureCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathFigureCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : PathFigureCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PathFigureCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.PathFigure>
   function GetAt
   (
      this : in out PathFigureCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.PathFigure'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IPathFigure;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PathFigure do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPathFigure := new Windows.UI.Xaml.Media.IPathFigure;
         Retval.m_IPathFigure.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out PathFigureCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out PathFigureCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out PathFigureCollection;
      value : Windows.UI.Xaml.Media.PathFigure'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IPathFigure.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out PathFigureCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.PathFigure'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IPathFigure.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out PathFigureCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.PathFigure'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IPathFigure.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out PathFigureCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out PathFigureCollection;
      value : Windows.UI.Xaml.Media.PathFigure'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IPathFigure.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out PathFigureCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out PathFigureCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out PathFigureCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.IPathFigure_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out PathFigureCollection;
      items : Windows.UI.Xaml.Media.IPathFigure_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3727283205, 9949, 24178, (139, 203, 73, 81, 153, 212, 229, 181 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.PathFigure>
   function First
   (
      this : in out PathFigureCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IPathFigure.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3441280033, 55013, 23359, (168, 199, 153, 56, 242, 139, 41, 149 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IPathFigure.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PathGeometry

   procedure Initialize (this : in out PathGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out PathGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPathGeometry, IPathGeometry_Ptr);
   begin
      if this.m_IPathGeometry /= null then
         if this.m_IPathGeometry.all /= null then
            RefCount := this.m_IPathGeometry.all.Release;
            Free (this.m_IPathGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PathGeometry

   function Constructor return PathGeometry is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathGeometry");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPathGeometry;
   begin
      return RetVal : PathGeometry do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPathGeometry := new Windows.UI.Xaml.Media.IPathGeometry;
            Retval.m_IPathGeometry.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PathGeometry

   function get_FillRuleProperty_PathGeometry
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPathGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillRuleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FiguresProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPathGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FiguresProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PathGeometry

   function get_FillRule
   (
      this : in out PathGeometry
   )
   return WinRt.Windows.UI.Xaml.Media.FillRule is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.FillRule;
   begin
      Hr := this.m_IPathGeometry.all.get_FillRule (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FillRule
   (
      this : in out PathGeometry;
      value : Windows.UI.Xaml.Media.FillRule
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathGeometry.all.put_FillRule (value);
   end;

   function get_Figures
   (
      this : in out PathGeometry
   )
   return WinRt.Windows.UI.Xaml.Media.PathFigureCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PathFigureCollection do
         Hr := this.m_IPathGeometry.all.get_Figures (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Figures
   (
      this : in out PathGeometry;
      value : Windows.UI.Xaml.Media.PathFigureCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathGeometry.all.put_Figures (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PathSegmentCollection

   procedure Initialize (this : in out PathSegmentCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out PathSegmentCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PathSegmentCollection

   function Constructor return PathSegmentCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PathSegmentCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : PathSegmentCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PathSegmentCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.PathSegment>
   function GetAt
   (
      this : in out PathSegmentCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.PathSegment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IPathSegment;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PathSegment do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPathSegment := new Windows.UI.Xaml.Media.IPathSegment;
         Retval.m_IPathSegment.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out PathSegmentCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out PathSegmentCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out PathSegmentCollection;
      value : Windows.UI.Xaml.Media.PathSegment'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IPathSegment.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out PathSegmentCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.PathSegment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IPathSegment.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out PathSegmentCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.PathSegment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IPathSegment.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out PathSegmentCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out PathSegmentCollection;
      value : Windows.UI.Xaml.Media.PathSegment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IPathSegment.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out PathSegmentCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out PathSegmentCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out PathSegmentCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.IPathSegment_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out PathSegmentCollection;
      items : Windows.UI.Xaml.Media.IPathSegment_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (301847814, 45597, 22093, (182, 168, 255, 153, 16, 87, 184, 243 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.PathSegment>
   function First
   (
      this : in out PathSegmentCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IPathSegment.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (937610017, 47561, 20486, (190, 215, 76, 50, 137, 129, 181, 81 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IPathSegment.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaneProjection

   procedure Initialize (this : in out PlaneProjection) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaneProjection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaneProjection, IPlaneProjection_Ptr);
   begin
      if this.m_IPlaneProjection /= null then
         if this.m_IPlaneProjection.all /= null then
            RefCount := this.m_IPlaneProjection.all.Release;
            Free (this.m_IPlaneProjection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlaneProjection

   function Constructor return PlaneProjection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPlaneProjection;
   begin
      return RetVal : PlaneProjection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlaneProjection := new Windows.UI.Xaml.Media.IPlaneProjection;
            Retval.m_IPlaneProjection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PlaneProjection

   function get_LocalOffsetXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocalOffsetXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LocalOffsetYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocalOffsetYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LocalOffsetZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocalOffsetZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterOfRotationXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterOfRotationXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterOfRotationYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterOfRotationYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterOfRotationZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterOfRotationZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GlobalOffsetXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlobalOffsetXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GlobalOffsetYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlobalOffsetYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GlobalOffsetZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlobalOffsetZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ProjectionMatrixProperty_PlaneProjection
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PlaneProjection");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPlaneProjectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaneProjectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProjectionMatrixProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaneProjection

   function get_LocalOffsetX
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_LocalOffsetX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LocalOffsetX
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_LocalOffsetX (value);
   end;

   function get_LocalOffsetY
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_LocalOffsetY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LocalOffsetY
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_LocalOffsetY (value);
   end;

   function get_LocalOffsetZ
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_LocalOffsetZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LocalOffsetZ
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_LocalOffsetZ (value);
   end;

   function get_RotationX
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_RotationX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationX
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_RotationX (value);
   end;

   function get_RotationY
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_RotationY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationY
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_RotationY (value);
   end;

   function get_RotationZ
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_RotationZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationZ
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_RotationZ (value);
   end;

   function get_CenterOfRotationX
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_CenterOfRotationX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterOfRotationX
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_CenterOfRotationX (value);
   end;

   function get_CenterOfRotationY
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_CenterOfRotationY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterOfRotationY
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_CenterOfRotationY (value);
   end;

   function get_CenterOfRotationZ
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_CenterOfRotationZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterOfRotationZ
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_CenterOfRotationZ (value);
   end;

   function get_GlobalOffsetX
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_GlobalOffsetX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GlobalOffsetX
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_GlobalOffsetX (value);
   end;

   function get_GlobalOffsetY
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_GlobalOffsetY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GlobalOffsetY
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_GlobalOffsetY (value);
   end;

   function get_GlobalOffsetZ
   (
      this : in out PlaneProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaneProjection.all.get_GlobalOffsetZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GlobalOffsetZ
   (
      this : in out PlaneProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaneProjection.all.put_GlobalOffsetZ (value);
   end;

   function get_ProjectionMatrix
   (
      this : in out PlaneProjection
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Media3D.Matrix3D;
   begin
      Hr := this.m_IPlaneProjection.all.get_ProjectionMatrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PointCollection

   procedure Initialize (this : in out PointCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out PointCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PointCollection

   function Constructor return PointCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PointCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : PointCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PointCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Foundation.Point>
   function GetAt
   (
      this : in out PointCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out PointCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out PointCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out PointCollection;
      value : Windows.Foundation.Point;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out PointCollection;
      index : WinRt.UInt32;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out PointCollection;
      index : WinRt.UInt32;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out PointCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out PointCollection;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out PointCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out PointCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out PointCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Foundation.Point_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out PointCollection;
      items : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3235189673, 60490, 23133, (182, 213, 183, 7, 222, 253, 185, 247 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Point.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>
   function First
   (
      this : in out PointCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_Point.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3247581197, 14857, 21539, (157, 197, 103, 184, 62, 189, 228, 29 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_Point.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PolyBezierSegment

   procedure Initialize (this : in out PolyBezierSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out PolyBezierSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPolyBezierSegment, IPolyBezierSegment_Ptr);
   begin
      if this.m_IPolyBezierSegment /= null then
         if this.m_IPolyBezierSegment.all /= null then
            RefCount := this.m_IPolyBezierSegment.all.Release;
            Free (this.m_IPolyBezierSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PolyBezierSegment

   function Constructor return PolyBezierSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PolyBezierSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPolyBezierSegment;
   begin
      return RetVal : PolyBezierSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPolyBezierSegment := new Windows.UI.Xaml.Media.IPolyBezierSegment;
            Retval.m_IPolyBezierSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PolyBezierSegment

   function get_PointsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PolyBezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPolyBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolyBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PolyBezierSegment

   function get_Points
   (
      this : in out PolyBezierSegment
   )
   return WinRt.Windows.UI.Xaml.Media.PointCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PointCollection do
         Hr := this.m_IPolyBezierSegment.all.get_Points (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Points
   (
      this : in out PolyBezierSegment;
      value : Windows.UI.Xaml.Media.PointCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolyBezierSegment.all.put_Points (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PolyLineSegment

   procedure Initialize (this : in out PolyLineSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out PolyLineSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPolyLineSegment, IPolyLineSegment_Ptr);
   begin
      if this.m_IPolyLineSegment /= null then
         if this.m_IPolyLineSegment.all /= null then
            RefCount := this.m_IPolyLineSegment.all.Release;
            Free (this.m_IPolyLineSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PolyLineSegment

   function Constructor return PolyLineSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PolyLineSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPolyLineSegment;
   begin
      return RetVal : PolyLineSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPolyLineSegment := new Windows.UI.Xaml.Media.IPolyLineSegment;
            Retval.m_IPolyLineSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PolyLineSegment

   function get_PointsProperty_PolyLineSegment
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PolyLineSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPolyLineSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolyLineSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PolyLineSegment

   function get_Points
   (
      this : in out PolyLineSegment
   )
   return WinRt.Windows.UI.Xaml.Media.PointCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PointCollection do
         Hr := this.m_IPolyLineSegment.all.get_Points (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Points
   (
      this : in out PolyLineSegment;
      value : Windows.UI.Xaml.Media.PointCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolyLineSegment.all.put_Points (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PolyQuadraticBezierSegment

   procedure Initialize (this : in out PolyQuadraticBezierSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out PolyQuadraticBezierSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPolyQuadraticBezierSegment, IPolyQuadraticBezierSegment_Ptr);
   begin
      if this.m_IPolyQuadraticBezierSegment /= null then
         if this.m_IPolyQuadraticBezierSegment.all /= null then
            RefCount := this.m_IPolyQuadraticBezierSegment.all.Release;
            Free (this.m_IPolyQuadraticBezierSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PolyQuadraticBezierSegment

   function Constructor return PolyQuadraticBezierSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PolyQuadraticBezierSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IPolyQuadraticBezierSegment;
   begin
      return RetVal : PolyQuadraticBezierSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPolyQuadraticBezierSegment := new Windows.UI.Xaml.Media.IPolyQuadraticBezierSegment;
            Retval.m_IPolyQuadraticBezierSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PolyQuadraticBezierSegment

   function get_PointsProperty_PolyQuadraticBezierSegment
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.PolyQuadraticBezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IPolyQuadraticBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolyQuadraticBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PolyQuadraticBezierSegment

   function get_Points
   (
      this : in out PolyQuadraticBezierSegment
   )
   return WinRt.Windows.UI.Xaml.Media.PointCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PointCollection do
         Hr := this.m_IPolyQuadraticBezierSegment.all.get_Points (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Points
   (
      this : in out PolyQuadraticBezierSegment;
      value : Windows.UI.Xaml.Media.PointCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolyQuadraticBezierSegment.all.put_Points (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for QuadraticBezierSegment

   procedure Initialize (this : in out QuadraticBezierSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out QuadraticBezierSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IQuadraticBezierSegment, IQuadraticBezierSegment_Ptr);
   begin
      if this.m_IQuadraticBezierSegment /= null then
         if this.m_IQuadraticBezierSegment.all /= null then
            RefCount := this.m_IQuadraticBezierSegment.all.Release;
            Free (this.m_IQuadraticBezierSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for QuadraticBezierSegment

   function Constructor return QuadraticBezierSegment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.QuadraticBezierSegment");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IQuadraticBezierSegment;
   begin
      return RetVal : QuadraticBezierSegment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IQuadraticBezierSegment := new Windows.UI.Xaml.Media.IQuadraticBezierSegment;
            Retval.m_IQuadraticBezierSegment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for QuadraticBezierSegment

   function get_Point1Property_QuadraticBezierSegment
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.QuadraticBezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IQuadraticBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IQuadraticBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Point1Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Point2Property_QuadraticBezierSegment
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.QuadraticBezierSegment");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IQuadraticBezierSegmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IQuadraticBezierSegmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Point2Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for QuadraticBezierSegment

   function get_Point1
   (
      this : in out QuadraticBezierSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IQuadraticBezierSegment.all.get_Point1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point1
   (
      this : in out QuadraticBezierSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IQuadraticBezierSegment.all.put_Point1 (value);
   end;

   function get_Point2
   (
      this : in out QuadraticBezierSegment
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IQuadraticBezierSegment.all.get_Point2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Point2
   (
      this : in out QuadraticBezierSegment;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IQuadraticBezierSegment.all.put_Point2 (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RateChangedRoutedEventArgs

   procedure Initialize (this : in out RateChangedRoutedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RateChangedRoutedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRateChangedRoutedEventArgs, IRateChangedRoutedEventArgs_Ptr);
   begin
      if this.m_IRateChangedRoutedEventArgs /= null then
         if this.m_IRateChangedRoutedEventArgs.all /= null then
            RefCount := this.m_IRateChangedRoutedEventArgs.all.Release;
            Free (this.m_IRateChangedRoutedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RateChangedRoutedEventArgs

   function Constructor return RateChangedRoutedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RateChangedRoutedEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IRateChangedRoutedEventArgs;
   begin
      return RetVal : RateChangedRoutedEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRateChangedRoutedEventArgs := new Windows.UI.Xaml.Media.IRateChangedRoutedEventArgs;
            Retval.m_IRateChangedRoutedEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RateChangedRoutedEventArgs

   -----------------------------------------------------------------------------
   -- Delegate RateChangedRoutedEventHandler

   function Invoke
   (
      this : access RateChangedRoutedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Media.IRateChangedRoutedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RectangleGeometry

   procedure Initialize (this : in out RectangleGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out RectangleGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRectangleGeometry, IRectangleGeometry_Ptr);
   begin
      if this.m_IRectangleGeometry /= null then
         if this.m_IRectangleGeometry.all /= null then
            RefCount := this.m_IRectangleGeometry.all.Release;
            Free (this.m_IRectangleGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RectangleGeometry

   function Constructor return RectangleGeometry is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RectangleGeometry");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IRectangleGeometry;
   begin
      return RetVal : RectangleGeometry do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRectangleGeometry := new Windows.UI.Xaml.Media.IRectangleGeometry;
            Retval.m_IRectangleGeometry.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RectangleGeometry

   function get_RectProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RectangleGeometry");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRectangleGeometryStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRectangleGeometryStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RectProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RectangleGeometry

   function get_Rect
   (
      this : in out RectangleGeometry
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IRectangleGeometry.all.get_Rect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Rect
   (
      this : in out RectangleGeometry;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRectangleGeometry.all.put_Rect (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RenderedEventArgs

   procedure Initialize (this : in out RenderedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RenderedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRenderedEventArgs, IRenderedEventArgs_Ptr);
   begin
      if this.m_IRenderedEventArgs /= null then
         if this.m_IRenderedEventArgs.all /= null then
            RefCount := this.m_IRenderedEventArgs.all.Release;
            Free (this.m_IRenderedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RenderedEventArgs

   function get_FrameDuration
   (
      this : in out RenderedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IRenderedEventArgs.all.get_FrameDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RenderingEventArgs

   procedure Initialize (this : in out RenderingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RenderingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRenderingEventArgs, IRenderingEventArgs_Ptr);
   begin
      if this.m_IRenderingEventArgs /= null then
         if this.m_IRenderingEventArgs.all /= null then
            RefCount := this.m_IRenderingEventArgs.all.Release;
            Free (this.m_IRenderingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RenderingEventArgs

   function get_RenderingTime
   (
      this : in out RenderingEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IRenderingEventArgs.all.get_RenderingTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RevealBrush

   procedure Initialize (this : in out RevealBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out RevealBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRevealBrush, IRevealBrush_Ptr);
   begin
      if this.m_IRevealBrush /= null then
         if this.m_IRevealBrush.all /= null then
            RefCount := this.m_IRevealBrush.all.Release;
            Free (this.m_IRevealBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RevealBrush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RevealBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory    : access IRevealBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IRevealBrush;
   begin
      return RetVal : RevealBrush do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRevealBrush := new Windows.UI.Xaml.Media.IRevealBrush;
            Retval.m_IRevealBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RevealBrush

   function get_ColorProperty_RevealBrush
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRevealBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TargetThemeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRevealBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TargetThemeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AlwaysUseFallbackProperty_RevealBrush
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRevealBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlwaysUseFallbackProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StateProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRevealBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StateProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetState
   (
      element : Windows.UI.Xaml.UIElement'Class;
      value : Windows.UI.Xaml.Media.RevealBrushState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRevealBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetState (element.m_IUIElement.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetState
   (
      element : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.UI.Xaml.Media.RevealBrushState is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRevealBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.RevealBrushState;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRevealBrushStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetState (element.m_IUIElement.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RevealBrush

   function get_Color
   (
      this : in out RevealBrush
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IRevealBrush.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out RevealBrush;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRevealBrush.all.put_Color (value);
   end;

   function get_TargetTheme
   (
      this : in out RevealBrush
   )
   return WinRt.Windows.UI.Xaml.ApplicationTheme is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.ApplicationTheme;
   begin
      Hr := this.m_IRevealBrush.all.get_TargetTheme (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TargetTheme
   (
      this : in out RevealBrush;
      value : Windows.UI.Xaml.ApplicationTheme
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRevealBrush.all.put_TargetTheme (value);
   end;

   function get_AlwaysUseFallback
   (
      this : in out RevealBrush
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRevealBrush.all.get_AlwaysUseFallback (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AlwaysUseFallback
   (
      this : in out RevealBrush;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRevealBrush.all.put_AlwaysUseFallback (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RevealBackgroundBrush

   procedure Initialize (this : in out RevealBackgroundBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out RevealBackgroundBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRevealBackgroundBrush, IRevealBackgroundBrush_Ptr);
   begin
      if this.m_IRevealBackgroundBrush /= null then
         if this.m_IRevealBackgroundBrush.all /= null then
            RefCount := this.m_IRevealBackgroundBrush.all.Release;
            Free (this.m_IRevealBackgroundBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RevealBackgroundBrush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RevealBackgroundBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBackgroundBrush");
      m_Factory    : access IRevealBackgroundBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IRevealBackgroundBrush;
   begin
      return RetVal : RevealBackgroundBrush do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBackgroundBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRevealBackgroundBrush := new Windows.UI.Xaml.Media.IRevealBackgroundBrush;
            Retval.m_IRevealBackgroundBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RevealBackgroundBrush

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RevealBorderBrush

   procedure Initialize (this : in out RevealBorderBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out RevealBorderBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRevealBorderBrush, IRevealBorderBrush_Ptr);
   begin
      if this.m_IRevealBorderBrush /= null then
         if this.m_IRevealBorderBrush.all /= null then
            RefCount := this.m_IRevealBorderBrush.all.Release;
            Free (this.m_IRevealBorderBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RevealBorderBrush

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RevealBorderBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RevealBorderBrush");
      m_Factory    : access IRevealBorderBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IRevealBorderBrush;
   begin
      return RetVal : RevealBorderBrush do
         Hr := RoGetActivationFactory (m_hString, IID_IRevealBorderBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRevealBorderBrush := new Windows.UI.Xaml.Media.IRevealBorderBrush;
            Retval.m_IRevealBorderBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RevealBorderBrush

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RotateTransform

   procedure Initialize (this : in out RotateTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out RotateTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRotateTransform, IRotateTransform_Ptr);
   begin
      if this.m_IRotateTransform /= null then
         if this.m_IRotateTransform.all /= null then
            RefCount := this.m_IRotateTransform.all.Release;
            Free (this.m_IRotateTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RotateTransform

   function Constructor return RotateTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RotateTransform");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IRotateTransform;
   begin
      return RetVal : RotateTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRotateTransform := new Windows.UI.Xaml.Media.IRotateTransform;
            Retval.m_IRotateTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RotateTransform

   function get_CenterXProperty_RotateTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RotateTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRotateTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRotateTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterYProperty_RotateTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RotateTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRotateTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRotateTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AngleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.RotateTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IRotateTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRotateTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AngleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RotateTransform

   function get_CenterX
   (
      this : in out RotateTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRotateTransform.all.get_CenterX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterX
   (
      this : in out RotateTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRotateTransform.all.put_CenterX (value);
   end;

   function get_CenterY
   (
      this : in out RotateTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRotateTransform.all.get_CenterY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterY
   (
      this : in out RotateTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRotateTransform.all.put_CenterY (value);
   end;

   function get_Angle
   (
      this : in out RotateTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRotateTransform.all.get_Angle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Angle
   (
      this : in out RotateTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRotateTransform.all.put_Angle (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScaleTransform

   procedure Initialize (this : in out ScaleTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScaleTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScaleTransform, IScaleTransform_Ptr);
   begin
      if this.m_IScaleTransform /= null then
         if this.m_IScaleTransform.all /= null then
            RefCount := this.m_IScaleTransform.all.Release;
            Free (this.m_IScaleTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScaleTransform

   function Constructor return ScaleTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ScaleTransform");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IScaleTransform;
   begin
      return RetVal : ScaleTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IScaleTransform := new Windows.UI.Xaml.Media.IScaleTransform;
            Retval.m_IScaleTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ScaleTransform

   function get_CenterXProperty_ScaleTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ScaleTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IScaleTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScaleTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterYProperty_ScaleTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ScaleTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IScaleTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScaleTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleXProperty_ScaleTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ScaleTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IScaleTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScaleTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleYProperty_ScaleTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ScaleTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IScaleTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScaleTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScaleTransform

   function get_CenterX
   (
      this : in out ScaleTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IScaleTransform.all.get_CenterX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterX
   (
      this : in out ScaleTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScaleTransform.all.put_CenterX (value);
   end;

   function get_CenterY
   (
      this : in out ScaleTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IScaleTransform.all.get_CenterY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterY
   (
      this : in out ScaleTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScaleTransform.all.put_CenterY (value);
   end;

   function get_ScaleX
   (
      this : in out ScaleTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IScaleTransform.all.get_ScaleX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleX
   (
      this : in out ScaleTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScaleTransform.all.put_ScaleX (value);
   end;

   function get_ScaleY
   (
      this : in out ScaleTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IScaleTransform.all.get_ScaleY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleY
   (
      this : in out ScaleTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScaleTransform.all.put_ScaleY (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Shadow

   procedure Initialize (this : in out Shadow) is
   begin
      null;
   end;

   procedure Finalize (this : in out Shadow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShadow, IShadow_Ptr);
   begin
      if this.m_IShadow /= null then
         if this.m_IShadow.all /= null then
            RefCount := this.m_IShadow.all.Release;
            Free (this.m_IShadow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Shadow

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Shadow

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SkewTransform

   procedure Initialize (this : in out SkewTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out SkewTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISkewTransform, ISkewTransform_Ptr);
   begin
      if this.m_ISkewTransform /= null then
         if this.m_ISkewTransform.all /= null then
            RefCount := this.m_ISkewTransform.all.Release;
            Free (this.m_ISkewTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SkewTransform

   function Constructor return SkewTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SkewTransform");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ISkewTransform;
   begin
      return RetVal : SkewTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISkewTransform := new Windows.UI.Xaml.Media.ISkewTransform;
            Retval.m_ISkewTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SkewTransform

   function get_CenterXProperty_SkewTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SkewTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ISkewTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISkewTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterYProperty_SkewTransform
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SkewTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ISkewTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISkewTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AngleXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SkewTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ISkewTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISkewTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AngleXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AngleYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SkewTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ISkewTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISkewTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AngleYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SkewTransform

   function get_CenterX
   (
      this : in out SkewTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISkewTransform.all.get_CenterX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterX
   (
      this : in out SkewTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISkewTransform.all.put_CenterX (value);
   end;

   function get_CenterY
   (
      this : in out SkewTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISkewTransform.all.get_CenterY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterY
   (
      this : in out SkewTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISkewTransform.all.put_CenterY (value);
   end;

   function get_AngleX
   (
      this : in out SkewTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISkewTransform.all.get_AngleX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AngleX
   (
      this : in out SkewTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISkewTransform.all.put_AngleX (value);
   end;

   function get_AngleY
   (
      this : in out SkewTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISkewTransform.all.get_AngleY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AngleY
   (
      this : in out SkewTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISkewTransform.all.put_AngleY (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SolidColorBrush

   procedure Initialize (this : in out SolidColorBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out SolidColorBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISolidColorBrush, ISolidColorBrush_Ptr);
   begin
      if this.m_ISolidColorBrush /= null then
         if this.m_ISolidColorBrush.all /= null then
            RefCount := this.m_ISolidColorBrush.all.Release;
            Free (this.m_ISolidColorBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SolidColorBrush

   function Constructor return SolidColorBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SolidColorBrush");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ISolidColorBrush;
   begin
      return RetVal : SolidColorBrush do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISolidColorBrush := new Windows.UI.Xaml.Media.ISolidColorBrush;
            Retval.m_ISolidColorBrush.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      color : Windows.UI.Color
   )
   return SolidColorBrush is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SolidColorBrush");
      m_Factory    : access ISolidColorBrushFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ISolidColorBrush;
   begin
      return RetVal : SolidColorBrush do
         Hr := RoGetActivationFactory (m_hString, IID_ISolidColorBrushFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithColor (color, m_ComRetVal'Access);
            Retval.m_ISolidColorBrush := new Windows.UI.Xaml.Media.ISolidColorBrush;
            Retval.m_ISolidColorBrush.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SolidColorBrush

   function get_ColorProperty_SolidColorBrush
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.SolidColorBrush");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ISolidColorBrushStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISolidColorBrushStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SolidColorBrush

   function get_Color
   (
      this : in out SolidColorBrush
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ISolidColorBrush.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out SolidColorBrush;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISolidColorBrush.all.put_Color (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ThemeShadow

   procedure Initialize (this : in out ThemeShadow) is
   begin
      null;
   end;

   procedure Finalize (this : in out ThemeShadow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IThemeShadow, IThemeShadow_Ptr);
   begin
      if this.m_IThemeShadow /= null then
         if this.m_IThemeShadow.all /= null then
            RefCount := this.m_IThemeShadow.all.Release;
            Free (this.m_IThemeShadow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ThemeShadow

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ThemeShadow is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.ThemeShadow");
      m_Factory    : access IThemeShadowFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IThemeShadow;
   begin
      return RetVal : ThemeShadow do
         Hr := RoGetActivationFactory (m_hString, IID_IThemeShadowFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IThemeShadow := new Windows.UI.Xaml.Media.IThemeShadow;
            Retval.m_IThemeShadow.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ThemeShadow

   function get_Receivers
   (
      this : in out ThemeShadow
   )
   return WinRt.Windows.UI.Xaml.UIElementWeakCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElementWeakCollection;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElementWeakCollection do
         Hr := this.m_IThemeShadow.all.get_Receivers (m_ComRetVal'Access);
         Retval.m_IUIElementWeakCollection := new Windows.UI.Xaml.IUIElementWeakCollection;
         Retval.m_IUIElementWeakCollection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimelineMarker

   procedure Initialize (this : in out TimelineMarker) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimelineMarker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimelineMarker, ITimelineMarker_Ptr);
   begin
      if this.m_ITimelineMarker /= null then
         if this.m_ITimelineMarker.all /= null then
            RefCount := this.m_ITimelineMarker.all.Release;
            Free (this.m_ITimelineMarker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimelineMarker

   function Constructor return TimelineMarker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TimelineMarker");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ITimelineMarker;
   begin
      return RetVal : TimelineMarker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimelineMarker := new Windows.UI.Xaml.Media.ITimelineMarker;
            Retval.m_ITimelineMarker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TimelineMarker

   function get_TimeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TimelineMarker");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITimelineMarkerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITimelineMarkerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TypeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TimelineMarker");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITimelineMarkerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITimelineMarkerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TypeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TextProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TimelineMarker");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITimelineMarkerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITimelineMarkerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TextProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimelineMarker

   function get_Time
   (
      this : in out TimelineMarker
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ITimelineMarker.all.get_Time (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Time
   (
      this : in out TimelineMarker;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimelineMarker.all.put_Time (value);
   end;

   function get_Type
   (
      this : in out TimelineMarker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimelineMarker.all.get_Type (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Type
   (
      this : in out TimelineMarker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITimelineMarker.all.put_Type (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Text
   (
      this : in out TimelineMarker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimelineMarker.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out TimelineMarker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITimelineMarker.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimelineMarkerCollection

   procedure Initialize (this : in out TimelineMarkerCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimelineMarkerCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimelineMarkerCollection

   function Constructor return TimelineMarkerCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TimelineMarkerCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : TimelineMarkerCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimelineMarkerCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.TimelineMarker>
   function GetAt
   (
      this : in out TimelineMarkerCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.TimelineMarker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITimelineMarker;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.TimelineMarker do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITimelineMarker := new Windows.UI.Xaml.Media.ITimelineMarker;
         Retval.m_ITimelineMarker.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out TimelineMarkerCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out TimelineMarkerCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out TimelineMarkerCollection;
      value : Windows.UI.Xaml.Media.TimelineMarker'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_ITimelineMarker.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out TimelineMarkerCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.TimelineMarker'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_ITimelineMarker.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out TimelineMarkerCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.TimelineMarker'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_ITimelineMarker.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out TimelineMarkerCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out TimelineMarkerCollection;
      value : Windows.UI.Xaml.Media.TimelineMarker'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_ITimelineMarker.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out TimelineMarkerCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out TimelineMarkerCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out TimelineMarkerCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.ITimelineMarker_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out TimelineMarkerCollection;
      items : Windows.UI.Xaml.Media.ITimelineMarker_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3000556980, 53944, 22832, (148, 45, 38, 17, 135, 86, 189, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.TimelineMarker>
   function First
   (
      this : in out TimelineMarkerCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ITimelineMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2490129141, 19465, 22404, (156, 242, 80, 105, 71, 55, 142, 142 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_ITimelineMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimelineMarkerRoutedEventArgs

   procedure Initialize (this : in out TimelineMarkerRoutedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimelineMarkerRoutedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimelineMarkerRoutedEventArgs, ITimelineMarkerRoutedEventArgs_Ptr);
   begin
      if this.m_ITimelineMarkerRoutedEventArgs /= null then
         if this.m_ITimelineMarkerRoutedEventArgs.all /= null then
            RefCount := this.m_ITimelineMarkerRoutedEventArgs.all.Release;
            Free (this.m_ITimelineMarkerRoutedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimelineMarkerRoutedEventArgs

   function Constructor return TimelineMarkerRoutedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ITimelineMarkerRoutedEventArgs;
   begin
      return RetVal : TimelineMarkerRoutedEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimelineMarkerRoutedEventArgs := new Windows.UI.Xaml.Media.ITimelineMarkerRoutedEventArgs;
            Retval.m_ITimelineMarkerRoutedEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimelineMarkerRoutedEventArgs

   function get_Marker
   (
      this : in out TimelineMarkerRoutedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Media.TimelineMarker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITimelineMarker;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.TimelineMarker do
         Hr := this.m_ITimelineMarkerRoutedEventArgs.all.get_Marker (m_ComRetVal'Access);
         Retval.m_ITimelineMarker := new Windows.UI.Xaml.Media.ITimelineMarker;
         Retval.m_ITimelineMarker.all := m_ComRetVal;
      end return;
   end;

   procedure put_Marker
   (
      this : in out TimelineMarkerRoutedEventArgs;
      value : Windows.UI.Xaml.Media.TimelineMarker'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimelineMarkerRoutedEventArgs.all.put_Marker (value.m_ITimelineMarker.all);
   end;

   -----------------------------------------------------------------------------
   -- Delegate TimelineMarkerRoutedEventHandler

   function Invoke
   (
      this : access TimelineMarkerRoutedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Media.ITimelineMarkerRoutedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TransformCollection

   procedure Initialize (this : in out TransformCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out TransformCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TransformCollection

   function Constructor return TransformCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TransformCollection");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : TransformCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TransformCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Media.Transform>
   function GetAt
   (
      this : in out TransformCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Media.Transform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITransform;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Transform do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITransform := new Windows.UI.Xaml.Media.ITransform;
         Retval.m_ITransform.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out TransformCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out TransformCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out TransformCollection;
      value : Windows.UI.Xaml.Media.Transform'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_ITransform.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out TransformCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.Transform'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_ITransform.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out TransformCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Media.Transform'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_ITransform.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out TransformCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out TransformCollection;
      value : Windows.UI.Xaml.Media.Transform'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_ITransform.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out TransformCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out TransformCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out TransformCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Media.ITransform_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out TransformCollection;
      items : Windows.UI.Xaml.Media.ITransform_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1658305473, 29173, 22033, (169, 132, 229, 113, 194, 222, 123, 170 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ITransform.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Media.Transform>
   function First
   (
      this : in out TransformCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ITransform.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4220300476, 54252, 20920, (151, 120, 153, 237, 232, 70, 54, 17 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_ITransform.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TransformGroup

   procedure Initialize (this : in out TransformGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out TransformGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITransformGroup, ITransformGroup_Ptr);
   begin
      if this.m_ITransformGroup /= null then
         if this.m_ITransformGroup.all /= null then
            RefCount := this.m_ITransformGroup.all.Release;
            Free (this.m_ITransformGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TransformGroup

   function Constructor return TransformGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TransformGroup");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ITransformGroup;
   begin
      return RetVal : TransformGroup do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITransformGroup := new Windows.UI.Xaml.Media.ITransformGroup;
            Retval.m_ITransformGroup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TransformGroup

   function get_ChildrenProperty_TransformGroup
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TransformGroup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITransformGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITransformGroupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChildrenProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TransformGroup

   function get_Children
   (
      this : in out TransformGroup
   )
   return WinRt.Windows.UI.Xaml.Media.TransformCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.TransformCollection do
         Hr := this.m_ITransformGroup.all.get_Children (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Children
   (
      this : in out TransformGroup;
      value : Windows.UI.Xaml.Media.TransformCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITransformGroup.all.put_Children (value.m_GenericObject.all);
   end;

   function get_Value
   (
      this : in out TransformGroup
   )
   return WinRt.Windows.UI.Xaml.Media.Matrix is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Matrix;
   begin
      Hr := this.m_ITransformGroup.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TranslateTransform

   procedure Initialize (this : in out TranslateTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out TranslateTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITranslateTransform, ITranslateTransform_Ptr);
   begin
      if this.m_ITranslateTransform /= null then
         if this.m_ITranslateTransform.all /= null then
            RefCount := this.m_ITranslateTransform.all.Release;
            Free (this.m_ITranslateTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TranslateTransform

   function Constructor return TranslateTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TranslateTransform");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.ITranslateTransform;
   begin
      return RetVal : TranslateTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITranslateTransform := new Windows.UI.Xaml.Media.ITranslateTransform;
            Retval.m_ITranslateTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TranslateTransform

   function get_XProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TranslateTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITranslateTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITranslateTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_YProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.TranslateTransform");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.ITranslateTransformStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITranslateTransformStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_YProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TranslateTransform

   function get_X
   (
      this : in out TranslateTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ITranslateTransform.all.get_X (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_X
   (
      this : in out TranslateTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITranslateTransform.all.put_X (value);
   end;

   function get_Y
   (
      this : in out TranslateTransform
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ITranslateTransform.all.get_Y (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Y
   (
      this : in out TranslateTransform;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITranslateTransform.all.put_Y (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VisualTreeHelper

   procedure Initialize (this : in out VisualTreeHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out VisualTreeHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVisualTreeHelper, IVisualTreeHelper_Ptr);
   begin
      if this.m_IVisualTreeHelper /= null then
         if this.m_IVisualTreeHelper.all /= null then
            RefCount := this.m_IVisualTreeHelper.all.Release;
            Free (this.m_IVisualTreeHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VisualTreeHelper

   function FindElementsInHostCoordinates
   (
      intersectingPoint : Windows.Foundation.Point;
      subtree : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindElementsInHostCoordinates (intersectingPoint, subtree.m_IUIElement.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function FindElementsInHostCoordinates
   (
      intersectingRect : Windows.Foundation.Rect;
      subtree : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindElementsInHostCoordinates (intersectingRect, subtree.m_IUIElement.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function FindElementsInHostCoordinates
   (
      intersectingPoint : Windows.Foundation.Point;
      subtree : Windows.UI.Xaml.UIElement'Class;
      includeAllElements : WinRt.Boolean
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindElementsInHostCoordinates (intersectingPoint, subtree.m_IUIElement.all, includeAllElements, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function FindElementsInHostCoordinates
   (
      intersectingRect : Windows.Foundation.Rect;
      subtree : Windows.UI.Xaml.UIElement'Class;
      includeAllElements : WinRt.Boolean
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindElementsInHostCoordinates (intersectingRect, subtree.m_IUIElement.all, includeAllElements, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetChild
   (
      reference : Windows.UI.Xaml.DependencyObject'Class;
      childIndex : WinRt.Int32
   )
   return WinRt.Windows.UI.Xaml.DependencyObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetChild (reference.m_IDependencyObject.all, childIndex, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
            Retval.m_IDependencyObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetChildrenCount
   (
      reference : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetChildrenCount (reference.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetParent
   (
      reference : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.DependencyObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetParent (reference.m_IDependencyObject.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
            Retval.m_IDependencyObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure DisconnectChildrenRecursive
   (
      element : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.DisconnectChildrenRecursive (element.m_IUIElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetOpenPopups
   (
      window : Windows.UI.Xaml.Window'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetOpenPopups (window.m_IWindow.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetOpenPopupsForXamlRoot
   (
      xamlRoot : Windows.UI.Xaml.XamlRoot'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.VisualTreeHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IVisualTreeHelperStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVisualTreeHelperStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetOpenPopupsForXamlRoot (xamlRoot.m_IXamlRoot.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VisualTreeHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlLight

   procedure Initialize (this : in out XamlLight) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlLight) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlLight, IXamlLight_Ptr);
   begin
      if this.m_IXamlLight /= null then
         if this.m_IXamlLight.all /= null then
            RefCount := this.m_IXamlLight.all.Release;
            Free (this.m_IXamlLight);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XamlLight

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return XamlLight is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlLight");
      m_Factory    : access IXamlLightFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.IXamlLight;
   begin
      return RetVal : XamlLight do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlLightFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IXamlLight := new Windows.UI.Xaml.Media.IXamlLight;
            Retval.m_IXamlLight.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlLight

   procedure AddTargetElement
   (
      lightId : WinRt.WString;
      element : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlLight");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IXamlLightStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_lightId : WinRt.HString := To_HString (lightId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlLightStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.AddTargetElement (HStr_lightId, element.m_IUIElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_lightId);
   end;

   procedure RemoveTargetElement
   (
      lightId : WinRt.WString;
      element : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlLight");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IXamlLightStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_lightId : WinRt.HString := To_HString (lightId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlLightStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RemoveTargetElement (HStr_lightId, element.m_IUIElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_lightId);
   end;

   procedure AddTargetBrush
   (
      lightId : WinRt.WString;
      brush_p : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlLight");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IXamlLightStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_lightId : WinRt.HString := To_HString (lightId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlLightStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.AddTargetBrush (HStr_lightId, brush_p.m_IBrush.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_lightId);
   end;

   procedure RemoveTargetBrush
   (
      lightId : WinRt.WString;
      brush_p : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.XamlLight");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.IXamlLightStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_lightId : WinRt.HString := To_HString (lightId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlLightStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RemoveTargetBrush (HStr_lightId, brush_p.m_IBrush.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_lightId);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlLight

   function get_CompositionLight
   (
      this : in out XamlLight
   )
   return WinRt.Windows.UI.Composition.CompositionLight'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlLightProtected := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionLight;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlLight_Interface, WinRt.Windows.UI.Xaml.Media.IXamlLightProtected, WinRt.Windows.UI.Xaml.Media.IID_IXamlLightProtected'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionLight do
         m_Interface := QInterface (this.m_IXamlLight.all);
         Hr := m_Interface.get_CompositionLight (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionLight := new Windows.UI.Composition.ICompositionLight;
         Retval.m_ICompositionLight.all := m_ComRetVal;
      end return;
   end;

   procedure put_CompositionLight
   (
      this : in out XamlLight;
      value : Windows.UI.Composition.CompositionLight'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlLightProtected := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlLight_Interface, WinRt.Windows.UI.Xaml.Media.IXamlLightProtected, WinRt.Windows.UI.Xaml.Media.IID_IXamlLightProtected'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlLight.all);
      Hr := m_Interface.put_CompositionLight (value.m_ICompositionLight.all);
      m_RefCount := m_Interface.Release;
   end;

   function GetId
   (
      this : in out XamlLight
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlLightOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlLight_Interface, WinRt.Windows.UI.Xaml.Media.IXamlLightOverrides, WinRt.Windows.UI.Xaml.Media.IID_IXamlLightOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlLight.all);
      Hr := m_Interface.GetId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure OnConnected
   (
      this : in out XamlLight;
      newElement : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlLightOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlLight_Interface, WinRt.Windows.UI.Xaml.Media.IXamlLightOverrides, WinRt.Windows.UI.Xaml.Media.IID_IXamlLightOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlLight.all);
      Hr := m_Interface.OnConnected (newElement.m_IUIElement.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure OnDisconnected
   (
      this : in out XamlLight;
      oldElement : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.IXamlLightOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.IXamlLight_Interface, WinRt.Windows.UI.Xaml.Media.IXamlLightOverrides, WinRt.Windows.UI.Xaml.Media.IID_IXamlLightOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlLight.all);
      Hr := m_Interface.OnDisconnected (oldElement.m_IUIElement.all);
      m_RefCount := m_Interface.Release;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.AI.MachineLearning is

   package IAsyncOperation_LearningModel is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.AI.MachineLearning.ILearningModel);
   package AsyncOperationCompletedHandler_LearningModel is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.AI.MachineLearning.ILearningModel);

   package IAsyncOperation_LearningModelEvaluationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.AI.MachineLearning.ILearningModelEvaluationResult);
   package AsyncOperationCompletedHandler_LearningModelEvaluationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.AI.MachineLearning.ILearningModelEvaluationResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageFeatureDescriptor

   procedure Initialize (this : in out ImageFeatureDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageFeatureDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageFeatureDescriptor, IImageFeatureDescriptor_Ptr);
   begin
      if this.m_IImageFeatureDescriptor /= null then
         if this.m_IImageFeatureDescriptor.all /= null then
            RefCount := this.m_IImageFeatureDescriptor.all.Release;
            Free (this.m_IImageFeatureDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageFeatureDescriptor

   function get_BitmapPixelFormat
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_IImageFeatureDescriptor.all.get_BitmapPixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BitmapAlphaMode
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.Windows.Graphics.Imaging.BitmapAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapAlphaMode;
   begin
      Hr := this.m_IImageFeatureDescriptor.all.get_BitmapAlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Width
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IImageFeatureDescriptor.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IImageFeatureDescriptor.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IImageFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageFeatureDescriptor.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IImageFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageFeatureDescriptor.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IImageFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageFeatureDescriptor.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out ImageFeatureDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IImageFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageFeatureDescriptor.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageFeatureValue

   procedure Initialize (this : in out ImageFeatureValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageFeatureValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageFeatureValue, IImageFeatureValue_Ptr);
   begin
      if this.m_IImageFeatureValue /= null then
         if this.m_IImageFeatureValue.all /= null then
            RefCount := this.m_IImageFeatureValue.all.Release;
            Free (this.m_IImageFeatureValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ImageFeatureValue

   function CreateFromVideoFrame
   (
      image : Windows.Media.VideoFrame'Class
   )
   return WinRt.Windows.AI.MachineLearning.ImageFeatureValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.ImageFeatureValue");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.IImageFeatureValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.IImageFeatureValue;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.ImageFeatureValue do
         Hr := RoGetActivationFactory (m_hString, IID_IImageFeatureValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromVideoFrame (image.m_IVideoFrame.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageFeatureValue := new Windows.AI.MachineLearning.IImageFeatureValue;
            Retval.m_IImageFeatureValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageFeatureValue

   function get_VideoFrame
   (
      this : in out ImageFeatureValue
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IImageFeatureValue.all.get_VideoFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out ImageFeatureValue
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IImageFeatureValue_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageFeatureValue.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModel

   procedure Initialize (this : in out LearningModel) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModel, ILearningModel_Ptr);
   begin
      if this.m_ILearningModel /= null then
         if this.m_ILearningModel.all /= null then
            RefCount := this.m_ILearningModel.all.Release;
            Free (this.m_ILearningModel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LearningModel

   function LoadFromStorageFileAsync
   (
      modelFile : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.ILearningModel;
      m_IID            : aliased WinRt.IID := (1665840075, 16492, 24286, (138, 137, 167, 249, 202, 55, 3, 38 )); -- Windows.AI.MachineLearning.LearningModel;
      m_HandlerIID     : aliased WinRt.IID := (1969071839, 60757, 23210, (181, 66, 198, 101, 240, 16, 245, 12 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModel.Kind := new AsyncOperationCompletedHandler_LearningModel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModel.Kind_Delegate, AsyncOperationCompletedHandler_LearningModel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStorageFileAsync (modelFile, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
                     Retval.m_ILearningModel.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromStreamAsync
   (
      modelStream : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.ILearningModel;
      m_IID            : aliased WinRt.IID := (1665840075, 16492, 24286, (138, 137, 167, 249, 202, 55, 3, 38 )); -- Windows.AI.MachineLearning.LearningModel;
      m_HandlerIID     : aliased WinRt.IID := (1969071839, 60757, 23210, (181, 66, 198, 101, 240, 16, 245, 12 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModel.Kind := new AsyncOperationCompletedHandler_LearningModel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModel.Kind_Delegate, AsyncOperationCompletedHandler_LearningModel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStreamAsync (modelStream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
                     Retval.m_ILearningModel.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromFilePath
   (
      filePath : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModel;
      HStr_filePath : WinRt.HString := To_HString (filePath);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromFilePath (HStr_filePath, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
            Retval.m_ILearningModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   function LoadFromStream
   (
      modelStream : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModel;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStream (modelStream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
            Retval.m_ILearningModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromStorageFileAsync
   (
      modelFile : Windows.Storage.IStorageFile;
      operatorProvider : Windows.AI.MachineLearning.ILearningModelOperatorProvider
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.ILearningModel;
      m_IID            : aliased WinRt.IID := (1665840075, 16492, 24286, (138, 137, 167, 249, 202, 55, 3, 38 )); -- Windows.AI.MachineLearning.LearningModel;
      m_HandlerIID     : aliased WinRt.IID := (1969071839, 60757, 23210, (181, 66, 198, 101, 240, 16, 245, 12 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModel.Kind := new AsyncOperationCompletedHandler_LearningModel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModel.Kind_Delegate, AsyncOperationCompletedHandler_LearningModel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStorageFileAsync (modelFile, operatorProvider, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
                     Retval.m_ILearningModel.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromStreamAsync
   (
      modelStream : Windows.Storage.Streams.IRandomAccessStreamReference;
      operatorProvider : Windows.AI.MachineLearning.ILearningModelOperatorProvider
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.ILearningModel;
      m_IID            : aliased WinRt.IID := (1665840075, 16492, 24286, (138, 137, 167, 249, 202, 55, 3, 38 )); -- Windows.AI.MachineLearning.LearningModel;
      m_HandlerIID     : aliased WinRt.IID := (1969071839, 60757, 23210, (181, 66, 198, 101, 240, 16, 245, 12 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModel.Kind := new AsyncOperationCompletedHandler_LearningModel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModel.Kind_Delegate, AsyncOperationCompletedHandler_LearningModel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStreamAsync (modelStream, operatorProvider, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
                     Retval.m_ILearningModel.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromFilePath
   (
      filePath : WinRt.WString;
      operatorProvider : Windows.AI.MachineLearning.ILearningModelOperatorProvider
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModel;
      HStr_filePath : WinRt.HString := To_HString (filePath);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromFilePath (HStr_filePath, operatorProvider, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
            Retval.m_ILearningModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   function LoadFromStream
   (
      modelStream : Windows.Storage.Streams.IRandomAccessStreamReference;
      operatorProvider : Windows.AI.MachineLearning.ILearningModelOperatorProvider
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModel");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModel;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStream (modelStream, operatorProvider, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
            Retval.m_ILearningModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModel

   function get_Author
   (
      this : in out LearningModel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModel.all.get_Author (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out LearningModel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModel.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Domain
   (
      this : in out LearningModel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModel.all.get_Domain (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out LearningModel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModel.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Version
   (
      this : in out LearningModel
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_ILearningModel.all.get_Version (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Metadata
   (
      this : in out LearningModel
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
   begin
      Hr := this.m_ILearningModel.all.get_Metadata (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_InputFeatures
   (
      this : in out LearningModel
   )
   return IVectorView_ILearningModelFeatureDescriptor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ILearningModelFeatureDescriptor.Kind;
   begin
      Hr := this.m_ILearningModel.all.get_InputFeatures (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ILearningModelFeatureDescriptor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_OutputFeatures
   (
      this : in out LearningModel
   )
   return IVectorView_ILearningModelFeatureDescriptor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ILearningModelFeatureDescriptor.Kind;
   begin
      Hr := this.m_ILearningModel.all.get_OutputFeatures (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ILearningModelFeatureDescriptor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Close
   (
      this : in out LearningModel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModel_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModel.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelBinding

   procedure Initialize (this : in out LearningModelBinding) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelBinding) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelBinding, ILearningModelBinding_Ptr);
   begin
      if this.m_ILearningModelBinding /= null then
         if this.m_ILearningModelBinding.all /= null then
            RefCount := this.m_ILearningModelBinding.all.Release;
            Free (this.m_ILearningModelBinding);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LearningModelBinding

   function Constructor
   (
      session : Windows.AI.MachineLearning.LearningModelSession'Class
   )
   return LearningModelBinding is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelBinding");
      m_Factory    : access ILearningModelBindingFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.AI.MachineLearning.ILearningModelBinding;
   begin
      return RetVal : LearningModelBinding do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelBindingFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSession (session.m_ILearningModelSession.all, m_ComRetVal'Access);
            Retval.m_ILearningModelBinding := new Windows.AI.MachineLearning.ILearningModelBinding;
            Retval.m_ILearningModelBinding.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelBinding

   procedure Bind
   (
      this : in out LearningModelBinding;
      name : WinRt.WString;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILearningModelBinding.all.Bind (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure Bind
   (
      this : in out LearningModelBinding;
      name : WinRt.WString;
      value : WinRt.IInspectable;
      props : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILearningModelBinding.all.Bind (HStr_name, value, props);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure Clear
   (
      this : in out LearningModelBinding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILearningModelBinding.all.Clear;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMapView`2<System.String,System.Object>
   function Lookup
   (
      this : in out LearningModelBinding;
      key : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelBinding_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBinding.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out LearningModelBinding
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelBinding_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBinding.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out LearningModelBinding;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelBinding_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBinding.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Split
   (
      this : in out LearningModelBinding;
      first : access GenericObject_Ptr;
      second : access GenericObject_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelBinding_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBinding.all);
      Hr := m_Interface.Split (first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelDevice

   procedure Initialize (this : in out LearningModelDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelDevice, ILearningModelDevice_Ptr);
   begin
      if this.m_ILearningModelDevice /= null then
         if this.m_ILearningModelDevice.all /= null then
            RefCount := this.m_ILearningModelDevice.all.Release;
            Free (this.m_ILearningModelDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LearningModelDevice

   function Constructor
   (
      deviceKind : Windows.AI.MachineLearning.LearningModelDeviceKind
   )
   return LearningModelDevice is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelDevice");
      m_Factory    : access ILearningModelDeviceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.AI.MachineLearning.ILearningModelDevice;
   begin
      return RetVal : LearningModelDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelDeviceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (deviceKind, m_ComRetVal'Access);
            Retval.m_ILearningModelDevice := new Windows.AI.MachineLearning.ILearningModelDevice;
            Retval.m_ILearningModelDevice.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LearningModelDevice

   function CreateFromDirect3D11Device
   (
      device : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelDevice");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ILearningModelDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModelDevice;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModelDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDirect3D11Device (device, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILearningModelDevice := new Windows.AI.MachineLearning.ILearningModelDevice;
            Retval.m_ILearningModelDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelDevice

   function get_AdapterId
   (
      this : in out LearningModelDevice
   )
   return WinRt.Windows.Graphics.DisplayAdapterId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DisplayAdapterId;
   begin
      Hr := this.m_ILearningModelDevice.all.get_AdapterId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Direct3D11Device
   (
      this : in out LearningModelDevice
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice;
   begin
      Hr := this.m_ILearningModelDevice.all.get_Direct3D11Device (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelEvaluationResult

   procedure Initialize (this : in out LearningModelEvaluationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelEvaluationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelEvaluationResult, ILearningModelEvaluationResult_Ptr);
   begin
      if this.m_ILearningModelEvaluationResult /= null then
         if this.m_ILearningModelEvaluationResult.all /= null then
            RefCount := this.m_ILearningModelEvaluationResult.all.Release;
            Free (this.m_ILearningModelEvaluationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelEvaluationResult

   function get_CorrelationId
   (
      this : in out LearningModelEvaluationResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelEvaluationResult.all.get_CorrelationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ErrorStatus
   (
      this : in out LearningModelEvaluationResult
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILearningModelEvaluationResult.all.get_ErrorStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Succeeded
   (
      this : in out LearningModelEvaluationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILearningModelEvaluationResult.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Outputs
   (
      this : in out LearningModelEvaluationResult
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_ILearningModelEvaluationResult.all.get_Outputs (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelSession

   procedure Initialize (this : in out LearningModelSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelSession, ILearningModelSession_Ptr);
   begin
      if this.m_ILearningModelSession /= null then
         if this.m_ILearningModelSession.all /= null then
            RefCount := this.m_ILearningModelSession.all.Release;
            Free (this.m_ILearningModelSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LearningModelSession

   function Constructor
   (
      model : Windows.AI.MachineLearning.LearningModel'Class;
      deviceToRunOn : Windows.AI.MachineLearning.LearningModelDevice'Class;
      learningModelSessionOptions_p : Windows.AI.MachineLearning.LearningModelSessionOptions'Class
   )
   return LearningModelSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelSession");
      m_Factory    : access ILearningModelSessionFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.AI.MachineLearning.ILearningModelSession;
   begin
      return RetVal : LearningModelSession do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelSessionFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromModelOnDeviceWithSessionOptions (model.m_ILearningModel.all, deviceToRunOn.m_ILearningModelDevice.all, learningModelSessionOptions_p.m_ILearningModelSessionOptions.all, m_ComRetVal'Access);
            Retval.m_ILearningModelSession := new Windows.AI.MachineLearning.ILearningModelSession;
            Retval.m_ILearningModelSession.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      model : Windows.AI.MachineLearning.LearningModel'Class
   )
   return LearningModelSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelSession");
      m_Factory    : access ILearningModelSessionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.AI.MachineLearning.ILearningModelSession;
   begin
      return RetVal : LearningModelSession do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelSessionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromModel (model.m_ILearningModel.all, m_ComRetVal'Access);
            Retval.m_ILearningModelSession := new Windows.AI.MachineLearning.ILearningModelSession;
            Retval.m_ILearningModelSession.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      model : Windows.AI.MachineLearning.LearningModel'Class;
      deviceToRunOn : Windows.AI.MachineLearning.LearningModelDevice'Class
   )
   return LearningModelSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelSession");
      m_Factory    : access ILearningModelSessionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.AI.MachineLearning.ILearningModelSession;
   begin
      return RetVal : LearningModelSession do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelSessionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromModelOnDevice (model.m_ILearningModel.all, deviceToRunOn.m_ILearningModelDevice.all, m_ComRetVal'Access);
            Retval.m_ILearningModelSession := new Windows.AI.MachineLearning.ILearningModelSession;
            Retval.m_ILearningModelSession.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelSession

   function get_Model
   (
      this : in out LearningModelSession
   )
   return WinRt.Windows.AI.MachineLearning.LearningModel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModel;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModel do
         Hr := this.m_ILearningModelSession.all.get_Model (m_ComRetVal'Access);
         Retval.m_ILearningModel := new Windows.AI.MachineLearning.ILearningModel;
         Retval.m_ILearningModel.all := m_ComRetVal;
      end return;
   end;

   function get_Device
   (
      this : in out LearningModelSession
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModelDevice;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModelDevice do
         Hr := this.m_ILearningModelSession.all.get_Device (m_ComRetVal'Access);
         Retval.m_ILearningModelDevice := new Windows.AI.MachineLearning.ILearningModelDevice;
         Retval.m_ILearningModelDevice.all := m_ComRetVal;
      end return;
   end;

   function get_EvaluationProperties
   (
      this : in out LearningModelSession
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_ILearningModelSession.all.get_EvaluationProperties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function EvaluateAsync
   (
      this : in out LearningModelSession;
      bindings : Windows.AI.MachineLearning.LearningModelBinding'Class;
      correlationId : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationId : WinRt.HString := To_HString (correlationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModelEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModelEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.ILearningModelEvaluationResult;
      m_IID            : aliased WinRt.IID := (671417744, 5154, 23064, (140, 139, 132, 127, 45, 44, 246, 154 )); -- Windows.AI.MachineLearning.LearningModelEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (3094831380, 39647, 20712, (182, 127, 34, 224, 241, 55, 47, 69 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind := new AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModelEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult do
         Hr := this.m_ILearningModelSession.all.EvaluateAsync (bindings.m_ILearningModelBinding.all, HStr_correlationId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILearningModelEvaluationResult := new Windows.AI.MachineLearning.ILearningModelEvaluationResult;
                  Retval.m_ILearningModelEvaluationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_correlationId);
      end return;
   end;

   function EvaluateFeaturesAsync
   (
      this : in out LearningModelSession;
      features : GenericObject;
      correlationId : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationId : WinRt.HString := To_HString (correlationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModelEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModelEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.ILearningModelEvaluationResult;
      m_IID            : aliased WinRt.IID := (671417744, 5154, 23064, (140, 139, 132, 127, 45, 44, 246, 154 )); -- Windows.AI.MachineLearning.LearningModelEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (3094831380, 39647, 20712, (182, 127, 34, 224, 241, 55, 47, 69 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind := new AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModelEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_LearningModelEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult do
         Hr := this.m_ILearningModelSession.all.EvaluateFeaturesAsync (features, HStr_correlationId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILearningModelEvaluationResult := new Windows.AI.MachineLearning.ILearningModelEvaluationResult;
                  Retval.m_ILearningModelEvaluationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_correlationId);
      end return;
   end;

   function Evaluate
   (
      this : in out LearningModelSession;
      bindings : Windows.AI.MachineLearning.LearningModelBinding'Class;
      correlationId : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModelEvaluationResult;
      HStr_correlationId : WinRt.HString := To_HString (correlationId);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult do
         Hr := this.m_ILearningModelSession.all.Evaluate (bindings.m_ILearningModelBinding.all, HStr_correlationId, m_ComRetVal'Access);
         Retval.m_ILearningModelEvaluationResult := new Windows.AI.MachineLearning.ILearningModelEvaluationResult;
         Retval.m_ILearningModelEvaluationResult.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_correlationId);
      end return;
   end;

   function EvaluateFeatures
   (
      this : in out LearningModelSession;
      features : GenericObject;
      correlationId : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModelEvaluationResult;
      HStr_correlationId : WinRt.HString := To_HString (correlationId);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.LearningModelEvaluationResult do
         Hr := this.m_ILearningModelSession.all.EvaluateFeatures (features, HStr_correlationId, m_ComRetVal'Access);
         Retval.m_ILearningModelEvaluationResult := new Windows.AI.MachineLearning.ILearningModelEvaluationResult;
         Retval.m_ILearningModelEvaluationResult.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_correlationId);
      end return;
   end;

   procedure Close
   (
      this : in out LearningModelSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelSessionOptions

   procedure Initialize (this : in out LearningModelSessionOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelSessionOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelSessionOptions, ILearningModelSessionOptions_Ptr);
   begin
      if this.m_ILearningModelSessionOptions /= null then
         if this.m_ILearningModelSessionOptions.all /= null then
            RefCount := this.m_ILearningModelSessionOptions.all.Release;
            Free (this.m_ILearningModelSessionOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LearningModelSessionOptions

   function Constructor return LearningModelSessionOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.LearningModelSessionOptions");
      m_ComRetVal  : aliased Windows.AI.MachineLearning.ILearningModelSessionOptions;
   begin
      return RetVal : LearningModelSessionOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILearningModelSessionOptions := new Windows.AI.MachineLearning.ILearningModelSessionOptions;
            Retval.m_ILearningModelSessionOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelSessionOptions

   function get_BatchSizeOverride
   (
      this : in out LearningModelSessionOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILearningModelSessionOptions.all.get_BatchSizeOverride (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BatchSizeOverride
   (
      this : in out LearningModelSessionOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILearningModelSessionOptions.all.put_BatchSizeOverride (value);
   end;

   function get_CloseModelOnSessionCreation
   (
      this : in out LearningModelSessionOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelSessionOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelSessionOptions_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelSessionOptions2, WinRt.Windows.AI.MachineLearning.IID_ILearningModelSessionOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelSessionOptions.all);
      Hr := m_Interface.get_CloseModelOnSessionCreation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CloseModelOnSessionCreation
   (
      this : in out LearningModelSessionOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelSessionOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ILearningModelSessionOptions_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelSessionOptions2, WinRt.Windows.AI.MachineLearning.IID_ILearningModelSessionOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelSessionOptions.all);
      Hr := m_Interface.put_CloseModelOnSessionCreation (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MapFeatureDescriptor

   procedure Initialize (this : in out MapFeatureDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out MapFeatureDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMapFeatureDescriptor, IMapFeatureDescriptor_Ptr);
   begin
      if this.m_IMapFeatureDescriptor /= null then
         if this.m_IMapFeatureDescriptor.all /= null then
            RefCount := this.m_IMapFeatureDescriptor.all.Release;
            Free (this.m_IMapFeatureDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MapFeatureDescriptor

   function get_KeyKind
   (
      this : in out MapFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
   begin
      Hr := this.m_IMapFeatureDescriptor.all.get_KeyKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ValueDescriptor
   (
      this : in out MapFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModelFeatureDescriptor;
   begin
      Hr := this.m_IMapFeatureDescriptor.all.get_ValueDescriptor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out MapFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IMapFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapFeatureDescriptor.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out MapFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IMapFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapFeatureDescriptor.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out MapFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IMapFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapFeatureDescriptor.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out MapFeatureDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.IMapFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapFeatureDescriptor.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SequenceFeatureDescriptor

   procedure Initialize (this : in out SequenceFeatureDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out SequenceFeatureDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISequenceFeatureDescriptor, ISequenceFeatureDescriptor_Ptr);
   begin
      if this.m_ISequenceFeatureDescriptor /= null then
         if this.m_ISequenceFeatureDescriptor.all /= null then
            RefCount := this.m_ISequenceFeatureDescriptor.all.Release;
            Free (this.m_ISequenceFeatureDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SequenceFeatureDescriptor

   function get_ElementDescriptor
   (
      this : in out SequenceFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ILearningModelFeatureDescriptor;
   begin
      Hr := this.m_ISequenceFeatureDescriptor.all.get_ElementDescriptor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out SequenceFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ISequenceFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceFeatureDescriptor.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out SequenceFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ISequenceFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceFeatureDescriptor.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out SequenceFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ISequenceFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceFeatureDescriptor.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out SequenceFeatureDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ISequenceFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceFeatureDescriptor.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorBoolean

   procedure Initialize (this : in out TensorBoolean) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorBoolean) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorBoolean, ITensorBoolean_Ptr);
   begin
      if this.m_ITensorBoolean /= null then
         if this.m_ITensorBoolean.all /= null then
            RefCount := this.m_ITensorBoolean.all.Release;
            Free (this.m_ITensorBoolean);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorBoolean

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorBoolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorBoolean");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorBooleanStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorBoolean;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorBoolean do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorBooleanStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorBoolean := new Windows.AI.MachineLearning.ITensorBoolean;
            Retval.m_ITensorBoolean.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorBoolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorBoolean");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorBooleanStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorBoolean;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorBoolean do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorBooleanStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorBoolean := new Windows.AI.MachineLearning.ITensorBoolean;
            Retval.m_ITensorBoolean.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Boolean_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorBoolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorBoolean");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorBooleanStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorBoolean;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Boolean_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorBoolean do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorBooleanStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorBoolean := new Windows.AI.MachineLearning.ITensorBoolean;
            Retval.m_ITensorBoolean.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorBoolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorBoolean");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorBooleanStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorBoolean;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorBoolean do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorBooleanStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorBoolean := new Windows.AI.MachineLearning.ITensorBoolean;
            Retval.m_ITensorBoolean.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Boolean_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorBoolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorBoolean");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorBooleanStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorBoolean;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Boolean_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorBoolean do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorBooleanStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorBoolean := new Windows.AI.MachineLearning.ITensorBoolean;
            Retval.m_ITensorBoolean.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorBoolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorBoolean");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorBooleanStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorBoolean;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorBoolean do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorBooleanStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorBoolean := new Windows.AI.MachineLearning.ITensorBoolean;
            Retval.m_ITensorBoolean.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorBoolean

   function GetAsVectorView
   (
      this : in out TensorBoolean
   )
   return IVectorView_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Boolean.Kind;
   begin
      Hr := this.m_ITensorBoolean.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorBoolean
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorBoolean_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorBoolean.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorBoolean
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorBoolean_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorBoolean.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorBoolean
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorBoolean_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorBoolean.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorBoolean
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorBoolean_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorBoolean.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorBoolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorBoolean_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorBoolean.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorDouble

   procedure Initialize (this : in out TensorDouble) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorDouble) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorDouble, ITensorDouble_Ptr);
   begin
      if this.m_ITensorDouble /= null then
         if this.m_ITensorDouble.all /= null then
            RefCount := this.m_ITensorDouble.all.Release;
            Free (this.m_ITensorDouble);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorDouble

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorDouble is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorDouble");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorDoubleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorDouble;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorDouble do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorDoubleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorDouble := new Windows.AI.MachineLearning.ITensorDouble;
            Retval.m_ITensorDouble.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorDouble is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorDouble");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorDoubleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorDouble;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorDouble do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorDoubleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorDouble := new Windows.AI.MachineLearning.ITensorDouble;
            Retval.m_ITensorDouble.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Double_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorDouble is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorDouble");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorDoubleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorDouble;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Double_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorDouble do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorDoubleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorDouble := new Windows.AI.MachineLearning.ITensorDouble;
            Retval.m_ITensorDouble.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorDouble is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorDouble");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorDoubleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorDouble;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorDouble do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorDoubleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorDouble := new Windows.AI.MachineLearning.ITensorDouble;
            Retval.m_ITensorDouble.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Double_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorDouble is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorDouble");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorDoubleStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorDouble;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Double_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorDouble do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorDoubleStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorDouble := new Windows.AI.MachineLearning.ITensorDouble;
            Retval.m_ITensorDouble.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorDouble is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorDouble");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorDoubleStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorDouble;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorDouble do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorDoubleStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorDouble := new Windows.AI.MachineLearning.ITensorDouble;
            Retval.m_ITensorDouble.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorDouble

   function GetAsVectorView
   (
      this : in out TensorDouble
   )
   return IVectorView_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Double.Kind;
   begin
      Hr := this.m_ITensorDouble.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorDouble
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorDouble_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorDouble.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorDouble
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorDouble_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorDouble.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorDouble
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorDouble_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorDouble.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorDouble
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorDouble_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorDouble.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorDouble
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorDouble_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorDouble.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorFeatureDescriptor

   procedure Initialize (this : in out TensorFeatureDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorFeatureDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorFeatureDescriptor, ITensorFeatureDescriptor_Ptr);
   begin
      if this.m_ITensorFeatureDescriptor /= null then
         if this.m_ITensorFeatureDescriptor.all /= null then
            RefCount := this.m_ITensorFeatureDescriptor.all.Release;
            Free (this.m_ITensorFeatureDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorFeatureDescriptor

   function get_TensorKind
   (
      this : in out TensorFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
   begin
      Hr := this.m_ITensorFeatureDescriptor.all.get_TensorKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorFeatureDescriptor
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
   begin
      Hr := this.m_ITensorFeatureDescriptor.all.get_Shape (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Name
   (
      this : in out TensorFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFeatureDescriptor.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out TensorFeatureDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFeatureDescriptor.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out TensorFeatureDescriptor
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFeatureDescriptor.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out TensorFeatureDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFeatureDescriptor_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureDescriptor, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFeatureDescriptor.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorFloat

   procedure Initialize (this : in out TensorFloat) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorFloat) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorFloat, ITensorFloat_Ptr);
   begin
      if this.m_ITensorFloat /= null then
         if this.m_ITensorFloat.all /= null then
            RefCount := this.m_ITensorFloat.all.Release;
            Free (this.m_ITensorFloat);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorFloat

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorFloat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloatStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloatStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat := new Windows.AI.MachineLearning.ITensorFloat;
            Retval.m_ITensorFloat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloatStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloatStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat := new Windows.AI.MachineLearning.ITensorFloat;
            Retval.m_ITensorFloat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Single_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloatStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloatStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat := new Windows.AI.MachineLearning.ITensorFloat;
            Retval.m_ITensorFloat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloatStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloatStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat := new Windows.AI.MachineLearning.ITensorFloat;
            Retval.m_ITensorFloat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Single_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloatStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloatStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat := new Windows.AI.MachineLearning.ITensorFloat;
            Retval.m_ITensorFloat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloatStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloatStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat := new Windows.AI.MachineLearning.ITensorFloat;
            Retval.m_ITensorFloat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorFloat

   function GetAsVectorView
   (
      this : in out TensorFloat
   )
   return IVectorView_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Single.Kind;
   begin
      Hr := this.m_ITensorFloat.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorFloat
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorFloat
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorFloat
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorFloat
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorFloat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorFloat16Bit

   procedure Initialize (this : in out TensorFloat16Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorFloat16Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorFloat16Bit, ITensorFloat16Bit_Ptr);
   begin
      if this.m_ITensorFloat16Bit /= null then
         if this.m_ITensorFloat16Bit.all /= null then
            RefCount := this.m_ITensorFloat16Bit.all.Release;
            Free (this.m_ITensorFloat16Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorFloat16Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorFloat16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloat16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloat16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat16Bit := new Windows.AI.MachineLearning.ITensorFloat16Bit;
            Retval.m_ITensorFloat16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloat16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloat16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat16Bit := new Windows.AI.MachineLearning.ITensorFloat16Bit;
            Retval.m_ITensorFloat16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Single_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloat16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat16Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloat16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat16Bit := new Windows.AI.MachineLearning.ITensorFloat16Bit;
            Retval.m_ITensorFloat16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloat16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloat16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat16Bit := new Windows.AI.MachineLearning.ITensorFloat16Bit;
            Retval.m_ITensorFloat16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Single_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloat16BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat16Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloat16BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat16Bit := new Windows.AI.MachineLearning.ITensorFloat16Bit;
            Retval.m_ITensorFloat16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorFloat16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorFloat16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorFloat16BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorFloat16Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorFloat16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorFloat16BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorFloat16Bit := new Windows.AI.MachineLearning.ITensorFloat16Bit;
            Retval.m_ITensorFloat16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorFloat16Bit

   function GetAsVectorView
   (
      this : in out TensorFloat16Bit
   )
   return IVectorView_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Single.Kind;
   begin
      Hr := this.m_ITensorFloat16Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorFloat16Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat16Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat16Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorFloat16Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat16Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat16Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorFloat16Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat16Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat16Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorFloat16Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat16Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat16Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorFloat16Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorFloat16Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorFloat16Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorInt16Bit

   procedure Initialize (this : in out TensorInt16Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorInt16Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorInt16Bit, ITensorInt16Bit_Ptr);
   begin
      if this.m_ITensorInt16Bit /= null then
         if this.m_ITensorInt16Bit.all /= null then
            RefCount := this.m_ITensorInt16Bit.all.Release;
            Free (this.m_ITensorInt16Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorInt16Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt16Bit := new Windows.AI.MachineLearning.ITensorInt16Bit;
            Retval.m_ITensorInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt16Bit := new Windows.AI.MachineLearning.ITensorInt16Bit;
            Retval.m_ITensorInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Int16_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt16Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Int16_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt16Bit := new Windows.AI.MachineLearning.ITensorInt16Bit;
            Retval.m_ITensorInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt16Bit := new Windows.AI.MachineLearning.ITensorInt16Bit;
            Retval.m_ITensorInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Int16_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt16BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt16Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Int16_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt16BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt16Bit := new Windows.AI.MachineLearning.ITensorInt16Bit;
            Retval.m_ITensorInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt16BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt16Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt16BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt16Bit := new Windows.AI.MachineLearning.ITensorInt16Bit;
            Retval.m_ITensorInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorInt16Bit

   function GetAsVectorView
   (
      this : in out TensorInt16Bit
   )
   return IVectorView_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int16.Kind;
   begin
      Hr := this.m_ITensorInt16Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorInt16Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt16Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt16Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorInt16Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt16Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt16Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorInt16Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt16Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt16Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorInt16Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt16Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt16Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorInt16Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt16Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt16Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorInt32Bit

   procedure Initialize (this : in out TensorInt32Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorInt32Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorInt32Bit, ITensorInt32Bit_Ptr);
   begin
      if this.m_ITensorInt32Bit /= null then
         if this.m_ITensorInt32Bit.all /= null then
            RefCount := this.m_ITensorInt32Bit.all.Release;
            Free (this.m_ITensorInt32Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorInt32Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt32Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt32Bit := new Windows.AI.MachineLearning.ITensorInt32Bit;
            Retval.m_ITensorInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt32Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt32Bit := new Windows.AI.MachineLearning.ITensorInt32Bit;
            Retval.m_ITensorInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Int32_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt32Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt32Bit := new Windows.AI.MachineLearning.ITensorInt32Bit;
            Retval.m_ITensorInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt32Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt32Bit := new Windows.AI.MachineLearning.ITensorInt32Bit;
            Retval.m_ITensorInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Int32_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt32BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt32Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt32BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt32Bit := new Windows.AI.MachineLearning.ITensorInt32Bit;
            Retval.m_ITensorInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt32BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt32Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt32BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt32Bit := new Windows.AI.MachineLearning.ITensorInt32Bit;
            Retval.m_ITensorInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorInt32Bit

   function GetAsVectorView
   (
      this : in out TensorInt32Bit
   )
   return IVectorView_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int32.Kind;
   begin
      Hr := this.m_ITensorInt32Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorInt32Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt32Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt32Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorInt32Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt32Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt32Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorInt32Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt32Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt32Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorInt32Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt32Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt32Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorInt32Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt32Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt32Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorInt64Bit

   procedure Initialize (this : in out TensorInt64Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorInt64Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorInt64Bit, ITensorInt64Bit_Ptr);
   begin
      if this.m_ITensorInt64Bit /= null then
         if this.m_ITensorInt64Bit.all /= null then
            RefCount := this.m_ITensorInt64Bit.all.Release;
            Free (this.m_ITensorInt64Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorInt64Bit

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Int64_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt64BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt64Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt64BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt64Bit := new Windows.AI.MachineLearning.ITensorInt64Bit;
            Retval.m_ITensorInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt64BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt64Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt64BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt64Bit := new Windows.AI.MachineLearning.ITensorInt64Bit;
            Retval.m_ITensorInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt64Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt64Bit := new Windows.AI.MachineLearning.ITensorInt64Bit;
            Retval.m_ITensorInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt64Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt64Bit := new Windows.AI.MachineLearning.ITensorInt64Bit;
            Retval.m_ITensorInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Int64_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt64Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt64Bit := new Windows.AI.MachineLearning.ITensorInt64Bit;
            Retval.m_ITensorInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt64Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt64Bit := new Windows.AI.MachineLearning.ITensorInt64Bit;
            Retval.m_ITensorInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorInt64Bit

   function GetAsVectorView
   (
      this : in out TensorInt64Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
   begin
      Hr := this.m_ITensorInt64Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorInt64Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt64Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt64Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorInt64Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt64Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt64Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorInt64Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt64Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt64Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorInt64Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt64Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt64Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorInt64Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt64Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt64Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorInt8Bit

   procedure Initialize (this : in out TensorInt8Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorInt8Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorInt8Bit, ITensorInt8Bit_Ptr);
   begin
      if this.m_ITensorInt8Bit /= null then
         if this.m_ITensorInt8Bit.all /= null then
            RefCount := this.m_ITensorInt8Bit.all.Release;
            Free (this.m_ITensorInt8Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorInt8Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt8Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt8Bit := new Windows.AI.MachineLearning.ITensorInt8Bit;
            Retval.m_ITensorInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt8Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt8Bit := new Windows.AI.MachineLearning.ITensorInt8Bit;
            Retval.m_ITensorInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Byte_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt8Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt8Bit := new Windows.AI.MachineLearning.ITensorInt8Bit;
            Retval.m_ITensorInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt8Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt8Bit := new Windows.AI.MachineLearning.ITensorInt8Bit;
            Retval.m_ITensorInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Byte_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt8BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt8Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt8BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt8Bit := new Windows.AI.MachineLearning.ITensorInt8Bit;
            Retval.m_ITensorInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorInt8BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorInt8Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorInt8BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorInt8Bit := new Windows.AI.MachineLearning.ITensorInt8Bit;
            Retval.m_ITensorInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorInt8Bit

   function GetAsVectorView
   (
      this : in out TensorInt8Bit
   )
   return IVectorView_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Byte.Kind;
   begin
      Hr := this.m_ITensorInt8Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorInt8Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt8Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt8Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorInt8Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt8Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt8Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorInt8Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt8Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt8Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorInt8Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt8Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt8Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorInt8Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorInt8Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorInt8Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorString

   procedure Initialize (this : in out TensorString) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorString) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorString, ITensorString_Ptr);
   begin
      if this.m_ITensorString /= null then
         if this.m_ITensorString.all /= null then
            RefCount := this.m_ITensorString.all.Release;
            Free (this.m_ITensorString);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorString

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorString");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorStringStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorString;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorString do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorStringStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorString := new Windows.AI.MachineLearning.ITensorString;
            Retval.m_ITensorString.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorString");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorStringStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorString;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorString do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorStringStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorString := new Windows.AI.MachineLearning.ITensorString;
            Retval.m_ITensorString.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.HString_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorString");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorStringStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorString;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorString do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorStringStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorString := new Windows.AI.MachineLearning.ITensorString;
            Retval.m_ITensorString.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorString");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorStringStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorString;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorString do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorStringStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorString := new Windows.AI.MachineLearning.ITensorString;
            Retval.m_ITensorString.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.HString_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorString");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorStringStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorString;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorString do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorStringStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorString := new Windows.AI.MachineLearning.ITensorString;
            Retval.m_ITensorString.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorString

   function GetAsVectorView
   (
      this : in out TensorString
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ITensorString.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorString
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorString_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorString.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorString
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorString_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorString.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorString
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorString_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorString.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorString
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorString_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorString.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorString_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorString.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorUInt16Bit

   procedure Initialize (this : in out TensorUInt16Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorUInt16Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorUInt16Bit, ITensorUInt16Bit_Ptr);
   begin
      if this.m_ITensorUInt16Bit /= null then
         if this.m_ITensorUInt16Bit.all /= null then
            RefCount := this.m_ITensorUInt16Bit.all.Release;
            Free (this.m_ITensorUInt16Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorUInt16Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorUInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt16Bit := new Windows.AI.MachineLearning.ITensorUInt16Bit;
            Retval.m_ITensorUInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt16Bit := new Windows.AI.MachineLearning.ITensorUInt16Bit;
            Retval.m_ITensorUInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.UInt16_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt16Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt16Bit := new Windows.AI.MachineLearning.ITensorUInt16Bit;
            Retval.m_ITensorUInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt16BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt16Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt16BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt16Bit := new Windows.AI.MachineLearning.ITensorUInt16Bit;
            Retval.m_ITensorUInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.UInt16_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt16BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt16Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt16BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt16Bit := new Windows.AI.MachineLearning.ITensorUInt16Bit;
            Retval.m_ITensorUInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt16Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt16Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt16BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt16Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt16Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt16BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt16Bit := new Windows.AI.MachineLearning.ITensorUInt16Bit;
            Retval.m_ITensorUInt16Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorUInt16Bit

   function GetAsVectorView
   (
      this : in out TensorUInt16Bit
   )
   return IVectorView_UInt16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt16.Kind;
   begin
      Hr := this.m_ITensorUInt16Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorUInt16Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt16Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt16Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorUInt16Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt16Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt16Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorUInt16Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt16Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt16Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorUInt16Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt16Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt16Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorUInt16Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt16Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt16Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorUInt32Bit

   procedure Initialize (this : in out TensorUInt32Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorUInt32Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorUInt32Bit, ITensorUInt32Bit_Ptr);
   begin
      if this.m_ITensorUInt32Bit /= null then
         if this.m_ITensorUInt32Bit.all /= null then
            RefCount := this.m_ITensorUInt32Bit.all.Release;
            Free (this.m_ITensorUInt32Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorUInt32Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorUInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt32Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt32Bit := new Windows.AI.MachineLearning.ITensorUInt32Bit;
            Retval.m_ITensorUInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt32Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt32Bit := new Windows.AI.MachineLearning.ITensorUInt32Bit;
            Retval.m_ITensorUInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.UInt32_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt32Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.UInt32_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt32Bit := new Windows.AI.MachineLearning.ITensorUInt32Bit;
            Retval.m_ITensorUInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt32BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt32Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt32BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt32Bit := new Windows.AI.MachineLearning.ITensorUInt32Bit;
            Retval.m_ITensorUInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.UInt32_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt32BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt32Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.UInt32_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt32BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt32Bit := new Windows.AI.MachineLearning.ITensorUInt32Bit;
            Retval.m_ITensorUInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt32Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt32Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt32BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt32Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt32Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt32BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt32Bit := new Windows.AI.MachineLearning.ITensorUInt32Bit;
            Retval.m_ITensorUInt32Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorUInt32Bit

   function GetAsVectorView
   (
      this : in out TensorUInt32Bit
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_ITensorUInt32Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorUInt32Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt32Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt32Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorUInt32Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt32Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt32Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorUInt32Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt32Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt32Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorUInt32Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt32Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt32Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorUInt32Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt32Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt32Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorUInt64Bit

   procedure Initialize (this : in out TensorUInt64Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorUInt64Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorUInt64Bit, ITensorUInt64Bit_Ptr);
   begin
      if this.m_ITensorUInt64Bit /= null then
         if this.m_ITensorUInt64Bit.all /= null then
            RefCount := this.m_ITensorUInt64Bit.all.Release;
            Free (this.m_ITensorUInt64Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorUInt64Bit

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.UInt64_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt64BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt64Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.UInt64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt64BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt64Bit := new Windows.AI.MachineLearning.ITensorUInt64Bit;
            Retval.m_ITensorUInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt64BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt64Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt64BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt64Bit := new Windows.AI.MachineLearning.ITensorUInt64Bit;
            Retval.m_ITensorUInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorUInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt64Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt64Bit := new Windows.AI.MachineLearning.ITensorUInt64Bit;
            Retval.m_ITensorUInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt64Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt64Bit := new Windows.AI.MachineLearning.ITensorUInt64Bit;
            Retval.m_ITensorUInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.UInt64_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt64Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.UInt64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt64Bit := new Windows.AI.MachineLearning.ITensorUInt64Bit;
            Retval.m_ITensorUInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt64Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt64Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt64BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt64Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt64Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt64BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt64Bit := new Windows.AI.MachineLearning.ITensorUInt64Bit;
            Retval.m_ITensorUInt64Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorUInt64Bit

   function GetAsVectorView
   (
      this : in out TensorUInt64Bit
   )
   return IVectorView_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt64.Kind;
   begin
      Hr := this.m_ITensorUInt64Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorUInt64Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt64Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt64Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorUInt64Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt64Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt64Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorUInt64Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt64Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt64Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorUInt64Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt64Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt64Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorUInt64Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt64Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt64Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorUInt8Bit

   procedure Initialize (this : in out TensorUInt8Bit) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorUInt8Bit) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorUInt8Bit, ITensorUInt8Bit_Ptr);
   begin
      if this.m_ITensorUInt8Bit /= null then
         if this.m_ITensorUInt8Bit.all /= null then
            RefCount := this.m_ITensorUInt8Bit.all.Release;
            Free (this.m_ITensorUInt8Bit);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TensorUInt8Bit

   function Create
   return WinRt.Windows.AI.MachineLearning.TensorUInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt8Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt8Bit := new Windows.AI.MachineLearning.ITensorUInt8Bit;
            Retval.m_ITensorUInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      shape : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt8Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (shape, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt8Bit := new Windows.AI.MachineLearning.ITensorUInt8Bit;
            Retval.m_ITensorUInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromArray
   (
      shape : GenericObject;
      data : WinRt.Byte_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt8Bit;
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromArray (shape, WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt8Bit := new Windows.AI.MachineLearning.ITensorUInt8Bit;
            Retval.m_ITensorUInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIterable
   (
      shape : GenericObject;
      data : GenericObject
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt8BitStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt8Bit;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt8BitStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIterable (shape, data, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt8Bit := new Windows.AI.MachineLearning.ITensorUInt8Bit;
            Retval.m_ITensorUInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromShapeArrayAndDataArray
   (
      shape : WinRt.Int64_Array;
      data : WinRt.Byte_Array
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt8BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt8Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      function Convert_data is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt8BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromShapeArrayAndDataArray (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), WinRt.UInt32(data'Length), Convert_data (data (data'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt8Bit := new Windows.AI.MachineLearning.ITensorUInt8Bit;
            Retval.m_ITensorUInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromBuffer
   (
      shape : WinRt.Int64_Array;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.AI.MachineLearning.TensorUInt8Bit is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.TensorUInt8Bit");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.ITensorUInt8BitStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.ITensorUInt8Bit;
      function Convert_shape is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.TensorUInt8Bit do
         Hr := RoGetActivationFactory (m_hString, IID_ITensorUInt8BitStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (WinRt.UInt32(shape'Length), Convert_shape (shape (shape'First)'Address), buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITensorUInt8Bit := new Windows.AI.MachineLearning.ITensorUInt8Bit;
            Retval.m_ITensorUInt8Bit.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorUInt8Bit

   function GetAsVectorView
   (
      this : in out TensorUInt8Bit
   )
   return IVectorView_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Byte.Kind;
   begin
      Hr := this.m_ITensorUInt8Bit.all.GetAsVectorView (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TensorKind
   (
      this : in out TensorUInt8Bit
   )
   return WinRt.Windows.AI.MachineLearning.TensorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.TensorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt8Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt8Bit.all);
      Hr := m_Interface.get_TensorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorUInt8Bit
   )
   return IVectorView_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ITensor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int64.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt8Bit_Interface, WinRt.Windows.AI.MachineLearning.ITensor, WinRt.Windows.AI.MachineLearning.IID_ITensor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt8Bit.all);
      Hr := m_Interface.get_Shape (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out TensorUInt8Bit
   )
   return WinRt.Windows.AI.MachineLearning.LearningModelFeatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.LearningModelFeatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt8Bit_Interface, WinRt.Windows.AI.MachineLearning.ILearningModelFeatureValue, WinRt.Windows.AI.MachineLearning.IID_ILearningModelFeatureValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt8Bit.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out TensorUInt8Bit
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt8Bit_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt8Bit.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out TensorUInt8Bit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.ITensorUInt8Bit_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorUInt8Bit.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Media.Capture;
with WinRt.Windows.Media.Editing;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Media.Playback;
with WinRt.Windows.Media.Render;
with WinRt.Windows.Media.Transcoding;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Effects is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioCaptureEffectsManager

   procedure Initialize (this : in out AudioCaptureEffectsManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioCaptureEffectsManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioCaptureEffectsManager, IAudioCaptureEffectsManager_Ptr);
   begin
      if this.m_IAudioCaptureEffectsManager /= null then
         if this.m_IAudioCaptureEffectsManager.all /= null then
            RefCount := this.m_IAudioCaptureEffectsManager.all.Release;
            Free (this.m_IAudioCaptureEffectsManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioCaptureEffectsManager

   function add_AudioCaptureEffectsChanged
   (
      this : in out AudioCaptureEffectsManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioCaptureEffectsManager.all.add_AudioCaptureEffectsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AudioCaptureEffectsChanged
   (
      this : in out AudioCaptureEffectsManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioCaptureEffectsManager.all.remove_AudioCaptureEffectsChanged (token);
   end;

   function GetAudioCaptureEffects
   (
      this : in out AudioCaptureEffectsManager
   )
   return IVectorView_IAudioEffect.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioEffect.Kind;
   begin
      Hr := this.m_IAudioCaptureEffectsManager.all.GetAudioCaptureEffects (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAudioEffect (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioEffect

   procedure Initialize (this : in out AudioEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioEffect, IAudioEffect_Ptr);
   begin
      if this.m_IAudioEffect /= null then
         if this.m_IAudioEffect.all /= null then
            RefCount := this.m_IAudioEffect.all.Release;
            Free (this.m_IAudioEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioEffect

   function get_AudioEffectType
   (
      this : in out AudioEffect
   )
   return WinRt.Windows.Media.Effects.AudioEffectType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Effects.AudioEffectType;
   begin
      Hr := this.m_IAudioEffect.all.get_AudioEffectType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioEffectDefinition

   procedure Initialize (this : in out AudioEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioEffectDefinition, IAudioEffectDefinition_Ptr);
   begin
      if this.m_IAudioEffectDefinition /= null then
         if this.m_IAudioEffectDefinition.all /= null then
            RefCount := this.m_IAudioEffectDefinition.all.Release;
            Free (this.m_IAudioEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioEffectDefinition

   function Constructor
   (
      activatableClassId : WinRt.WString
   )
   return AudioEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.AudioEffectDefinition");
      m_Factory    : access IAudioEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Effects.IAudioEffectDefinition;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      return RetVal : AudioEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_activatableClassId, m_ComRetVal'Access);
            Retval.m_IAudioEffectDefinition := new Windows.Media.Effects.IAudioEffectDefinition;
            Retval.m_IAudioEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activatableClassId);
      end return;
   end;

   function Constructor
   (
      activatableClassId : WinRt.WString;
      props : Windows.Foundation.Collections.IPropertySet
   )
   return AudioEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.AudioEffectDefinition");
      m_Factory    : access IAudioEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Effects.IAudioEffectDefinition;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      return RetVal : AudioEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithProperties (HStr_activatableClassId, props, m_ComRetVal'Access);
            Retval.m_IAudioEffectDefinition := new Windows.Media.Effects.IAudioEffectDefinition;
            Retval.m_IAudioEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activatableClassId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioEffectDefinition

   function get_ActivatableClassId
   (
      this : in out AudioEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAudioEffectDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out AudioEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IAudioEffectDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AudioEffectsManager is

      function CreateAudioRenderEffectsManager
      (
         deviceId : WinRt.WString;
         category : Windows.Media.Render.AudioRenderCategory
      )
      return WinRt.Windows.Media.Effects.AudioRenderEffectsManager is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Effects.AudioEffectsManager");
         m_Factory        : access WinRt.Windows.Media.Effects.IAudioEffectsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Effects.IAudioRenderEffectsManager;
         HStr_deviceId : WinRt.HString := To_HString (deviceId);
      begin
         return RetVal : WinRt.Windows.Media.Effects.AudioRenderEffectsManager do
            Hr := RoGetActivationFactory (m_hString, IID_IAudioEffectsManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateAudioRenderEffectsManager (HStr_deviceId, category, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAudioRenderEffectsManager := new Windows.Media.Effects.IAudioRenderEffectsManager;
               Retval.m_IAudioRenderEffectsManager.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_deviceId);
         end return;
      end;

      function CreateAudioRenderEffectsManager
      (
         deviceId : WinRt.WString;
         category : Windows.Media.Render.AudioRenderCategory;
         mode : Windows.Media.AudioProcessing
      )
      return WinRt.Windows.Media.Effects.AudioRenderEffectsManager is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Effects.AudioEffectsManager");
         m_Factory        : access WinRt.Windows.Media.Effects.IAudioEffectsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Effects.IAudioRenderEffectsManager;
         HStr_deviceId : WinRt.HString := To_HString (deviceId);
      begin
         return RetVal : WinRt.Windows.Media.Effects.AudioRenderEffectsManager do
            Hr := RoGetActivationFactory (m_hString, IID_IAudioEffectsManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateAudioRenderEffectsManager (HStr_deviceId, category, mode, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAudioRenderEffectsManager := new Windows.Media.Effects.IAudioRenderEffectsManager;
               Retval.m_IAudioRenderEffectsManager.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_deviceId);
         end return;
      end;

      function CreateAudioCaptureEffectsManager
      (
         deviceId : WinRt.WString;
         category : Windows.Media.Capture.MediaCategory
      )
      return WinRt.Windows.Media.Effects.AudioCaptureEffectsManager is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Effects.AudioEffectsManager");
         m_Factory        : access WinRt.Windows.Media.Effects.IAudioEffectsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Effects.IAudioCaptureEffectsManager;
         HStr_deviceId : WinRt.HString := To_HString (deviceId);
      begin
         return RetVal : WinRt.Windows.Media.Effects.AudioCaptureEffectsManager do
            Hr := RoGetActivationFactory (m_hString, IID_IAudioEffectsManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateAudioCaptureEffectsManager (HStr_deviceId, category, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAudioCaptureEffectsManager := new Windows.Media.Effects.IAudioCaptureEffectsManager;
               Retval.m_IAudioCaptureEffectsManager.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_deviceId);
         end return;
      end;

      function CreateAudioCaptureEffectsManager
      (
         deviceId : WinRt.WString;
         category : Windows.Media.Capture.MediaCategory;
         mode : Windows.Media.AudioProcessing
      )
      return WinRt.Windows.Media.Effects.AudioCaptureEffectsManager is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Effects.AudioEffectsManager");
         m_Factory        : access WinRt.Windows.Media.Effects.IAudioEffectsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Effects.IAudioCaptureEffectsManager;
         HStr_deviceId : WinRt.HString := To_HString (deviceId);
      begin
         return RetVal : WinRt.Windows.Media.Effects.AudioCaptureEffectsManager do
            Hr := RoGetActivationFactory (m_hString, IID_IAudioEffectsManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateAudioCaptureEffectsManager (HStr_deviceId, category, mode, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAudioCaptureEffectsManager := new Windows.Media.Effects.IAudioCaptureEffectsManager;
               Retval.m_IAudioCaptureEffectsManager.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_deviceId);
         end return;
      end;

   end AudioEffectsManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioRenderEffectsManager

   procedure Initialize (this : in out AudioRenderEffectsManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioRenderEffectsManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioRenderEffectsManager, IAudioRenderEffectsManager_Ptr);
   begin
      if this.m_IAudioRenderEffectsManager /= null then
         if this.m_IAudioRenderEffectsManager.all /= null then
            RefCount := this.m_IAudioRenderEffectsManager.all.Release;
            Free (this.m_IAudioRenderEffectsManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioRenderEffectsManager

   function add_AudioRenderEffectsChanged
   (
      this : in out AudioRenderEffectsManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioRenderEffectsManager.all.add_AudioRenderEffectsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AudioRenderEffectsChanged
   (
      this : in out AudioRenderEffectsManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioRenderEffectsManager.all.remove_AudioRenderEffectsChanged (token);
   end;

   function GetAudioRenderEffects
   (
      this : in out AudioRenderEffectsManager
   )
   return IVectorView_IAudioEffect.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioEffect.Kind;
   begin
      Hr := this.m_IAudioRenderEffectsManager.all.GetAudioRenderEffects (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAudioEffect (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_EffectsProviderThumbnail
   (
      this : in out AudioRenderEffectsManager
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioRenderEffectsManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IAudioRenderEffectsManager_Interface, WinRt.Windows.Media.Effects.IAudioRenderEffectsManager2, WinRt.Windows.Media.Effects.IID_IAudioRenderEffectsManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioRenderEffectsManager.all);
      Hr := m_Interface.get_EffectsProviderThumbnail (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EffectsProviderSettingsLabel
   (
      this : in out AudioRenderEffectsManager
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioRenderEffectsManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IAudioRenderEffectsManager_Interface, WinRt.Windows.Media.Effects.IAudioRenderEffectsManager2, WinRt.Windows.Media.Effects.IID_IAudioRenderEffectsManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioRenderEffectsManager.all);
      Hr := m_Interface.get_EffectsProviderSettingsLabel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ShowSettingsUI
   (
      this : in out AudioRenderEffectsManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioRenderEffectsManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IAudioRenderEffectsManager_Interface, WinRt.Windows.Media.Effects.IAudioRenderEffectsManager2, WinRt.Windows.Media.Effects.IID_IAudioRenderEffectsManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioRenderEffectsManager.all);
      Hr := m_Interface.ShowSettingsUI;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositeVideoFrameContext

   procedure Initialize (this : in out CompositeVideoFrameContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositeVideoFrameContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositeVideoFrameContext, ICompositeVideoFrameContext_Ptr);
   begin
      if this.m_ICompositeVideoFrameContext /= null then
         if this.m_ICompositeVideoFrameContext.all /= null then
            RefCount := this.m_ICompositeVideoFrameContext.all.Release;
            Free (this.m_ICompositeVideoFrameContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositeVideoFrameContext

   function get_SurfacesToOverlay
   (
      this : in out CompositeVideoFrameContext
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ICompositeVideoFrameContext.all.get_SurfacesToOverlay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BackgroundFrame
   (
      this : in out CompositeVideoFrameContext
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_ICompositeVideoFrameContext.all.get_BackgroundFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function get_OutputFrame
   (
      this : in out CompositeVideoFrameContext
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_ICompositeVideoFrameContext.all.get_OutputFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function GetOverlayForSurface
   (
      this : in out CompositeVideoFrameContext;
      surfaceToOverlay : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   )
   return WinRt.Windows.Media.Editing.MediaOverlay'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaOverlay;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaOverlay do
         Hr := this.m_ICompositeVideoFrameContext.all.GetOverlayForSurface (surfaceToOverlay, m_ComRetVal'Access);
         Retval.m_IMediaOverlay := new Windows.Media.Editing.IMediaOverlay;
         Retval.m_IMediaOverlay.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessAudioFrameContext

   procedure Initialize (this : in out ProcessAudioFrameContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessAudioFrameContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessAudioFrameContext, IProcessAudioFrameContext_Ptr);
   begin
      if this.m_IProcessAudioFrameContext /= null then
         if this.m_IProcessAudioFrameContext.all /= null then
            RefCount := this.m_IProcessAudioFrameContext.all.Release;
            Free (this.m_IProcessAudioFrameContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessAudioFrameContext

   function get_InputFrame
   (
      this : in out ProcessAudioFrameContext
   )
   return WinRt.Windows.Media.AudioFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IAudioFrame;
   begin
      return RetVal : WinRt.Windows.Media.AudioFrame do
         Hr := this.m_IProcessAudioFrameContext.all.get_InputFrame (m_ComRetVal'Access);
         Retval.m_IAudioFrame := new Windows.Media.IAudioFrame;
         Retval.m_IAudioFrame.all := m_ComRetVal;
      end return;
   end;

   function get_OutputFrame
   (
      this : in out ProcessAudioFrameContext
   )
   return WinRt.Windows.Media.AudioFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IAudioFrame;
   begin
      return RetVal : WinRt.Windows.Media.AudioFrame do
         Hr := this.m_IProcessAudioFrameContext.all.get_OutputFrame (m_ComRetVal'Access);
         Retval.m_IAudioFrame := new Windows.Media.IAudioFrame;
         Retval.m_IAudioFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessVideoFrameContext

   procedure Initialize (this : in out ProcessVideoFrameContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessVideoFrameContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessVideoFrameContext, IProcessVideoFrameContext_Ptr);
   begin
      if this.m_IProcessVideoFrameContext /= null then
         if this.m_IProcessVideoFrameContext.all /= null then
            RefCount := this.m_IProcessVideoFrameContext.all.Release;
            Free (this.m_IProcessVideoFrameContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessVideoFrameContext

   function get_InputFrame
   (
      this : in out ProcessVideoFrameContext
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IProcessVideoFrameContext.all.get_InputFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function get_OutputFrame
   (
      this : in out ProcessVideoFrameContext
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IProcessVideoFrameContext.all.get_OutputFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SlowMotionEffectDefinition

   procedure Initialize (this : in out SlowMotionEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out SlowMotionEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISlowMotionEffectDefinition, ISlowMotionEffectDefinition_Ptr);
   begin
      if this.m_ISlowMotionEffectDefinition /= null then
         if this.m_ISlowMotionEffectDefinition.all /= null then
            RefCount := this.m_ISlowMotionEffectDefinition.all.Release;
            Free (this.m_ISlowMotionEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SlowMotionEffectDefinition

   function Constructor return SlowMotionEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.SlowMotionEffectDefinition");
      m_ComRetVal  : aliased Windows.Media.Effects.ISlowMotionEffectDefinition;
   begin
      return RetVal : SlowMotionEffectDefinition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISlowMotionEffectDefinition := new Windows.Media.Effects.ISlowMotionEffectDefinition;
            Retval.m_ISlowMotionEffectDefinition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SlowMotionEffectDefinition

   function get_TimeStretchRate
   (
      this : in out SlowMotionEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISlowMotionEffectDefinition.all.get_TimeStretchRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TimeStretchRate
   (
      this : in out SlowMotionEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISlowMotionEffectDefinition.all.put_TimeStretchRate (value);
   end;

   function get_ActivatableClassId
   (
      this : in out SlowMotionEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.ISlowMotionEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlowMotionEffectDefinition.all);
      Hr := m_Interface.get_ActivatableClassId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out SlowMotionEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.ISlowMotionEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlowMotionEffectDefinition.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoCompositorDefinition

   procedure Initialize (this : in out VideoCompositorDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoCompositorDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoCompositorDefinition, IVideoCompositorDefinition_Ptr);
   begin
      if this.m_IVideoCompositorDefinition /= null then
         if this.m_IVideoCompositorDefinition.all /= null then
            RefCount := this.m_IVideoCompositorDefinition.all.Release;
            Free (this.m_IVideoCompositorDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoCompositorDefinition

   function Constructor
   (
      activatableClassId : WinRt.WString
   )
   return VideoCompositorDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.VideoCompositorDefinition");
      m_Factory    : access IVideoCompositorDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoCompositorDefinition;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      return RetVal : VideoCompositorDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoCompositorDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_activatableClassId, m_ComRetVal'Access);
            Retval.m_IVideoCompositorDefinition := new Windows.Media.Effects.IVideoCompositorDefinition;
            Retval.m_IVideoCompositorDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activatableClassId);
      end return;
   end;

   function Constructor
   (
      activatableClassId : WinRt.WString;
      props : Windows.Foundation.Collections.IPropertySet
   )
   return VideoCompositorDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.VideoCompositorDefinition");
      m_Factory    : access IVideoCompositorDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoCompositorDefinition;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      return RetVal : VideoCompositorDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoCompositorDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithProperties (HStr_activatableClassId, props, m_ComRetVal'Access);
            Retval.m_IVideoCompositorDefinition := new Windows.Media.Effects.IVideoCompositorDefinition;
            Retval.m_IVideoCompositorDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activatableClassId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoCompositorDefinition

   function get_ActivatableClassId
   (
      this : in out VideoCompositorDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoCompositorDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out VideoCompositorDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IVideoCompositorDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoEffectDefinition

   procedure Initialize (this : in out VideoEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoEffectDefinition, IVideoEffectDefinition_Ptr);
   begin
      if this.m_IVideoEffectDefinition /= null then
         if this.m_IVideoEffectDefinition.all /= null then
            RefCount := this.m_IVideoEffectDefinition.all.Release;
            Free (this.m_IVideoEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoEffectDefinition

   function Constructor
   (
      activatableClassId : WinRt.WString
   )
   return VideoEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.VideoEffectDefinition");
      m_Factory    : access IVideoEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoEffectDefinition;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      return RetVal : VideoEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_activatableClassId, m_ComRetVal'Access);
            Retval.m_IVideoEffectDefinition := new Windows.Media.Effects.IVideoEffectDefinition;
            Retval.m_IVideoEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activatableClassId);
      end return;
   end;

   function Constructor
   (
      activatableClassId : WinRt.WString;
      props : Windows.Foundation.Collections.IPropertySet
   )
   return VideoEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.VideoEffectDefinition");
      m_Factory    : access IVideoEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoEffectDefinition;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      return RetVal : VideoEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithProperties (HStr_activatableClassId, props, m_ComRetVal'Access);
            Retval.m_IVideoEffectDefinition := new Windows.Media.Effects.IVideoEffectDefinition;
            Retval.m_IVideoEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activatableClassId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoEffectDefinition

   function get_ActivatableClassId
   (
      this : in out VideoEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out VideoEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoTransformEffectDefinition

   procedure Initialize (this : in out VideoTransformEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoTransformEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoEffectDefinition, IVideoEffectDefinition_Ptr);
   begin
      if this.m_IVideoEffectDefinition /= null then
         if this.m_IVideoEffectDefinition.all /= null then
            RefCount := this.m_IVideoEffectDefinition.all.Release;
            Free (this.m_IVideoEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoTransformEffectDefinition

   function Constructor return VideoTransformEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Effects.VideoTransformEffectDefinition");
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoEffectDefinition;
   begin
      return RetVal : VideoTransformEffectDefinition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVideoEffectDefinition := new Windows.Media.Effects.IVideoEffectDefinition;
            Retval.m_IVideoEffectDefinition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoTransformEffectDefinition

   function get_ActivatableClassId
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PaddingColor
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_PaddingColor (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PaddingColor
   (
      this : in out VideoTransformEffectDefinition;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_PaddingColor (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutputSize
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_OutputSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutputSize
   (
      this : in out VideoTransformEffectDefinition;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_OutputSize (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CropRectangle
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_CropRectangle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CropRectangle
   (
      this : in out VideoTransformEffectDefinition;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_CropRectangle (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Rotation
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Media.MediaProperties.MediaRotation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.MediaRotation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_Rotation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Rotation
   (
      this : in out VideoTransformEffectDefinition;
      value : Windows.Media.MediaProperties.MediaRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_Rotation (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Mirror
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Media.MediaProperties.MediaMirroringOptions is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.MediaMirroringOptions;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_Mirror (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Mirror
   (
      this : in out VideoTransformEffectDefinition;
      value : Windows.Media.MediaProperties.MediaMirroringOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_Mirror (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_ProcessingAlgorithm
   (
      this : in out VideoTransformEffectDefinition;
      value : Windows.Media.Transcoding.MediaVideoProcessingAlgorithm
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_ProcessingAlgorithm (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProcessingAlgorithm
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Media.Transcoding.MediaVideoProcessingAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Transcoding.MediaVideoProcessingAlgorithm;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_ProcessingAlgorithm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SphericalProjection
   (
      this : in out VideoTransformEffectDefinition
   )
   return WinRt.Windows.Media.Effects.VideoTransformSphericalProjection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Effects.IVideoTransformSphericalProjection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IVideoTransformEffectDefinition2, WinRt.Windows.Media.Effects.IID_IVideoTransformEffectDefinition2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Effects.VideoTransformSphericalProjection do
         m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
         Hr := m_Interface.get_SphericalProjection (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoTransformSphericalProjection := new Windows.Media.Effects.IVideoTransformSphericalProjection;
         Retval.m_IVideoTransformSphericalProjection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoTransformSphericalProjection

   procedure Initialize (this : in out VideoTransformSphericalProjection) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoTransformSphericalProjection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoTransformSphericalProjection, IVideoTransformSphericalProjection_Ptr);
   begin
      if this.m_IVideoTransformSphericalProjection /= null then
         if this.m_IVideoTransformSphericalProjection.all /= null then
            RefCount := this.m_IVideoTransformSphericalProjection.all.Release;
            Free (this.m_IVideoTransformSphericalProjection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoTransformSphericalProjection

   function get_IsEnabled
   (
      this : in out VideoTransformSphericalProjection
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out VideoTransformSphericalProjection;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.put_IsEnabled (value);
   end;

   function get_FrameFormat
   (
      this : in out VideoTransformSphericalProjection
   )
   return WinRt.Windows.Media.MediaProperties.SphericalVideoFrameFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.SphericalVideoFrameFormat;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.get_FrameFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FrameFormat
   (
      this : in out VideoTransformSphericalProjection;
      value : Windows.Media.MediaProperties.SphericalVideoFrameFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.put_FrameFormat (value);
   end;

   function get_ProjectionMode
   (
      this : in out VideoTransformSphericalProjection
   )
   return WinRt.Windows.Media.Playback.SphericalVideoProjectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.SphericalVideoProjectionMode;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.get_ProjectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProjectionMode
   (
      this : in out VideoTransformSphericalProjection;
      value : Windows.Media.Playback.SphericalVideoProjectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.put_ProjectionMode (value);
   end;

   function get_HorizontalFieldOfViewInDegrees
   (
      this : in out VideoTransformSphericalProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.get_HorizontalFieldOfViewInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HorizontalFieldOfViewInDegrees
   (
      this : in out VideoTransformSphericalProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.put_HorizontalFieldOfViewInDegrees (value);
   end;

   function get_ViewOrientation
   (
      this : in out VideoTransformSphericalProjection
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.get_ViewOrientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewOrientation
   (
      this : in out VideoTransformSphericalProjection;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoTransformSphericalProjection.all.put_ViewOrientation (value);
   end;

end;

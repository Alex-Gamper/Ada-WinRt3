--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.Threading is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ThreadPool is

      procedure RunAsync
      (
         handler : Windows.System.Threading.WorkItemHandler
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPool");
         m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RunAsync (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RunAsync
      (
         handler : Windows.System.Threading.WorkItemHandler;
         priority : Windows.System.Threading.WorkItemPriority
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPool");
         m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RunAsync (handler, priority, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RunAsync
      (
         handler : Windows.System.Threading.WorkItemHandler;
         priority : Windows.System.Threading.WorkItemPriority;
         options : Windows.System.Threading.WorkItemOptions
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPool");
         m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RunAsync (handler, priority, options, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end ThreadPool;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ThreadPoolTimer

   procedure Initialize (this : in out ThreadPoolTimer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ThreadPoolTimer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IThreadPoolTimer, IThreadPoolTimer_Ptr);
   begin
      if this.m_IThreadPoolTimer /= null then
         if this.m_IThreadPoolTimer.all /= null then
            RefCount := this.m_IThreadPoolTimer.all.Release;
            Free (this.m_IThreadPoolTimer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ThreadPoolTimer

   function CreatePeriodicTimer
   (
      handler : Windows.System.Threading.TimerElapsedHandler;
      period : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.System.Threading.ThreadPoolTimer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPoolTimer");
      m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolTimerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Threading.IThreadPoolTimer;
   begin
      return RetVal : WinRt.Windows.System.Threading.ThreadPoolTimer do
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolTimerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePeriodicTimer (handler, period, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IThreadPoolTimer := new Windows.System.Threading.IThreadPoolTimer;
            Retval.m_IThreadPoolTimer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateTimer
   (
      handler : Windows.System.Threading.TimerElapsedHandler;
      delay_x : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.System.Threading.ThreadPoolTimer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPoolTimer");
      m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolTimerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Threading.IThreadPoolTimer;
   begin
      return RetVal : WinRt.Windows.System.Threading.ThreadPoolTimer do
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolTimerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateTimer (handler, delay_x, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IThreadPoolTimer := new Windows.System.Threading.IThreadPoolTimer;
            Retval.m_IThreadPoolTimer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreatePeriodicTimer
   (
      handler : Windows.System.Threading.TimerElapsedHandler;
      period : Windows.Foundation.TimeSpan;
      destroyed : Windows.System.Threading.TimerDestroyedHandler
   )
   return WinRt.Windows.System.Threading.ThreadPoolTimer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPoolTimer");
      m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolTimerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Threading.IThreadPoolTimer;
   begin
      return RetVal : WinRt.Windows.System.Threading.ThreadPoolTimer do
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolTimerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePeriodicTimer (handler, period, destroyed, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IThreadPoolTimer := new Windows.System.Threading.IThreadPoolTimer;
            Retval.m_IThreadPoolTimer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateTimer
   (
      handler : Windows.System.Threading.TimerElapsedHandler;
      delay_x : Windows.Foundation.TimeSpan;
      destroyed : Windows.System.Threading.TimerDestroyedHandler
   )
   return WinRt.Windows.System.Threading.ThreadPoolTimer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Threading.ThreadPoolTimer");
      m_Factory        : access WinRt.Windows.System.Threading.IThreadPoolTimerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Threading.IThreadPoolTimer;
   begin
      return RetVal : WinRt.Windows.System.Threading.ThreadPoolTimer do
         Hr := RoGetActivationFactory (m_hString, IID_IThreadPoolTimerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateTimer (handler, delay_x, destroyed, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IThreadPoolTimer := new Windows.System.Threading.IThreadPoolTimer;
            Retval.m_IThreadPoolTimer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ThreadPoolTimer

   function get_Period
   (
      this : in out ThreadPoolTimer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IThreadPoolTimer.all.get_Period (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Delay
   (
      this : in out ThreadPoolTimer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IThreadPoolTimer.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out ThreadPoolTimer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IThreadPoolTimer.all.Cancel;
   end;

   -----------------------------------------------------------------------------
   -- Delegate TimerDestroyedHandler

   function Invoke
   (
      this : access TimerDestroyedHandler_Delegate;
      timer : Windows.System.Threading.IThreadPoolTimer
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (timer);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate TimerElapsedHandler

   function Invoke
   (
      this : access TimerElapsedHandler_Delegate;
      timer : Windows.System.Threading.IThreadPoolTimer
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (timer);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate WorkItemHandler

   function Invoke
   (
      this : access WorkItemHandler_Delegate;
      operation : Windows.Foundation.IAsyncAction
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (operation);
      return Hr;
   end;

end;

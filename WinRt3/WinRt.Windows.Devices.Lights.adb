--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Lights is

   package IAsyncOperation_Lamp is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Lights.ILamp);
   package AsyncOperationCompletedHandler_Lamp is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Lights.ILamp);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IBuffer);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer);

   package IAsyncOperation_LampArray is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Lights.ILampArray);
   package AsyncOperationCompletedHandler_LampArray is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Lights.ILampArray);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Lamp

   procedure Initialize (this : in out Lamp) is
   begin
      null;
   end;

   procedure Finalize (this : in out Lamp) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILamp, ILamp_Ptr);
   begin
      if this.m_ILamp /= null then
         if this.m_ILamp.all /= null then
            RefCount := this.m_ILamp.all.Release;
            Free (this.m_ILamp);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Lamp

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Lights.Lamp");
      m_Factory        : access WinRt.Windows.Devices.Lights.ILampStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILampStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Lights.Lamp is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Lights.Lamp");
      m_Factory        : access WinRt.Windows.Devices.Lights.ILampStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Lamp.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Lamp.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Lights.ILamp;
      m_IID            : aliased WinRt.IID := (1386651133, 61654, 22833, (184, 225, 243, 128, 102, 215, 27, 242 )); -- Windows.Devices.Lights.Lamp;
      m_HandlerIID     : aliased WinRt.IID := (421170286, 24797, 23073, (165, 60, 191, 63, 148, 10, 29, 222 ));
      m_Handler        : AsyncOperationCompletedHandler_Lamp.Kind := new AsyncOperationCompletedHandler_Lamp.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Lamp.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Lamp.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Lamp.Kind_Delegate, AsyncOperationCompletedHandler_Lamp.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Lights.Lamp do
         Hr := RoGetActivationFactory (m_hString, IID_ILampStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILamp := new Windows.Devices.Lights.ILamp;
                     Retval.m_ILamp.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.Lights.Lamp is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Lights.Lamp");
      m_Factory        : access WinRt.Windows.Devices.Lights.ILampStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Lamp.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Lamp.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Lights.ILamp;
      m_IID            : aliased WinRt.IID := (1386651133, 61654, 22833, (184, 225, 243, 128, 102, 215, 27, 242 )); -- Windows.Devices.Lights.Lamp;
      m_HandlerIID     : aliased WinRt.IID := (421170286, 24797, 23073, (165, 60, 191, 63, 148, 10, 29, 222 ));
      m_Handler        : AsyncOperationCompletedHandler_Lamp.Kind := new AsyncOperationCompletedHandler_Lamp.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Lamp.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Lamp.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Lamp.Kind_Delegate, AsyncOperationCompletedHandler_Lamp.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Lights.Lamp do
         Hr := RoGetActivationFactory (m_hString, IID_ILampStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILamp := new Windows.Devices.Lights.ILamp;
                     Retval.m_ILamp.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Lamp

   function get_DeviceId
   (
      this : in out Lamp
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILamp.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out Lamp
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILamp.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out Lamp;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILamp.all.put_IsEnabled (value);
   end;

   function get_BrightnessLevel
   (
      this : in out Lamp
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ILamp.all.get_BrightnessLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BrightnessLevel
   (
      this : in out Lamp;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILamp.all.put_BrightnessLevel (value);
   end;

   function get_IsColorSettable
   (
      this : in out Lamp
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILamp.all.get_IsColorSettable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Color
   (
      this : in out Lamp
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ILamp.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out Lamp;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILamp.all.put_Color (value);
   end;

   function add_AvailabilityChanged
   (
      this : in out Lamp;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILamp.all.add_AvailabilityChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailabilityChanged
   (
      this : in out Lamp;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILamp.all.remove_AvailabilityChanged (token);
   end;

   procedure Close
   (
      this : in out Lamp
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Lights.ILamp_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILamp.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LampArray

   procedure Initialize (this : in out LampArray) is
   begin
      null;
   end;

   procedure Finalize (this : in out LampArray) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILampArray, ILampArray_Ptr);
   begin
      if this.m_ILampArray /= null then
         if this.m_ILampArray.all /= null then
            RefCount := this.m_ILampArray.all.Release;
            Free (this.m_ILampArray);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LampArray

   function GetDeviceSelector_LampArray
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Lights.LampArray");
      m_Factory        : access WinRt.Windows.Devices.Lights.ILampArrayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILampArrayStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync_LampArray
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Lights.LampArray is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Lights.LampArray");
      m_Factory        : access WinRt.Windows.Devices.Lights.ILampArrayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LampArray.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LampArray.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Lights.ILampArray;
      m_IID            : aliased WinRt.IID := (1050319104, 28337, 23985, (183, 120, 154, 100, 161, 101, 66, 248 )); -- Windows.Devices.Lights.LampArray;
      m_HandlerIID     : aliased WinRt.IID := (3953399259, 17071, 21688, (162, 243, 91, 52, 73, 76, 137, 114 ));
      m_Handler        : AsyncOperationCompletedHandler_LampArray.Kind := new AsyncOperationCompletedHandler_LampArray.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LampArray.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LampArray.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LampArray.Kind_Delegate, AsyncOperationCompletedHandler_LampArray.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Lights.LampArray do
         Hr := RoGetActivationFactory (m_hString, IID_ILampArrayStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILampArray := new Windows.Devices.Lights.ILampArray;
                     Retval.m_ILampArray.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LampArray

   function get_DeviceId
   (
      this : in out LampArray
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILampArray.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HardwareVendorId
   (
      this : in out LampArray
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ILampArray.all.get_HardwareVendorId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HardwareProductId
   (
      this : in out LampArray
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ILampArray.all.get_HardwareProductId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HardwareVersion
   (
      this : in out LampArray
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ILampArray.all.get_HardwareVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LampArrayKind
   (
      this : in out LampArray
   )
   return WinRt.Windows.Devices.Lights.LampArrayKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Lights.LampArrayKind;
   begin
      Hr := this.m_ILampArray.all.get_LampArrayKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LampCount
   (
      this : in out LampArray
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILampArray.all.get_LampCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinUpdateInterval
   (
      this : in out LampArray
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILampArray.all.get_MinUpdateInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BoundingBox
   (
      this : in out LampArray
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ILampArray.all.get_BoundingBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsEnabled
   (
      this : in out LampArray
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILampArray.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out LampArray;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.put_IsEnabled (value);
   end;

   function get_BrightnessLevel
   (
      this : in out LampArray
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ILampArray.all.get_BrightnessLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BrightnessLevel
   (
      this : in out LampArray;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.put_BrightnessLevel (value);
   end;

   function get_IsConnected
   (
      this : in out LampArray
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILampArray.all.get_IsConnected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportsVirtualKeys
   (
      this : in out LampArray
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILampArray.all.get_SupportsVirtualKeys (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetLampInfo
   (
      this : in out LampArray;
      lampIndex : WinRt.Int32
   )
   return WinRt.Windows.Devices.Lights.LampInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Lights.ILampInfo;
   begin
      return RetVal : WinRt.Windows.Devices.Lights.LampInfo do
         Hr := this.m_ILampArray.all.GetLampInfo (lampIndex, m_ComRetVal'Access);
         Retval.m_ILampInfo := new Windows.Devices.Lights.ILampInfo;
         Retval.m_ILampInfo.all := m_ComRetVal;
      end return;
   end;

   function GetIndicesForKey
   (
      this : in out LampArray;
      key : Windows.System.VirtualKey
   )
   return WinRt.Int32_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.GetIndicesForKey (key, m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Int32_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Int32 is new To_Ada_Type (WinRt.Int32, WinRt.Int32_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Int32 (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function GetIndicesForPurposes
   (
      this : in out LampArray;
      purposes : Windows.Devices.Lights.LampPurposes
   )
   return WinRt.Int32_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.GetIndicesForPurposes (purposes, m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Int32_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Int32 is new To_Ada_Type (WinRt.Int32, WinRt.Int32_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Int32 (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   procedure SetColor
   (
      this : in out LampArray;
      desiredColor : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.SetColor (desiredColor);
   end;

   procedure SetColorForIndex
   (
      this : in out LampArray;
      lampIndex : WinRt.Int32;
      desiredColor : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.SetColorForIndex (lampIndex, desiredColor);
   end;

   procedure SetSingleColorForIndices
   (
      this : in out LampArray;
      desiredColor : Windows.UI.Color;
      lampIndexes : WinRt.Int32_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_lampIndexes is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      Hr := this.m_ILampArray.all.SetSingleColorForIndices (desiredColor, WinRt.UInt32(lampIndexes'Length), Convert_lampIndexes (lampIndexes (lampIndexes'First)'Address));
   end;

   procedure SetColorsForIndices
   (
      this : in out LampArray;
      desiredColors : Windows.UI.Color_Array;
      lampIndexes : WinRt.Int32_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_desiredColors is new Ada.Unchecked_Conversion (Address, WinRt.Windows.UI.Color_Ptr);
      function Convert_lampIndexes is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      Hr := this.m_ILampArray.all.SetColorsForIndices (WinRt.UInt32(desiredColors'Length), Convert_desiredColors (desiredColors (desiredColors'First)'Address), WinRt.UInt32(lampIndexes'Length), Convert_lampIndexes (lampIndexes (lampIndexes'First)'Address));
   end;

   procedure SetColorsForKey
   (
      this : in out LampArray;
      desiredColor : Windows.UI.Color;
      key : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.SetColorsForKey (desiredColor, key);
   end;

   procedure SetColorsForKeys
   (
      this : in out LampArray;
      desiredColors : Windows.UI.Color_Array;
      keys : Windows.System.VirtualKey_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_desiredColors is new Ada.Unchecked_Conversion (Address, WinRt.Windows.UI.Color_Ptr);
      function Convert_keys is new Ada.Unchecked_Conversion (Address, WinRt.Windows.System.VirtualKey_Ptr);
   begin
      Hr := this.m_ILampArray.all.SetColorsForKeys (WinRt.UInt32(desiredColors'Length), Convert_desiredColors (desiredColors (desiredColors'First)'Address), WinRt.UInt32(keys'Length), Convert_keys (keys (keys'First)'Address));
   end;

   procedure SetColorsForPurposes
   (
      this : in out LampArray;
      desiredColor : Windows.UI.Color;
      purposes : Windows.Devices.Lights.LampPurposes
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILampArray.all.SetColorsForPurposes (desiredColor, purposes);
   end;

   procedure SendMessageAsync
   (
      this : in out LampArray;
      messageId : WinRt.Int32;
      message : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILampArray.all.SendMessageAsync (messageId, message, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function RequestMessageAsync
   (
      this : in out LampArray;
      messageId : WinRt.Int32
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILampArray.all.RequestMessageAsync (messageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LampAvailabilityChangedEventArgs

   procedure Initialize (this : in out LampAvailabilityChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LampAvailabilityChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILampAvailabilityChangedEventArgs, ILampAvailabilityChangedEventArgs_Ptr);
   begin
      if this.m_ILampAvailabilityChangedEventArgs /= null then
         if this.m_ILampAvailabilityChangedEventArgs.all /= null then
            RefCount := this.m_ILampAvailabilityChangedEventArgs.all.Release;
            Free (this.m_ILampAvailabilityChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LampAvailabilityChangedEventArgs

   function get_IsAvailable
   (
      this : in out LampAvailabilityChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILampAvailabilityChangedEventArgs.all.get_IsAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LampInfo

   procedure Initialize (this : in out LampInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out LampInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILampInfo, ILampInfo_Ptr);
   begin
      if this.m_ILampInfo /= null then
         if this.m_ILampInfo.all /= null then
            RefCount := this.m_ILampInfo.all.Release;
            Free (this.m_ILampInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LampInfo

   function get_Index
   (
      this : in out LampInfo
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILampInfo.all.get_Index (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Purposes
   (
      this : in out LampInfo
   )
   return WinRt.Windows.Devices.Lights.LampPurposes is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Lights.LampPurposes;
   begin
      Hr := this.m_ILampInfo.all.get_Purposes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out LampInfo
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ILampInfo.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RedLevelCount
   (
      this : in out LampInfo
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILampInfo.all.get_RedLevelCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GreenLevelCount
   (
      this : in out LampInfo
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILampInfo.all.get_GreenLevelCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BlueLevelCount
   (
      this : in out LampInfo
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILampInfo.all.get_BlueLevelCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GainLevelCount
   (
      this : in out LampInfo
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILampInfo.all.get_GainLevelCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FixedColor
   (
      this : in out LampInfo
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ILampInfo.all.get_FixedColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetNearestSupportedColor
   (
      this : in out LampInfo;
      desiredColor : Windows.UI.Color
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ILampInfo.all.GetNearestSupportedColor (desiredColor, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateLatency
   (
      this : in out LampInfo
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILampInfo.all.get_UpdateLatency (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

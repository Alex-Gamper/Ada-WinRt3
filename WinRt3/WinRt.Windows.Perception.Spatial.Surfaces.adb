--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics.DirectX;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Perception.Spatial.Surfaces is

   package IAsyncOperation_SpatialSurfaceMesh is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMesh);
   package AsyncOperationCompletedHandler_SpatialSurfaceMesh is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMesh);

   package IAsyncOperation_SpatialPerceptionAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus);
   package AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialSurfaceInfo

   procedure Initialize (this : in out SpatialSurfaceInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialSurfaceInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialSurfaceInfo, ISpatialSurfaceInfo_Ptr);
   begin
      if this.m_ISpatialSurfaceInfo /= null then
         if this.m_ISpatialSurfaceInfo.all /= null then
            RefCount := this.m_ISpatialSurfaceInfo.all.Release;
            Free (this.m_ISpatialSurfaceInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialSurfaceInfo

   function get_Id
   (
      this : in out SpatialSurfaceInfo
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ISpatialSurfaceInfo.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateTime
   (
      this : in out SpatialSurfaceInfo
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISpatialSurfaceInfo.all.get_UpdateTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetBounds
   (
      this : in out SpatialSurfaceInfo;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return IReference_SpatialBoundingOrientedBox.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_SpatialBoundingOrientedBox.Kind;
   begin
      Hr := this.m_ISpatialSurfaceInfo.all.TryGetBounds (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_SpatialBoundingOrientedBox (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function TryComputeLatestMeshAsync
   (
      this : in out SpatialSurfaceInfo;
      maxTrianglesPerCubicMeter : WinRt.Double
   )
   return WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpatialSurfaceMesh.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpatialSurfaceMesh.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMesh;
      m_IID            : aliased WinRt.IID := (4120088493, 43169, 24446, (148, 64, 189, 183, 129, 173, 38, 182 )); -- Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh;
      m_HandlerIID     : aliased WinRt.IID := (1182857206, 17605, 24518, (141, 81, 214, 150, 41, 21, 250, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind := new AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialSurfaceMesh.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind_Delegate, AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh do
         Hr := this.m_ISpatialSurfaceInfo.all.TryComputeLatestMeshAsync (maxTrianglesPerCubicMeter, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpatialSurfaceMesh := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMesh;
                  Retval.m_ISpatialSurfaceMesh.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryComputeLatestMeshAsync
   (
      this : in out SpatialSurfaceInfo;
      maxTrianglesPerCubicMeter : WinRt.Double;
      options : Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions'Class
   )
   return WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpatialSurfaceMesh.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpatialSurfaceMesh.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMesh;
      m_IID            : aliased WinRt.IID := (4120088493, 43169, 24446, (148, 64, 189, 183, 129, 173, 38, 182 )); -- Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh;
      m_HandlerIID     : aliased WinRt.IID := (1182857206, 17605, 24518, (141, 81, 214, 150, 41, 21, 250, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind := new AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialSurfaceMesh.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind_Delegate, AsyncOperationCompletedHandler_SpatialSurfaceMesh.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMesh do
         Hr := this.m_ISpatialSurfaceInfo.all.TryComputeLatestMeshAsync (maxTrianglesPerCubicMeter, options.m_ISpatialSurfaceMeshOptions.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpatialSurfaceMesh := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMesh;
                  Retval.m_ISpatialSurfaceMesh.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialSurfaceMesh

   procedure Initialize (this : in out SpatialSurfaceMesh) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialSurfaceMesh) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialSurfaceMesh, ISpatialSurfaceMesh_Ptr);
   begin
      if this.m_ISpatialSurfaceMesh /= null then
         if this.m_ISpatialSurfaceMesh.all /= null then
            RefCount := this.m_ISpatialSurfaceMesh.all.Release;
            Free (this.m_ISpatialSurfaceMesh);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialSurfaceMesh

   function get_SurfaceInfo
   (
      this : in out SpatialSurfaceMesh
   )
   return WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.Surfaces.ISpatialSurfaceInfo;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceInfo do
         Hr := this.m_ISpatialSurfaceMesh.all.get_SurfaceInfo (m_ComRetVal'Access);
         Retval.m_ISpatialSurfaceInfo := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceInfo;
         Retval.m_ISpatialSurfaceInfo.all := m_ComRetVal;
      end return;
   end;

   function get_CoordinateSystem
   (
      this : in out SpatialSurfaceMesh
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialSurfaceMesh.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function get_TriangleIndices
   (
      this : in out SpatialSurfaceMesh
   )
   return WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshBuffer;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer do
         Hr := this.m_ISpatialSurfaceMesh.all.get_TriangleIndices (m_ComRetVal'Access);
         Retval.m_ISpatialSurfaceMeshBuffer := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshBuffer;
         Retval.m_ISpatialSurfaceMeshBuffer.all := m_ComRetVal;
      end return;
   end;

   function get_VertexPositions
   (
      this : in out SpatialSurfaceMesh
   )
   return WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshBuffer;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer do
         Hr := this.m_ISpatialSurfaceMesh.all.get_VertexPositions (m_ComRetVal'Access);
         Retval.m_ISpatialSurfaceMeshBuffer := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshBuffer;
         Retval.m_ISpatialSurfaceMeshBuffer.all := m_ComRetVal;
      end return;
   end;

   function get_VertexPositionScale
   (
      this : in out SpatialSurfaceMesh
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialSurfaceMesh.all.get_VertexPositionScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VertexNormals
   (
      this : in out SpatialSurfaceMesh
   )
   return WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshBuffer;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshBuffer do
         Hr := this.m_ISpatialSurfaceMesh.all.get_VertexNormals (m_ComRetVal'Access);
         Retval.m_ISpatialSurfaceMeshBuffer := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshBuffer;
         Retval.m_ISpatialSurfaceMeshBuffer.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialSurfaceMeshBuffer

   procedure Initialize (this : in out SpatialSurfaceMeshBuffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialSurfaceMeshBuffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialSurfaceMeshBuffer, ISpatialSurfaceMeshBuffer_Ptr);
   begin
      if this.m_ISpatialSurfaceMeshBuffer /= null then
         if this.m_ISpatialSurfaceMeshBuffer.all /= null then
            RefCount := this.m_ISpatialSurfaceMeshBuffer.all.Release;
            Free (this.m_ISpatialSurfaceMeshBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialSurfaceMeshBuffer

   function get_Format
   (
      this : in out SpatialSurfaceMeshBuffer
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_ISpatialSurfaceMeshBuffer.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Stride
   (
      this : in out SpatialSurfaceMeshBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISpatialSurfaceMeshBuffer.all.get_Stride (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ElementCount
   (
      this : in out SpatialSurfaceMeshBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISpatialSurfaceMeshBuffer.all.get_ElementCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out SpatialSurfaceMeshBuffer
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISpatialSurfaceMeshBuffer.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialSurfaceMeshOptions

   procedure Initialize (this : in out SpatialSurfaceMeshOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialSurfaceMeshOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptions_Ptr);
   begin
      if this.m_ISpatialSurfaceMeshOptions /= null then
         if this.m_ISpatialSurfaceMeshOptions.all /= null then
            RefCount := this.m_ISpatialSurfaceMeshOptions.all.Release;
            Free (this.m_ISpatialSurfaceMeshOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpatialSurfaceMeshOptions

   function Constructor return SpatialSurfaceMeshOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions");
      m_ComRetVal  : aliased Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshOptions;
   begin
      return RetVal : SpatialSurfaceMeshOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISpatialSurfaceMeshOptions := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshOptions;
            Retval.m_ISpatialSurfaceMeshOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialSurfaceMeshOptions

   function get_SupportedVertexPositionFormats
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions");
      m_Factory        : access WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshOptionsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialSurfaceMeshOptionsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SupportedVertexPositionFormats (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SupportedTriangleIndexFormats
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions");
      m_Factory        : access WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshOptionsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialSurfaceMeshOptionsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SupportedTriangleIndexFormats (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SupportedVertexNormalFormats
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceMeshOptions");
      m_Factory        : access WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceMeshOptionsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialSurfaceMeshOptionsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SupportedVertexNormalFormats (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialSurfaceMeshOptions

   function get_VertexPositionFormat
   (
      this : in out SpatialSurfaceMeshOptions
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.get_VertexPositionFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VertexPositionFormat
   (
      this : in out SpatialSurfaceMeshOptions;
      value : Windows.Graphics.DirectX.DirectXPixelFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.put_VertexPositionFormat (value);
   end;

   function get_TriangleIndexFormat
   (
      this : in out SpatialSurfaceMeshOptions
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.get_TriangleIndexFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TriangleIndexFormat
   (
      this : in out SpatialSurfaceMeshOptions;
      value : Windows.Graphics.DirectX.DirectXPixelFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.put_TriangleIndexFormat (value);
   end;

   function get_VertexNormalFormat
   (
      this : in out SpatialSurfaceMeshOptions
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.get_VertexNormalFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VertexNormalFormat
   (
      this : in out SpatialSurfaceMeshOptions;
      value : Windows.Graphics.DirectX.DirectXPixelFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.put_VertexNormalFormat (value);
   end;

   function get_IncludeVertexNormals
   (
      this : in out SpatialSurfaceMeshOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.get_IncludeVertexNormals (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncludeVertexNormals
   (
      this : in out SpatialSurfaceMeshOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceMeshOptions.all.put_IncludeVertexNormals (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialSurfaceObserver

   procedure Initialize (this : in out SpatialSurfaceObserver) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialSurfaceObserver) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialSurfaceObserver, ISpatialSurfaceObserver_Ptr);
   begin
      if this.m_ISpatialSurfaceObserver /= null then
         if this.m_ISpatialSurfaceObserver.all /= null then
            RefCount := this.m_ISpatialSurfaceObserver.all.Release;
            Free (this.m_ISpatialSurfaceObserver);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpatialSurfaceObserver

   function Constructor return SpatialSurfaceObserver is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver");
      m_ComRetVal  : aliased Windows.Perception.Spatial.Surfaces.ISpatialSurfaceObserver;
   begin
      return RetVal : SpatialSurfaceObserver do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISpatialSurfaceObserver := new Windows.Perception.Spatial.Surfaces.ISpatialSurfaceObserver;
            Retval.m_ISpatialSurfaceObserver.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialSurfaceObserver

   function RequestAccessAsync
   return WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver");
      m_Factory        : access WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceObserverStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpatialPerceptionAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpatialPerceptionAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus;
      m_IID            : aliased WinRt.IID := (3022377254, 4201, 22079, (168, 99, 68, 163, 10, 143, 7, 29 )); -- Windows.Perception.Spatial.SpatialPerceptionAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1827493064, 30345, 21082, (128, 225, 149, 106, 157, 133, 205, 131 ));
      m_Handler        : AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind := new AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialPerceptionAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialSurfaceObserverStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Surfaces.SpatialSurfaceObserver");
      m_Factory        : access WinRt.Windows.Perception.Spatial.Surfaces.ISpatialSurfaceObserverStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialSurfaceObserverStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialSurfaceObserver

   function GetObservedSurfaces
   (
      this : in out SpatialSurfaceObserver
   )
   return IMapView_Guid_ISpatialSurfaceInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_ISpatialSurfaceInfo.Kind;
   begin
      Hr := this.m_ISpatialSurfaceObserver.all.GetObservedSurfaces (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_Guid_ISpatialSurfaceInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure SetBoundingVolume
   (
      this : in out SpatialSurfaceObserver;
      bounds : Windows.Perception.Spatial.SpatialBoundingVolume'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceObserver.all.SetBoundingVolume (bounds.m_ISpatialBoundingVolume.all);
   end;

   procedure SetBoundingVolumes
   (
      this : in out SpatialSurfaceObserver;
      bounds : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceObserver.all.SetBoundingVolumes (bounds);
   end;

   function add_ObservedSurfacesChanged
   (
      this : in out SpatialSurfaceObserver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialSurfaceObserver.all.add_ObservedSurfacesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ObservedSurfacesChanged
   (
      this : in out SpatialSurfaceObserver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialSurfaceObserver.all.remove_ObservedSurfacesChanged (token);
   end;

end;

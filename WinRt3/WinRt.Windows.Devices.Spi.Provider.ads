--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Devices.Spi.Provider is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IProviderSpiConnectionSettings_Interface is interface and WinRt.IInspectable_Interface;
   type IProviderSpiConnectionSettings is access IProviderSpiConnectionSettings_Interface'Class;
   type IProviderSpiConnectionSettings_Ptr is access all IProviderSpiConnectionSettings;

   type IProviderSpiConnectionSettingsFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IProviderSpiConnectionSettingsFactory is access IProviderSpiConnectionSettingsFactory_Interface'Class;

   type ISpiControllerProvider_Interface is interface and WinRt.IInspectable_Interface;
   type ISpiControllerProvider is access ISpiControllerProvider_Interface'Class;

   type ISpiDeviceProvider_Interface is interface and WinRt.IInspectable_Interface;
   type ISpiDeviceProvider is access ISpiDeviceProvider_Interface'Class;

   type ISpiProvider_Interface is interface and WinRt.IInspectable_Interface;
   type ISpiProvider is access ISpiProvider_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type ProviderSpiConnectionSettings is new Ada.Finalization.Limited_Controlled with
      record
         m_IProviderSpiConnectionSettings : access Windows.Devices.Spi.Provider.IProviderSpiConnectionSettings;
      end record;
   type ProviderSpiConnectionSettings_Ptr is access all ProviderSpiConnectionSettings;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type ProviderSpiMode is (
      Mode0_e,
      Mode1_e,
      Mode2_e,
      Mode3_e
   );
   for ProviderSpiMode use (
      Mode0_e => 0,
      Mode1_e => 1,
      Mode2_e => 2,
      Mode3_e => 3
   );
   type ProviderSpiMode_Ptr is access ProviderSpiMode;

   type ProviderSpiSharingMode is (
      Exclusive_e,
      Shared_e
   );
   for ProviderSpiSharingMode use (
      Exclusive_e => 0,
      Shared_e => 1
   );
   type ProviderSpiSharingMode_Ptr is access ProviderSpiSharingMode;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IProviderSpiConnectionSettings is interface and WinRt.IInspectable;

      function get_ChipSelectLine
      (
         this : access IProviderSpiConnectionSettings_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_ChipSelectLine
      (
         this : access IProviderSpiConnectionSettings_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_Mode
      (
         this : access IProviderSpiConnectionSettings_Interface;
         RetVal : access Windows.Devices.Spi.Provider.ProviderSpiMode
      )
      return WinRt.Hresult is abstract;

      function put_Mode
      (
         this : access IProviderSpiConnectionSettings_Interface;
         value : Windows.Devices.Spi.Provider.ProviderSpiMode
      )
      return WinRt.Hresult is abstract;

      function get_DataBitLength
      (
         this : access IProviderSpiConnectionSettings_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_DataBitLength
      (
         this : access IProviderSpiConnectionSettings_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_ClockFrequency
      (
         this : access IProviderSpiConnectionSettings_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_ClockFrequency
      (
         this : access IProviderSpiConnectionSettings_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_SharingMode
      (
         this : access IProviderSpiConnectionSettings_Interface;
         RetVal : access Windows.Devices.Spi.Provider.ProviderSpiSharingMode
      )
      return WinRt.Hresult is abstract;

      function put_SharingMode
      (
         this : access IProviderSpiConnectionSettings_Interface;
         value : Windows.Devices.Spi.Provider.ProviderSpiSharingMode
      )
      return WinRt.Hresult is abstract;

      IID_IProviderSpiConnectionSettings : aliased WinRt.IID := (4127409488, 42306, 20160, (150, 1, 164, 221, 104, 248, 105, 123 ));

   -----------------------------------------------------------------------------
   -- type IProviderSpiConnectionSettingsFactory is interface and WinRt.IInspectable;

      function Create
      (
         this : access IProviderSpiConnectionSettingsFactory_Interface;
         chipSelectLine : WinRt.Int32;
         RetVal : access Windows.Devices.Spi.Provider.IProviderSpiConnectionSettings
      )
      return WinRt.Hresult is abstract;

      IID_IProviderSpiConnectionSettingsFactory : aliased WinRt.IID := (1715825498, 3193, 17379, (159, 60, 229, 151, 128, 172, 24, 250 ));

   -----------------------------------------------------------------------------
   -- type ISpiControllerProvider is interface and WinRt.IInspectable;

      function GetDeviceProvider
      (
         this : access ISpiControllerProvider_Interface;
         settings : Windows.Devices.Spi.Provider.IProviderSpiConnectionSettings;
         RetVal : access Windows.Devices.Spi.Provider.ISpiDeviceProvider
      )
      return WinRt.Hresult is abstract;

      IID_ISpiControllerProvider : aliased WinRt.IID := (3244844292, 718, 16934, (163, 133, 79, 17, 251, 4, 180, 27 ));

   -----------------------------------------------------------------------------
   -- type ISpiDeviceProvider is interface and WinRt.IInspectable;

      function get_DeviceId
      (
         this : access ISpiDeviceProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_ConnectionSettings
      (
         this : access ISpiDeviceProvider_Interface;
         RetVal : access Windows.Devices.Spi.Provider.IProviderSpiConnectionSettings
      )
      return WinRt.Hresult is abstract;

      function Write
      (
         this : access ISpiDeviceProvider_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function Read
      (
         this : access ISpiDeviceProvider_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function TransferSequential
      (
         this : access ISpiDeviceProvider_Interface;
         writeBufferSize : WinRt.UInt32;
         writeBuffer : WinRt.Byte_Ptr;
         readBufferSize : WinRt.UInt32;
         readBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function TransferFullDuplex
      (
         this : access ISpiDeviceProvider_Interface;
         writeBufferSize : WinRt.UInt32;
         writeBuffer : WinRt.Byte_Ptr;
         readBufferSize : WinRt.UInt32;
         readBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_ISpiDeviceProvider : aliased WinRt.IID := (219952195, 12363, 16476, (180, 247, 245, 171, 16, 116, 70, 30 ));

   -----------------------------------------------------------------------------
   -- type ISpiProvider is interface and WinRt.IInspectable;

      function GetControllersAsync
      (
         this : access ISpiProvider_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ISpiProvider : aliased WinRt.IID := (2528403938, 30676, 18638, (170, 160, 117, 113, 90, 131, 98, 207 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProviderSpiConnectionSettings

   overriding procedure Initialize (this : in out ProviderSpiConnectionSettings);
   overriding procedure Finalize (this : in out ProviderSpiConnectionSettings);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProviderSpiConnectionSettings

   function Constructor
   (
      chipSelectLine : WinRt.Int32
   )
   return ProviderSpiConnectionSettings;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProviderSpiConnectionSettings

   function get_ChipSelectLine
   (
      this : in out ProviderSpiConnectionSettings
   )
   return WinRt.Int32;

   procedure put_ChipSelectLine
   (
      this : in out ProviderSpiConnectionSettings;
      value : WinRt.Int32
   );

   function get_Mode
   (
      this : in out ProviderSpiConnectionSettings
   )
   return WinRt.Windows.Devices.Spi.Provider.ProviderSpiMode;

   procedure put_Mode
   (
      this : in out ProviderSpiConnectionSettings;
      value : Windows.Devices.Spi.Provider.ProviderSpiMode
   );

   function get_DataBitLength
   (
      this : in out ProviderSpiConnectionSettings
   )
   return WinRt.Int32;

   procedure put_DataBitLength
   (
      this : in out ProviderSpiConnectionSettings;
      value : WinRt.Int32
   );

   function get_ClockFrequency
   (
      this : in out ProviderSpiConnectionSettings
   )
   return WinRt.Int32;

   procedure put_ClockFrequency
   (
      this : in out ProviderSpiConnectionSettings;
      value : WinRt.Int32
   );

   function get_SharingMode
   (
      this : in out ProviderSpiConnectionSettings
   )
   return WinRt.Windows.Devices.Spi.Provider.ProviderSpiSharingMode;

   procedure put_SharingMode
   (
      this : in out ProviderSpiConnectionSettings;
      value : Windows.Devices.Spi.Provider.ProviderSpiSharingMode
   );

end;

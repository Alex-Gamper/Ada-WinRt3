--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.SocialInfo.Provider is

   package IAsyncOperation_SocialFeedUpdater is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialFeedUpdater);
   package AsyncOperationCompletedHandler_SocialFeedUpdater is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialFeedUpdater);

   package IAsyncOperation_SocialDashboardItemUpdater is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialDashboardItemUpdater);
   package AsyncOperationCompletedHandler_SocialDashboardItemUpdater is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialDashboardItemUpdater);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialDashboardItemUpdater

   procedure Initialize (this : in out SocialDashboardItemUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialDashboardItemUpdater) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialDashboardItemUpdater, ISocialDashboardItemUpdater_Ptr);
   begin
      if this.m_ISocialDashboardItemUpdater /= null then
         if this.m_ISocialDashboardItemUpdater.all /= null then
            RefCount := this.m_ISocialDashboardItemUpdater.all.Release;
            Free (this.m_ISocialDashboardItemUpdater);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialDashboardItemUpdater

   function get_OwnerRemoteId
   (
      this : in out SocialDashboardItemUpdater
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialDashboardItemUpdater.all.get_OwnerRemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Content
   (
      this : in out SocialDashboardItemUpdater
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent do
         Hr := this.m_ISocialDashboardItemUpdater.all.get_Content (m_ComRetVal'Access);
         Retval.m_ISocialFeedContent := new Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
         Retval.m_ISocialFeedContent.all := m_ComRetVal;
      end return;
   end;

   function get_Timestamp
   (
      this : in out SocialDashboardItemUpdater
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISocialDashboardItemUpdater.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Timestamp
   (
      this : in out SocialDashboardItemUpdater;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialDashboardItemUpdater.all.put_Timestamp (value);
   end;

   procedure put_Thumbnail
   (
      this : in out SocialDashboardItemUpdater;
      value : Windows.ApplicationModel.SocialInfo.SocialItemThumbnail'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialDashboardItemUpdater.all.put_Thumbnail (value.m_ISocialItemThumbnail.all);
   end;

   function get_Thumbnail
   (
      this : in out SocialDashboardItemUpdater
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialItemThumbnail;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialItemThumbnail do
         Hr := this.m_ISocialDashboardItemUpdater.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_ISocialItemThumbnail := new Windows.ApplicationModel.SocialInfo.ISocialItemThumbnail;
         Retval.m_ISocialItemThumbnail.all := m_ComRetVal;
      end return;
   end;

   procedure CommitAsync
   (
      this : in out SocialDashboardItemUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISocialDashboardItemUpdater.all.CommitAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_TargetUri
   (
      this : in out SocialDashboardItemUpdater
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialDashboardItemUpdater.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialDashboardItemUpdater;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialDashboardItemUpdater.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialFeedUpdater

   procedure Initialize (this : in out SocialFeedUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialFeedUpdater) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialFeedUpdater, ISocialFeedUpdater_Ptr);
   begin
      if this.m_ISocialFeedUpdater /= null then
         if this.m_ISocialFeedUpdater.all /= null then
            RefCount := this.m_ISocialFeedUpdater.all.Release;
            Free (this.m_ISocialFeedUpdater);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialFeedUpdater

   function get_OwnerRemoteId
   (
      this : in out SocialFeedUpdater
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialFeedUpdater.all.get_OwnerRemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out SocialFeedUpdater
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.SocialFeedKind;
   begin
      Hr := this.m_ISocialFeedUpdater.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Items
   (
      this : in out SocialFeedUpdater
   )
   return IVector_ISocialFeedItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISocialFeedItem.Kind;
   begin
      Hr := this.m_ISocialFeedUpdater.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISocialFeedItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure CommitAsync
   (
      this : in out SocialFeedUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISocialFeedUpdater.all.CommitAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SocialInfoProviderManager is

      function CreateSocialFeedUpdaterAsync
      (
         kind : Windows.ApplicationModel.SocialInfo.SocialFeedKind;
         mode : Windows.ApplicationModel.SocialInfo.SocialFeedUpdateMode;
         ownerRemoteId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.SocialInfo.Provider.SocialFeedUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.Provider.SocialInfoProviderManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialInfoProviderManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_ownerRemoteId : WinRt.HString := To_HString (ownerRemoteId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_SocialFeedUpdater.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_SocialFeedUpdater.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialFeedUpdater;
         m_IID            : aliased WinRt.IID := (1325026729, 50518, 23028, (157, 153, 231, 128, 28, 91, 15, 69 )); -- Windows.ApplicationModel.SocialInfo.Provider.SocialFeedUpdater;
         m_HandlerIID     : aliased WinRt.IID := (186807412, 32960, 24371, (159, 249, 35, 68, 3, 171, 214, 250 ));
         m_Handler        : AsyncOperationCompletedHandler_SocialFeedUpdater.Kind := new AsyncOperationCompletedHandler_SocialFeedUpdater.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SocialFeedUpdater.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SocialFeedUpdater.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SocialFeedUpdater.Kind_Delegate, AsyncOperationCompletedHandler_SocialFeedUpdater.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.Provider.SocialFeedUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ISocialInfoProviderManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateSocialFeedUpdaterAsync (kind, mode, HStr_ownerRemoteId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ISocialFeedUpdater := new Windows.ApplicationModel.SocialInfo.Provider.ISocialFeedUpdater;
                        Retval.m_ISocialFeedUpdater.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_ownerRemoteId);
         end return;
      end;

      function CreateDashboardItemUpdaterAsync
      (
         ownerRemoteId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.SocialInfo.Provider.SocialDashboardItemUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.Provider.SocialInfoProviderManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialInfoProviderManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_ownerRemoteId : WinRt.HString := To_HString (ownerRemoteId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_SocialDashboardItemUpdater.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_SocialDashboardItemUpdater.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialDashboardItemUpdater;
         m_IID            : aliased WinRt.IID := (2344397220, 42236, 24546, (182, 177, 14, 90, 117, 208, 91, 7 )); -- Windows.ApplicationModel.SocialInfo.Provider.SocialDashboardItemUpdater;
         m_HandlerIID     : aliased WinRt.IID := (869259690, 27708, 20703, (187, 200, 52, 194, 42, 14, 91, 107 ));
         m_Handler        : AsyncOperationCompletedHandler_SocialDashboardItemUpdater.Kind := new AsyncOperationCompletedHandler_SocialDashboardItemUpdater.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SocialDashboardItemUpdater.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SocialDashboardItemUpdater.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SocialDashboardItemUpdater.Kind_Delegate, AsyncOperationCompletedHandler_SocialDashboardItemUpdater.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.Provider.SocialDashboardItemUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ISocialInfoProviderManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateDashboardItemUpdaterAsync (HStr_ownerRemoteId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ISocialDashboardItemUpdater := new Windows.ApplicationModel.SocialInfo.Provider.ISocialDashboardItemUpdater;
                        Retval.m_ISocialDashboardItemUpdater.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_ownerRemoteId);
         end return;
      end;

      procedure UpdateBadgeCountValue
      (
         itemRemoteId : WinRt.WString;
         newCount : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.Provider.SocialInfoProviderManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialInfoProviderManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_itemRemoteId : WinRt.HString := To_HString (itemRemoteId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISocialInfoProviderManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UpdateBadgeCountValue (HStr_itemRemoteId, newCount);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_itemRemoteId);
      end;

      procedure ReportNewContentAvailable
      (
         contactRemoteId : WinRt.WString;
         kind : Windows.ApplicationModel.SocialInfo.SocialFeedKind
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.Provider.SocialInfoProviderManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialInfoProviderManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_contactRemoteId : WinRt.HString := To_HString (contactRemoteId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISocialInfoProviderManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ReportNewContentAvailable (HStr_contactRemoteId, kind);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contactRemoteId);
      end;

      function ProvisionAsync
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.Provider.SocialInfoProviderManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialInfoProviderManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISocialInfoProviderManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ProvisionAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure DeprovisionAsync is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.Provider.SocialInfoProviderManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.SocialInfo.Provider.ISocialInfoProviderManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISocialInfoProviderManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeprovisionAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end SocialInfoProviderManager;

end;

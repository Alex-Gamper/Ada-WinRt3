--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Search.Core is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RequestingFocusOnKeyboardInputEventArgs

   procedure Initialize (this : in out RequestingFocusOnKeyboardInputEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RequestingFocusOnKeyboardInputEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRequestingFocusOnKeyboardInputEventArgs, IRequestingFocusOnKeyboardInputEventArgs_Ptr);
   begin
      if this.m_IRequestingFocusOnKeyboardInputEventArgs /= null then
         if this.m_IRequestingFocusOnKeyboardInputEventArgs.all /= null then
            RefCount := this.m_IRequestingFocusOnKeyboardInputEventArgs.all.Release;
            Free (this.m_IRequestingFocusOnKeyboardInputEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RequestingFocusOnKeyboardInputEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchSuggestion

   procedure Initialize (this : in out SearchSuggestion) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchSuggestion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchSuggestion, ISearchSuggestion_Ptr);
   begin
      if this.m_ISearchSuggestion /= null then
         if this.m_ISearchSuggestion.all /= null then
            RefCount := this.m_ISearchSuggestion.all.Release;
            Free (this.m_ISearchSuggestion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchSuggestion

   function get_Kind
   (
      this : in out SearchSuggestion
   )
   return WinRt.Windows.ApplicationModel.Search.Core.SearchSuggestionKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.Core.SearchSuggestionKind;
   begin
      Hr := this.m_ISearchSuggestion.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out SearchSuggestion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestion.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Tag
   (
      this : in out SearchSuggestion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestion.all.get_Tag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DetailText
   (
      this : in out SearchSuggestion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestion.all.get_DetailText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Image
   (
      this : in out SearchSuggestion
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_ISearchSuggestion.all.get_Image (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImageAlternateText
   (
      this : in out SearchSuggestion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestion.all.get_ImageAlternateText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchSuggestionManager

   procedure Initialize (this : in out SearchSuggestionManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchSuggestionManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchSuggestionManager, ISearchSuggestionManager_Ptr);
   begin
      if this.m_ISearchSuggestionManager /= null then
         if this.m_ISearchSuggestionManager.all /= null then
            RefCount := this.m_ISearchSuggestionManager.all.Release;
            Free (this.m_ISearchSuggestionManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SearchSuggestionManager

   function Constructor return SearchSuggestionManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Search.Core.SearchSuggestionManager");
      m_ComRetVal  : aliased Windows.ApplicationModel.Search.Core.ISearchSuggestionManager;
   begin
      return RetVal : SearchSuggestionManager do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISearchSuggestionManager := new Windows.ApplicationModel.Search.Core.ISearchSuggestionManager;
            Retval.m_ISearchSuggestionManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchSuggestionManager

   function get_SearchHistoryEnabled
   (
      this : in out SearchSuggestionManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchSuggestionManager.all.get_SearchHistoryEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SearchHistoryEnabled
   (
      this : in out SearchSuggestionManager;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionManager.all.put_SearchHistoryEnabled (value);
   end;

   function get_SearchHistoryContext
   (
      this : in out SearchSuggestionManager
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestionManager.all.get_SearchHistoryContext (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SearchHistoryContext
   (
      this : in out SearchSuggestionManager;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISearchSuggestionManager.all.put_SearchHistoryContext (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetLocalContentSuggestionSettings
   (
      this : in out SearchSuggestionManager;
      settings : Windows.ApplicationModel.Search.LocalContentSuggestionSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionManager.all.SetLocalContentSuggestionSettings (settings.m_ILocalContentSuggestionSettings.all);
   end;

   procedure SetQuery
   (
      this : in out SearchSuggestionManager;
      queryText : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_queryText : WinRt.HString := To_HString (queryText);
   begin
      Hr := this.m_ISearchSuggestionManager.all.SetQuery (HStr_queryText);
      Hr := WindowsDeleteString (HStr_queryText);
   end;

   procedure SetQuery
   (
      this : in out SearchSuggestionManager;
      queryText : WinRt.WString;
      language : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_queryText : WinRt.HString := To_HString (queryText);
      HStr_language : WinRt.HString := To_HString (language);
   begin
      Hr := this.m_ISearchSuggestionManager.all.SetQuery (HStr_queryText, HStr_language);
      Hr := WindowsDeleteString (HStr_queryText);
      Hr := WindowsDeleteString (HStr_language);
   end;

   procedure SetQuery
   (
      this : in out SearchSuggestionManager;
      queryText : WinRt.WString;
      language : WinRt.WString;
      linguisticDetails : Windows.ApplicationModel.Search.SearchQueryLinguisticDetails'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_queryText : WinRt.HString := To_HString (queryText);
      HStr_language : WinRt.HString := To_HString (language);
   begin
      Hr := this.m_ISearchSuggestionManager.all.SetQuery (HStr_queryText, HStr_language, linguisticDetails.m_ISearchQueryLinguisticDetails.all);
      Hr := WindowsDeleteString (HStr_queryText);
      Hr := WindowsDeleteString (HStr_language);
   end;

   function get_Suggestions
   (
      this : in out SearchSuggestionManager
   )
   return IObservableVector_ISearchSuggestion.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IObservableVector_ISearchSuggestion.Kind;
   begin
      Hr := this.m_ISearchSuggestionManager.all.get_Suggestions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IObservableVector_ISearchSuggestion (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure AddToHistory
   (
      this : in out SearchSuggestionManager;
      queryText : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_queryText : WinRt.HString := To_HString (queryText);
   begin
      Hr := this.m_ISearchSuggestionManager.all.AddToHistory (HStr_queryText);
      Hr := WindowsDeleteString (HStr_queryText);
   end;

   procedure AddToHistory
   (
      this : in out SearchSuggestionManager;
      queryText : WinRt.WString;
      language : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_queryText : WinRt.HString := To_HString (queryText);
      HStr_language : WinRt.HString := To_HString (language);
   begin
      Hr := this.m_ISearchSuggestionManager.all.AddToHistory (HStr_queryText, HStr_language);
      Hr := WindowsDeleteString (HStr_queryText);
      Hr := WindowsDeleteString (HStr_language);
   end;

   procedure ClearHistory
   (
      this : in out SearchSuggestionManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionManager.all.ClearHistory;
   end;

   function add_SuggestionsRequested
   (
      this : in out SearchSuggestionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchSuggestionManager.all.add_SuggestionsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SuggestionsRequested
   (
      this : in out SearchSuggestionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionManager.all.remove_SuggestionsRequested (token);
   end;

   function add_RequestingFocusOnKeyboardInput
   (
      this : in out SearchSuggestionManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchSuggestionManager.all.add_RequestingFocusOnKeyboardInput (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RequestingFocusOnKeyboardInput
   (
      this : in out SearchSuggestionManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionManager.all.remove_RequestingFocusOnKeyboardInput (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchSuggestionsRequestedEventArgs

   procedure Initialize (this : in out SearchSuggestionsRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchSuggestionsRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchSuggestionsRequestedEventArgs, ISearchSuggestionsRequestedEventArgs_Ptr);
   begin
      if this.m_ISearchSuggestionsRequestedEventArgs /= null then
         if this.m_ISearchSuggestionsRequestedEventArgs.all /= null then
            RefCount := this.m_ISearchSuggestionsRequestedEventArgs.all.Release;
            Free (this.m_ISearchSuggestionsRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchSuggestionsRequestedEventArgs

   function get_QueryText
   (
      this : in out SearchSuggestionsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestionsRequestedEventArgs.all.get_QueryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out SearchSuggestionsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchSuggestionsRequestedEventArgs.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LinguisticDetails
   (
      this : in out SearchSuggestionsRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchQueryLinguisticDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchQueryLinguisticDetails;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchQueryLinguisticDetails do
         Hr := this.m_ISearchSuggestionsRequestedEventArgs.all.get_LinguisticDetails (m_ComRetVal'Access);
         Retval.m_ISearchQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchQueryLinguisticDetails;
         Retval.m_ISearchQueryLinguisticDetails.all := m_ComRetVal;
      end return;
   end;

   function get_Request
   (
      this : in out SearchSuggestionsRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchSuggestionsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchSuggestionsRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchSuggestionsRequest do
         Hr := this.m_ISearchSuggestionsRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_ISearchSuggestionsRequest := new Windows.ApplicationModel.Search.ISearchSuggestionsRequest;
         Retval.m_ISearchSuggestionsRequest.all := m_ComRetVal;
      end return;
   end;

end;

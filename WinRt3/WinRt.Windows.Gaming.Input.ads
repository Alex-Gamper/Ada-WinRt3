--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with WinRt.Windows.Devices.Haptics;
limited with WinRt.Windows.Devices.Power;
with WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
limited with WinRt.Windows.Gaming.Input.ForceFeedback;
limited with WinRt.Windows.System;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Gaming.Input is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IArcadeStick_Interface is interface and WinRt.IInspectable_Interface;
   type IArcadeStick is access IArcadeStick_Interface'Class;
   type IArcadeStick_Ptr is access all IArcadeStick;

   type IArcadeStickStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IArcadeStickStatics is access IArcadeStickStatics_Interface'Class;

   type IArcadeStickStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IArcadeStickStatics2 is access IArcadeStickStatics2_Interface'Class;

   type IFlightStick_Interface is interface and WinRt.IInspectable_Interface;
   type IFlightStick is access IFlightStick_Interface'Class;
   type IFlightStick_Ptr is access all IFlightStick;

   type IFlightStickStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IFlightStickStatics is access IFlightStickStatics_Interface'Class;

   type IGameController_Interface is interface and WinRt.IInspectable_Interface;
   type IGameController is access IGameController_Interface'Class;

   type IGameControllerBatteryInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IGameControllerBatteryInfo is access IGameControllerBatteryInfo_Interface'Class;

   type IGamepad_Interface is interface and WinRt.IInspectable_Interface;
   type IGamepad is access IGamepad_Interface'Class;
   type IGamepad_Ptr is access all IGamepad;

   type IGamepad2_Interface is interface and WinRt.IInspectable_Interface;
   type IGamepad2 is access IGamepad2_Interface'Class;

   type IGamepadStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IGamepadStatics is access IGamepadStatics_Interface'Class;

   type IGamepadStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IGamepadStatics2 is access IGamepadStatics2_Interface'Class;

   type IHeadset_Interface is interface and WinRt.IInspectable_Interface;
   type IHeadset is access IHeadset_Interface'Class;
   type IHeadset_Ptr is access all IHeadset;

   type IRacingWheel_Interface is interface and WinRt.IInspectable_Interface;
   type IRacingWheel is access IRacingWheel_Interface'Class;
   type IRacingWheel_Ptr is access all IRacingWheel;

   type IRacingWheelStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IRacingWheelStatics is access IRacingWheelStatics_Interface'Class;

   type IRacingWheelStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IRacingWheelStatics2 is access IRacingWheelStatics2_Interface'Class;

   type IRawGameController_Interface is interface and WinRt.IInspectable_Interface;
   type IRawGameController is access IRawGameController_Interface'Class;
   type IRawGameController_Ptr is access all IRawGameController;

   type IRawGameController2_Interface is interface and WinRt.IInspectable_Interface;
   type IRawGameController2 is access IRawGameController2_Interface'Class;

   type IRawGameControllerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IRawGameControllerStatics is access IRawGameControllerStatics_Interface'Class;

   type IUINavigationController_Interface is interface and WinRt.IInspectable_Interface;
   type IUINavigationController is access IUINavigationController_Interface'Class;
   type IUINavigationController_Ptr is access all IUINavigationController;

   type IUINavigationControllerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IUINavigationControllerStatics is access IUINavigationControllerStatics_Interface'Class;

   type IUINavigationControllerStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IUINavigationControllerStatics2 is access IUINavigationControllerStatics2_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type ArcadeStick is new Ada.Finalization.Limited_Controlled with
      record
         m_IArcadeStick : access Windows.Gaming.Input.IArcadeStick;
      end record;
   type ArcadeStick_Ptr is access all ArcadeStick;

   type FlightStick is new Ada.Finalization.Limited_Controlled with
      record
         m_IFlightStick : access Windows.Gaming.Input.IFlightStick;
      end record;
   type FlightStick_Ptr is access all FlightStick;

   type Gamepad is new Ada.Finalization.Limited_Controlled with
      record
         m_IGamepad : access Windows.Gaming.Input.IGamepad;
      end record;
   type Gamepad_Ptr is access all Gamepad;

   type Headset is new Ada.Finalization.Limited_Controlled with
      record
         m_IHeadset : access Windows.Gaming.Input.IHeadset;
      end record;
   type Headset_Ptr is access all Headset;

   type RacingWheel is new Ada.Finalization.Limited_Controlled with
      record
         m_IRacingWheel : access Windows.Gaming.Input.IRacingWheel;
      end record;
   type RacingWheel_Ptr is access all RacingWheel;

   type RawGameController is new Ada.Finalization.Limited_Controlled with
      record
         m_IRawGameController : access Windows.Gaming.Input.IRawGameController;
      end record;
   type RawGameController_Ptr is access all RawGameController;

   type UINavigationController is new Ada.Finalization.Limited_Controlled with
      record
         m_IUINavigationController : access Windows.Gaming.Input.IUINavigationController;
      end record;
   type UINavigationController_Ptr is access all UINavigationController;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type ArcadeStickButtons is (
      None_e,
      StickUp_e,
      StickDown_e,
      StickLeft_e,
      StickRight_e,
      Action1_e,
      Action2_e,
      Action3_e,
      Action4_e,
      Action5_e,
      Action6_e,
      Special1_e,
      Special2_e
   );
   for ArcadeStickButtons use (
      None_e => 0,
      StickUp_e => 1,
      StickDown_e => 2,
      StickLeft_e => 4,
      StickRight_e => 8,
      Action1_e => 16,
      Action2_e => 32,
      Action3_e => 64,
      Action4_e => 128,
      Action5_e => 256,
      Action6_e => 512,
      Special1_e => 1024,
      Special2_e => 2048
   );
   type ArcadeStickButtons_Ptr is access ArcadeStickButtons;

   type FlightStickButtons is (
      None_e,
      FirePrimary_e,
      FireSecondary_e
   );
   for FlightStickButtons use (
      None_e => 0,
      FirePrimary_e => 1,
      FireSecondary_e => 2
   );
   type FlightStickButtons_Ptr is access FlightStickButtons;

   type GameControllerButtonLabel is (
      None_e,
      XboxBack_e,
      XboxStart_e,
      XboxMenu_e,
      XboxView_e,
      XboxUp_e,
      XboxDown_e,
      XboxLeft_e,
      XboxRight_e,
      XboxA_e,
      XboxB_e,
      XboxX_e,
      XboxY_e,
      XboxLeftBumper_e,
      XboxLeftTrigger_e,
      XboxLeftStickButton_e,
      XboxRightBumper_e,
      XboxRightTrigger_e,
      XboxRightStickButton_e,
      XboxPaddle1_e,
      XboxPaddle2_e,
      XboxPaddle3_e,
      XboxPaddle4_e,
      Mode_e,
      Select_e,
      Menu_e,
      View_e,
      Back_e,
      Start_e,
      Options_e,
      Share_e,
      Up_e,
      Down_e,
      Left_e,
      Right_e,
      LetterA_e,
      LetterB_e,
      LetterC_e,
      LetterL_e,
      LetterR_e,
      LetterX_e,
      LetterY_e,
      LetterZ_e,
      Cross_e,
      Circle_e,
      Square_e,
      Triangle_e,
      LeftBumper_e,
      LeftTrigger_e,
      LeftStickButton_e,
      Left1_e,
      Left2_e,
      Left3_e,
      RightBumper_e,
      RightTrigger_e,
      RightStickButton_e,
      Right1_e,
      Right2_e,
      Right3_e,
      Paddle1_e,
      Paddle2_e,
      Paddle3_e,
      Paddle4_e,
      Plus_e,
      Minus_e,
      DownLeftArrow_e,
      DialLeft_e,
      DialRight_e,
      Suspension_e
   );
   for GameControllerButtonLabel use (
      None_e => 0,
      XboxBack_e => 1,
      XboxStart_e => 2,
      XboxMenu_e => 3,
      XboxView_e => 4,
      XboxUp_e => 5,
      XboxDown_e => 6,
      XboxLeft_e => 7,
      XboxRight_e => 8,
      XboxA_e => 9,
      XboxB_e => 10,
      XboxX_e => 11,
      XboxY_e => 12,
      XboxLeftBumper_e => 13,
      XboxLeftTrigger_e => 14,
      XboxLeftStickButton_e => 15,
      XboxRightBumper_e => 16,
      XboxRightTrigger_e => 17,
      XboxRightStickButton_e => 18,
      XboxPaddle1_e => 19,
      XboxPaddle2_e => 20,
      XboxPaddle3_e => 21,
      XboxPaddle4_e => 22,
      Mode_e => 23,
      Select_e => 24,
      Menu_e => 25,
      View_e => 26,
      Back_e => 27,
      Start_e => 28,
      Options_e => 29,
      Share_e => 30,
      Up_e => 31,
      Down_e => 32,
      Left_e => 33,
      Right_e => 34,
      LetterA_e => 35,
      LetterB_e => 36,
      LetterC_e => 37,
      LetterL_e => 38,
      LetterR_e => 39,
      LetterX_e => 40,
      LetterY_e => 41,
      LetterZ_e => 42,
      Cross_e => 43,
      Circle_e => 44,
      Square_e => 45,
      Triangle_e => 46,
      LeftBumper_e => 47,
      LeftTrigger_e => 48,
      LeftStickButton_e => 49,
      Left1_e => 50,
      Left2_e => 51,
      Left3_e => 52,
      RightBumper_e => 53,
      RightTrigger_e => 54,
      RightStickButton_e => 55,
      Right1_e => 56,
      Right2_e => 57,
      Right3_e => 58,
      Paddle1_e => 59,
      Paddle2_e => 60,
      Paddle3_e => 61,
      Paddle4_e => 62,
      Plus_e => 63,
      Minus_e => 64,
      DownLeftArrow_e => 65,
      DialLeft_e => 66,
      DialRight_e => 67,
      Suspension_e => 68
   );
   type GameControllerButtonLabel_Ptr is access GameControllerButtonLabel;

   type GameControllerSwitchKind is (
      TwoWay_e,
      FourWay_e,
      EightWay_e
   );
   for GameControllerSwitchKind use (
      TwoWay_e => 0,
      FourWay_e => 1,
      EightWay_e => 2
   );
   type GameControllerSwitchKind_Ptr is access GameControllerSwitchKind;

   type GameControllerSwitchPosition is (
      Center_e,
      Up_e,
      UpRight_e,
      Right_e,
      DownRight_e,
      Down_e,
      DownLeft_e,
      Left_e,
      UpLeft_e
   );
   for GameControllerSwitchPosition use (
      Center_e => 0,
      Up_e => 1,
      UpRight_e => 2,
      Right_e => 3,
      DownRight_e => 4,
      Down_e => 5,
      DownLeft_e => 6,
      Left_e => 7,
      UpLeft_e => 8
   );
   type GameControllerSwitchPosition_Ptr is access GameControllerSwitchPosition;
   type GameControllerSwitchPosition_Array is array (Natural range <>) of aliased GameControllerSwitchPosition;

   type GamepadButtons is (
      None_e,
      Menu_e,
      View_e,
      A_e,
      B_e,
      X_e,
      Y_e,
      DPadUp_e,
      DPadDown_e,
      DPadLeft_e,
      DPadRight_e,
      LeftShoulder_e,
      RightShoulder_e,
      LeftThumbstick_e,
      RightThumbstick_e,
      Paddle1_e,
      Paddle2_e,
      Paddle3_e,
      Paddle4_e
   );
   for GamepadButtons use (
      None_e => 0,
      Menu_e => 1,
      View_e => 2,
      A_e => 4,
      B_e => 8,
      X_e => 16,
      Y_e => 32,
      DPadUp_e => 64,
      DPadDown_e => 128,
      DPadLeft_e => 256,
      DPadRight_e => 512,
      LeftShoulder_e => 1024,
      RightShoulder_e => 2048,
      LeftThumbstick_e => 4096,
      RightThumbstick_e => 8192,
      Paddle1_e => 16384,
      Paddle2_e => 32768,
      Paddle3_e => 65536,
      Paddle4_e => 131072
   );
   type GamepadButtons_Ptr is access GamepadButtons;

   type OptionalUINavigationButtons is (
      None_e,
      Context1_e,
      Context2_e,
      Context3_e,
      Context4_e,
      PageUp_e,
      PageDown_e,
      PageLeft_e,
      PageRight_e,
      ScrollUp_e,
      ScrollDown_e,
      ScrollLeft_e,
      ScrollRight_e
   );
   for OptionalUINavigationButtons use (
      None_e => 0,
      Context1_e => 1,
      Context2_e => 2,
      Context3_e => 4,
      Context4_e => 8,
      PageUp_e => 16,
      PageDown_e => 32,
      PageLeft_e => 64,
      PageRight_e => 128,
      ScrollUp_e => 256,
      ScrollDown_e => 512,
      ScrollLeft_e => 1024,
      ScrollRight_e => 2048
   );
   type OptionalUINavigationButtons_Ptr is access OptionalUINavigationButtons;

   type RacingWheelButtons is (
      None_e,
      PreviousGear_e,
      NextGear_e,
      DPadUp_e,
      DPadDown_e,
      DPadLeft_e,
      DPadRight_e,
      Button1_e,
      Button2_e,
      Button3_e,
      Button4_e,
      Button5_e,
      Button6_e,
      Button7_e,
      Button8_e,
      Button9_e,
      Button10_e,
      Button11_e,
      Button12_e,
      Button13_e,
      Button14_e,
      Button15_e,
      Button16_e
   );
   for RacingWheelButtons use (
      None_e => 0,
      PreviousGear_e => 1,
      NextGear_e => 2,
      DPadUp_e => 4,
      DPadDown_e => 8,
      DPadLeft_e => 16,
      DPadRight_e => 32,
      Button1_e => 64,
      Button2_e => 128,
      Button3_e => 256,
      Button4_e => 512,
      Button5_e => 1024,
      Button6_e => 2048,
      Button7_e => 4096,
      Button8_e => 8192,
      Button9_e => 16384,
      Button10_e => 32768,
      Button11_e => 65536,
      Button12_e => 131072,
      Button13_e => 262144,
      Button14_e => 524288,
      Button15_e => 1048576,
      Button16_e => 2097152
   );
   type RacingWheelButtons_Ptr is access RacingWheelButtons;

   type RequiredUINavigationButtons is (
      None_e,
      Menu_e,
      View_e,
      Accept_e,
      Cancel_e,
      Up_e,
      Down_e,
      Left_e,
      Right_e
   );
   for RequiredUINavigationButtons use (
      None_e => 0,
      Menu_e => 1,
      View_e => 2,
      Accept_e => 4,
      Cancel_e => 8,
      Up_e => 16,
      Down_e => 32,
      Left_e => 64,
      Right_e => 128
   );
   type RequiredUINavigationButtons_Ptr is access RequiredUINavigationButtons;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type ArcadeStickReading is record
      Timestamp : WinRt.UInt64;
      Buttons : Windows.Gaming.Input.ArcadeStickButtons;
   end record with Convention => C_Pass_By_Copy;
   type ArcadeStickReading_Ptr is access ArcadeStickReading;

   type FlightStickReading is record
      Timestamp : WinRt.UInt64;
      Buttons : Windows.Gaming.Input.FlightStickButtons;
      HatSwitch : Windows.Gaming.Input.GameControllerSwitchPosition;
      Roll : WinRt.Double;
      Pitch : WinRt.Double;
      Yaw : WinRt.Double;
      Throttle : WinRt.Double;
   end record with Convention => C_Pass_By_Copy;
   type FlightStickReading_Ptr is access FlightStickReading;

   type GamepadReading is record
      Timestamp : WinRt.UInt64;
      Buttons : Windows.Gaming.Input.GamepadButtons;
      LeftTrigger : WinRt.Double;
      RightTrigger : WinRt.Double;
      LeftThumbstickX : WinRt.Double;
      LeftThumbstickY : WinRt.Double;
      RightThumbstickX : WinRt.Double;
      RightThumbstickY : WinRt.Double;
   end record with Convention => C_Pass_By_Copy;
   type GamepadReading_Ptr is access GamepadReading;

   type GamepadVibration is record
      LeftMotor : WinRt.Double;
      RightMotor : WinRt.Double;
      LeftTrigger : WinRt.Double;
      RightTrigger : WinRt.Double;
   end record with Convention => C_Pass_By_Copy;
   type GamepadVibration_Ptr is access GamepadVibration;

   type GamingInputPreviewContract is record
      null;
   end record with Convention => C_Pass_By_Copy;
   type GamingInputPreviewContract_Ptr is access GamingInputPreviewContract;

   type RacingWheelReading is record
      Timestamp : WinRt.UInt64;
      Buttons : Windows.Gaming.Input.RacingWheelButtons;
      PatternShifterGear : WinRt.Int32;
      Wheel : WinRt.Double;
      Throttle : WinRt.Double;
      Brake : WinRt.Double;
      Clutch : WinRt.Double;
      Handbrake : WinRt.Double;
   end record with Convention => C_Pass_By_Copy;
   type RacingWheelReading_Ptr is access RacingWheelReading;

   type UINavigationReading is record
      Timestamp : WinRt.UInt64;
      RequiredButtons : Windows.Gaming.Input.RequiredUINavigationButtons;
      OptionalButtons : Windows.Gaming.Input.OptionalUINavigationButtons;
   end record with Convention => C_Pass_By_Copy;
   type UINavigationReading_Ptr is access UINavigationReading;

   -----------------------------------------------------------------------------
   -- Generic package declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IArcadeStick is interface and WinRt.IInspectable;

      function GetButtonLabel
      (
         this : access IArcadeStick_Interface;
         button : Windows.Gaming.Input.ArcadeStickButtons;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      function GetCurrentReading
      (
         this : access IArcadeStick_Interface;
         RetVal : access Windows.Gaming.Input.ArcadeStickReading
      )
      return WinRt.Hresult is abstract;

      IID_IArcadeStick : aliased WinRt.IID := (2974438301, 48891, 19585, (128, 81, 21, 236, 243, 177, 48, 54 ));

   -----------------------------------------------------------------------------
   -- type IArcadeStickStatics is interface and WinRt.IInspectable;

      function add_ArcadeStickAdded
      (
         this : access IArcadeStickStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_ArcadeStickAdded
      (
         this : access IArcadeStickStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_ArcadeStickRemoved
      (
         this : access IArcadeStickStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_ArcadeStickRemoved
      (
         this : access IArcadeStickStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_ArcadeSticks
      (
         this : access IArcadeStickStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IArcadeStickStatics : aliased WinRt.IID := (1547155656, 14257, 19160, (148, 88, 32, 15, 26, 48, 1, 142 ));

   -----------------------------------------------------------------------------
   -- type IArcadeStickStatics2 is interface and WinRt.IInspectable;

      function FromGameController
      (
         this : access IArcadeStickStatics2_Interface;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IArcadeStick
      )
      return WinRt.Hresult is abstract;

      IID_IArcadeStickStatics2 : aliased WinRt.IID := (1387648836, 48006, 17498, (181, 156, 89, 111, 14, 42, 73, 223 ));

   -----------------------------------------------------------------------------
   -- type IFlightStick is interface and WinRt.IInspectable;

      function get_HatSwitchKind
      (
         this : access IFlightStick_Interface;
         RetVal : access Windows.Gaming.Input.GameControllerSwitchKind
      )
      return WinRt.Hresult is abstract;

      function GetButtonLabel
      (
         this : access IFlightStick_Interface;
         button : Windows.Gaming.Input.FlightStickButtons;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      function GetCurrentReading
      (
         this : access IFlightStick_Interface;
         RetVal : access Windows.Gaming.Input.FlightStickReading
      )
      return WinRt.Hresult is abstract;

      IID_IFlightStick : aliased WinRt.IID := (3030564892, 47163, 17497, (161, 169, 151, 176, 60, 51, 218, 124 ));

   -----------------------------------------------------------------------------
   -- type IFlightStickStatics is interface and WinRt.IInspectable;

      function add_FlightStickAdded
      (
         this : access IFlightStickStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_FlightStickAdded
      (
         this : access IFlightStickStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_FlightStickRemoved
      (
         this : access IFlightStickStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_FlightStickRemoved
      (
         this : access IFlightStickStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_FlightSticks
      (
         this : access IFlightStickStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function FromGameController
      (
         this : access IFlightStickStatics_Interface;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IFlightStick
      )
      return WinRt.Hresult is abstract;

      IID_IFlightStickStatics : aliased WinRt.IID := (1427411530, 65228, 17246, (131, 220, 92, 236, 138, 24, 165, 32 ));

   -----------------------------------------------------------------------------
   -- type IGameController is interface and WinRt.IInspectable;

      function add_HeadsetConnected
      (
         this : access IGameController_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_HeadsetConnected
      (
         this : access IGameController_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_HeadsetDisconnected
      (
         this : access IGameController_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_HeadsetDisconnected
      (
         this : access IGameController_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_UserChanged
      (
         this : access IGameController_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_UserChanged
      (
         this : access IGameController_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_Headset
      (
         this : access IGameController_Interface;
         RetVal : access Windows.Gaming.Input.IHeadset
      )
      return WinRt.Hresult is abstract;

      function get_IsWireless
      (
         this : access IGameController_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_User
      (
         this : access IGameController_Interface;
         RetVal : access Windows.System.IUser
      )
      return WinRt.Hresult is abstract;

      IID_IGameController : aliased WinRt.IID := (464479522, 24420, 17093, (130, 103, 185, 254, 34, 21, 191, 189 ));

   -----------------------------------------------------------------------------
   -- type IGameControllerBatteryInfo is interface and WinRt.IInspectable;

      function TryGetBatteryReport
      (
         this : access IGameControllerBatteryInfo_Interface;
         RetVal : access Windows.Devices.Power.IBatteryReport
      )
      return WinRt.Hresult is abstract;

      IID_IGameControllerBatteryInfo : aliased WinRt.IID := (3706504833, 14691, 19878, (149, 93, 85, 63, 59, 111, 97, 97 ));

   -----------------------------------------------------------------------------
   -- type IGamepad is interface and WinRt.IInspectable;

      function get_Vibration
      (
         this : access IGamepad_Interface;
         RetVal : access Windows.Gaming.Input.GamepadVibration
      )
      return WinRt.Hresult is abstract;

      function put_Vibration
      (
         this : access IGamepad_Interface;
         value : Windows.Gaming.Input.GamepadVibration
      )
      return WinRt.Hresult is abstract;

      function GetCurrentReading
      (
         this : access IGamepad_Interface;
         RetVal : access Windows.Gaming.Input.GamepadReading
      )
      return WinRt.Hresult is abstract;

      IID_IGamepad : aliased WinRt.IID := (3162223676, 2665, 14595, (158, 157, 165, 15, 134, 164, 93, 229 ));

   -----------------------------------------------------------------------------
   -- type IGamepad2 is interface and WinRt.IInspectable;

      function GetButtonLabel
      (
         this : access IGamepad2_Interface;
         button : Windows.Gaming.Input.GamepadButtons;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      IID_IGamepad2 : aliased WinRt.IID := (1008110013, 22805, 16965, (176, 192, 200, 159, 174, 3, 8, 255 ));

   -----------------------------------------------------------------------------
   -- type IGamepadStatics is interface and WinRt.IInspectable;

      function add_GamepadAdded
      (
         this : access IGamepadStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_GamepadAdded
      (
         this : access IGamepadStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_GamepadRemoved
      (
         this : access IGamepadStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_GamepadRemoved
      (
         this : access IGamepadStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_Gamepads
      (
         this : access IGamepadStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IGamepadStatics : aliased WinRt.IID := (2344412457, 54428, 14825, (149, 96, 228, 125, 222, 150, 183, 200 ));

   -----------------------------------------------------------------------------
   -- type IGamepadStatics2 is interface and WinRt.IInspectable;

      function FromGameController
      (
         this : access IGamepadStatics2_Interface;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IGamepad
      )
      return WinRt.Hresult is abstract;

      IID_IGamepadStatics2 : aliased WinRt.IID := (1114074565, 2134, 18372, (146, 19, 179, 149, 80, 76, 58, 60 ));

   -----------------------------------------------------------------------------
   -- type IHeadset is interface and WinRt.IInspectable;

      function get_CaptureDeviceId
      (
         this : access IHeadset_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RenderDeviceId
      (
         this : access IHeadset_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IHeadset : aliased WinRt.IID := (1070683887, 26917, 16296, (145, 129, 2, 156, 82, 35, 174, 59 ));

   -----------------------------------------------------------------------------
   -- type IRacingWheel is interface and WinRt.IInspectable;

      function get_HasClutch
      (
         this : access IRacingWheel_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_HasHandbrake
      (
         this : access IRacingWheel_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_HasPatternShifter
      (
         this : access IRacingWheel_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_MaxPatternShifterGear
      (
         this : access IRacingWheel_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_MaxWheelAngle
      (
         this : access IRacingWheel_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_WheelMotor
      (
         this : access IRacingWheel_Interface;
         RetVal : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackMotor
      )
      return WinRt.Hresult is abstract;

      function GetButtonLabel
      (
         this : access IRacingWheel_Interface;
         button : Windows.Gaming.Input.RacingWheelButtons;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      function GetCurrentReading
      (
         this : access IRacingWheel_Interface;
         RetVal : access Windows.Gaming.Input.RacingWheelReading
      )
      return WinRt.Hresult is abstract;

      IID_IRacingWheel : aliased WinRt.IID := (4115031407, 57606, 19586, (169, 15, 85, 64, 18, 144, 75, 133 ));

   -----------------------------------------------------------------------------
   -- type IRacingWheelStatics is interface and WinRt.IInspectable;

      function add_RacingWheelAdded
      (
         this : access IRacingWheelStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_RacingWheelAdded
      (
         this : access IRacingWheelStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_RacingWheelRemoved
      (
         this : access IRacingWheelStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_RacingWheelRemoved
      (
         this : access IRacingWheelStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_RacingWheels
      (
         this : access IRacingWheelStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IRacingWheelStatics : aliased WinRt.IID := (985738453, 22555, 18742, (159, 148, 105, 241, 230, 81, 76, 125 ));

   -----------------------------------------------------------------------------
   -- type IRacingWheelStatics2 is interface and WinRt.IInspectable;

      function FromGameController
      (
         this : access IRacingWheelStatics2_Interface;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IRacingWheel
      )
      return WinRt.Hresult is abstract;

      IID_IRacingWheelStatics2 : aliased WinRt.IID := (3865492650, 60925, 17187, (169, 246, 60, 56, 64, 72, 209, 237 ));

   -----------------------------------------------------------------------------
   -- type IRawGameController is interface and WinRt.IInspectable;

      function get_AxisCount
      (
         this : access IRawGameController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_ButtonCount
      (
         this : access IRawGameController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_ForceFeedbackMotors
      (
         this : access IRawGameController_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function get_HardwareProductId
      (
         this : access IRawGameController_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_HardwareVendorId
      (
         this : access IRawGameController_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_SwitchCount
      (
         this : access IRawGameController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function GetButtonLabel
      (
         this : access IRawGameController_Interface;
         buttonIndex : WinRt.Int32;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      function GetCurrentReading
      (
         this : access IRawGameController_Interface;
         buttonArraySize : WinRt.UInt32;
         buttonArray : WinRt.Boolean_Ptr;
         switchArraySize : WinRt.UInt32;
         switchArray : Windows.Gaming.Input.GameControllerSwitchPosition_Ptr;
         axisArraySize : WinRt.UInt32;
         axisArray : WinRt.Double_Ptr;
         RetVal : access WinRt.UInt64
      )
      return WinRt.Hresult is abstract;

      function GetSwitchKind
      (
         this : access IRawGameController_Interface;
         switchIndex : WinRt.Int32;
         RetVal : access Windows.Gaming.Input.GameControllerSwitchKind
      )
      return WinRt.Hresult is abstract;

      IID_IRawGameController : aliased WinRt.IID := (2091740561, 42977, 20337, (154, 120, 51, 233, 197, 223, 234, 98 ));

   -----------------------------------------------------------------------------
   -- type IRawGameController2 is interface and WinRt.IInspectable;

      function get_SimpleHapticsControllers
      (
         this : access IRawGameController2_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function get_NonRoamableId
      (
         this : access IRawGameController2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DisplayName
      (
         this : access IRawGameController2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IRawGameController2 : aliased WinRt.IID := (1136705589, 47987, 18262, (167, 135, 62, 214, 190, 166, 23, 189 ));

   -----------------------------------------------------------------------------
   -- type IRawGameControllerStatics is interface and WinRt.IInspectable;

      function add_RawGameControllerAdded
      (
         this : access IRawGameControllerStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_RawGameControllerAdded
      (
         this : access IRawGameControllerStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_RawGameControllerRemoved
      (
         this : access IRawGameControllerStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_RawGameControllerRemoved
      (
         this : access IRawGameControllerStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_RawGameControllers
      (
         this : access IRawGameControllerStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function FromGameController
      (
         this : access IRawGameControllerStatics_Interface;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IRawGameController
      )
      return WinRt.Hresult is abstract;

      IID_IRawGameControllerStatics : aliased WinRt.IID := (3951888274, 59738, 19225, (175, 199, 10, 89, 248, 191, 117, 158 ));

   -----------------------------------------------------------------------------
   -- type IUINavigationController is interface and WinRt.IInspectable;

      function GetCurrentReading
      (
         this : access IUINavigationController_Interface;
         RetVal : access Windows.Gaming.Input.UINavigationReading
      )
      return WinRt.Hresult is abstract;

      function GetOptionalButtonLabel
      (
         this : access IUINavigationController_Interface;
         button : Windows.Gaming.Input.OptionalUINavigationButtons;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      function GetRequiredButtonLabel
      (
         this : access IUINavigationController_Interface;
         button : Windows.Gaming.Input.RequiredUINavigationButtons;
         RetVal : access Windows.Gaming.Input.GameControllerButtonLabel
      )
      return WinRt.Hresult is abstract;

      IID_IUINavigationController : aliased WinRt.IID := (3853447133, 62734, 19029, (140, 220, 211, 50, 41, 84, 129, 117 ));

   -----------------------------------------------------------------------------
   -- type IUINavigationControllerStatics is interface and WinRt.IInspectable;

      function add_UINavigationControllerAdded
      (
         this : access IUINavigationControllerStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_UINavigationControllerAdded
      (
         this : access IUINavigationControllerStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function add_UINavigationControllerRemoved
      (
         this : access IUINavigationControllerStatics_Interface;
         value : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_UINavigationControllerRemoved
      (
         this : access IUINavigationControllerStatics_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function get_UINavigationControllers
      (
         this : access IUINavigationControllerStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IUINavigationControllerStatics : aliased WinRt.IID := (789877514, 63224, 19016, (141, 137, 148, 120, 108, 202, 12, 46 ));

   -----------------------------------------------------------------------------
   -- type IUINavigationControllerStatics2 is interface and WinRt.IInspectable;

      function FromGameController
      (
         this : access IUINavigationControllerStatics2_Interface;
         gameController : Windows.Gaming.Input.IGameController;
         RetVal : access Windows.Gaming.Input.IUINavigationController
      )
      return WinRt.Hresult is abstract;

      IID_IUINavigationControllerStatics2 : aliased WinRt.IID := (3771410659, 45579, 19211, (158, 212, 243, 213, 60, 236, 13, 228 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ArcadeStick

   overriding procedure Initialize (this : in out ArcadeStick);
   overriding procedure Finalize (this : in out ArcadeStick);

   -----------------------------------------------------------------------------
   -- Static Interfaces for ArcadeStick

   function add_ArcadeStickAdded
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_ArcadeStickAdded
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_ArcadeStickRemoved
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_ArcadeStickRemoved
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_ArcadeSticks
   return WinRt.GenericObject;

   function FromGameController
   (
      gameController : Windows.Gaming.Input.IGameController
   )
   return WinRt.Windows.Gaming.Input.ArcadeStick;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ArcadeStick

   function GetButtonLabel
   (
      this : in out ArcadeStick;
      button : Windows.Gaming.Input.ArcadeStickButtons
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function GetCurrentReading
   (
      this : in out ArcadeStick
   )
   return WinRt.Windows.Gaming.Input.ArcadeStickReading;

   function add_HeadsetConnected
   (
      this : in out ArcadeStick;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetConnected
   (
      this : in out ArcadeStick;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_HeadsetDisconnected
   (
      this : in out ArcadeStick;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetDisconnected
   (
      this : in out ArcadeStick;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UserChanged
   (
      this : in out ArcadeStick;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UserChanged
   (
      this : in out ArcadeStick;
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Headset
   (
      this : in out ArcadeStick
   )
   return WinRt.Windows.Gaming.Input.Headset'Class;

   function get_IsWireless
   (
      this : in out ArcadeStick
   )
   return WinRt.Boolean;

   function get_User
   (
      this : in out ArcadeStick
   )
   return WinRt.Windows.System.User'Class;

   function TryGetBatteryReport
   (
      this : in out ArcadeStick
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlightStick

   overriding procedure Initialize (this : in out FlightStick);
   overriding procedure Finalize (this : in out FlightStick);

   -----------------------------------------------------------------------------
   -- Static Interfaces for FlightStick

   function add_FlightStickAdded
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_FlightStickAdded
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_FlightStickRemoved
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_FlightStickRemoved
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_FlightSticks
   return WinRt.GenericObject;

   function FromGameController
   (
      gameController : Windows.Gaming.Input.IGameController
   )
   return WinRt.Windows.Gaming.Input.FlightStick;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlightStick

   function get_HatSwitchKind
   (
      this : in out FlightStick
   )
   return WinRt.Windows.Gaming.Input.GameControllerSwitchKind;

   function GetButtonLabel
   (
      this : in out FlightStick;
      button : Windows.Gaming.Input.FlightStickButtons
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function GetCurrentReading
   (
      this : in out FlightStick
   )
   return WinRt.Windows.Gaming.Input.FlightStickReading;

   function add_HeadsetConnected
   (
      this : in out FlightStick;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetConnected
   (
      this : in out FlightStick;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_HeadsetDisconnected
   (
      this : in out FlightStick;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetDisconnected
   (
      this : in out FlightStick;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UserChanged
   (
      this : in out FlightStick;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UserChanged
   (
      this : in out FlightStick;
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Headset
   (
      this : in out FlightStick
   )
   return WinRt.Windows.Gaming.Input.Headset'Class;

   function get_IsWireless
   (
      this : in out FlightStick
   )
   return WinRt.Boolean;

   function get_User
   (
      this : in out FlightStick
   )
   return WinRt.Windows.System.User'Class;

   function TryGetBatteryReport
   (
      this : in out FlightStick
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Gamepad

   overriding procedure Initialize (this : in out Gamepad);
   overriding procedure Finalize (this : in out Gamepad);

   -----------------------------------------------------------------------------
   -- Static Interfaces for Gamepad

   function add_GamepadAdded
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_GamepadAdded
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_GamepadRemoved
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_GamepadRemoved
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Gamepads
   return WinRt.GenericObject;

   function FromGameController
   (
      gameController : Windows.Gaming.Input.IGameController
   )
   return WinRt.Windows.Gaming.Input.Gamepad;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Gamepad

   function get_Vibration
   (
      this : in out Gamepad
   )
   return WinRt.Windows.Gaming.Input.GamepadVibration;

   procedure put_Vibration
   (
      this : in out Gamepad;
      value : Windows.Gaming.Input.GamepadVibration
   );

   function GetCurrentReading
   (
      this : in out Gamepad
   )
   return WinRt.Windows.Gaming.Input.GamepadReading;

   function add_HeadsetConnected
   (
      this : in out Gamepad;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetConnected
   (
      this : in out Gamepad;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_HeadsetDisconnected
   (
      this : in out Gamepad;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetDisconnected
   (
      this : in out Gamepad;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UserChanged
   (
      this : in out Gamepad;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UserChanged
   (
      this : in out Gamepad;
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Headset
   (
      this : in out Gamepad
   )
   return WinRt.Windows.Gaming.Input.Headset'Class;

   function get_IsWireless
   (
      this : in out Gamepad
   )
   return WinRt.Boolean;

   function get_User
   (
      this : in out Gamepad
   )
   return WinRt.Windows.System.User'Class;

   function GetButtonLabel
   (
      this : in out Gamepad;
      button : Windows.Gaming.Input.GamepadButtons
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function TryGetBatteryReport
   (
      this : in out Gamepad
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Headset

   overriding procedure Initialize (this : in out Headset);
   overriding procedure Finalize (this : in out Headset);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Headset

   function get_CaptureDeviceId
   (
      this : in out Headset
   )
   return WinRt.WString;

   function get_RenderDeviceId
   (
      this : in out Headset
   )
   return WinRt.WString;

   function TryGetBatteryReport
   (
      this : in out Headset
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RacingWheel

   overriding procedure Initialize (this : in out RacingWheel);
   overriding procedure Finalize (this : in out RacingWheel);

   -----------------------------------------------------------------------------
   -- Static Interfaces for RacingWheel

   function add_RacingWheelAdded
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_RacingWheelAdded
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_RacingWheelRemoved
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_RacingWheelRemoved
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_RacingWheels
   return WinRt.GenericObject;

   function FromGameController
   (
      gameController : Windows.Gaming.Input.IGameController
   )
   return WinRt.Windows.Gaming.Input.RacingWheel;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RacingWheel

   function get_HasClutch
   (
      this : in out RacingWheel
   )
   return WinRt.Boolean;

   function get_HasHandbrake
   (
      this : in out RacingWheel
   )
   return WinRt.Boolean;

   function get_HasPatternShifter
   (
      this : in out RacingWheel
   )
   return WinRt.Boolean;

   function get_MaxPatternShifterGear
   (
      this : in out RacingWheel
   )
   return WinRt.Int32;

   function get_MaxWheelAngle
   (
      this : in out RacingWheel
   )
   return WinRt.Double;

   function get_WheelMotor
   (
      this : in out RacingWheel
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor'Class;

   function GetButtonLabel
   (
      this : in out RacingWheel;
      button : Windows.Gaming.Input.RacingWheelButtons
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function GetCurrentReading
   (
      this : in out RacingWheel
   )
   return WinRt.Windows.Gaming.Input.RacingWheelReading;

   function add_HeadsetConnected
   (
      this : in out RacingWheel;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetConnected
   (
      this : in out RacingWheel;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_HeadsetDisconnected
   (
      this : in out RacingWheel;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetDisconnected
   (
      this : in out RacingWheel;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UserChanged
   (
      this : in out RacingWheel;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UserChanged
   (
      this : in out RacingWheel;
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Headset
   (
      this : in out RacingWheel
   )
   return WinRt.Windows.Gaming.Input.Headset'Class;

   function get_IsWireless
   (
      this : in out RacingWheel
   )
   return WinRt.Boolean;

   function get_User
   (
      this : in out RacingWheel
   )
   return WinRt.Windows.System.User'Class;

   function TryGetBatteryReport
   (
      this : in out RacingWheel
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RawGameController

   overriding procedure Initialize (this : in out RawGameController);
   overriding procedure Finalize (this : in out RawGameController);

   -----------------------------------------------------------------------------
   -- Static Interfaces for RawGameController

   function add_RawGameControllerAdded
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_RawGameControllerAdded
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_RawGameControllerRemoved
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_RawGameControllerRemoved
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_RawGameControllers
   return WinRt.GenericObject;

   function FromGameController
   (
      gameController : Windows.Gaming.Input.IGameController
   )
   return WinRt.Windows.Gaming.Input.RawGameController;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RawGameController

   function get_AxisCount
   (
      this : in out RawGameController
   )
   return WinRt.Int32;

   function get_ButtonCount
   (
      this : in out RawGameController
   )
   return WinRt.Int32;

   function get_ForceFeedbackMotors
   (
      this : in out RawGameController
   )
   return WinRt.GenericObject;

   function get_HardwareProductId
   (
      this : in out RawGameController
   )
   return WinRt.UInt16;

   function get_HardwareVendorId
   (
      this : in out RawGameController
   )
   return WinRt.UInt16;

   function get_SwitchCount
   (
      this : in out RawGameController
   )
   return WinRt.Int32;

   function GetButtonLabel
   (
      this : in out RawGameController;
      buttonIndex : WinRt.Int32
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function GetCurrentReading
   (
      this : in out RawGameController;
      buttonArray : WinRt.Boolean_Array;
      switchArray : Windows.Gaming.Input.GameControllerSwitchPosition_Array;
      axisArray : WinRt.Double_Array
   )
   return WinRt.UInt64;

   function GetSwitchKind
   (
      this : in out RawGameController;
      switchIndex : WinRt.Int32
   )
   return WinRt.Windows.Gaming.Input.GameControllerSwitchKind;

   function add_HeadsetConnected
   (
      this : in out RawGameController;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetConnected
   (
      this : in out RawGameController;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_HeadsetDisconnected
   (
      this : in out RawGameController;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetDisconnected
   (
      this : in out RawGameController;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UserChanged
   (
      this : in out RawGameController;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UserChanged
   (
      this : in out RawGameController;
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Headset
   (
      this : in out RawGameController
   )
   return WinRt.Windows.Gaming.Input.Headset'Class;

   function get_IsWireless
   (
      this : in out RawGameController
   )
   return WinRt.Boolean;

   function get_User
   (
      this : in out RawGameController
   )
   return WinRt.Windows.System.User'Class;

   function TryGetBatteryReport
   (
      this : in out RawGameController
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

   function get_SimpleHapticsControllers
   (
      this : in out RawGameController
   )
   return WinRt.GenericObject;

   function get_NonRoamableId
   (
      this : in out RawGameController
   )
   return WinRt.WString;

   function get_DisplayName
   (
      this : in out RawGameController
   )
   return WinRt.WString;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UINavigationController

   overriding procedure Initialize (this : in out UINavigationController);
   overriding procedure Finalize (this : in out UINavigationController);

   -----------------------------------------------------------------------------
   -- Static Interfaces for UINavigationController

   function FromGameController
   (
      gameController : Windows.Gaming.Input.IGameController
   )
   return WinRt.Windows.Gaming.Input.UINavigationController;

   function add_UINavigationControllerAdded
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UINavigationControllerAdded
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UINavigationControllerRemoved
   (
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UINavigationControllerRemoved
   (
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_UINavigationControllers
   return WinRt.GenericObject;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UINavigationController

   function GetCurrentReading
   (
      this : in out UINavigationController
   )
   return WinRt.Windows.Gaming.Input.UINavigationReading;

   function GetOptionalButtonLabel
   (
      this : in out UINavigationController;
      button : Windows.Gaming.Input.OptionalUINavigationButtons
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function GetRequiredButtonLabel
   (
      this : in out UINavigationController;
      button : Windows.Gaming.Input.RequiredUINavigationButtons
   )
   return WinRt.Windows.Gaming.Input.GameControllerButtonLabel;

   function add_HeadsetConnected
   (
      this : in out UINavigationController;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetConnected
   (
      this : in out UINavigationController;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_HeadsetDisconnected
   (
      this : in out UINavigationController;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_HeadsetDisconnected
   (
      this : in out UINavigationController;
      token : Windows.Foundation.EventRegistrationToken
   );

   function add_UserChanged
   (
      this : in out UINavigationController;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_UserChanged
   (
      this : in out UINavigationController;
      token : Windows.Foundation.EventRegistrationToken
   );

   function get_Headset
   (
      this : in out UINavigationController
   )
   return WinRt.Windows.Gaming.Input.Headset'Class;

   function get_IsWireless
   (
      this : in out UINavigationController
   )
   return WinRt.Boolean;

   function get_User
   (
      this : in out UINavigationController
   )
   return WinRt.Windows.System.User'Class;

   function TryGetBatteryReport
   (
      this : in out UINavigationController
   )
   return WinRt.Windows.Devices.Power.BatteryReport'Class;

end;

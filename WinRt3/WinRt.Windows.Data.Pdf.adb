--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Data.Pdf is

   package IAsyncOperation_PdfDocument is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Data.Pdf.IPdfDocument);
   package AsyncOperationCompletedHandler_PdfDocument is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Data.Pdf.IPdfDocument);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PdfDocument

   procedure Initialize (this : in out PdfDocument) is
   begin
      null;
   end;

   procedure Finalize (this : in out PdfDocument) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPdfDocument, IPdfDocument_Ptr);
   begin
      if this.m_IPdfDocument /= null then
         if this.m_IPdfDocument.all /= null then
            RefCount := this.m_IPdfDocument.all.Release;
            Free (this.m_IPdfDocument);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PdfDocument

   function LoadFromFileAsync
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Data.Pdf.PdfDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Pdf.PdfDocument");
      m_Factory        : access WinRt.Windows.Data.Pdf.IPdfDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PdfDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PdfDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Pdf.IPdfDocument;
      m_IID            : aliased WinRt.IID := (3601950444, 2458, 24290, (173, 46, 244, 200, 134, 20, 170, 187 )); -- Windows.Data.Pdf.PdfDocument;
      m_HandlerIID     : aliased WinRt.IID := (2370392243, 25245, 23933, (132, 204, 4, 192, 220, 247, 148, 43 ));
      m_Handler        : AsyncOperationCompletedHandler_PdfDocument.Kind := new AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PdfDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PdfDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate, AsyncOperationCompletedHandler_PdfDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Pdf.PdfDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IPdfDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromFileAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPdfDocument := new Windows.Data.Pdf.IPdfDocument;
                     Retval.m_IPdfDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromFileAsync
   (
      file : Windows.Storage.IStorageFile;
      password : WinRt.WString
   )
   return WinRt.Windows.Data.Pdf.PdfDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Pdf.PdfDocument");
      m_Factory        : access WinRt.Windows.Data.Pdf.IPdfDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_password : WinRt.HString := To_HString (password);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PdfDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PdfDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Pdf.IPdfDocument;
      m_IID            : aliased WinRt.IID := (3601950444, 2458, 24290, (173, 46, 244, 200, 134, 20, 170, 187 )); -- Windows.Data.Pdf.PdfDocument;
      m_HandlerIID     : aliased WinRt.IID := (2370392243, 25245, 23933, (132, 204, 4, 192, 220, 247, 148, 43 ));
      m_Handler        : AsyncOperationCompletedHandler_PdfDocument.Kind := new AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PdfDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PdfDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate, AsyncOperationCompletedHandler_PdfDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Pdf.PdfDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IPdfDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromFileAsync (file, HStr_password, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPdfDocument := new Windows.Data.Pdf.IPdfDocument;
                     Retval.m_IPdfDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_password);
      end return;
   end;

   function LoadFromStreamAsync
   (
      inputStream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Data.Pdf.PdfDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Pdf.PdfDocument");
      m_Factory        : access WinRt.Windows.Data.Pdf.IPdfDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PdfDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PdfDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Pdf.IPdfDocument;
      m_IID            : aliased WinRt.IID := (3601950444, 2458, 24290, (173, 46, 244, 200, 134, 20, 170, 187 )); -- Windows.Data.Pdf.PdfDocument;
      m_HandlerIID     : aliased WinRt.IID := (2370392243, 25245, 23933, (132, 204, 4, 192, 220, 247, 148, 43 ));
      m_Handler        : AsyncOperationCompletedHandler_PdfDocument.Kind := new AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PdfDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PdfDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate, AsyncOperationCompletedHandler_PdfDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Pdf.PdfDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IPdfDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStreamAsync (inputStream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPdfDocument := new Windows.Data.Pdf.IPdfDocument;
                     Retval.m_IPdfDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromStreamAsync
   (
      inputStream : Windows.Storage.Streams.IRandomAccessStream;
      password : WinRt.WString
   )
   return WinRt.Windows.Data.Pdf.PdfDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Pdf.PdfDocument");
      m_Factory        : access WinRt.Windows.Data.Pdf.IPdfDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_password : WinRt.HString := To_HString (password);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PdfDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PdfDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Pdf.IPdfDocument;
      m_IID            : aliased WinRt.IID := (3601950444, 2458, 24290, (173, 46, 244, 200, 134, 20, 170, 187 )); -- Windows.Data.Pdf.PdfDocument;
      m_HandlerIID     : aliased WinRt.IID := (2370392243, 25245, 23933, (132, 204, 4, 192, 220, 247, 148, 43 ));
      m_Handler        : AsyncOperationCompletedHandler_PdfDocument.Kind := new AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PdfDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PdfDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PdfDocument.Kind_Delegate, AsyncOperationCompletedHandler_PdfDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Pdf.PdfDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IPdfDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromStreamAsync (inputStream, HStr_password, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPdfDocument := new Windows.Data.Pdf.IPdfDocument;
                     Retval.m_IPdfDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_password);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PdfDocument

   function GetPage
   (
      this : in out PdfDocument;
      pageIndex : WinRt.UInt32
   )
   return WinRt.Windows.Data.Pdf.PdfPage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Pdf.IPdfPage;
   begin
      return RetVal : WinRt.Windows.Data.Pdf.PdfPage do
         Hr := this.m_IPdfDocument.all.GetPage (pageIndex, m_ComRetVal'Access);
         Retval.m_IPdfPage := new Windows.Data.Pdf.IPdfPage;
         Retval.m_IPdfPage.all := m_ComRetVal;
      end return;
   end;

   function get_PageCount
   (
      this : in out PdfDocument
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPdfDocument.all.get_PageCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPasswordProtected
   (
      this : in out PdfDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPdfDocument.all.get_IsPasswordProtected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PdfPage

   procedure Initialize (this : in out PdfPage) is
   begin
      null;
   end;

   procedure Finalize (this : in out PdfPage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPdfPage, IPdfPage_Ptr);
   begin
      if this.m_IPdfPage /= null then
         if this.m_IPdfPage.all /= null then
            RefCount := this.m_IPdfPage.all.Release;
            Free (this.m_IPdfPage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PdfPage

   procedure RenderToStreamAsync
   (
      this : in out PdfPage;
      outputStream : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPdfPage.all.RenderToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RenderToStreamAsync
   (
      this : in out PdfPage;
      outputStream : Windows.Storage.Streams.IRandomAccessStream;
      options : Windows.Data.Pdf.PdfPageRenderOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPdfPage.all.RenderToStreamAsync (outputStream, options.m_IPdfPageRenderOptions.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure PreparePageAsync
   (
      this : in out PdfPage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPdfPage.all.PreparePageAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Index
   (
      this : in out PdfPage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPdfPage.all.get_Index (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out PdfPage
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IPdfPage.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Dimensions
   (
      this : in out PdfPage
   )
   return WinRt.Windows.Data.Pdf.PdfPageDimensions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Pdf.IPdfPageDimensions;
   begin
      return RetVal : WinRt.Windows.Data.Pdf.PdfPageDimensions do
         Hr := this.m_IPdfPage.all.get_Dimensions (m_ComRetVal'Access);
         Retval.m_IPdfPageDimensions := new Windows.Data.Pdf.IPdfPageDimensions;
         Retval.m_IPdfPageDimensions.all := m_ComRetVal;
      end return;
   end;

   function get_Rotation
   (
      this : in out PdfPage
   )
   return WinRt.Windows.Data.Pdf.PdfPageRotation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Pdf.PdfPageRotation;
   begin
      Hr := this.m_IPdfPage.all.get_Rotation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PreferredZoom
   (
      this : in out PdfPage
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IPdfPage.all.get_PreferredZoom (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out PdfPage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Pdf.IPdfPage_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPdfPage.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PdfPageDimensions

   procedure Initialize (this : in out PdfPageDimensions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PdfPageDimensions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPdfPageDimensions, IPdfPageDimensions_Ptr);
   begin
      if this.m_IPdfPageDimensions /= null then
         if this.m_IPdfPageDimensions.all /= null then
            RefCount := this.m_IPdfPageDimensions.all.Release;
            Free (this.m_IPdfPageDimensions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PdfPageDimensions

   function get_MediaBox
   (
      this : in out PdfPageDimensions
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPdfPageDimensions.all.get_MediaBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CropBox
   (
      this : in out PdfPageDimensions
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPdfPageDimensions.all.get_CropBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BleedBox
   (
      this : in out PdfPageDimensions
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPdfPageDimensions.all.get_BleedBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrimBox
   (
      this : in out PdfPageDimensions
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPdfPageDimensions.all.get_TrimBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ArtBox
   (
      this : in out PdfPageDimensions
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPdfPageDimensions.all.get_ArtBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PdfPageRenderOptions

   procedure Initialize (this : in out PdfPageRenderOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PdfPageRenderOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPdfPageRenderOptions, IPdfPageRenderOptions_Ptr);
   begin
      if this.m_IPdfPageRenderOptions /= null then
         if this.m_IPdfPageRenderOptions.all /= null then
            RefCount := this.m_IPdfPageRenderOptions.all.Release;
            Free (this.m_IPdfPageRenderOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PdfPageRenderOptions

   function Constructor return PdfPageRenderOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Data.Pdf.PdfPageRenderOptions");
      m_ComRetVal  : aliased Windows.Data.Pdf.IPdfPageRenderOptions;
   begin
      return RetVal : PdfPageRenderOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPdfPageRenderOptions := new Windows.Data.Pdf.IPdfPageRenderOptions;
            Retval.m_IPdfPageRenderOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PdfPageRenderOptions

   function get_SourceRect
   (
      this : in out PdfPageRenderOptions
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.get_SourceRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SourceRect
   (
      this : in out PdfPageRenderOptions;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.put_SourceRect (value);
   end;

   function get_DestinationWidth
   (
      this : in out PdfPageRenderOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.get_DestinationWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DestinationWidth
   (
      this : in out PdfPageRenderOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.put_DestinationWidth (value);
   end;

   function get_DestinationHeight
   (
      this : in out PdfPageRenderOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.get_DestinationHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DestinationHeight
   (
      this : in out PdfPageRenderOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.put_DestinationHeight (value);
   end;

   function get_BackgroundColor
   (
      this : in out PdfPageRenderOptions
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.get_BackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BackgroundColor
   (
      this : in out PdfPageRenderOptions;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.put_BackgroundColor (value);
   end;

   function get_IsIgnoringHighContrast
   (
      this : in out PdfPageRenderOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.get_IsIgnoringHighContrast (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsIgnoringHighContrast
   (
      this : in out PdfPageRenderOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.put_IsIgnoringHighContrast (value);
   end;

   function get_BitmapEncoderId
   (
      this : in out PdfPageRenderOptions
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.get_BitmapEncoderId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BitmapEncoderId
   (
      this : in out PdfPageRenderOptions;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPdfPageRenderOptions.all.put_BitmapEncoderId (value);
   end;

end;

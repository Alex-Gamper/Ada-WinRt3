--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Foundation is

   package IVectorView_IWwwFormUrlDecoderEntry is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Foundation.IWwwFormUrlDecoderEntry);
   package IIterable_IWwwFormUrlDecoderEntry is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Foundation.IWwwFormUrlDecoderEntry);
   -----------------------------------------------------------------------------
   -- Delegate AsyncActionCompletedHandler

   function Invoke
   (
      this : access AsyncActionCompletedHandler_Delegate;
      asyncInfo : Windows.Foundation.IAsyncAction;
      asyncStatus : Windows.Foundation.AsyncStatus
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (asyncInfo, asyncStatus);
      return Hr;
   end;

   --------------------------------------------------------------------------------
   package body AsyncActionProgressHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         asyncInfo : GenericObject;
         progressInfo : TProgress
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (asyncInfo, progressInfo);
         return Hr;
      end;

   end;

   --------------------------------------------------------------------------------
   package body AsyncActionWithProgressCompletedHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         asyncInfo : GenericObject;
         asyncStatus : Windows.Foundation.AsyncStatus
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (asyncInfo, asyncStatus);
         return Hr;
      end;

   end;

   --------------------------------------------------------------------------------
   package body AsyncOperationCompletedHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         asyncInfo : GenericObject;
         asyncStatus : Windows.Foundation.AsyncStatus
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (asyncInfo, asyncStatus);
         return Hr;
      end;

   end;

   --------------------------------------------------------------------------------
   package body AsyncOperationProgressHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         asyncInfo : GenericObject;
         progressInfo : TProgress
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (asyncInfo, progressInfo);
         return Hr;
      end;

   end;

   --------------------------------------------------------------------------------
   package body AsyncOperationWithProgressCompletedHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         asyncInfo : GenericObject;
         asyncStatus : Windows.Foundation.AsyncStatus
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (asyncInfo, asyncStatus);
         return Hr;
      end;

   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Deferral

   procedure Initialize (this : in out Deferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out Deferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeferral, IDeferral_Ptr);
   begin
      if this.m_IDeferral /= null then
         if this.m_IDeferral.all /= null then
            RefCount := this.m_IDeferral.all.Release;
            Free (this.m_IDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Deferral

   function Constructor
   (
      handler : Windows.Foundation.DeferralCompletedHandler
   )
   return Deferral is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Deferral");
      m_Factory    : access IDeferralFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : Deferral do
         Hr := RoGetActivationFactory (m_hString, IID_IDeferralFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (handler, m_ComRetVal'Access);
            Retval.m_IDeferral := new Windows.Foundation.IDeferral;
            Retval.m_IDeferral.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Deferral

   procedure Complete
   (
      this : in out Deferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeferral.all.Complete;
   end;

   procedure Close
   (
      this : in out Deferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IDeferral_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeferral.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DeferralCompletedHandler

   function Invoke
   (
      this : access DeferralCompletedHandler_Delegate
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback.all;
      return Hr;
   end;

   --------------------------------------------------------------------------------
   package body EventHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         sender : WinRt.IInspectable;
         args : T
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (sender, args);
         return Hr;
      end;

   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GuidHelper is

      function CreateNewGuid
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.GuidHelper");
         m_Factory        : access WinRt.Windows.Foundation.IGuidHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGuidHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateNewGuid (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Empty
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.GuidHelper");
         m_Factory        : access WinRt.Windows.Foundation.IGuidHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGuidHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Empty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function Equals
      (
         target : WinRt.Guid_Ptr;
         value : WinRt.Guid_Ptr
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.GuidHelper");
         m_Factory        : access WinRt.Windows.Foundation.IGuidHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGuidHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Equals (target, value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end GuidHelper;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MemoryBuffer

   procedure Initialize (this : in out MemoryBuffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MemoryBuffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMemoryBuffer, IMemoryBuffer_Ptr);
   begin
      if this.m_IMemoryBuffer /= null then
         if this.m_IMemoryBuffer.all /= null then
            RefCount := this.m_IMemoryBuffer.all.Release;
            Free (this.m_IMemoryBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MemoryBuffer

   function Constructor
   (
      capacity : WinRt.UInt32
   )
   return MemoryBuffer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.MemoryBuffer");
      m_Factory    : access IMemoryBufferFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.IMemoryBuffer;
   begin
      return RetVal : MemoryBuffer do
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryBufferFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (capacity, m_ComRetVal'Access);
            Retval.m_IMemoryBuffer := new Windows.Foundation.IMemoryBuffer;
            Retval.m_IMemoryBuffer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MemoryBuffer

   function CreateReference
   (
      this : in out MemoryBuffer
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
   begin
      Hr := this.m_IMemoryBuffer.all.CreateReference (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out MemoryBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IMemoryBuffer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMemoryBuffer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PropertyValue is

      function CreateEmpty
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateEmpty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt8
      (
         value : WinRt.Byte
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt8 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInt16
      (
         value : WinRt.Int16
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInt16 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt16
      (
         value : WinRt.UInt16
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt16 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInt32
      (
         value : WinRt.Int32
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInt32 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt32
      (
         value : WinRt.UInt32
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt32 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInt64
      (
         value : WinRt.Int64
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInt64 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt64
      (
         value : WinRt.UInt64
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt64 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateSingle
      (
         value : WinRt.Single
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSingle (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateDouble
      (
         value : WinRt.Double
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDouble (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateChar16
      (
         value : WinRt.Wide_Char
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateChar16 (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateBoolean
      (
         value : WinRt.Boolean
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateBoolean (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateString
      (
         value : WinRt.WString
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         HStr_value : WinRt.HString := To_HString (value);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateString (HStr_value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
         return m_ComRetVal;
      end;

      function CreateInspectable
      (
         value : WinRt.IInspectable
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInspectable (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateGuid
      (
         value : WinRt.Guid
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateGuid (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateDateTime
      (
         value : Windows.Foundation.DateTime
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDateTime (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateTimeSpan
      (
         value : Windows.Foundation.TimeSpan
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateTimeSpan (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreatePoint
      (
         value : Windows.Foundation.Point
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePoint (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateSize
      (
         value : Windows.Foundation.Size
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSize (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateRect
      (
         value : Windows.Foundation.Rect
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateRect (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt8Array
      (
         value : WinRt.Byte_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt8Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInt16Array
      (
         value : WinRt.Int16_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int16_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInt16Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt16Array
      (
         value : WinRt.UInt16_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt16Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInt32Array
      (
         value : WinRt.Int32_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInt32Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt32Array
      (
         value : WinRt.UInt32_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt32_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt32Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInt64Array
      (
         value : WinRt.Int64_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInt64Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateUInt64Array
      (
         value : WinRt.UInt64_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt64_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUInt64Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateSingleArray
      (
         value : WinRt.Single_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSingleArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateDoubleArray
      (
         value : WinRt.Double_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Double_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDoubleArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateChar16Array
      (
         value : WinRt.Wide_Char_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Wide_Char_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateChar16Array (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateBooleanArray
      (
         value : WinRt.Boolean_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Boolean_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateBooleanArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateStringArray
      (
         value : WinRt.HString_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateStringArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateInspectableArray
      (
         value : WinRt.IInspectable_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.IInspectable_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInspectableArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateGuidArray
      (
         value : WinRt.Guid_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Guid_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateGuidArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateDateTimeArray
      (
         value : Windows.Foundation.DateTime_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.DateTime_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDateTimeArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateTimeSpanArray
      (
         value : Windows.Foundation.TimeSpan_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.TimeSpan_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateTimeSpanArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreatePointArray
      (
         value : Windows.Foundation.Point_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePointArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateSizeArray
      (
         value : Windows.Foundation.Size_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Size_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSizeArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CreateRectArray
      (
         value : Windows.Foundation.Rect_Array
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.PropertyValue");
         m_Factory        : access WinRt.Windows.Foundation.IPropertyValueStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Rect_Ptr);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateRectArray (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end PropertyValue;

   --------------------------------------------------------------------------------
   package body TypedEventHandler is

      function Invoke
      (
         this : access Kind_Delegate;
         sender : TSender;
         args : TResult
      )
      return WinRt.Hresult is
         Hr : WinRt.HResult := S_OK;
      begin
         this.Callback (sender, args);
         return Hr;
      end;

   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Uri

   procedure Initialize (this : in out Uri) is
   begin
      null;
   end;

   procedure Finalize (this : in out Uri) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUriRuntimeClass, IUriRuntimeClass_Ptr);
   begin
      if this.m_IUriRuntimeClass /= null then
         if this.m_IUriRuntimeClass.all /= null then
            RefCount := this.m_IUriRuntimeClass.all.Release;
            Free (this.m_IUriRuntimeClass);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Uri

   function Constructor
   (
      uri_p : WinRt.WString
   )
   return Uri is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Uri");
      m_Factory    : access IUriRuntimeClassFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.IUriRuntimeClass;
      HStr_uri_p : WinRt.HString := To_HString (uri_p);
   begin
      return RetVal : Uri do
         Hr := RoGetActivationFactory (m_hString, IID_IUriRuntimeClassFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUri (HStr_uri_p, m_ComRetVal'Access);
            Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
            Retval.m_IUriRuntimeClass.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uri_p);
      end return;
   end;

   function Constructor
   (
      baseUri : WinRt.WString;
      relativeUri : WinRt.WString
   )
   return Uri is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Uri");
      m_Factory    : access IUriRuntimeClassFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.IUriRuntimeClass;
      HStr_baseUri : WinRt.HString := To_HString (baseUri);
      HStr_relativeUri : WinRt.HString := To_HString (relativeUri);
   begin
      return RetVal : Uri do
         Hr := RoGetActivationFactory (m_hString, IID_IUriRuntimeClassFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithRelativeUri (HStr_baseUri, HStr_relativeUri, m_ComRetVal'Access);
            Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
            Retval.m_IUriRuntimeClass.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_baseUri);
         Hr := WindowsDeleteString (HStr_relativeUri);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Uri

   function UnescapeComponent
   (
      toUnescape : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Uri");
      m_Factory        : access WinRt.Windows.Foundation.IUriEscapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_toUnescape : WinRt.HString := To_HString (toUnescape);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUriEscapeStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.UnescapeComponent (HStr_toUnescape, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_toUnescape);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function EscapeComponent
   (
      toEscape : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Uri");
      m_Factory        : access WinRt.Windows.Foundation.IUriEscapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_toEscape : WinRt.HString := To_HString (toEscape);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUriEscapeStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.EscapeComponent (HStr_toEscape, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_toEscape);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Uri

   function get_AbsoluteUri
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_AbsoluteUri (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayUri
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_DisplayUri (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Domain
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Domain (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Extension
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Extension (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Fragment
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Fragment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Host
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Host (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Password
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Password (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Path
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Path (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Query
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Query (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_QueryParsed
   (
      this : in out Uri
   )
   return WinRt.Windows.Foundation.WwwFormUrlDecoder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IWwwFormUrlDecoderRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.WwwFormUrlDecoder do
         Hr := this.m_IUriRuntimeClass.all.get_QueryParsed (m_ComRetVal'Access);
         Retval.m_IWwwFormUrlDecoderRuntimeClass := new Windows.Foundation.IWwwFormUrlDecoderRuntimeClass;
         Retval.m_IWwwFormUrlDecoderRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_RawUri
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_RawUri (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SchemeName
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_SchemeName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserName
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Port
   (
      this : in out Uri
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Port (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Suspicious
   (
      this : in out Uri
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUriRuntimeClass.all.get_Suspicious (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Equals
   (
      this : in out Uri;
      pUri : Windows.Foundation.Uri'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUriRuntimeClass.all.Equals (pUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CombineUri
   (
      this : in out Uri;
      relativeUri : WinRt.WString
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      HStr_relativeUri : WinRt.HString := To_HString (relativeUri);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IUriRuntimeClass.all.CombineUri (HStr_relativeUri, m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_relativeUri);
      end return;
   end;

   function get_AbsoluteCanonicalUri
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IUriRuntimeClass_Interface, WinRt.Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri, WinRt.Windows.Foundation.IID_IUriRuntimeClassWithAbsoluteCanonicalUri'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUriRuntimeClass.all);
      Hr := m_Interface.get_AbsoluteCanonicalUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayIri
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IUriRuntimeClass_Interface, WinRt.Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri, WinRt.Windows.Foundation.IID_IUriRuntimeClassWithAbsoluteCanonicalUri'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUriRuntimeClass.all);
      Hr := m_Interface.get_DisplayIri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out Uri
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IUriRuntimeClass_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUriRuntimeClass.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WwwFormUrlDecoder

   procedure Initialize (this : in out WwwFormUrlDecoder) is
   begin
      null;
   end;

   procedure Finalize (this : in out WwwFormUrlDecoder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWwwFormUrlDecoderRuntimeClass, IWwwFormUrlDecoderRuntimeClass_Ptr);
   begin
      if this.m_IWwwFormUrlDecoderRuntimeClass /= null then
         if this.m_IWwwFormUrlDecoderRuntimeClass.all /= null then
            RefCount := this.m_IWwwFormUrlDecoderRuntimeClass.all.Release;
            Free (this.m_IWwwFormUrlDecoderRuntimeClass);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WwwFormUrlDecoder

   function Constructor
   (
      query : WinRt.WString
   )
   return WwwFormUrlDecoder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.WwwFormUrlDecoder");
      m_Factory    : access IWwwFormUrlDecoderRuntimeClassFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.IWwwFormUrlDecoderRuntimeClass;
      HStr_query : WinRt.HString := To_HString (query);
   begin
      return RetVal : WwwFormUrlDecoder do
         Hr := RoGetActivationFactory (m_hString, IID_IWwwFormUrlDecoderRuntimeClassFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWwwFormUrlDecoder (HStr_query, m_ComRetVal'Access);
            Retval.m_IWwwFormUrlDecoderRuntimeClass := new Windows.Foundation.IWwwFormUrlDecoderRuntimeClass;
            Retval.m_IWwwFormUrlDecoderRuntimeClass.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_query);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WwwFormUrlDecoder

   function GetFirstValueByName
   (
      this : in out WwwFormUrlDecoder;
      name : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IWwwFormUrlDecoderRuntimeClass.all.GetFirstValueByName (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.IWwwFormUrlDecoderEntry>
   function GetAt
   (
      this : in out WwwFormUrlDecoder;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Foundation.IWwwFormUrlDecoderEntry is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IWwwFormUrlDecoderEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IWwwFormUrlDecoderEntry;
      m_GenericIID     : aliased WinRt.IID := (2985299259, 7942, 20759, (147, 234, 42, 13, 121, 17, 103, 1 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IWwwFormUrlDecoderRuntimeClass_Interface, IVectorView_IWwwFormUrlDecoderEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWwwFormUrlDecoderRuntimeClass.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out WwwFormUrlDecoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IWwwFormUrlDecoderEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2985299259, 7942, 20759, (147, 234, 42, 13, 121, 17, 103, 1 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IWwwFormUrlDecoderRuntimeClass_Interface, IVectorView_IWwwFormUrlDecoderEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWwwFormUrlDecoderRuntimeClass.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out WwwFormUrlDecoder;
      value : Windows.Foundation.IWwwFormUrlDecoderEntry;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IWwwFormUrlDecoderEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2985299259, 7942, 20759, (147, 234, 42, 13, 121, 17, 103, 1 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IWwwFormUrlDecoderRuntimeClass_Interface, IVectorView_IWwwFormUrlDecoderEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWwwFormUrlDecoderRuntimeClass.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out WwwFormUrlDecoder;
      startIndex : WinRt.UInt32;
      items : Windows.Foundation.IWwwFormUrlDecoderEntry_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IWwwFormUrlDecoderEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2985299259, 7942, 20759, (147, 234, 42, 13, 121, 17, 103, 1 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IWwwFormUrlDecoderRuntimeClass_Interface, IVectorView_IWwwFormUrlDecoderEntry.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IWwwFormUrlDecoderRuntimeClass.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Foundation.IWwwFormUrlDecoderEntry>
   function First
   (
      this : in out WwwFormUrlDecoder
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IWwwFormUrlDecoderEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2271995963, 29208, 23547, (161, 105, 131, 21, 46, 247, 225, 70 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IWwwFormUrlDecoderRuntimeClass_Interface, IIterable_IWwwFormUrlDecoderEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWwwFormUrlDecoderRuntimeClass.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WwwFormUrlDecoderEntry

   procedure Initialize (this : in out WwwFormUrlDecoderEntry) is
   begin
      null;
   end;

   procedure Finalize (this : in out WwwFormUrlDecoderEntry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWwwFormUrlDecoderEntry, IWwwFormUrlDecoderEntry_Ptr);
   begin
      if this.m_IWwwFormUrlDecoderEntry /= null then
         if this.m_IWwwFormUrlDecoderEntry.all /= null then
            RefCount := this.m_IWwwFormUrlDecoderEntry.all.Release;
            Free (this.m_IWwwFormUrlDecoderEntry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WwwFormUrlDecoderEntry

   function get_Name
   (
      this : in out WwwFormUrlDecoderEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWwwFormUrlDecoderEntry.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out WwwFormUrlDecoderEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWwwFormUrlDecoderEntry.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

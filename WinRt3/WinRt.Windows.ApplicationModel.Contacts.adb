--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Data.Text;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.UI;
with WinRt.Windows.UI.Popups;
with WinRt.Windows.UI.ViewManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Contacts is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_Contact is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContact);
   package AsyncOperationCompletedHandler_Contact is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContact);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_ContactAnnotation is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation);
   package AsyncOperationCompletedHandler_ContactAnnotation is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation);

   package IAsyncOperation_ContactAnnotationList is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationList);
   package AsyncOperationCompletedHandler_ContactAnnotationList is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationList);

   package IAsyncOperation_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_RandomAccessStreamReference is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);
   package AsyncOperationCompletedHandler_RandomAccessStreamReference is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);

   package IAsyncOperation_ContactStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactStore);
   package AsyncOperationCompletedHandler_ContactStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactStore);

   package IAsyncOperation_ContactAnnotationStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore);
   package AsyncOperationCompletedHandler_ContactAnnotationStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore);

   package IAsyncOperation_ContactInformation is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactInformation);
   package AsyncOperationCompletedHandler_ContactInformation is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactInformation);

   package IAsyncOperation_ContactBatch is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactBatch);
   package AsyncOperationCompletedHandler_ContactBatch is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactBatch);

   package IAsyncOperation_ContactList is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IContactList);
   package AsyncOperationCompletedHandler_ContactList is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IContactList);

   package IAsyncOperation_PinnedContactIdsQueryResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Contacts.IPinnedContactIdsQueryResult);
   package AsyncOperationCompletedHandler_PinnedContactIdsQueryResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Contacts.IPinnedContactIdsQueryResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AggregateContactManager

   procedure Initialize (this : in out AggregateContactManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AggregateContactManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAggregateContactManager, IAggregateContactManager_Ptr);
   begin
      if this.m_IAggregateContactManager /= null then
         if this.m_IAggregateContactManager.all /= null then
            RefCount := this.m_IAggregateContactManager.all.Release;
            Free (this.m_IAggregateContactManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AggregateContactManager

   function FindRawContactsAsync
   (
      this : in out AggregateContactManager;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2474846437, 54368, 20684, (156, 148, 112, 38, 166, 178, 229, 178 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (584740922, 51044, 22731, (145, 133, 204, 250, 195, 96, 2, 90 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAggregateContactManager.all.FindRawContactsAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryLinkContactsAsync
   (
      this : in out AggregateContactManager;
      primaryContact : Windows.ApplicationModel.Contacts.Contact'Class;
      secondaryContact : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IAggregateContactManager.all.TryLinkContactsAsync (primaryContact.m_IContact.all, secondaryContact.m_IContact.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure UnlinkRawContactAsync
   (
      this : in out AggregateContactManager;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAggregateContactManager.all.UnlinkRawContactAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function TrySetPreferredSourceForPictureAsync
   (
      this : in out AggregateContactManager;
      aggregateContact : Windows.ApplicationModel.Contacts.Contact'Class;
      rawContact : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAggregateContactManager.all.TrySetPreferredSourceForPictureAsync (aggregateContact.m_IContact.all, rawContact.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure SetRemoteIdentificationInformationAsync
   (
      this : in out AggregateContactManager;
      contactListId : WinRt.WString;
      remoteSourceId : WinRt.WString;
      accountId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IAggregateContactManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contactListId : WinRt.HString := To_HString (contactListId);
      HStr_remoteSourceId : WinRt.HString := To_HString (remoteSourceId);
      HStr_accountId : WinRt.HString := To_HString (accountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IAggregateContactManager_Interface, WinRt.Windows.ApplicationModel.Contacts.IAggregateContactManager2, WinRt.Windows.ApplicationModel.Contacts.IID_IAggregateContactManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAggregateContactManager.all);
      Hr := m_Interface.SetRemoteIdentificationInformationAsync (HStr_contactListId, HStr_remoteSourceId, HStr_accountId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_contactListId);
      Hr := WindowsDeleteString (HStr_remoteSourceId);
      Hr := WindowsDeleteString (HStr_accountId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Contact

   procedure Initialize (this : in out Contact) is
   begin
      null;
   end;

   procedure Finalize (this : in out Contact) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContact, IContact_Ptr);
   begin
      if this.m_IContact /= null then
         if this.m_IContact.all /= null then
            RefCount := this.m_IContact.all.Release;
            Free (this.m_IContact);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Contact

   function Constructor return Contact is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.Contact");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : Contact do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
            Retval.m_IContact.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Contact

   function get_Name
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContact.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContact.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Thumbnail
   (
      this : in out Contact
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IContact.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Thumbnail
   (
      this : in out Contact;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContact.all.put_Thumbnail (value);
   end;

   function get_Fields
   (
      this : in out Contact
   )
   return IVector_IContactField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactField.Kind;
   begin
      Hr := this.m_IContact.all.get_Fields (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IContactField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Id
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_Id (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Notes
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Notes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Notes
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_Notes (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Phones
   (
      this : in out Contact
   )
   return IVector_IContactPhone.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactPhone.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Phones (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactPhone (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Emails
   (
      this : in out Contact
   )
   return IVector_IContactEmail.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactEmail.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Emails (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactEmail (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Addresses
   (
      this : in out Contact
   )
   return IVector_IContactAddress.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactAddress.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Addresses (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactAddress (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ConnectedServiceAccounts
   (
      this : in out Contact
   )
   return IVector_IContactConnectedServiceAccount.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactConnectedServiceAccount.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_ConnectedServiceAccounts (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactConnectedServiceAccount (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ImportantDates
   (
      this : in out Contact
   )
   return IVector_IContactDate.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactDate.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_ImportantDates (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactDate (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DataSuppliers
   (
      this : in out Contact
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_DataSuppliers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_JobInfo
   (
      this : in out Contact
   )
   return IVector_IContactJobInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactJobInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_JobInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactJobInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SignificantOthers
   (
      this : in out Contact
   )
   return IVector_IContactSignificantOther.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactSignificantOther.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_SignificantOthers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactSignificantOther (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Websites
   (
      this : in out Contact
   )
   return IVector_IContactWebsite.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IContactWebsite.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Websites (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IContactWebsite (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProviderProperties
   (
      this : in out Contact
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact2, WinRt.Windows.ApplicationModel.Contacts.IID_IContact2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_ProviderProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_FirstName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_FirstName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FirstName
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_FirstName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LastName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_LastName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LastName
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_LastName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_MiddleName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_MiddleName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_MiddleName
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_MiddleName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_YomiGivenName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_YomiGivenName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_YomiGivenName
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_YomiGivenName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_YomiFamilyName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_YomiFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_YomiFamilyName
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_YomiFamilyName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_HonorificNameSuffix
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_HonorificNameSuffix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_HonorificNameSuffix
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_HonorificNameSuffix (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_HonorificNamePrefix
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_HonorificNamePrefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_HonorificNamePrefix
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_HonorificNamePrefix (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_YomiDisplayName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactName := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactName, WinRt.Windows.ApplicationModel.Contacts.IID_IContactName'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_YomiDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContactListId
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_ContactListId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayPictureUserUpdateTime
   (
      this : in out Contact
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_DisplayPictureUserUpdateTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DisplayPictureUserUpdateTime
   (
      this : in out Contact;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_DisplayPictureUserUpdateTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsMe
   (
      this : in out Contact
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_IsMe (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AggregateId
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_AggregateId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RemoteId
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_RemoteId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_RemoteId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RingToneToken
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_RingToneToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RingToneToken
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_RingToneToken (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsDisplayPictureManuallySet
   (
      this : in out Contact
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_IsDisplayPictureManuallySet (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LargeDisplayPicture
   (
      this : in out Contact
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_LargeDisplayPicture (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SmallDisplayPicture
   (
      this : in out Contact
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_SmallDisplayPicture (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SourceDisplayPicture
   (
      this : in out Contact
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_SourceDisplayPicture (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SourceDisplayPicture
   (
      this : in out Contact;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_SourceDisplayPicture (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TextToneToken
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_TextToneToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TextToneToken
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_TextToneToken (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsAggregate
   (
      this : in out Contact
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_IsAggregate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_FullName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_FullName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayNameOverride
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_DisplayNameOverride (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayNameOverride
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_DisplayNameOverride (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Nickname
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_Nickname (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Nickname
   (
      this : in out Contact;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.put_Nickname (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SortName
   (
      this : in out Contact
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContact3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContact_Interface, WinRt.Windows.ApplicationModel.Contacts.IContact3, WinRt.Windows.ApplicationModel.Contacts.IID_IContact3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContact.all);
      Hr := m_Interface.get_SortName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactAddress

   procedure Initialize (this : in out ContactAddress) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactAddress) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactAddress, IContactAddress_Ptr);
   begin
      if this.m_IContactAddress /= null then
         if this.m_IContactAddress.all /= null then
            RefCount := this.m_IContactAddress.all.Release;
            Free (this.m_IContactAddress);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactAddress

   function Constructor return ContactAddress is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactAddress");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactAddress;
   begin
      return RetVal : ContactAddress do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactAddress := new Windows.ApplicationModel.Contacts.IContactAddress;
            Retval.m_IContactAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactAddress

   function get_StreetAddress
   (
      this : in out ContactAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAddress.all.get_StreetAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_StreetAddress
   (
      this : in out ContactAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAddress.all.put_StreetAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Locality
   (
      this : in out ContactAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAddress.all.get_Locality (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Locality
   (
      this : in out ContactAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAddress.all.put_Locality (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Region
   (
      this : in out ContactAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAddress.all.get_Region (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Region
   (
      this : in out ContactAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAddress.all.put_Region (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Country
   (
      this : in out ContactAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAddress.all.get_Country (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Country
   (
      this : in out ContactAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAddress.all.put_Country (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PostalCode
   (
      this : in out ContactAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAddress.all.get_PostalCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PostalCode
   (
      this : in out ContactAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAddress.all.put_PostalCode (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Kind
   (
      this : in out ContactAddress
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAddressKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactAddressKind;
   begin
      Hr := this.m_IContactAddress.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Kind
   (
      this : in out ContactAddress;
      value : Windows.ApplicationModel.Contacts.ContactAddressKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactAddress.all.put_Kind (value);
   end;

   function get_Description
   (
      this : in out ContactAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAddress.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAddress.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactAnnotation

   procedure Initialize (this : in out ContactAnnotation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactAnnotation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactAnnotation, IContactAnnotation_Ptr);
   begin
      if this.m_IContactAnnotation /= null then
         if this.m_IContactAnnotation.all /= null then
            RefCount := this.m_IContactAnnotation.all.Release;
            Free (this.m_IContactAnnotation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactAnnotation

   function Constructor return ContactAnnotation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactAnnotation");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactAnnotation;
   begin
      return RetVal : ContactAnnotation do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactAnnotation := new Windows.ApplicationModel.Contacts.IContactAnnotation;
            Retval.m_IContactAnnotation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactAnnotation

   function get_Id
   (
      this : in out ContactAnnotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotation.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AnnotationListId
   (
      this : in out ContactAnnotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotation.all.get_AnnotationListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContactId
   (
      this : in out ContactAnnotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotation.all.get_ContactId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContactId
   (
      this : in out ContactAnnotation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAnnotation.all.put_ContactId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RemoteId
   (
      this : in out ContactAnnotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotation.all.get_RemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out ContactAnnotation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactAnnotation.all.put_RemoteId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SupportedOperations
   (
      this : in out ContactAnnotation
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationOperations is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactAnnotationOperations;
   begin
      Hr := this.m_IContactAnnotation.all.get_SupportedOperations (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SupportedOperations
   (
      this : in out ContactAnnotation;
      value : Windows.ApplicationModel.Contacts.ContactAnnotationOperations
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactAnnotation.all.put_SupportedOperations (value);
   end;

   function get_IsDisabled
   (
      this : in out ContactAnnotation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContactAnnotation.all.get_IsDisabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProviderProperties
   (
      this : in out ContactAnnotation
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IContactAnnotation.all.get_ProviderProperties (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_ContactListId
   (
      this : in out ContactAnnotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactAnnotation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactAnnotation.all);
      Hr := m_Interface.get_ContactListId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContactListId
   (
      this : in out ContactAnnotation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactAnnotation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactAnnotation.all);
      Hr := m_Interface.put_ContactListId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactAnnotationList

   procedure Initialize (this : in out ContactAnnotationList) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactAnnotationList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactAnnotationList, IContactAnnotationList_Ptr);
   begin
      if this.m_IContactAnnotationList /= null then
         if this.m_IContactAnnotationList.all /= null then
            RefCount := this.m_IContactAnnotationList.all.Release;
            Free (this.m_IContactAnnotationList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactAnnotationList

   function get_Id
   (
      this : in out ContactAnnotationList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotationList.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderPackageFamilyName
   (
      this : in out ContactAnnotationList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotationList.all.get_ProviderPackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserDataAccountId
   (
      this : in out ContactAnnotationList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactAnnotationList.all.get_UserDataAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure DeleteAsync
   (
      this : in out ContactAnnotationList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactAnnotationList.all.DeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function TrySaveAnnotationAsync
   (
      this : in out ContactAnnotationList;
      annotation : Windows.ApplicationModel.Contacts.ContactAnnotation'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationList.all.TrySaveAnnotationAsync (annotation.m_IContactAnnotation.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAnnotationAsync
   (
      this : in out ContactAnnotationList;
      annotationId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_annotationId : WinRt.HString := To_HString (annotationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactAnnotation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactAnnotation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactAnnotation;
      m_IID            : aliased WinRt.IID := (1642747075, 54825, 23390, (181, 129, 99, 5, 4, 181, 23, 2 )); -- Windows.ApplicationModel.Contacts.ContactAnnotation;
      m_HandlerIID     : aliased WinRt.IID := (600361453, 35104, 23966, (176, 82, 195, 94, 49, 252, 35, 67 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactAnnotation.Kind := new AsyncOperationCompletedHandler_ContactAnnotation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactAnnotation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactAnnotation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactAnnotation.Kind_Delegate, AsyncOperationCompletedHandler_ContactAnnotation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAnnotation do
         Hr := this.m_IContactAnnotationList.all.GetAnnotationAsync (HStr_annotationId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactAnnotation := new Windows.ApplicationModel.Contacts.IContactAnnotation;
                  Retval.m_IContactAnnotation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_annotationId);
      end return;
   end;

   function FindAnnotationsByRemoteIdAsync
   (
      this : in out ContactAnnotationList;
      remoteId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteId : WinRt.HString := To_HString (remoteId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2394755313, 49419, 20644, (167, 229, 177, 174, 44, 50, 186, 183 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2456845596, 31153, 20992, (129, 26, 67, 84, 26, 209, 234, 250 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationList.all.FindAnnotationsByRemoteIdAsync (HStr_remoteId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_remoteId);
      return m_RetVal;
   end;

   function FindAnnotationsAsync
   (
      this : in out ContactAnnotationList
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2394755313, 49419, 20644, (167, 229, 177, 174, 44, 50, 186, 183 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2456845596, 31153, 20992, (129, 26, 67, 84, 26, 209, 234, 250 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationList.all.FindAnnotationsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure DeleteAnnotationAsync
   (
      this : in out ContactAnnotationList;
      annotation : Windows.ApplicationModel.Contacts.ContactAnnotation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactAnnotationList.all.DeleteAnnotationAsync (annotation.m_IContactAnnotation.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactAnnotationStore

   procedure Initialize (this : in out ContactAnnotationStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactAnnotationStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactAnnotationStore, IContactAnnotationStore_Ptr);
   begin
      if this.m_IContactAnnotationStore /= null then
         if this.m_IContactAnnotationStore.all /= null then
            RefCount := this.m_IContactAnnotationStore.all.Release;
            Free (this.m_IContactAnnotationStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactAnnotationStore

   function FindContactIdsByEmailAsync
   (
      this : in out ContactAnnotationStore;
      emailAddress : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_emailAddress : WinRt.HString := To_HString (emailAddress);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (798143785, 4507, 22362, (164, 25, 57, 4, 180, 228, 26, 242 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2088278462, 24366, 23539, (173, 229, 173, 152, 183, 114, 199, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationStore.all.FindContactIdsByEmailAsync (HStr_emailAddress, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_emailAddress);
      return m_RetVal;
   end;

   function FindContactIdsByPhoneNumberAsync
   (
      this : in out ContactAnnotationStore;
      phoneNumber : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (798143785, 4507, 22362, (164, 25, 57, 4, 180, 228, 26, 242 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2088278462, 24366, 23539, (173, 229, 173, 152, 183, 114, 199, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationStore.all.FindContactIdsByPhoneNumberAsync (HStr_phoneNumber, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_phoneNumber);
      return m_RetVal;
   end;

   function FindAnnotationsForContactAsync
   (
      this : in out ContactAnnotationStore;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2394755313, 49419, 20644, (167, 229, 177, 174, 44, 50, 186, 183 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2456845596, 31153, 20992, (129, 26, 67, 84, 26, 209, 234, 250 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationStore.all.FindAnnotationsForContactAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure DisableAnnotationAsync
   (
      this : in out ContactAnnotationStore;
      annotation : Windows.ApplicationModel.Contacts.ContactAnnotation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactAnnotationStore.all.DisableAnnotationAsync (annotation.m_IContactAnnotation.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function CreateAnnotationListAsync
   (
      this : in out ContactAnnotationStore
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactAnnotationList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactAnnotationList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationList;
      m_IID            : aliased WinRt.IID := (973756775, 49532, 22431, (186, 5, 204, 86, 224, 161, 208, 145 )); -- Windows.ApplicationModel.Contacts.ContactAnnotationList;
      m_HandlerIID     : aliased WinRt.IID := (2991034087, 56457, 23421, (180, 163, 179, 190, 41, 82, 32, 159 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactAnnotationList.Kind := new AsyncOperationCompletedHandler_ContactAnnotationList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactAnnotationList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactAnnotationList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactAnnotationList.Kind_Delegate, AsyncOperationCompletedHandler_ContactAnnotationList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationList do
         Hr := this.m_IContactAnnotationStore.all.CreateAnnotationListAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactAnnotationList := new Windows.ApplicationModel.Contacts.IContactAnnotationList;
                  Retval.m_IContactAnnotationList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateAnnotationListAsync
   (
      this : in out ContactAnnotationStore;
      userDataAccountId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataAccountId : WinRt.HString := To_HString (userDataAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactAnnotationList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactAnnotationList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationList;
      m_IID            : aliased WinRt.IID := (973756775, 49532, 22431, (186, 5, 204, 86, 224, 161, 208, 145 )); -- Windows.ApplicationModel.Contacts.ContactAnnotationList;
      m_HandlerIID     : aliased WinRt.IID := (2991034087, 56457, 23421, (180, 163, 179, 190, 41, 82, 32, 159 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactAnnotationList.Kind := new AsyncOperationCompletedHandler_ContactAnnotationList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactAnnotationList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactAnnotationList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactAnnotationList.Kind_Delegate, AsyncOperationCompletedHandler_ContactAnnotationList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationList do
         Hr := this.m_IContactAnnotationStore.all.CreateAnnotationListAsync (HStr_userDataAccountId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactAnnotationList := new Windows.ApplicationModel.Contacts.IContactAnnotationList;
                  Retval.m_IContactAnnotationList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_userDataAccountId);
      end return;
   end;

   function GetAnnotationListAsync
   (
      this : in out ContactAnnotationStore;
      annotationListId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_annotationListId : WinRt.HString := To_HString (annotationListId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactAnnotationList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactAnnotationList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationList;
      m_IID            : aliased WinRt.IID := (973756775, 49532, 22431, (186, 5, 204, 86, 224, 161, 208, 145 )); -- Windows.ApplicationModel.Contacts.ContactAnnotationList;
      m_HandlerIID     : aliased WinRt.IID := (2991034087, 56457, 23421, (180, 163, 179, 190, 41, 82, 32, 159 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactAnnotationList.Kind := new AsyncOperationCompletedHandler_ContactAnnotationList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactAnnotationList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactAnnotationList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactAnnotationList.Kind_Delegate, AsyncOperationCompletedHandler_ContactAnnotationList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationList do
         Hr := this.m_IContactAnnotationStore.all.GetAnnotationListAsync (HStr_annotationListId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactAnnotationList := new Windows.ApplicationModel.Contacts.IContactAnnotationList;
                  Retval.m_IContactAnnotationList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_annotationListId);
      end return;
   end;

   function FindAnnotationListsAsync
   (
      this : in out ContactAnnotationStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2773082815, 40484, 21330, (146, 61, 255, 24, 79, 150, 172, 187 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3716162149, 60527, 21875, (160, 158, 2, 177, 241, 138, 138, 81 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactAnnotationStore.all.FindAnnotationListsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindAnnotationsForContactListAsync
   (
      this : in out ContactAnnotationStore;
      contactListId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contactListId : WinRt.HString := To_HString (contactListId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2394755313, 49419, 20644, (167, 229, 177, 174, 44, 50, 186, 183 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2456845596, 31153, 20992, (129, 26, 67, 84, 26, 209, 234, 250 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactAnnotationStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactAnnotationStore.all);
      Hr := m_Interface.FindAnnotationsForContactListAsync (HStr_contactListId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_contactListId);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactBatch

   procedure Initialize (this : in out ContactBatch) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactBatch) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactBatch, IContactBatch_Ptr);
   begin
      if this.m_IContactBatch /= null then
         if this.m_IContactBatch.all /= null then
            RefCount := this.m_IContactBatch.all.Release;
            Free (this.m_IContactBatch);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactBatch

   function get_Contacts
   (
      this : in out ContactBatch
   )
   return IVectorView_IContact.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContact.Kind;
   begin
      Hr := this.m_IContactBatch.all.get_Contacts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContact (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Status
   (
      this : in out ContactBatch
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactBatchStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactBatchStatus;
   begin
      Hr := this.m_IContactBatch.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactCardDelayedDataLoader

   procedure Initialize (this : in out ContactCardDelayedDataLoader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactCardDelayedDataLoader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactCardDelayedDataLoader, IContactCardDelayedDataLoader_Ptr);
   begin
      if this.m_IContactCardDelayedDataLoader /= null then
         if this.m_IContactCardDelayedDataLoader.all /= null then
            RefCount := this.m_IContactCardDelayedDataLoader.all.Release;
            Free (this.m_IContactCardDelayedDataLoader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactCardDelayedDataLoader

   procedure SetData
   (
      this : in out ContactCardDelayedDataLoader;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactCardDelayedDataLoader.all.SetData (contact_p.m_IContact.all);
   end;

   procedure Close
   (
      this : in out ContactCardDelayedDataLoader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactCardDelayedDataLoader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCardDelayedDataLoader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactCardOptions

   procedure Initialize (this : in out ContactCardOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactCardOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactCardOptions, IContactCardOptions_Ptr);
   begin
      if this.m_IContactCardOptions /= null then
         if this.m_IContactCardOptions.all /= null then
            RefCount := this.m_IContactCardOptions.all.Release;
            Free (this.m_IContactCardOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactCardOptions

   function Constructor return ContactCardOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactCardOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactCardOptions;
   begin
      return RetVal : ContactCardOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactCardOptions := new Windows.ApplicationModel.Contacts.IContactCardOptions;
            Retval.m_IContactCardOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactCardOptions

   function get_HeaderKind
   (
      this : in out ContactCardOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactCardHeaderKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactCardHeaderKind;
   begin
      Hr := this.m_IContactCardOptions.all.get_HeaderKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HeaderKind
   (
      this : in out ContactCardOptions;
      value : Windows.ApplicationModel.Contacts.ContactCardHeaderKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactCardOptions.all.put_HeaderKind (value);
   end;

   function get_InitialTabKind
   (
      this : in out ContactCardOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactCardTabKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactCardTabKind;
   begin
      Hr := this.m_IContactCardOptions.all.get_InitialTabKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialTabKind
   (
      this : in out ContactCardOptions;
      value : Windows.ApplicationModel.Contacts.ContactCardTabKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactCardOptions.all.put_InitialTabKind (value);
   end;

   function get_ServerSearchContactListIds
   (
      this : in out ContactCardOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactCardOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactCardOptions_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactCardOptions2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactCardOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCardOptions.all);
      Hr := m_Interface.get_ServerSearchContactListIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactChange

   procedure Initialize (this : in out ContactChange) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactChange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactChange, IContactChange_Ptr);
   begin
      if this.m_IContactChange /= null then
         if this.m_IContactChange.all /= null then
            RefCount := this.m_IContactChange.all.Release;
            Free (this.m_IContactChange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactChange

   function get_ChangeType
   (
      this : in out ContactChange
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangeType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactChangeType;
   begin
      Hr := this.m_IContactChange.all.get_ChangeType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Contact
   (
      this : in out ContactChange
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactChange.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactChangeReader

   procedure Initialize (this : in out ContactChangeReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactChangeReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactChangeReader, IContactChangeReader_Ptr);
   begin
      if this.m_IContactChangeReader /= null then
         if this.m_IContactChangeReader.all /= null then
            RefCount := this.m_IContactChangeReader.all.Release;
            Free (this.m_IContactChangeReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactChangeReader

   procedure AcceptChanges
   (
      this : in out ContactChangeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactChangeReader.all.AcceptChanges;
   end;

   procedure AcceptChangesThrough
   (
      this : in out ContactChangeReader;
      lastChangeToAccept : Windows.ApplicationModel.Contacts.ContactChange'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactChangeReader.all.AcceptChangesThrough (lastChangeToAccept.m_IContactChange.all);
   end;

   function ReadBatchAsync
   (
      this : in out ContactChangeReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1222334350, 40619, 24215, (130, 238, 15, 208, 121, 150, 198, 102 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (671768175, 36818, 22105, (167, 204, 126, 250, 17, 187, 206, 70 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactChangeReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactChangeTracker

   procedure Initialize (this : in out ContactChangeTracker) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactChangeTracker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactChangeTracker, IContactChangeTracker_Ptr);
   begin
      if this.m_IContactChangeTracker /= null then
         if this.m_IContactChangeTracker.all /= null then
            RefCount := this.m_IContactChangeTracker.all.Release;
            Free (this.m_IContactChangeTracker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactChangeTracker

   procedure Enable
   (
      this : in out ContactChangeTracker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactChangeTracker.all.Enable;
   end;

   function GetChangeReader
   (
      this : in out ContactChangeTracker
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangeReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactChangeReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactChangeReader do
         Hr := this.m_IContactChangeTracker.all.GetChangeReader (m_ComRetVal'Access);
         Retval.m_IContactChangeReader := new Windows.ApplicationModel.Contacts.IContactChangeReader;
         Retval.m_IContactChangeReader.all := m_ComRetVal;
      end return;
   end;

   procedure Reset
   (
      this : in out ContactChangeTracker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactChangeTracker.all.Reset;
   end;

   function get_IsTracking
   (
      this : in out ContactChangeTracker
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactChangeTracker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactChangeTracker_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactChangeTracker2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactChangeTracker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactChangeTracker.all);
      Hr := m_Interface.get_IsTracking (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactChangedDeferral

   procedure Initialize (this : in out ContactChangedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactChangedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactChangedDeferral, IContactChangedDeferral_Ptr);
   begin
      if this.m_IContactChangedDeferral /= null then
         if this.m_IContactChangedDeferral.all /= null then
            RefCount := this.m_IContactChangedDeferral.all.Release;
            Free (this.m_IContactChangedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactChangedDeferral

   procedure Complete
   (
      this : in out ContactChangedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactChangedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactChangedEventArgs

   procedure Initialize (this : in out ContactChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactChangedEventArgs, IContactChangedEventArgs_Ptr);
   begin
      if this.m_IContactChangedEventArgs /= null then
         if this.m_IContactChangedEventArgs.all /= null then
            RefCount := this.m_IContactChangedEventArgs.all.Release;
            Free (this.m_IContactChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactChangedEventArgs

   function GetDeferral
   (
      this : in out ContactChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactChangedDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactChangedDeferral do
         Hr := this.m_IContactChangedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IContactChangedDeferral := new Windows.ApplicationModel.Contacts.IContactChangedDeferral;
         Retval.m_IContactChangedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactConnectedServiceAccount

   procedure Initialize (this : in out ContactConnectedServiceAccount) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactConnectedServiceAccount) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactConnectedServiceAccount, IContactConnectedServiceAccount_Ptr);
   begin
      if this.m_IContactConnectedServiceAccount /= null then
         if this.m_IContactConnectedServiceAccount.all /= null then
            RefCount := this.m_IContactConnectedServiceAccount.all.Release;
            Free (this.m_IContactConnectedServiceAccount);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactConnectedServiceAccount

   function Constructor return ContactConnectedServiceAccount is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactConnectedServiceAccount");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactConnectedServiceAccount;
   begin
      return RetVal : ContactConnectedServiceAccount do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactConnectedServiceAccount := new Windows.ApplicationModel.Contacts.IContactConnectedServiceAccount;
            Retval.m_IContactConnectedServiceAccount.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactConnectedServiceAccount

   function get_Id
   (
      this : in out ContactConnectedServiceAccount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactConnectedServiceAccount.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out ContactConnectedServiceAccount;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactConnectedServiceAccount.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ServiceName
   (
      this : in out ContactConnectedServiceAccount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactConnectedServiceAccount.all.get_ServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ServiceName
   (
      this : in out ContactConnectedServiceAccount;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactConnectedServiceAccount.all.put_ServiceName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactDate

   procedure Initialize (this : in out ContactDate) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactDate) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactDate, IContactDate_Ptr);
   begin
      if this.m_IContactDate /= null then
         if this.m_IContactDate.all /= null then
            RefCount := this.m_IContactDate.all.Release;
            Free (this.m_IContactDate);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactDate

   function Constructor return ContactDate is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactDate");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactDate;
   begin
      return RetVal : ContactDate do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactDate := new Windows.ApplicationModel.Contacts.IContactDate;
            Retval.m_IContactDate.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactDate

   function get_Day
   (
      this : in out ContactDate
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IContactDate.all.get_Day (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Day
   (
      this : in out ContactDate;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDate.all.put_Day (value);
   end;

   function get_Month
   (
      this : in out ContactDate
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IContactDate.all.get_Month (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Month
   (
      this : in out ContactDate;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDate.all.put_Month (value);
   end;

   function get_Year
   (
      this : in out ContactDate
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactDate.all.get_Year (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Year
   (
      this : in out ContactDate;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDate.all.put_Year (value);
   end;

   function get_Kind
   (
      this : in out ContactDate
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactDateKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactDateKind;
   begin
      Hr := this.m_IContactDate.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Kind
   (
      this : in out ContactDate;
      value : Windows.ApplicationModel.Contacts.ContactDateKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDate.all.put_Kind (value);
   end;

   function get_Description
   (
      this : in out ContactDate
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactDate.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactDate;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactDate.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactEmail

   procedure Initialize (this : in out ContactEmail) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactEmail) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactEmail, IContactEmail_Ptr);
   begin
      if this.m_IContactEmail /= null then
         if this.m_IContactEmail.all /= null then
            RefCount := this.m_IContactEmail.all.Release;
            Free (this.m_IContactEmail);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactEmail

   function Constructor return ContactEmail is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactEmail");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactEmail;
   begin
      return RetVal : ContactEmail do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactEmail := new Windows.ApplicationModel.Contacts.IContactEmail;
            Retval.m_IContactEmail.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactEmail

   function get_Address
   (
      this : in out ContactEmail
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactEmail.all.get_Address (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Address
   (
      this : in out ContactEmail;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactEmail.all.put_Address (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Kind
   (
      this : in out ContactEmail
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactEmailKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactEmailKind;
   begin
      Hr := this.m_IContactEmail.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Kind
   (
      this : in out ContactEmail;
      value : Windows.ApplicationModel.Contacts.ContactEmailKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactEmail.all.put_Kind (value);
   end;

   function get_Description
   (
      this : in out ContactEmail
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactEmail.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactEmail;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactEmail.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactField

   procedure Initialize (this : in out ContactField) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactField) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactField, IContactField_Ptr);
   begin
      if this.m_IContactField /= null then
         if this.m_IContactField.all /= null then
            RefCount := this.m_IContactField.all.Release;
            Free (this.m_IContactField);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactField

   function Constructor
   (
      value : WinRt.WString;
      type_x : Windows.ApplicationModel.Contacts.ContactFieldType
   )
   return ContactField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactField");
      m_Factory    : access IContactFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactField;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : ContactField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateField (HStr_value, type_x, m_ComRetVal'Access);
            Retval.m_IContactField := new Windows.ApplicationModel.Contacts.IContactField;
            Retval.m_IContactField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function Constructor
   (
      value : WinRt.WString;
      type_x : Windows.ApplicationModel.Contacts.ContactFieldType;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return ContactField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactField");
      m_Factory    : access IContactFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactField;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : ContactField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateField (HStr_value, type_x, category, m_ComRetVal'Access);
            Retval.m_IContactField := new Windows.ApplicationModel.Contacts.IContactField;
            Retval.m_IContactField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      value : WinRt.WString;
      type_x : Windows.ApplicationModel.Contacts.ContactFieldType;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return ContactField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactField");
      m_Factory    : access IContactFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactField;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : ContactField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateField (HStr_name, HStr_value, type_x, category, m_ComRetVal'Access);
            Retval.m_IContactField := new Windows.ApplicationModel.Contacts.IContactField;
            Retval.m_IContactField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactField

   function get_Type
   (
      this : in out ContactField
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactFieldType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldType;
   begin
      Hr := this.m_IContactField.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Category
   (
      this : in out ContactField
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactFieldCategory is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldCategory;
   begin
      Hr := this.m_IContactField.all.get_Category (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out ContactField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactField.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out ContactField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactField.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactFieldFactory

   procedure Initialize (this : in out ContactFieldFactory) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactFieldFactory) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactFieldFactory, IContactFieldFactory_Ptr);
   begin
      if this.m_IContactFieldFactory /= null then
         if this.m_IContactFieldFactory.all /= null then
            RefCount := this.m_IContactFieldFactory.all.Release;
            Free (this.m_IContactFieldFactory);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactFieldFactory

   function Constructor return ContactFieldFactory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactFieldFactory");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactFieldFactory;
   begin
      return RetVal : ContactFieldFactory do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactFieldFactory := new Windows.ApplicationModel.Contacts.IContactFieldFactory;
            Retval.m_IContactFieldFactory.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactFieldFactory

   function CreateField
   (
      this : in out ContactFieldFactory;
      value : WinRt.WString;
      type_x : Windows.ApplicationModel.Contacts.ContactFieldType
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactField;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactField do
         Hr := this.m_IContactFieldFactory.all.CreateField (HStr_value, type_x, m_ComRetVal'Access);
         Retval.m_IContactField := new Windows.ApplicationModel.Contacts.IContactField;
         Retval.m_IContactField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function CreateField
   (
      this : in out ContactFieldFactory;
      value : WinRt.WString;
      type_x : Windows.ApplicationModel.Contacts.ContactFieldType;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactField;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactField do
         Hr := this.m_IContactFieldFactory.all.CreateField (HStr_value, type_x, category, m_ComRetVal'Access);
         Retval.m_IContactField := new Windows.ApplicationModel.Contacts.IContactField;
         Retval.m_IContactField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function CreateField
   (
      this : in out ContactFieldFactory;
      name : WinRt.WString;
      value : WinRt.WString;
      type_x : Windows.ApplicationModel.Contacts.ContactFieldType;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactField;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactField do
         Hr := this.m_IContactFieldFactory.all.CreateField (HStr_name, HStr_value, type_x, category, m_ComRetVal'Access);
         Retval.m_IContactField := new Windows.ApplicationModel.Contacts.IContactField;
         Retval.m_IContactField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function CreateLocation
   (
      this : in out ContactFieldFactory;
      unstructuredAddress : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactLocationField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactLocationFieldFactory := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactLocationField;
      HStr_unstructuredAddress : WinRt.HString := To_HString (unstructuredAddress);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactFieldFactory_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactLocationFieldFactory, WinRt.Windows.ApplicationModel.Contacts.IID_IContactLocationFieldFactory'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactLocationField do
         m_Interface := QInterface (this.m_IContactFieldFactory.all);
         Hr := m_Interface.CreateLocation (HStr_unstructuredAddress, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactLocationField := new Windows.ApplicationModel.Contacts.IContactLocationField;
         Retval.m_IContactLocationField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_unstructuredAddress);
      end return;
   end;

   function CreateLocation
   (
      this : in out ContactFieldFactory;
      unstructuredAddress : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactLocationField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactLocationFieldFactory := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactLocationField;
      HStr_unstructuredAddress : WinRt.HString := To_HString (unstructuredAddress);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactFieldFactory_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactLocationFieldFactory, WinRt.Windows.ApplicationModel.Contacts.IID_IContactLocationFieldFactory'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactLocationField do
         m_Interface := QInterface (this.m_IContactFieldFactory.all);
         Hr := m_Interface.CreateLocation (HStr_unstructuredAddress, category, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactLocationField := new Windows.ApplicationModel.Contacts.IContactLocationField;
         Retval.m_IContactLocationField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_unstructuredAddress);
      end return;
   end;

   function CreateLocation
   (
      this : in out ContactFieldFactory;
      unstructuredAddress : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory;
      street : WinRt.WString;
      city : WinRt.WString;
      region : WinRt.WString;
      country : WinRt.WString;
      postalCode : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactLocationField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactLocationFieldFactory := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactLocationField;
      HStr_unstructuredAddress : WinRt.HString := To_HString (unstructuredAddress);
      HStr_street : WinRt.HString := To_HString (street);
      HStr_city : WinRt.HString := To_HString (city);
      HStr_region : WinRt.HString := To_HString (region);
      HStr_country : WinRt.HString := To_HString (country);
      HStr_postalCode : WinRt.HString := To_HString (postalCode);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactFieldFactory_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactLocationFieldFactory, WinRt.Windows.ApplicationModel.Contacts.IID_IContactLocationFieldFactory'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactLocationField do
         m_Interface := QInterface (this.m_IContactFieldFactory.all);
         Hr := m_Interface.CreateLocation (HStr_unstructuredAddress, category, HStr_street, HStr_city, HStr_region, HStr_country, HStr_postalCode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactLocationField := new Windows.ApplicationModel.Contacts.IContactLocationField;
         Retval.m_IContactLocationField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_unstructuredAddress);
         Hr := WindowsDeleteString (HStr_street);
         Hr := WindowsDeleteString (HStr_city);
         Hr := WindowsDeleteString (HStr_region);
         Hr := WindowsDeleteString (HStr_country);
         Hr := WindowsDeleteString (HStr_postalCode);
      end return;
   end;

   function CreateInstantMessage
   (
      this : in out ContactFieldFactory;
      userName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactInstantMessageField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageFieldFactory := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactInstantMessageField;
      HStr_userName : WinRt.HString := To_HString (userName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactFieldFactory_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageFieldFactory, WinRt.Windows.ApplicationModel.Contacts.IID_IContactInstantMessageFieldFactory'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactInstantMessageField do
         m_Interface := QInterface (this.m_IContactFieldFactory.all);
         Hr := m_Interface.CreateInstantMessage (HStr_userName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactInstantMessageField := new Windows.ApplicationModel.Contacts.IContactInstantMessageField;
         Retval.m_IContactInstantMessageField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_userName);
      end return;
   end;

   function CreateInstantMessage
   (
      this : in out ContactFieldFactory;
      userName : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactInstantMessageField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageFieldFactory := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactInstantMessageField;
      HStr_userName : WinRt.HString := To_HString (userName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactFieldFactory_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageFieldFactory, WinRt.Windows.ApplicationModel.Contacts.IID_IContactInstantMessageFieldFactory'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactInstantMessageField do
         m_Interface := QInterface (this.m_IContactFieldFactory.all);
         Hr := m_Interface.CreateInstantMessage (HStr_userName, category, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactInstantMessageField := new Windows.ApplicationModel.Contacts.IContactInstantMessageField;
         Retval.m_IContactInstantMessageField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_userName);
      end return;
   end;

   function CreateInstantMessage
   (
      this : in out ContactFieldFactory;
      userName : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory;
      service : WinRt.WString;
      displayText : WinRt.WString;
      verb : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactInstantMessageField'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageFieldFactory := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactInstantMessageField;
      HStr_userName : WinRt.HString := To_HString (userName);
      HStr_service : WinRt.HString := To_HString (service);
      HStr_displayText : WinRt.HString := To_HString (displayText);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactFieldFactory_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageFieldFactory, WinRt.Windows.ApplicationModel.Contacts.IID_IContactInstantMessageFieldFactory'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactInstantMessageField do
         m_Interface := QInterface (this.m_IContactFieldFactory.all);
         Hr := m_Interface.CreateInstantMessage (HStr_userName, category, HStr_service, HStr_displayText, verb.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactInstantMessageField := new Windows.ApplicationModel.Contacts.IContactInstantMessageField;
         Retval.m_IContactInstantMessageField.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_userName);
         Hr := WindowsDeleteString (HStr_service);
         Hr := WindowsDeleteString (HStr_displayText);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactGroup

   procedure Initialize (this : in out ContactGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactGroup, IContactGroup_Ptr);
   begin
      if this.m_IContactGroup /= null then
         if this.m_IContactGroup.all /= null then
            RefCount := this.m_IContactGroup.all.Release;
            Free (this.m_IContactGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactGroup

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactInformation

   procedure Initialize (this : in out ContactInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactInformation, IContactInformation_Ptr);
   begin
      if this.m_IContactInformation /= null then
         if this.m_IContactInformation.all /= null then
            RefCount := this.m_IContactInformation.all.Release;
            Free (this.m_IContactInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactInformation

   function get_Name
   (
      this : in out ContactInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactInformation.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetThumbnailAsync
   (
      this : in out ContactInformation
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamWithContentType.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamWithContentType.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3299179614, 12976, 21939, (173, 19, 206, 28, 35, 4, 30, 214 )); -- Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_HandlerIID     : aliased WinRt.IID := (1037954292, 7481, 22760, (131, 177, 219, 237, 84, 28, 127, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamWithContentType.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactInformation.all.GetThumbnailAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Emails
   (
      this : in out ContactInformation
   )
   return IVectorView_IContactField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactField.Kind;
   begin
      Hr := this.m_IContactInformation.all.get_Emails (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContactField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PhoneNumbers
   (
      this : in out ContactInformation
   )
   return IVectorView_IContactField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactField.Kind;
   begin
      Hr := this.m_IContactInformation.all.get_PhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContactField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Locations
   (
      this : in out ContactInformation
   )
   return IVectorView_IContactLocationField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactLocationField.Kind;
   begin
      Hr := this.m_IContactInformation.all.get_Locations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContactLocationField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_InstantMessages
   (
      this : in out ContactInformation
   )
   return IVectorView_IContactInstantMessageField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactInstantMessageField.Kind;
   begin
      Hr := this.m_IContactInformation.all.get_InstantMessages (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContactInstantMessageField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CustomFields
   (
      this : in out ContactInformation
   )
   return IVectorView_IContactField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactField.Kind;
   begin
      Hr := this.m_IContactInformation.all.get_CustomFields (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContactField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function QueryCustomFields
   (
      this : in out ContactInformation;
      customName : WinRt.WString
   )
   return IVectorView_IContactField.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactField.Kind;
      HStr_customName : WinRt.HString := To_HString (customName);
   begin
      Hr := this.m_IContactInformation.all.QueryCustomFields (HStr_customName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_customName);
      m_GenericRetVal := QInterface_IVectorView_IContactField (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactInstantMessageField

   procedure Initialize (this : in out ContactInstantMessageField) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactInstantMessageField) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactInstantMessageField, IContactInstantMessageField_Ptr);
   begin
      if this.m_IContactInstantMessageField /= null then
         if this.m_IContactInstantMessageField.all /= null then
            RefCount := this.m_IContactInstantMessageField.all.Release;
            Free (this.m_IContactInstantMessageField);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactInstantMessageField

   function Constructor
   (
      userName : WinRt.WString
   )
   return ContactInstantMessageField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactInstantMessageField");
      m_Factory    : access IContactInstantMessageFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactInstantMessageField;
      HStr_userName : WinRt.HString := To_HString (userName);
   begin
      return RetVal : ContactInstantMessageField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactInstantMessageFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstantMessage (HStr_userName, m_ComRetVal'Access);
            Retval.m_IContactInstantMessageField := new Windows.ApplicationModel.Contacts.IContactInstantMessageField;
            Retval.m_IContactInstantMessageField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_userName);
      end return;
   end;

   function Constructor
   (
      userName : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return ContactInstantMessageField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactInstantMessageField");
      m_Factory    : access IContactInstantMessageFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactInstantMessageField;
      HStr_userName : WinRt.HString := To_HString (userName);
   begin
      return RetVal : ContactInstantMessageField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactInstantMessageFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstantMessage (HStr_userName, category, m_ComRetVal'Access);
            Retval.m_IContactInstantMessageField := new Windows.ApplicationModel.Contacts.IContactInstantMessageField;
            Retval.m_IContactInstantMessageField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_userName);
      end return;
   end;

   function Constructor
   (
      userName : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory;
      service : WinRt.WString;
      displayText : WinRt.WString;
      verb : Windows.Foundation.Uri'Class
   )
   return ContactInstantMessageField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactInstantMessageField");
      m_Factory    : access IContactInstantMessageFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactInstantMessageField;
      HStr_userName : WinRt.HString := To_HString (userName);
      HStr_service : WinRt.HString := To_HString (service);
      HStr_displayText : WinRt.HString := To_HString (displayText);
   begin
      return RetVal : ContactInstantMessageField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactInstantMessageFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstantMessage (HStr_userName, category, HStr_service, HStr_displayText, verb.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IContactInstantMessageField := new Windows.ApplicationModel.Contacts.IContactInstantMessageField;
            Retval.m_IContactInstantMessageField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_userName);
         Hr := WindowsDeleteString (HStr_service);
         Hr := WindowsDeleteString (HStr_displayText);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactInstantMessageField

   function get_UserName
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactInstantMessageField.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Service
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactInstantMessageField.all.get_Service (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayText
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactInstantMessageField.all.get_DisplayText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LaunchUri
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IContactInstantMessageField.all.get_LaunchUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactFieldType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactInstantMessageField.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Category
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactFieldCategory is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldCategory;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactInstantMessageField.all);
      Hr := m_Interface.get_Category (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactInstantMessageField.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out ContactInstantMessageField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactInstantMessageField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactInstantMessageField.all);
      Hr := m_Interface.get_Value (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactJobInfo

   procedure Initialize (this : in out ContactJobInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactJobInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactJobInfo, IContactJobInfo_Ptr);
   begin
      if this.m_IContactJobInfo /= null then
         if this.m_IContactJobInfo.all /= null then
            RefCount := this.m_IContactJobInfo.all.Release;
            Free (this.m_IContactJobInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactJobInfo

   function Constructor return ContactJobInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactJobInfo");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactJobInfo;
   begin
      return RetVal : ContactJobInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactJobInfo := new Windows.ApplicationModel.Contacts.IContactJobInfo;
            Retval.m_IContactJobInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactJobInfo

   function get_CompanyName
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_CompanyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CompanyName
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_CompanyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CompanyYomiName
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_CompanyYomiName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CompanyYomiName
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_CompanyYomiName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Department
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_Department (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Department
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_Department (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Title
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Manager
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_Manager (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Manager
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_Manager (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Office
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_Office (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Office
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_Office (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CompanyAddress
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_CompanyAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CompanyAddress
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_CompanyAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Description
   (
      this : in out ContactJobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactJobInfo.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactJobInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactJobInfo.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ContactLaunchActionVerbs is

      function get_Call
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Call (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Message
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Message (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Map
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Map (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Post
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Post (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoCall
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoCall (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end ContactLaunchActionVerbs;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactList

   procedure Initialize (this : in out ContactList) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactList, IContactList_Ptr);
   begin
      if this.m_IContactList /= null then
         if this.m_IContactList.all /= null then
            RefCount := this.m_IContactList.all.Release;
            Free (this.m_IContactList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactList

   function get_Id
   (
      this : in out ContactList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactList.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out ContactList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactList.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out ContactList;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactList.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SourceDisplayName
   (
      this : in out ContactList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactList.all.get_SourceDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsHidden
   (
      this : in out ContactList
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContactList.all.get_IsHidden (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsHidden
   (
      this : in out ContactList;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactList.all.put_IsHidden (value);
   end;

   function get_OtherAppReadAccess
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactListOtherAppReadAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactListOtherAppReadAccess;
   begin
      Hr := this.m_IContactList.all.get_OtherAppReadAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppReadAccess
   (
      this : in out ContactList;
      value : Windows.ApplicationModel.Contacts.ContactListOtherAppReadAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactList.all.put_OtherAppReadAccess (value);
   end;

   function get_OtherAppWriteAccess
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactListOtherAppWriteAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactListOtherAppWriteAccess;
   begin
      Hr := this.m_IContactList.all.get_OtherAppWriteAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppWriteAccess
   (
      this : in out ContactList;
      value : Windows.ApplicationModel.Contacts.ContactListOtherAppWriteAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactList.all.put_OtherAppWriteAccess (value);
   end;

   function get_ChangeTracker
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactChangeTracker;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker do
         Hr := this.m_IContactList.all.get_ChangeTracker (m_ComRetVal'Access);
         Retval.m_IContactChangeTracker := new Windows.ApplicationModel.Contacts.IContactChangeTracker;
         Retval.m_IContactChangeTracker.all := m_ComRetVal;
      end return;
   end;

   function get_SyncManager
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactListSyncManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactListSyncManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactListSyncManager do
         Hr := this.m_IContactList.all.get_SyncManager (m_ComRetVal'Access);
         Retval.m_IContactListSyncManager := new Windows.ApplicationModel.Contacts.IContactListSyncManager;
         Retval.m_IContactListSyncManager.all := m_ComRetVal;
      end return;
   end;

   function get_SupportsServerSearch
   (
      this : in out ContactList
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContactList.all.get_SupportsServerSearch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UserDataAccountId
   (
      this : in out ContactList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactList.all.get_UserDataAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_ContactChanged
   (
      this : in out ContactList;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactList.all.add_ContactChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ContactChanged
   (
      this : in out ContactList;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactList.all.remove_ContactChanged (value);
   end;

   procedure SaveAsync
   (
      this : in out ContactList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactList.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteAsync
   (
      this : in out ContactList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactList.all.DeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetContactFromRemoteIdAsync
   (
      this : in out ContactList;
      remoteId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteId : WinRt.HString := To_HString (remoteId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactList.all.GetContactFromRemoteIdAsync (HStr_remoteId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_remoteId);
      end return;
   end;

   function GetMeContactAsync
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactList.all.GetMeContactAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetContactReader
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactReader do
         Hr := this.m_IContactList.all.GetContactReader (m_ComRetVal'Access);
         Retval.m_IContactReader := new Windows.ApplicationModel.Contacts.IContactReader;
         Retval.m_IContactReader.all := m_ComRetVal;
      end return;
   end;

   function GetContactReader
   (
      this : in out ContactList;
      options : Windows.ApplicationModel.Contacts.ContactQueryOptions'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactReader do
         Hr := this.m_IContactList.all.GetContactReader (options.m_IContactQueryOptions.all, m_ComRetVal'Access);
         Retval.m_IContactReader := new Windows.ApplicationModel.Contacts.IContactReader;
         Retval.m_IContactReader.all := m_ComRetVal;
      end return;
   end;

   procedure SaveContactAsync
   (
      this : in out ContactList;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactList.all.SaveContactAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteContactAsync
   (
      this : in out ContactList;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactList.all.DeleteContactAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetContactAsync
   (
      this : in out ContactList;
      contactId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contactId : WinRt.HString := To_HString (contactId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactList.all.GetContactAsync (HStr_contactId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_contactId);
      end return;
   end;

   procedure RegisterSyncManagerAsync
   (
      this : in out ContactList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactList_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactList2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactList.all);
      Hr := m_Interface.RegisterSyncManagerAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure put_SupportsServerSearch
   (
      this : in out ContactList;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactList_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactList2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactList.all);
      Hr := m_Interface.put_SupportsServerSearch (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SyncConstraints
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactListSyncConstraints'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactListSyncConstraints;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactList_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactList2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactList2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactListSyncConstraints do
         m_Interface := QInterface (this.m_IContactList.all);
         Hr := m_Interface.get_SyncConstraints (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactListSyncConstraints := new Windows.ApplicationModel.Contacts.IContactListSyncConstraints;
         Retval.m_IContactListSyncConstraints.all := m_ComRetVal;
      end return;
   end;

   function get_LimitedWriteOperations
   (
      this : in out ContactList
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactListLimitedWriteOperations'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactList3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactListLimitedWriteOperations;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactList_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactList3, WinRt.Windows.ApplicationModel.Contacts.IID_IContactList3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactListLimitedWriteOperations do
         m_Interface := QInterface (this.m_IContactList.all);
         Hr := m_Interface.get_LimitedWriteOperations (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactListLimitedWriteOperations := new Windows.ApplicationModel.Contacts.IContactListLimitedWriteOperations;
         Retval.m_IContactListLimitedWriteOperations.all := m_ComRetVal;
      end return;
   end;

   function GetChangeTracker
   (
      this : in out ContactList;
      identity : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactList3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactChangeTracker;
      HStr_identity : WinRt.HString := To_HString (identity);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactList_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactList3, WinRt.Windows.ApplicationModel.Contacts.IID_IContactList3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker do
         m_Interface := QInterface (this.m_IContactList.all);
         Hr := m_Interface.GetChangeTracker (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactChangeTracker := new Windows.ApplicationModel.Contacts.IContactChangeTracker;
         Retval.m_IContactChangeTracker.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_identity);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListLimitedWriteOperations

   procedure Initialize (this : in out ContactListLimitedWriteOperations) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListLimitedWriteOperations) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListLimitedWriteOperations, IContactListLimitedWriteOperations_Ptr);
   begin
      if this.m_IContactListLimitedWriteOperations /= null then
         if this.m_IContactListLimitedWriteOperations.all /= null then
            RefCount := this.m_IContactListLimitedWriteOperations.all.Release;
            Free (this.m_IContactListLimitedWriteOperations);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListLimitedWriteOperations

   function TryCreateOrUpdateContactAsync
   (
      this : in out ContactListLimitedWriteOperations;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactListLimitedWriteOperations.all.TryCreateOrUpdateContactAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDeleteContactAsync
   (
      this : in out ContactListLimitedWriteOperations;
      contactId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contactId : WinRt.HString := To_HString (contactId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactListLimitedWriteOperations.all.TryDeleteContactAsync (HStr_contactId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_contactId);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListSyncConstraints

   procedure Initialize (this : in out ContactListSyncConstraints) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListSyncConstraints) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListSyncConstraints, IContactListSyncConstraints_Ptr);
   begin
      if this.m_IContactListSyncConstraints /= null then
         if this.m_IContactListSyncConstraints.all /= null then
            RefCount := this.m_IContactListSyncConstraints.all.Release;
            Free (this.m_IContactListSyncConstraints);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListSyncConstraints

   function get_CanSyncDescriptions
   (
      this : in out ContactListSyncConstraints
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_CanSyncDescriptions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanSyncDescriptions
   (
      this : in out ContactListSyncConstraints;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_CanSyncDescriptions (value);
   end;

   function get_MaxHomePhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxHomePhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxHomePhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxHomePhoneNumbers (value);
   end;

   function get_MaxMobilePhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxMobilePhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxMobilePhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxMobilePhoneNumbers (value);
   end;

   function get_MaxWorkPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxWorkPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxWorkPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxWorkPhoneNumbers (value);
   end;

   function get_MaxOtherPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxOtherPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxOtherPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxOtherPhoneNumbers (value);
   end;

   function get_MaxPagerPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxPagerPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxPagerPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxPagerPhoneNumbers (value);
   end;

   function get_MaxBusinessFaxPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxBusinessFaxPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxBusinessFaxPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxBusinessFaxPhoneNumbers (value);
   end;

   function get_MaxHomeFaxPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxHomeFaxPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxHomeFaxPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxHomeFaxPhoneNumbers (value);
   end;

   function get_MaxCompanyPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxCompanyPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxCompanyPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxCompanyPhoneNumbers (value);
   end;

   function get_MaxAssistantPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxAssistantPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxAssistantPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxAssistantPhoneNumbers (value);
   end;

   function get_MaxRadioPhoneNumbers
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxRadioPhoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxRadioPhoneNumbers
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxRadioPhoneNumbers (value);
   end;

   function get_MaxPersonalEmailAddresses
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxPersonalEmailAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxPersonalEmailAddresses
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxPersonalEmailAddresses (value);
   end;

   function get_MaxWorkEmailAddresses
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxWorkEmailAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxWorkEmailAddresses
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxWorkEmailAddresses (value);
   end;

   function get_MaxOtherEmailAddresses
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxOtherEmailAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxOtherEmailAddresses
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxOtherEmailAddresses (value);
   end;

   function get_MaxHomeAddresses
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxHomeAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxHomeAddresses
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxHomeAddresses (value);
   end;

   function get_MaxWorkAddresses
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxWorkAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxWorkAddresses
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxWorkAddresses (value);
   end;

   function get_MaxOtherAddresses
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxOtherAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxOtherAddresses
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxOtherAddresses (value);
   end;

   function get_MaxBirthdayDates
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxBirthdayDates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxBirthdayDates
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxBirthdayDates (value);
   end;

   function get_MaxAnniversaryDates
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxAnniversaryDates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxAnniversaryDates
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxAnniversaryDates (value);
   end;

   function get_MaxOtherDates
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxOtherDates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxOtherDates
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxOtherDates (value);
   end;

   function get_MaxOtherRelationships
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxOtherRelationships (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxOtherRelationships
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxOtherRelationships (value);
   end;

   function get_MaxSpouseRelationships
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxSpouseRelationships (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxSpouseRelationships
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxSpouseRelationships (value);
   end;

   function get_MaxPartnerRelationships
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxPartnerRelationships (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxPartnerRelationships
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxPartnerRelationships (value);
   end;

   function get_MaxSiblingRelationships
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxSiblingRelationships (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxSiblingRelationships
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxSiblingRelationships (value);
   end;

   function get_MaxParentRelationships
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxParentRelationships (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxParentRelationships
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxParentRelationships (value);
   end;

   function get_MaxChildRelationships
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxChildRelationships (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxChildRelationships
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxChildRelationships (value);
   end;

   function get_MaxJobInfo
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxJobInfo (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxJobInfo
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxJobInfo (value);
   end;

   function get_MaxWebsites
   (
      this : in out ContactListSyncConstraints
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IContactListSyncConstraints.all.get_MaxWebsites (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxWebsites
   (
      this : in out ContactListSyncConstraints;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncConstraints.all.put_MaxWebsites (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListSyncManager

   procedure Initialize (this : in out ContactListSyncManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListSyncManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListSyncManager, IContactListSyncManager_Ptr);
   begin
      if this.m_IContactListSyncManager /= null then
         if this.m_IContactListSyncManager.all /= null then
            RefCount := this.m_IContactListSyncManager.all.Release;
            Free (this.m_IContactListSyncManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListSyncManager

   function get_Status
   (
      this : in out ContactListSyncManager
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactListSyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactListSyncStatus;
   begin
      Hr := this.m_IContactListSyncManager.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastSuccessfulSyncTime
   (
      this : in out ContactListSyncManager
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IContactListSyncManager.all.get_LastSuccessfulSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastAttemptedSyncTime
   (
      this : in out ContactListSyncManager
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IContactListSyncManager.all.get_LastAttemptedSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function SyncAsync
   (
      this : in out ContactListSyncManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactListSyncManager.all.SyncAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_SyncStatusChanged
   (
      this : in out ContactListSyncManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactListSyncManager.all.add_SyncStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SyncStatusChanged
   (
      this : in out ContactListSyncManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactListSyncManager.all.remove_SyncStatusChanged (token);
   end;

   procedure put_Status
   (
      this : in out ContactListSyncManager;
      value : Windows.ApplicationModel.Contacts.ContactListSyncStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactListSyncManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactListSyncManager.all);
      Hr := m_Interface.put_Status (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_LastSuccessfulSyncTime
   (
      this : in out ContactListSyncManager;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactListSyncManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactListSyncManager.all);
      Hr := m_Interface.put_LastSuccessfulSyncTime (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_LastAttemptedSyncTime
   (
      this : in out ContactListSyncManager;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactListSyncManager2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactListSyncManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactListSyncManager.all);
      Hr := m_Interface.put_LastAttemptedSyncTime (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactLocationField

   procedure Initialize (this : in out ContactLocationField) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactLocationField) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactLocationField, IContactLocationField_Ptr);
   begin
      if this.m_IContactLocationField /= null then
         if this.m_IContactLocationField.all /= null then
            RefCount := this.m_IContactLocationField.all.Release;
            Free (this.m_IContactLocationField);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactLocationField

   function Constructor
   (
      unstructuredAddress : WinRt.WString
   )
   return ContactLocationField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLocationField");
      m_Factory    : access IContactLocationFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactLocationField;
      HStr_unstructuredAddress : WinRt.HString := To_HString (unstructuredAddress);
   begin
      return RetVal : ContactLocationField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactLocationFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateLocation (HStr_unstructuredAddress, m_ComRetVal'Access);
            Retval.m_IContactLocationField := new Windows.ApplicationModel.Contacts.IContactLocationField;
            Retval.m_IContactLocationField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_unstructuredAddress);
      end return;
   end;

   function Constructor
   (
      unstructuredAddress : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory
   )
   return ContactLocationField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLocationField");
      m_Factory    : access IContactLocationFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactLocationField;
      HStr_unstructuredAddress : WinRt.HString := To_HString (unstructuredAddress);
   begin
      return RetVal : ContactLocationField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactLocationFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateLocation (HStr_unstructuredAddress, category, m_ComRetVal'Access);
            Retval.m_IContactLocationField := new Windows.ApplicationModel.Contacts.IContactLocationField;
            Retval.m_IContactLocationField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_unstructuredAddress);
      end return;
   end;

   function Constructor
   (
      unstructuredAddress : WinRt.WString;
      category : Windows.ApplicationModel.Contacts.ContactFieldCategory;
      street : WinRt.WString;
      city : WinRt.WString;
      region : WinRt.WString;
      country : WinRt.WString;
      postalCode : WinRt.WString
   )
   return ContactLocationField is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactLocationField");
      m_Factory    : access IContactLocationFieldFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactLocationField;
      HStr_unstructuredAddress : WinRt.HString := To_HString (unstructuredAddress);
      HStr_street : WinRt.HString := To_HString (street);
      HStr_city : WinRt.HString := To_HString (city);
      HStr_region : WinRt.HString := To_HString (region);
      HStr_country : WinRt.HString := To_HString (country);
      HStr_postalCode : WinRt.HString := To_HString (postalCode);
   begin
      return RetVal : ContactLocationField do
         Hr := RoGetActivationFactory (m_hString, IID_IContactLocationFieldFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateLocation (HStr_unstructuredAddress, category, HStr_street, HStr_city, HStr_region, HStr_country, HStr_postalCode, m_ComRetVal'Access);
            Retval.m_IContactLocationField := new Windows.ApplicationModel.Contacts.IContactLocationField;
            Retval.m_IContactLocationField.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_unstructuredAddress);
         Hr := WindowsDeleteString (HStr_street);
         Hr := WindowsDeleteString (HStr_city);
         Hr := WindowsDeleteString (HStr_region);
         Hr := WindowsDeleteString (HStr_country);
         Hr := WindowsDeleteString (HStr_postalCode);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactLocationField

   function get_UnstructuredAddress
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactLocationField.all.get_UnstructuredAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Street
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactLocationField.all.get_Street (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_City
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactLocationField.all.get_City (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Region
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactLocationField.all.get_Region (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Country
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactLocationField.all.get_Country (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PostalCode
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactLocationField.all.get_PostalCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Type
   (
      this : in out ContactLocationField
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactFieldType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactLocationField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactLocationField.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Category
   (
      this : in out ContactLocationField
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactFieldCategory is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldCategory;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactLocationField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactLocationField.all);
      Hr := m_Interface.get_Category (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactLocationField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactLocationField.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out ContactLocationField
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactField := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactLocationField_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactField, WinRt.Windows.ApplicationModel.Contacts.IID_IContactField'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactLocationField.all);
      Hr := m_Interface.get_Value (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ContactManager is

      function ConvertContactToVCardAsync
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class
      )
      return WinRt.Windows.Storage.Streams.RandomAccessStreamReference is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RandomAccessStreamReference.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RandomAccessStreamReference.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
         m_IID            : aliased WinRt.IID := (3640935114, 21564, 20555, (158, 185, 41, 75, 202, 216, 162, 131 )); -- Windows.Storage.Streams.RandomAccessStreamReference;
         m_HandlerIID     : aliased WinRt.IID := (1025521458, 57047, 23858, (135, 230, 193, 121, 120, 31, 121, 31 ));
         m_Handler        : AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ConvertContactToVCardAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
                        Retval.m_IRandomAccessStreamReference.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function ConvertContactToVCardAsync
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         maxBytes : WinRt.UInt32
      )
      return WinRt.Windows.Storage.Streams.RandomAccessStreamReference is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RandomAccessStreamReference.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RandomAccessStreamReference.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
         m_IID            : aliased WinRt.IID := (3640935114, 21564, 20555, (158, 185, 41, 75, 202, 216, 162, 131 )); -- Windows.Storage.Streams.RandomAccessStreamReference;
         m_HandlerIID     : aliased WinRt.IID := (1025521458, 57047, 23858, (135, 230, 193, 121, 120, 31, 121, 31 ));
         m_Handler        : AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ConvertContactToVCardAsync (contact_p.m_IContact.all, maxBytes, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
                        Retval.m_IRandomAccessStreamReference.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function ConvertVCardToContactAsync
      (
         vCard : Windows.Storage.Streams.IRandomAccessStreamReference
      )
      return WinRt.Windows.ApplicationModel.Contacts.Contact is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Contact.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
         m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
         m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
         m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ConvertVCardToContactAsync (vCard, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                        Retval.m_IContact.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestStoreAsync
      (
         accessType : Windows.ApplicationModel.Contacts.ContactStoreAccessType
      )
      return WinRt.Windows.ApplicationModel.Contacts.ContactStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ContactStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ContactStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactStore;
         m_IID            : aliased WinRt.IID := (593364881, 39486, 22307, (135, 240, 68, 255, 183, 134, 201, 225 )); -- Windows.ApplicationModel.Contacts.ContactStore;
         m_HandlerIID     : aliased WinRt.IID := (3508791282, 2907, 22794, (178, 52, 161, 33, 172, 30, 11, 171 ));
         m_Handler        : AsyncOperationCompletedHandler_ContactStore.Kind := new AsyncOperationCompletedHandler_ContactStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactStore.Kind_Delegate, AsyncOperationCompletedHandler_ContactStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactStore do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (accessType, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IContactStore := new Windows.ApplicationModel.Contacts.IContactStore;
                        Retval.m_IContactStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestAnnotationStoreAsync
      (
         accessType : Windows.ApplicationModel.Contacts.ContactAnnotationStoreAccessType
      )
      return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ContactAnnotationStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ContactAnnotationStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore;
         m_IID            : aliased WinRt.IID := (3331400311, 24019, 24144, (167, 235, 165, 102, 6, 70, 212, 50 )); -- Windows.ApplicationModel.Contacts.ContactAnnotationStore;
         m_HandlerIID     : aliased WinRt.IID := (1435463193, 11598, 23114, (140, 88, 56, 115, 214, 35, 177, 212 ));
         m_Handler        : AsyncOperationCompletedHandler_ContactAnnotationStore.Kind := new AsyncOperationCompletedHandler_ContactAnnotationStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactAnnotationStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactAnnotationStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactAnnotationStore.Kind_Delegate, AsyncOperationCompletedHandler_ContactAnnotationStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationStore do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestAnnotationStoreAsync (accessType, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IContactAnnotationStore := new Windows.ApplicationModel.Contacts.IContactAnnotationStore;
                        Retval.m_IContactAnnotationStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function IsShowContactCardSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsShowContactCardSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ShowContactCard
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement;
         contactCardOptions_p : Windows.ApplicationModel.Contacts.ContactCardOptions'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowContactCard (contact_p.m_IContact.all, selection, preferredPlacement, contactCardOptions_p.m_IContactCardOptions.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function IsShowDelayLoadedContactCardSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsShowDelayLoadedContactCardSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function ShowDelayLoadedContactCard
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement;
         contactCardOptions_p : Windows.ApplicationModel.Contacts.ContactCardOptions'Class
      )
      return WinRt.Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactCardDelayedDataLoader;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ShowDelayLoadedContactCard (contact_p.m_IContact.all, selection, preferredPlacement, contactCardOptions_p.m_IContactCardOptions.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IContactCardDelayedDataLoader := new Windows.ApplicationModel.Contacts.IContactCardDelayedDataLoader;
               Retval.m_IContactCardDelayedDataLoader.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ShowFullContactCard
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         fullContactCardOptions_p : Windows.ApplicationModel.Contacts.FullContactCardOptions'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowFullContactCard (contact_p.m_IContact.all, fullContactCardOptions_p.m_IFullContactCardOptions.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_SystemDisplayNameOrder
      return WinRt.Windows.ApplicationModel.Contacts.ContactNameOrder is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactNameOrder;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SystemDisplayNameOrder (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_SystemDisplayNameOrder
      (
         value : Windows.ApplicationModel.Contacts.ContactNameOrder
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_SystemDisplayNameOrder (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_SystemSortOrder
      return WinRt.Windows.ApplicationModel.Contacts.ContactNameOrder is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactNameOrder;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SystemSortOrder (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_SystemSortOrder
      (
         value : Windows.ApplicationModel.Contacts.ContactNameOrder
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_SystemSortOrder (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RequestStoreAsync
      return WinRt.Windows.ApplicationModel.Contacts.ContactStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ContactStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ContactStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactStore;
         m_IID            : aliased WinRt.IID := (593364881, 39486, 22307, (135, 240, 68, 255, 183, 134, 201, 225 )); -- Windows.ApplicationModel.Contacts.ContactStore;
         m_HandlerIID     : aliased WinRt.IID := (3508791282, 2907, 22794, (178, 52, 161, 33, 172, 30, 11, 171 ));
         m_Handler        : AsyncOperationCompletedHandler_ContactStore.Kind := new AsyncOperationCompletedHandler_ContactStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactStore.Kind_Delegate, AsyncOperationCompletedHandler_ContactStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactStore do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IContactStore := new Windows.ApplicationModel.Contacts.IContactStore;
                        Retval.m_IContactStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function IsShowFullContactCardSupportedAsync
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsShowFullContactCardSupportedAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function get_IncludeMiddleNameInSystemDisplayAndSort
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IncludeMiddleNameInSystemDisplayAndSort (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_IncludeMiddleNameInSystemDisplayAndSort
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_IncludeMiddleNameInSystemDisplayAndSort (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure ShowContactCard
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         selection : Windows.Foundation.Rect
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowContactCard (contact_p.m_IContact.all, selection);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure ShowContactCard
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowContactCard (contact_p.m_IContact.all, selection, preferredPlacement);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function ShowDelayLoadedContactCard
      (
         contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement
      )
      return WinRt.Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactCardDelayedDataLoader;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ShowDelayLoadedContactCard (contact_p.m_IContact.all, selection, preferredPlacement, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IContactCardDelayedDataLoader := new Windows.ApplicationModel.Contacts.IContactCardDelayedDataLoader;
               Retval.m_IContactCardDelayedDataLoader.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.ApplicationModel.Contacts.ContactManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactManagerForUser;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IContactManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IContactManagerForUser := new Windows.ApplicationModel.Contacts.IContactManagerForUser;
               Retval.m_IContactManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end ContactManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactManagerForUser

   procedure Initialize (this : in out ContactManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactManagerForUser, IContactManagerForUser_Ptr);
   begin
      if this.m_IContactManagerForUser /= null then
         if this.m_IContactManagerForUser.all /= null then
            RefCount := this.m_IContactManagerForUser.all.Release;
            Free (this.m_IContactManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactManagerForUser

   function ConvertContactToVCardAsync
   (
      this : in out ContactManagerForUser;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RandomAccessStreamReference.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RandomAccessStreamReference.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
      m_IID            : aliased WinRt.IID := (3640935114, 21564, 20555, (158, 185, 41, 75, 202, 216, 162, 131 )); -- Windows.Storage.Streams.RandomAccessStreamReference;
      m_HandlerIID     : aliased WinRt.IID := (1025521458, 57047, 23858, (135, 230, 193, 121, 120, 31, 121, 31 ));
      m_Handler        : AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IContactManagerForUser.all.ConvertContactToVCardAsync (contact_p.m_IContact.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
                  Retval.m_IRandomAccessStreamReference.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConvertContactToVCardAsync
   (
      this : in out ContactManagerForUser;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
      maxBytes : WinRt.UInt32
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RandomAccessStreamReference.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RandomAccessStreamReference.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
      m_IID            : aliased WinRt.IID := (3640935114, 21564, 20555, (158, 185, 41, 75, 202, 216, 162, 131 )); -- Windows.Storage.Streams.RandomAccessStreamReference;
      m_HandlerIID     : aliased WinRt.IID := (1025521458, 57047, 23858, (135, 230, 193, 121, 120, 31, 121, 31 ));
      m_Handler        : AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_RandomAccessStreamReference.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IContactManagerForUser.all.ConvertContactToVCardAsync (contact_p.m_IContact.all, maxBytes, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
                  Retval.m_IRandomAccessStreamReference.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConvertVCardToContactAsync
   (
      this : in out ContactManagerForUser;
      vCard : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactManagerForUser.all.ConvertVCardToContactAsync (vCard, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestStoreAsync
   (
      this : in out ContactManagerForUser;
      accessType : Windows.ApplicationModel.Contacts.ContactStoreAccessType
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactStore'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactStore.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactStore.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactStore;
      m_IID            : aliased WinRt.IID := (593364881, 39486, 22307, (135, 240, 68, 255, 183, 134, 201, 225 )); -- Windows.ApplicationModel.Contacts.ContactStore;
      m_HandlerIID     : aliased WinRt.IID := (3508791282, 2907, 22794, (178, 52, 161, 33, 172, 30, 11, 171 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactStore.Kind := new AsyncOperationCompletedHandler_ContactStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactStore.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactStore.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactStore.Kind_Delegate, AsyncOperationCompletedHandler_ContactStore.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactStore do
         Hr := this.m_IContactManagerForUser.all.RequestStoreAsync (accessType, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactStore := new Windows.ApplicationModel.Contacts.IContactStore;
                  Retval.m_IContactStore.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestAnnotationStoreAsync
   (
      this : in out ContactManagerForUser;
      accessType : Windows.ApplicationModel.Contacts.ContactAnnotationStoreAccessType
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationStore'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactAnnotationStore.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactAnnotationStore.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactAnnotationStore;
      m_IID            : aliased WinRt.IID := (3331400311, 24019, 24144, (167, 235, 165, 102, 6, 70, 212, 50 )); -- Windows.ApplicationModel.Contacts.ContactAnnotationStore;
      m_HandlerIID     : aliased WinRt.IID := (1435463193, 11598, 23114, (140, 88, 56, 115, 214, 35, 177, 212 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactAnnotationStore.Kind := new AsyncOperationCompletedHandler_ContactAnnotationStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactAnnotationStore.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactAnnotationStore.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactAnnotationStore.Kind_Delegate, AsyncOperationCompletedHandler_ContactAnnotationStore.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationStore do
         Hr := this.m_IContactManagerForUser.all.RequestAnnotationStoreAsync (accessType, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactAnnotationStore := new Windows.ApplicationModel.Contacts.IContactAnnotationStore;
                  Retval.m_IContactAnnotationStore.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_SystemDisplayNameOrder
   (
      this : in out ContactManagerForUser
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactNameOrder is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactNameOrder;
   begin
      Hr := this.m_IContactManagerForUser.all.get_SystemDisplayNameOrder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SystemDisplayNameOrder
   (
      this : in out ContactManagerForUser;
      value : Windows.ApplicationModel.Contacts.ContactNameOrder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactManagerForUser.all.put_SystemDisplayNameOrder (value);
   end;

   function get_SystemSortOrder
   (
      this : in out ContactManagerForUser
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactNameOrder is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactNameOrder;
   begin
      Hr := this.m_IContactManagerForUser.all.get_SystemSortOrder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SystemSortOrder
   (
      this : in out ContactManagerForUser;
      value : Windows.ApplicationModel.Contacts.ContactNameOrder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactManagerForUser.all.put_SystemSortOrder (value);
   end;

   function get_User
   (
      this : in out ContactManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IContactManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   procedure ShowFullContactCard
   (
      this : in out ContactManagerForUser;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
      fullContactCardOptions_p : Windows.ApplicationModel.Contacts.FullContactCardOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactManagerForUser_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactManagerForUser2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactManagerForUser2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactManagerForUser.all);
      Hr := m_Interface.ShowFullContactCard (contact_p.m_IContact.all, fullContactCardOptions_p.m_IFullContactCardOptions.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactMatchReason

   procedure Initialize (this : in out ContactMatchReason) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactMatchReason) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactMatchReason, IContactMatchReason_Ptr);
   begin
      if this.m_IContactMatchReason /= null then
         if this.m_IContactMatchReason.all /= null then
            RefCount := this.m_IContactMatchReason.all.Release;
            Free (this.m_IContactMatchReason);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactMatchReason

   function get_Field
   (
      this : in out ContactMatchReason
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactMatchReasonKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactMatchReasonKind;
   begin
      Hr := this.m_IContactMatchReason.all.get_Field (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Segments
   (
      this : in out ContactMatchReason
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IContactMatchReason.all.get_Segments (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out ContactMatchReason
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactMatchReason.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPanel

   procedure Initialize (this : in out ContactPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPanel, IContactPanel_Ptr);
   begin
      if this.m_IContactPanel /= null then
         if this.m_IContactPanel.all /= null then
            RefCount := this.m_IContactPanel.all.Release;
            Free (this.m_IContactPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPanel

   procedure ClosePanel
   (
      this : in out ContactPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPanel.all.ClosePanel;
   end;

   function get_HeaderColor
   (
      this : in out ContactPanel
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IContactPanel.all.get_HeaderColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HeaderColor
   (
      this : in out ContactPanel;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPanel.all.put_HeaderColor (value);
   end;

   function add_LaunchFullAppRequested
   (
      this : in out ContactPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactPanel.all.add_LaunchFullAppRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LaunchFullAppRequested
   (
      this : in out ContactPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPanel.all.remove_LaunchFullAppRequested (token);
   end;

   function add_Closing
   (
      this : in out ContactPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactPanel.all.add_Closing (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closing
   (
      this : in out ContactPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPanel.all.remove_Closing (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPanelClosingEventArgs

   procedure Initialize (this : in out ContactPanelClosingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPanelClosingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPanelClosingEventArgs, IContactPanelClosingEventArgs_Ptr);
   begin
      if this.m_IContactPanelClosingEventArgs /= null then
         if this.m_IContactPanelClosingEventArgs.all /= null then
            RefCount := this.m_IContactPanelClosingEventArgs.all.Release;
            Free (this.m_IContactPanelClosingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPanelClosingEventArgs

   function GetDeferral
   (
      this : in out ContactPanelClosingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IContactPanelClosingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPanelLaunchFullAppRequestedEventArgs

   procedure Initialize (this : in out ContactPanelLaunchFullAppRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPanelLaunchFullAppRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPanelLaunchFullAppRequestedEventArgs, IContactPanelLaunchFullAppRequestedEventArgs_Ptr);
   begin
      if this.m_IContactPanelLaunchFullAppRequestedEventArgs /= null then
         if this.m_IContactPanelLaunchFullAppRequestedEventArgs.all /= null then
            RefCount := this.m_IContactPanelLaunchFullAppRequestedEventArgs.all.Release;
            Free (this.m_IContactPanelLaunchFullAppRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPanelLaunchFullAppRequestedEventArgs

   function get_Handled
   (
      this : in out ContactPanelLaunchFullAppRequestedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContactPanelLaunchFullAppRequestedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out ContactPanelLaunchFullAppRequestedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPanelLaunchFullAppRequestedEventArgs.all.put_Handled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPhone

   procedure Initialize (this : in out ContactPhone) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPhone) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPhone, IContactPhone_Ptr);
   begin
      if this.m_IContactPhone /= null then
         if this.m_IContactPhone.all /= null then
            RefCount := this.m_IContactPhone.all.Release;
            Free (this.m_IContactPhone);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactPhone

   function Constructor return ContactPhone is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactPhone");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactPhone;
   begin
      return RetVal : ContactPhone do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactPhone := new Windows.ApplicationModel.Contacts.IContactPhone;
            Retval.m_IContactPhone.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPhone

   function get_Number
   (
      this : in out ContactPhone
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPhone.all.get_Number (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Number
   (
      this : in out ContactPhone;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactPhone.all.put_Number (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Kind
   (
      this : in out ContactPhone
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactPhoneKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactPhoneKind;
   begin
      Hr := this.m_IContactPhone.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Kind
   (
      this : in out ContactPhone;
      value : Windows.ApplicationModel.Contacts.ContactPhoneKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPhone.all.put_Kind (value);
   end;

   function get_Description
   (
      this : in out ContactPhone
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPhone.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactPhone;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactPhone.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPicker

   procedure Initialize (this : in out ContactPicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPicker, IContactPicker_Ptr);
   begin
      if this.m_IContactPicker /= null then
         if this.m_IContactPicker.all /= null then
            RefCount := this.m_IContactPicker.all.Release;
            Free (this.m_IContactPicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactPicker

   function Constructor return ContactPicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactPicker");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactPicker;
   begin
      return RetVal : ContactPicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactPicker := new Windows.ApplicationModel.Contacts.IContactPicker;
            Retval.m_IContactPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ContactPicker

   function CreateForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactPicker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactPicker");
      m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactPickerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactPicker;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactPicker do
         Hr := RoGetActivationFactory (m_hString, IID_IContactPickerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IContactPicker := new Windows.ApplicationModel.Contacts.IContactPicker;
            Retval.m_IContactPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function IsSupportedAsync
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactPicker");
      m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IContactPickerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IContactPickerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupportedAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPicker

   function get_CommitButtonText
   (
      this : in out ContactPicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPicker.all.get_CommitButtonText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CommitButtonText
   (
      this : in out ContactPicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactPicker.all.put_CommitButtonText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SelectionMode
   (
      this : in out ContactPicker
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactSelectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactSelectionMode;
   begin
      Hr := this.m_IContactPicker.all.get_SelectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectionMode
   (
      this : in out ContactPicker;
      value : Windows.ApplicationModel.Contacts.ContactSelectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPicker.all.put_SelectionMode (value);
   end;

   function get_DesiredFields
   (
      this : in out ContactPicker
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IContactPicker.all.get_DesiredFields (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function PickSingleContactAsync
   (
      this : in out ContactPicker
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactInformation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactInformation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactInformation;
      m_IID            : aliased WinRt.IID := (240238640, 10154, 22047, (187, 216, 47, 87, 192, 143, 239, 131 )); -- Windows.ApplicationModel.Contacts.ContactInformation;
      m_HandlerIID     : aliased WinRt.IID := (3377168417, 20619, 22683, (147, 179, 37, 86, 203, 199, 58, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactInformation.Kind := new AsyncOperationCompletedHandler_ContactInformation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactInformation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactInformation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactInformation.Kind_Delegate, AsyncOperationCompletedHandler_ContactInformation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactInformation do
         Hr := this.m_IContactPicker.all.PickSingleContactAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactInformation := new Windows.ApplicationModel.Contacts.IContactInformation;
                  Retval.m_IContactInformation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PickMultipleContactsAsync
   (
      this : in out ContactPicker
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3937947658, 27247, 23301, (137, 194, 141, 205, 102, 2, 59, 61 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (94327210, 25798, 21461, (189, 40, 118, 208, 232, 142, 59, 143 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactPicker.all.PickMultipleContactsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_DesiredFieldsWithContactFieldType
   (
      this : in out ContactPicker
   )
   return IVector_ContactFieldType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ContactFieldType.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactPicker_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactPicker2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactPicker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPicker.all);
      Hr := m_Interface.get_DesiredFieldsWithContactFieldType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ContactFieldType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function PickContactAsync
   (
      this : in out ContactPicker
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactPicker_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactPicker2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactPicker2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         m_Interface := QInterface (this.m_IContactPicker.all);
         Hr := m_Interface.PickContactAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PickContactsAsync
   (
      this : in out ContactPicker
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (252703976, 53853, 21416, (186, 135, 26, 107, 35, 228, 49, 92 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1486554435, 61102, 23714, (166, 59, 118, 1, 12, 100, 252, 203 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactPicker_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactPicker2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactPicker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPicker.all);
      Hr := m_Interface.PickContactsAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_User
   (
      this : in out ContactPicker
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactPicker3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactPicker_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactPicker3, WinRt.Windows.ApplicationModel.Contacts.IID_IContactPicker3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IContactPicker.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactQueryOptions

   procedure Initialize (this : in out ContactQueryOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactQueryOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactQueryOptions, IContactQueryOptions_Ptr);
   begin
      if this.m_IContactQueryOptions /= null then
         if this.m_IContactQueryOptions.all /= null then
            RefCount := this.m_IContactQueryOptions.all.Release;
            Free (this.m_IContactQueryOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactQueryOptions

   function Constructor
   (
      text : WinRt.WString
   )
   return ContactQueryOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactQueryOptions");
      m_Factory    : access IContactQueryOptionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactQueryOptions;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : ContactQueryOptions do
         Hr := RoGetActivationFactory (m_hString, IID_IContactQueryOptionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithText (HStr_text, m_ComRetVal'Access);
            Retval.m_IContactQueryOptions := new Windows.ApplicationModel.Contacts.IContactQueryOptions;
            Retval.m_IContactQueryOptions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   function Constructor
   (
      text : WinRt.WString;
      fields : Windows.ApplicationModel.Contacts.ContactQuerySearchFields
   )
   return ContactQueryOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactQueryOptions");
      m_Factory    : access IContactQueryOptionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactQueryOptions;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : ContactQueryOptions do
         Hr := RoGetActivationFactory (m_hString, IID_IContactQueryOptionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTextAndFields (HStr_text, fields, m_ComRetVal'Access);
            Retval.m_IContactQueryOptions := new Windows.ApplicationModel.Contacts.IContactQueryOptions;
            Retval.m_IContactQueryOptions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   function Constructor return ContactQueryOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactQueryOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactQueryOptions;
   begin
      return RetVal : ContactQueryOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactQueryOptions := new Windows.ApplicationModel.Contacts.IContactQueryOptions;
            Retval.m_IContactQueryOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactQueryOptions

   function get_TextSearch
   (
      this : in out ContactQueryOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactQueryTextSearch'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactQueryTextSearch;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactQueryTextSearch do
         Hr := this.m_IContactQueryOptions.all.get_TextSearch (m_ComRetVal'Access);
         Retval.m_IContactQueryTextSearch := new Windows.ApplicationModel.Contacts.IContactQueryTextSearch;
         Retval.m_IContactQueryTextSearch.all := m_ComRetVal;
      end return;
   end;

   function get_ContactListIds
   (
      this : in out ContactQueryOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IContactQueryOptions.all.get_ContactListIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IncludeContactsFromHiddenLists
   (
      this : in out ContactQueryOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContactQueryOptions.all.get_IncludeContactsFromHiddenLists (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncludeContactsFromHiddenLists
   (
      this : in out ContactQueryOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactQueryOptions.all.put_IncludeContactsFromHiddenLists (value);
   end;

   function get_DesiredFields
   (
      this : in out ContactQueryOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactQueryDesiredFields is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactQueryDesiredFields;
   begin
      Hr := this.m_IContactQueryOptions.all.get_DesiredFields (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredFields
   (
      this : in out ContactQueryOptions;
      value : Windows.ApplicationModel.Contacts.ContactQueryDesiredFields
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactQueryOptions.all.put_DesiredFields (value);
   end;

   function get_DesiredOperations
   (
      this : in out ContactQueryOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAnnotationOperations is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactAnnotationOperations;
   begin
      Hr := this.m_IContactQueryOptions.all.get_DesiredOperations (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredOperations
   (
      this : in out ContactQueryOptions;
      value : Windows.ApplicationModel.Contacts.ContactAnnotationOperations
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactQueryOptions.all.put_DesiredOperations (value);
   end;

   function get_AnnotationListIds
   (
      this : in out ContactQueryOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IContactQueryOptions.all.get_AnnotationListIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactQueryTextSearch

   procedure Initialize (this : in out ContactQueryTextSearch) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactQueryTextSearch) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactQueryTextSearch, IContactQueryTextSearch_Ptr);
   begin
      if this.m_IContactQueryTextSearch /= null then
         if this.m_IContactQueryTextSearch.all /= null then
            RefCount := this.m_IContactQueryTextSearch.all.Release;
            Free (this.m_IContactQueryTextSearch);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactQueryTextSearch

   function get_Fields
   (
      this : in out ContactQueryTextSearch
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactQuerySearchFields is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactQuerySearchFields;
   begin
      Hr := this.m_IContactQueryTextSearch.all.get_Fields (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Fields
   (
      this : in out ContactQueryTextSearch;
      value : Windows.ApplicationModel.Contacts.ContactQuerySearchFields
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactQueryTextSearch.all.put_Fields (value);
   end;

   function get_Text
   (
      this : in out ContactQueryTextSearch
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactQueryTextSearch.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out ContactQueryTextSearch;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactQueryTextSearch.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SearchScope
   (
      this : in out ContactQueryTextSearch
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactQuerySearchScope is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactQuerySearchScope;
   begin
      Hr := this.m_IContactQueryTextSearch.all.get_SearchScope (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SearchScope
   (
      this : in out ContactQueryTextSearch;
      value : Windows.ApplicationModel.Contacts.ContactQuerySearchScope
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactQueryTextSearch.all.put_SearchScope (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactReader

   procedure Initialize (this : in out ContactReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactReader, IContactReader_Ptr);
   begin
      if this.m_IContactReader /= null then
         if this.m_IContactReader.all /= null then
            RefCount := this.m_IContactReader.all.Release;
            Free (this.m_IContactReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactReader

   function ReadBatchAsync
   (
      this : in out ContactReader
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactBatch'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactBatch.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactBatch.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactBatch;
      m_IID            : aliased WinRt.IID := (1148171744, 23851, 22813, (184, 222, 251, 124, 149, 252, 159, 55 )); -- Windows.ApplicationModel.Contacts.ContactBatch;
      m_HandlerIID     : aliased WinRt.IID := (3695822669, 6855, 22356, (130, 233, 37, 24, 12, 77, 216, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactBatch.Kind := new AsyncOperationCompletedHandler_ContactBatch.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactBatch.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactBatch.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactBatch.Kind_Delegate, AsyncOperationCompletedHandler_ContactBatch.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactBatch do
         Hr := this.m_IContactReader.all.ReadBatchAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactBatch := new Windows.ApplicationModel.Contacts.IContactBatch;
                  Retval.m_IContactBatch.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetMatchingPropertiesWithMatchReason
   (
      this : in out ContactReader;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return IVectorView_IContactMatchReason.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IContactMatchReason.Kind;
   begin
      Hr := this.m_IContactReader.all.GetMatchingPropertiesWithMatchReason (contact_p.m_IContact.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IContactMatchReason (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactSignificantOther

   procedure Initialize (this : in out ContactSignificantOther) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactSignificantOther) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactSignificantOther, IContactSignificantOther_Ptr);
   begin
      if this.m_IContactSignificantOther /= null then
         if this.m_IContactSignificantOther.all /= null then
            RefCount := this.m_IContactSignificantOther.all.Release;
            Free (this.m_IContactSignificantOther);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactSignificantOther

   function Constructor return ContactSignificantOther is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactSignificantOther");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactSignificantOther;
   begin
      return RetVal : ContactSignificantOther do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactSignificantOther := new Windows.ApplicationModel.Contacts.IContactSignificantOther;
            Retval.m_IContactSignificantOther.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactSignificantOther

   function get_Name
   (
      this : in out ContactSignificantOther
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactSignificantOther.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out ContactSignificantOther;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactSignificantOther.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Description
   (
      this : in out ContactSignificantOther
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactSignificantOther.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactSignificantOther;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactSignificantOther.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Relationship
   (
      this : in out ContactSignificantOther
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactRelationship is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactSignificantOther2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactRelationship;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactSignificantOther_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactSignificantOther2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactSignificantOther2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactSignificantOther.all);
      Hr := m_Interface.get_Relationship (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Relationship
   (
      this : in out ContactSignificantOther;
      value : Windows.ApplicationModel.Contacts.ContactRelationship
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactSignificantOther2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactSignificantOther_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactSignificantOther2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactSignificantOther2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactSignificantOther.all);
      Hr := m_Interface.put_Relationship (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactStore

   procedure Initialize (this : in out ContactStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactStore, IContactStore_Ptr);
   begin
      if this.m_IContactStore /= null then
         if this.m_IContactStore.all /= null then
            RefCount := this.m_IContactStore.all.Release;
            Free (this.m_IContactStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactStore

   function FindContactsAsync
   (
      this : in out ContactStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2474846437, 54368, 20684, (156, 148, 112, 38, 166, 178, 229, 178 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (584740922, 51044, 22731, (145, 133, 204, 250, 195, 96, 2, 90 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactStore.all.FindContactsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindContactsAsync
   (
      this : in out ContactStore;
      searchText : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_searchText : WinRt.HString := To_HString (searchText);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2474846437, 54368, 20684, (156, 148, 112, 38, 166, 178, 229, 178 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (584740922, 51044, 22731, (145, 133, 204, 250, 195, 96, 2, 90 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IContactStore.all.FindContactsAsync (HStr_searchText, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_searchText);
      return m_RetVal;
   end;

   function GetContactAsync
   (
      this : in out ContactStore;
      contactId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contactId : WinRt.HString := To_HString (contactId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactStore.all.GetContactAsync (HStr_contactId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_contactId);
      end return;
   end;

   function get_ChangeTracker
   (
      this : in out ContactStore
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactChangeTracker;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.get_ChangeTracker (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactChangeTracker := new Windows.ApplicationModel.Contacts.IContactChangeTracker;
         Retval.m_IContactChangeTracker.all := m_ComRetVal;
      end return;
   end;

   function add_ContactChanged
   (
      this : in out ContactStore;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactStore.all);
      Hr := m_Interface.add_ContactChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ContactChanged
   (
      this : in out ContactStore;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactStore.all);
      Hr := m_Interface.remove_ContactChanged (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AggregateContactManager
   (
      this : in out ContactStore
   )
   return WinRt.Windows.ApplicationModel.Contacts.AggregateContactManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IAggregateContactManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.AggregateContactManager do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.get_AggregateContactManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAggregateContactManager := new Windows.ApplicationModel.Contacts.IAggregateContactManager;
         Retval.m_IAggregateContactManager.all := m_ComRetVal;
      end return;
   end;

   function FindContactListsAsync
   (
      this : in out ContactStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2046642051, 23753, 22299, (188, 66, 226, 226, 248, 221, 249, 103 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3937380879, 18219, 23729, (173, 122, 173, 159, 213, 5, 226, 197 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactStore.all);
      Hr := m_Interface.FindContactListsAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetContactListAsync
   (
      this : in out ContactStore;
      contactListId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contactListId : WinRt.HString := To_HString (contactListId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactList;
      m_IID            : aliased WinRt.IID := (2927717181, 22440, 20647, (128, 126, 44, 118, 138, 54, 74, 79 )); -- Windows.ApplicationModel.Contacts.ContactList;
      m_HandlerIID     : aliased WinRt.IID := (3563555570, 11460, 22672, (179, 162, 3, 165, 171, 123, 184, 248 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactList.Kind := new AsyncOperationCompletedHandler_ContactList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactList.Kind_Delegate, AsyncOperationCompletedHandler_ContactList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactList do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.GetContactListAsync (HStr_contactListId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactList := new Windows.ApplicationModel.Contacts.IContactList;
                  Retval.m_IContactList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_contactListId);
      end return;
   end;

   function CreateContactListAsync
   (
      this : in out ContactStore;
      displayName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_displayName : WinRt.HString := To_HString (displayName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactList;
      m_IID            : aliased WinRt.IID := (2927717181, 22440, 20647, (128, 126, 44, 118, 138, 54, 74, 79 )); -- Windows.ApplicationModel.Contacts.ContactList;
      m_HandlerIID     : aliased WinRt.IID := (3563555570, 11460, 22672, (179, 162, 3, 165, 171, 123, 184, 248 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactList.Kind := new AsyncOperationCompletedHandler_ContactList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactList.Kind_Delegate, AsyncOperationCompletedHandler_ContactList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactList do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.CreateContactListAsync (HStr_displayName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactList := new Windows.ApplicationModel.Contacts.IContactList;
                  Retval.m_IContactList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   function GetMeContactAsync
   (
      this : in out ContactStore
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Contact.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Contact.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContact;
      m_IID            : aliased WinRt.IID := (2239609187, 63020, 21444, (163, 160, 246, 191, 12, 143, 211, 211 )); -- Windows.ApplicationModel.Contacts.Contact;
      m_HandlerIID     : aliased WinRt.IID := (2714803182, 49537, 21529, (189, 20, 130, 35, 185, 95, 41, 161 ));
      m_Handler        : AsyncOperationCompletedHandler_Contact.Kind := new AsyncOperationCompletedHandler_Contact.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Contact.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Contact.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Contact.Kind_Delegate, AsyncOperationCompletedHandler_Contact.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.GetMeContactAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
                  Retval.m_IContact.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetContactReader
   (
      this : in out ContactStore
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactReader;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactReader do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.GetContactReader (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactReader := new Windows.ApplicationModel.Contacts.IContactReader;
         Retval.m_IContactReader.all := m_ComRetVal;
      end return;
   end;

   function GetContactReader
   (
      this : in out ContactStore;
      options : Windows.ApplicationModel.Contacts.ContactQueryOptions'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactReader;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactReader do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.GetContactReader (options.m_IContactQueryOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactReader := new Windows.ApplicationModel.Contacts.IContactReader;
         Retval.m_IContactReader.all := m_ComRetVal;
      end return;
   end;

   function CreateContactListAsync
   (
      this : in out ContactStore;
      displayName : WinRt.WString;
      userDataAccountId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_displayName : WinRt.HString := To_HString (displayName);
      HStr_userDataAccountId : WinRt.HString := To_HString (userDataAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContactList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContactList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IContactList;
      m_IID            : aliased WinRt.IID := (2927717181, 22440, 20647, (128, 126, 44, 118, 138, 54, 74, 79 )); -- Windows.ApplicationModel.Contacts.ContactList;
      m_HandlerIID     : aliased WinRt.IID := (3563555570, 11460, 22672, (179, 162, 3, 165, 171, 123, 184, 248 ));
      m_Handler        : AsyncOperationCompletedHandler_ContactList.Kind := new AsyncOperationCompletedHandler_ContactList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContactList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContactList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContactList.Kind_Delegate, AsyncOperationCompletedHandler_ContactList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactList do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.CreateContactListAsync (HStr_displayName, HStr_userDataAccountId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContactList := new Windows.ApplicationModel.Contacts.IContactList;
                  Retval.m_IContactList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_displayName);
         Hr := WindowsDeleteString (HStr_userDataAccountId);
      end return;
   end;

   function GetChangeTracker
   (
      this : in out ContactStore;
      identity : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactStore3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactChangeTracker;
      HStr_identity : WinRt.HString := To_HString (identity);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactStore_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactStore3, WinRt.Windows.ApplicationModel.Contacts.IID_IContactStore3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactChangeTracker do
         m_Interface := QInterface (this.m_IContactStore.all);
         Hr := m_Interface.GetChangeTracker (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContactChangeTracker := new Windows.ApplicationModel.Contacts.IContactChangeTracker;
         Retval.m_IContactChangeTracker.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_identity);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactStoreNotificationTriggerDetails

   procedure Initialize (this : in out ContactStoreNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactStoreNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactStoreNotificationTriggerDetails, IContactStoreNotificationTriggerDetails_Ptr);
   begin
      if this.m_IContactStoreNotificationTriggerDetails /= null then
         if this.m_IContactStoreNotificationTriggerDetails.all /= null then
            RefCount := this.m_IContactStoreNotificationTriggerDetails.all.Release;
            Free (this.m_IContactStoreNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactStoreNotificationTriggerDetails

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactWebsite

   procedure Initialize (this : in out ContactWebsite) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactWebsite) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactWebsite, IContactWebsite_Ptr);
   begin
      if this.m_IContactWebsite /= null then
         if this.m_IContactWebsite.all /= null then
            RefCount := this.m_IContactWebsite.all.Release;
            Free (this.m_IContactWebsite);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactWebsite

   function Constructor return ContactWebsite is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.ContactWebsite");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IContactWebsite;
   begin
      return RetVal : ContactWebsite do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactWebsite := new Windows.ApplicationModel.Contacts.IContactWebsite;
            Retval.m_IContactWebsite.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactWebsite

   function get_Uri
   (
      this : in out ContactWebsite
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IContactWebsite.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out ContactWebsite;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactWebsite.all.put_Uri (value.m_IUriRuntimeClass.all);
   end;

   function get_Description
   (
      this : in out ContactWebsite
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactWebsite.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out ContactWebsite;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContactWebsite.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RawValue
   (
      this : in out ContactWebsite
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactWebsite2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactWebsite_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactWebsite2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactWebsite2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactWebsite.all);
      Hr := m_Interface.get_RawValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RawValue
   (
      this : in out ContactWebsite;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.IContactWebsite2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.IContactWebsite_Interface, WinRt.Windows.ApplicationModel.Contacts.IContactWebsite2, WinRt.Windows.ApplicationModel.Contacts.IID_IContactWebsite2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactWebsite.all);
      Hr := m_Interface.put_RawValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FullContactCardOptions

   procedure Initialize (this : in out FullContactCardOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out FullContactCardOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFullContactCardOptions, IFullContactCardOptions_Ptr);
   begin
      if this.m_IFullContactCardOptions /= null then
         if this.m_IFullContactCardOptions.all /= null then
            RefCount := this.m_IFullContactCardOptions.all.Release;
            Free (this.m_IFullContactCardOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FullContactCardOptions

   function Constructor return FullContactCardOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.FullContactCardOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Contacts.IFullContactCardOptions;
   begin
      return RetVal : FullContactCardOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFullContactCardOptions := new Windows.ApplicationModel.Contacts.IFullContactCardOptions;
            Retval.m_IFullContactCardOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FullContactCardOptions

   function get_DesiredRemainingView
   (
      this : in out FullContactCardOptions
   )
   return WinRt.Windows.UI.ViewManagement.ViewSizePreference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ViewSizePreference;
   begin
      Hr := this.m_IFullContactCardOptions.all.get_DesiredRemainingView (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredRemainingView
   (
      this : in out FullContactCardOptions;
      value : Windows.UI.ViewManagement.ViewSizePreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFullContactCardOptions.all.put_DesiredRemainingView (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownContactField is

      function get_Email
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.KnownContactField");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IKnownContactFieldStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownContactFieldStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Email (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PhoneNumber
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.KnownContactField");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IKnownContactFieldStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownContactFieldStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneNumber (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Location
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.KnownContactField");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IKnownContactFieldStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownContactFieldStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Location (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_InstantMessage
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.KnownContactField");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IKnownContactFieldStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownContactFieldStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InstantMessage (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function ConvertNameToType
      (
         name : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Contacts.ContactFieldType is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.KnownContactField");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IKnownContactFieldStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactFieldType;
         HStr_name : WinRt.HString := To_HString (name);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownContactFieldStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ConvertNameToType (HStr_name, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         return m_ComRetVal;
      end;

      function ConvertTypeToName
      (
         type_x : Windows.ApplicationModel.Contacts.ContactFieldType
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.KnownContactField");
         m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IKnownContactFieldStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownContactFieldStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ConvertTypeToName (type_x, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownContactField;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PinnedContactIdsQueryResult

   procedure Initialize (this : in out PinnedContactIdsQueryResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PinnedContactIdsQueryResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPinnedContactIdsQueryResult, IPinnedContactIdsQueryResult_Ptr);
   begin
      if this.m_IPinnedContactIdsQueryResult /= null then
         if this.m_IPinnedContactIdsQueryResult.all /= null then
            RefCount := this.m_IPinnedContactIdsQueryResult.all.Release;
            Free (this.m_IPinnedContactIdsQueryResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PinnedContactIdsQueryResult

   function get_ContactIds
   (
      this : in out PinnedContactIdsQueryResult
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IPinnedContactIdsQueryResult.all.get_ContactIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PinnedContactManager

   procedure Initialize (this : in out PinnedContactManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out PinnedContactManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPinnedContactManager, IPinnedContactManager_Ptr);
   begin
      if this.m_IPinnedContactManager /= null then
         if this.m_IPinnedContactManager.all /= null then
            RefCount := this.m_IPinnedContactManager.all.Release;
            Free (this.m_IPinnedContactManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PinnedContactManager

   function GetDefault
   return WinRt.Windows.ApplicationModel.Contacts.PinnedContactManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.PinnedContactManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IPinnedContactManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IPinnedContactManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.PinnedContactManager do
         Hr := RoGetActivationFactory (m_hString, IID_IPinnedContactManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPinnedContactManager := new Windows.ApplicationModel.Contacts.IPinnedContactManager;
            Retval.m_IPinnedContactManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.PinnedContactManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.PinnedContactManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IPinnedContactManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IPinnedContactManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.PinnedContactManager do
         Hr := RoGetActivationFactory (m_hString, IID_IPinnedContactManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPinnedContactManager := new Windows.ApplicationModel.Contacts.IPinnedContactManager;
            Retval.m_IPinnedContactManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Contacts.PinnedContactManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.Contacts.IPinnedContactManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPinnedContactManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PinnedContactManager

   function get_User
   (
      this : in out PinnedContactManager
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IPinnedContactManager.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function IsPinSurfaceSupported
   (
      this : in out PinnedContactManager;
      surface : Windows.ApplicationModel.Contacts.PinnedContactSurface
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPinnedContactManager.all.IsPinSurfaceSupported (surface, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsContactPinned
   (
      this : in out PinnedContactManager;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
      surface : Windows.ApplicationModel.Contacts.PinnedContactSurface
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPinnedContactManager.all.IsContactPinned (contact_p.m_IContact.all, surface, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestPinContactAsync
   (
      this : in out PinnedContactManager;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
      surface : Windows.ApplicationModel.Contacts.PinnedContactSurface
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPinnedContactManager.all.RequestPinContactAsync (contact_p.m_IContact.all, surface, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestPinContactsAsync
   (
      this : in out PinnedContactManager;
      contacts : GenericObject;
      surface : Windows.ApplicationModel.Contacts.PinnedContactSurface
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPinnedContactManager.all.RequestPinContactsAsync (contacts, surface, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestUnpinContactAsync
   (
      this : in out PinnedContactManager;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class;
      surface : Windows.ApplicationModel.Contacts.PinnedContactSurface
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPinnedContactManager.all.RequestUnpinContactAsync (contact_p.m_IContact.all, surface, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure SignalContactActivity
   (
      this : in out PinnedContactManager;
      contact_p : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPinnedContactManager.all.SignalContactActivity (contact_p.m_IContact.all);
   end;

   function GetPinnedContactIdsAsync
   (
      this : in out PinnedContactManager
   )
   return WinRt.Windows.ApplicationModel.Contacts.PinnedContactIdsQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PinnedContactIdsQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PinnedContactIdsQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Contacts.IPinnedContactIdsQueryResult;
      m_IID            : aliased WinRt.IID := (52091756, 15011, 23305, (168, 251, 146, 234, 1, 69, 220, 64 )); -- Windows.ApplicationModel.Contacts.PinnedContactIdsQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (2466915234, 10447, 22022, (130, 241, 101, 223, 238, 34, 135, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_PinnedContactIdsQueryResult.Kind := new AsyncOperationCompletedHandler_PinnedContactIdsQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PinnedContactIdsQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PinnedContactIdsQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PinnedContactIdsQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_PinnedContactIdsQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.PinnedContactIdsQueryResult do
         Hr := this.m_IPinnedContactManager.all.GetPinnedContactIdsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPinnedContactIdsQueryResult := new Windows.ApplicationModel.Contacts.IPinnedContactIdsQueryResult;
                  Retval.m_IPinnedContactIdsQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

end;

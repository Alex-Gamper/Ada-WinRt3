--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Security.Cryptography.Certificates;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.AllJoyn is

   package IAsyncOperation_AllJoynAboutDataView is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataView);
   package AsyncOperationCompletedHandler_AllJoynAboutDataView is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataView);

   package IAsyncOperation_Int32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Int32);
   package AsyncOperationCompletedHandler_Int32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Int32);

   package IAsyncOperation_AllJoynServiceInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.AllJoyn.IAllJoynServiceInfo);
   package AsyncOperationCompletedHandler_AllJoynServiceInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.AllJoyn.IAllJoynServiceInfo);

   package IAsyncOperation_AllJoynSession is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.AllJoyn.IAllJoynSession);
   package AsyncOperationCompletedHandler_AllJoynSession is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.AllJoyn.IAllJoynSession);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynAboutData

   procedure Initialize (this : in out AllJoynAboutData) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynAboutData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynAboutData, IAllJoynAboutData_Ptr);
   begin
      if this.m_IAllJoynAboutData /= null then
         if this.m_IAllJoynAboutData.all /= null then
            RefCount := this.m_IAllJoynAboutData.all.Release;
            Free (this.m_IAllJoynAboutData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynAboutData

   function get_IsEnabled
   (
      this : in out AllJoynAboutData
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out AllJoynAboutData;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynAboutData.all.put_IsEnabled (value);
   end;

   function get_DefaultAppName
   (
      this : in out AllJoynAboutData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_DefaultAppName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DefaultAppName
   (
      this : in out AllJoynAboutData;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAllJoynAboutData.all.put_DefaultAppName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AppNames
   (
      this : in out AllJoynAboutData
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_AppNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DateOfManufacture
   (
      this : in out AllJoynAboutData
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_DateOfManufacture (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DateOfManufacture
   (
      this : in out AllJoynAboutData;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynAboutData.all.put_DateOfManufacture (value);
   end;

   function get_DefaultDescription
   (
      this : in out AllJoynAboutData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_DefaultDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DefaultDescription
   (
      this : in out AllJoynAboutData;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAllJoynAboutData.all.put_DefaultDescription (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Descriptions
   (
      this : in out AllJoynAboutData
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_Descriptions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DefaultManufacturer
   (
      this : in out AllJoynAboutData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_DefaultManufacturer (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DefaultManufacturer
   (
      this : in out AllJoynAboutData;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAllJoynAboutData.all.put_DefaultManufacturer (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Manufacturers
   (
      this : in out AllJoynAboutData
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_Manufacturers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ModelNumber
   (
      this : in out AllJoynAboutData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_ModelNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ModelNumber
   (
      this : in out AllJoynAboutData;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAllJoynAboutData.all.put_ModelNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SoftwareVersion
   (
      this : in out AllJoynAboutData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_SoftwareVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SoftwareVersion
   (
      this : in out AllJoynAboutData;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAllJoynAboutData.all.put_SoftwareVersion (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SupportUrl
   (
      this : in out AllJoynAboutData
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAllJoynAboutData.all.get_SupportUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_SupportUrl
   (
      this : in out AllJoynAboutData;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynAboutData.all.put_SupportUrl (value.m_IUriRuntimeClass.all);
   end;

   function get_AppId
   (
      this : in out AllJoynAboutData
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IAllJoynAboutData.all.get_AppId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AppId
   (
      this : in out AllJoynAboutData;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynAboutData.all.put_AppId (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynAboutDataView

   procedure Initialize (this : in out AllJoynAboutDataView) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynAboutDataView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynAboutDataView, IAllJoynAboutDataView_Ptr);
   begin
      if this.m_IAllJoynAboutDataView /= null then
         if this.m_IAllJoynAboutDataView.all /= null then
            RefCount := this.m_IAllJoynAboutDataView.all.Release;
            Free (this.m_IAllJoynAboutDataView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AllJoynAboutDataView

   function GetDataBySessionPortAsync
   (
      uniqueName : WinRt.WString;
      busAttachment : Windows.Devices.AllJoyn.AllJoynBusAttachment'Class;
      sessionPort : WinRt.UInt16
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynAboutDataView");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataViewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynAboutDataView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynAboutDataView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataView;
      m_IID            : aliased WinRt.IID := (928465230, 62795, 20932, (143, 47, 224, 71, 117, 89, 178, 173 )); -- Windows.Devices.AllJoyn.AllJoynAboutDataView;
      m_HandlerIID     : aliased WinRt.IID := (3123553013, 63920, 23654, (143, 201, 125, 67, 122, 103, 242, 138 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind := new AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynAboutDataView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynAboutDataViewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDataBySessionPortAsync (HStr_uniqueName, busAttachment.m_IAllJoynBusAttachment.all, sessionPort, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAllJoynAboutDataView := new Windows.Devices.AllJoyn.IAllJoynAboutDataView;
                     Retval.m_IAllJoynAboutDataView.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
      end return;
   end;

   function GetDataBySessionPortAsync
   (
      uniqueName : WinRt.WString;
      busAttachment : Windows.Devices.AllJoyn.AllJoynBusAttachment'Class;
      sessionPort : WinRt.UInt16;
      language : Windows.Globalization.Language'Class
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynAboutDataView");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataViewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynAboutDataView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynAboutDataView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataView;
      m_IID            : aliased WinRt.IID := (928465230, 62795, 20932, (143, 47, 224, 71, 117, 89, 178, 173 )); -- Windows.Devices.AllJoyn.AllJoynAboutDataView;
      m_HandlerIID     : aliased WinRt.IID := (3123553013, 63920, 23654, (143, 201, 125, 67, 122, 103, 242, 138 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind := new AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynAboutDataView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynAboutDataViewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDataBySessionPortAsync (HStr_uniqueName, busAttachment.m_IAllJoynBusAttachment.all, sessionPort, language.m_ILanguage.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAllJoynAboutDataView := new Windows.Devices.AllJoyn.IAllJoynAboutDataView;
                     Retval.m_IAllJoynAboutDataView.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynAboutDataView

   function get_Status
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out AllJoynAboutDataView
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AJSoftwareVersion
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_AJSoftwareVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_AppId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DateOfManufacture
   (
      this : in out AllJoynAboutDataView
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_DateOfManufacture (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DefaultLanguage
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := this.m_IAllJoynAboutDataView.all.get_DefaultLanguage (m_ComRetVal'Access);
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceId
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HardwareVersion
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_HardwareVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelNumber
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_ModelNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SoftwareVersion
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_SoftwareVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportedLanguages
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_SupportedLanguages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportUrl
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAllJoynAboutDataView.all.get_SupportUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_AppName
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_AppName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceName
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_DeviceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Manufacturer
   (
      this : in out AllJoynAboutDataView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAboutDataView.all.get_Manufacturer (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynAcceptSessionJoinerEventArgs

   procedure Initialize (this : in out AllJoynAcceptSessionJoinerEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynAcceptSessionJoinerEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynAcceptSessionJoinerEventArgs, IAllJoynAcceptSessionJoinerEventArgs_Ptr);
   begin
      if this.m_IAllJoynAcceptSessionJoinerEventArgs /= null then
         if this.m_IAllJoynAcceptSessionJoinerEventArgs.all /= null then
            RefCount := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.Release;
            Free (this.m_IAllJoynAcceptSessionJoinerEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynAcceptSessionJoinerEventArgs

   function Constructor
   (
      uniqueName : WinRt.WString;
      sessionPort : WinRt.UInt16;
      trafficType : Windows.Devices.AllJoyn.AllJoynTrafficType;
      proximity : WinRt.Byte;
      acceptSessionJoiner : Windows.Devices.AllJoyn.IAllJoynAcceptSessionJoiner
   )
   return AllJoynAcceptSessionJoinerEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynAcceptSessionJoinerEventArgs");
      m_Factory    : access IAllJoynAcceptSessionJoinerEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynAcceptSessionJoinerEventArgs;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
   begin
      return RetVal : AllJoynAcceptSessionJoinerEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynAcceptSessionJoinerEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_uniqueName, sessionPort, trafficType, proximity, acceptSessionJoiner, m_ComRetVal'Access);
            Retval.m_IAllJoynAcceptSessionJoinerEventArgs := new Windows.Devices.AllJoyn.IAllJoynAcceptSessionJoinerEventArgs;
            Retval.m_IAllJoynAcceptSessionJoinerEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynAcceptSessionJoinerEventArgs

   function get_UniqueName
   (
      this : in out AllJoynAcceptSessionJoinerEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.get_UniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SessionPort
   (
      this : in out AllJoynAcceptSessionJoinerEventArgs
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.get_SessionPort (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrafficType
   (
      this : in out AllJoynAcceptSessionJoinerEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynTrafficType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynTrafficType;
   begin
      Hr := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.get_TrafficType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SamePhysicalNode
   (
      this : in out AllJoynAcceptSessionJoinerEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.get_SamePhysicalNode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SameNetwork
   (
      this : in out AllJoynAcceptSessionJoinerEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.get_SameNetwork (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Accept_x
   (
      this : in out AllJoynAcceptSessionJoinerEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynAcceptSessionJoinerEventArgs.all.Accept_x;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynAuthenticationCompleteEventArgs

   procedure Initialize (this : in out AllJoynAuthenticationCompleteEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynAuthenticationCompleteEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynAuthenticationCompleteEventArgs, IAllJoynAuthenticationCompleteEventArgs_Ptr);
   begin
      if this.m_IAllJoynAuthenticationCompleteEventArgs /= null then
         if this.m_IAllJoynAuthenticationCompleteEventArgs.all /= null then
            RefCount := this.m_IAllJoynAuthenticationCompleteEventArgs.all.Release;
            Free (this.m_IAllJoynAuthenticationCompleteEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynAuthenticationCompleteEventArgs

   function get_AuthenticationMechanism
   (
      this : in out AllJoynAuthenticationCompleteEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAuthenticationMechanism is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynAuthenticationMechanism;
   begin
      Hr := this.m_IAllJoynAuthenticationCompleteEventArgs.all.get_AuthenticationMechanism (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeerUniqueName
   (
      this : in out AllJoynAuthenticationCompleteEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynAuthenticationCompleteEventArgs.all.get_PeerUniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Succeeded
   (
      this : in out AllJoynAuthenticationCompleteEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAllJoynAuthenticationCompleteEventArgs.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynBusAttachment

   procedure Initialize (this : in out AllJoynBusAttachment) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynBusAttachment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynBusAttachment, IAllJoynBusAttachment_Ptr);
   begin
      if this.m_IAllJoynBusAttachment /= null then
         if this.m_IAllJoynBusAttachment.all /= null then
            RefCount := this.m_IAllJoynBusAttachment.all.Release;
            Free (this.m_IAllJoynBusAttachment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynBusAttachment

   function Constructor return AllJoynBusAttachment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusAttachment");
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynBusAttachment;
   begin
      return RetVal : AllJoynBusAttachment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAllJoynBusAttachment := new Windows.Devices.AllJoyn.IAllJoynBusAttachment;
            Retval.m_IAllJoynBusAttachment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      connectionSpecification : WinRt.WString
   )
   return AllJoynBusAttachment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusAttachment");
      m_Factory    : access IAllJoynBusAttachmentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynBusAttachment;
      HStr_connectionSpecification : WinRt.HString := To_HString (connectionSpecification);
   begin
      return RetVal : AllJoynBusAttachment do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynBusAttachmentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_connectionSpecification, m_ComRetVal'Access);
            Retval.m_IAllJoynBusAttachment := new Windows.Devices.AllJoyn.IAllJoynBusAttachment;
            Retval.m_IAllJoynBusAttachment.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_connectionSpecification);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AllJoynBusAttachment

   function GetDefault
   return WinRt.Windows.Devices.AllJoyn.AllJoynBusAttachment is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusAttachment");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.IAllJoynBusAttachment;
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynBusAttachment do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynBusAttachmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAllJoynBusAttachment := new Windows.Devices.AllJoyn.IAllJoynBusAttachment;
            Retval.m_IAllJoynBusAttachment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetWatcher
   (
      requiredInterfaces : GenericObject
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusAttachment");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachmentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceWatcher;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynBusAttachmentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetWatcher (requiredInterfaces, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceWatcher := new Windows.Devices.Enumeration.IDeviceWatcher;
            Retval.m_IDeviceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynBusAttachment

   function get_AboutData
   (
      this : in out AllJoynBusAttachment
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAboutData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.IAllJoynAboutData;
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynAboutData do
         Hr := this.m_IAllJoynBusAttachment.all.get_AboutData (m_ComRetVal'Access);
         Retval.m_IAllJoynAboutData := new Windows.Devices.AllJoyn.IAllJoynAboutData;
         Retval.m_IAllJoynAboutData.all := m_ComRetVal;
      end return;
   end;

   function get_ConnectionSpecification
   (
      this : in out AllJoynBusAttachment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.get_ConnectionSpecification (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out AllJoynBusAttachment
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynBusAttachmentState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynBusAttachmentState;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UniqueName
   (
      this : in out AllJoynBusAttachment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.get_UniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function PingAsync
   (
      this : in out AllJoynBusAttachment;
      uniqueName : WinRt.WString
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Int32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Int32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Int32;
      m_IID            : aliased WinRt.IID := (2525730405, 1773, 22388, (143, 83, 142, 222, 171, 213, 247, 181 )); -- Int32;
      m_HandlerIID     : aliased WinRt.IID := (3591155357, 35019, 23025, (133, 118, 63, 186, 68, 121, 107, 232 ));
      m_Handler        : AsyncOperationCompletedHandler_Int32.Kind := new AsyncOperationCompletedHandler_Int32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Int32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Int32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Int32.Kind_Delegate, AsyncOperationCompletedHandler_Int32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAllJoynBusAttachment.all.PingAsync (HStr_uniqueName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_uniqueName);
      return m_RetVal;
   end;

   procedure Connect
   (
      this : in out AllJoynBusAttachment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.Connect;
   end;

   procedure Disconnect
   (
      this : in out AllJoynBusAttachment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.Disconnect;
   end;

   function add_StateChanged
   (
      this : in out AllJoynBusAttachment;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out AllJoynBusAttachment;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.remove_StateChanged (token);
   end;

   function get_AuthenticationMechanisms
   (
      this : in out AllJoynBusAttachment
   )
   return IVector_AllJoynAuthenticationMechanism.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_AllJoynAuthenticationMechanism.Kind;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.get_AuthenticationMechanisms (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_AllJoynAuthenticationMechanism (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_CredentialsRequested
   (
      this : in out AllJoynBusAttachment;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.add_CredentialsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CredentialsRequested
   (
      this : in out AllJoynBusAttachment;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.remove_CredentialsRequested (token);
   end;

   function add_CredentialsVerificationRequested
   (
      this : in out AllJoynBusAttachment;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.add_CredentialsVerificationRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CredentialsVerificationRequested
   (
      this : in out AllJoynBusAttachment;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.remove_CredentialsVerificationRequested (token);
   end;

   function add_AuthenticationComplete
   (
      this : in out AllJoynBusAttachment;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.add_AuthenticationComplete (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AuthenticationComplete
   (
      this : in out AllJoynBusAttachment;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusAttachment.all.remove_AuthenticationComplete (token);
   end;

   function GetAboutDataAsync
   (
      this : in out AllJoynBusAttachment;
      serviceInfo : Windows.Devices.AllJoyn.AllJoynServiceInfo'Class
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynAboutDataView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynAboutDataView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataView;
      m_IID            : aliased WinRt.IID := (928465230, 62795, 20932, (143, 47, 224, 71, 117, 89, 178, 173 )); -- Windows.Devices.AllJoyn.AllJoynAboutDataView;
      m_HandlerIID     : aliased WinRt.IID := (3123553013, 63920, 23654, (143, 201, 125, 67, 122, 103, 242, 138 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind := new AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynAboutDataView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment_Interface, WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2, WinRt.Windows.Devices.AllJoyn.IID_IAllJoynBusAttachment2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView do
         m_Interface := QInterface (this.m_IAllJoynBusAttachment.all);
         Hr := m_Interface.GetAboutDataAsync (serviceInfo.m_IAllJoynServiceInfo.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAllJoynAboutDataView := new Windows.Devices.AllJoyn.IAllJoynAboutDataView;
                  Retval.m_IAllJoynAboutDataView.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAboutDataAsync
   (
      this : in out AllJoynBusAttachment;
      serviceInfo : Windows.Devices.AllJoyn.AllJoynServiceInfo'Class;
      language : Windows.Globalization.Language'Class
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynAboutDataView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynAboutDataView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynAboutDataView;
      m_IID            : aliased WinRt.IID := (928465230, 62795, 20932, (143, 47, 224, 71, 117, 89, 178, 173 )); -- Windows.Devices.AllJoyn.AllJoynAboutDataView;
      m_HandlerIID     : aliased WinRt.IID := (3123553013, 63920, 23654, (143, 201, 125, 67, 122, 103, 242, 138 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind := new AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynAboutDataView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynAboutDataView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment_Interface, WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2, WinRt.Windows.Devices.AllJoyn.IID_IAllJoynBusAttachment2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynAboutDataView do
         m_Interface := QInterface (this.m_IAllJoynBusAttachment.all);
         Hr := m_Interface.GetAboutDataAsync (serviceInfo.m_IAllJoynServiceInfo.all, language.m_ILanguage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAllJoynAboutDataView := new Windows.Devices.AllJoyn.IAllJoynAboutDataView;
                  Retval.m_IAllJoynAboutDataView.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_AcceptSessionJoinerRequested
   (
      this : in out AllJoynBusAttachment;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment_Interface, WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2, WinRt.Windows.Devices.AllJoyn.IID_IAllJoynBusAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAllJoynBusAttachment.all);
      Hr := m_Interface.add_AcceptSessionJoinerRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AcceptSessionJoinerRequested
   (
      this : in out AllJoynBusAttachment;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment_Interface, WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2, WinRt.Windows.Devices.AllJoyn.IID_IAllJoynBusAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAllJoynBusAttachment.all);
      Hr := m_Interface.remove_AcceptSessionJoinerRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_SessionJoined
   (
      this : in out AllJoynBusAttachment;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment_Interface, WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2, WinRt.Windows.Devices.AllJoyn.IID_IAllJoynBusAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAllJoynBusAttachment.all);
      Hr := m_Interface.add_SessionJoined (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SessionJoined
   (
      this : in out AllJoynBusAttachment;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment_Interface, WinRt.Windows.Devices.AllJoyn.IAllJoynBusAttachment2, WinRt.Windows.Devices.AllJoyn.IID_IAllJoynBusAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAllJoynBusAttachment.all);
      Hr := m_Interface.remove_SessionJoined (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynBusAttachmentStateChangedEventArgs

   procedure Initialize (this : in out AllJoynBusAttachmentStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynBusAttachmentStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynBusAttachmentStateChangedEventArgs, IAllJoynBusAttachmentStateChangedEventArgs_Ptr);
   begin
      if this.m_IAllJoynBusAttachmentStateChangedEventArgs /= null then
         if this.m_IAllJoynBusAttachmentStateChangedEventArgs.all /= null then
            RefCount := this.m_IAllJoynBusAttachmentStateChangedEventArgs.all.Release;
            Free (this.m_IAllJoynBusAttachmentStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynBusAttachmentStateChangedEventArgs

   function get_State
   (
      this : in out AllJoynBusAttachmentStateChangedEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynBusAttachmentState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynBusAttachmentState;
   begin
      Hr := this.m_IAllJoynBusAttachmentStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out AllJoynBusAttachmentStateChangedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynBusAttachmentStateChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynBusObject

   procedure Initialize (this : in out AllJoynBusObject) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynBusObject) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynBusObject, IAllJoynBusObject_Ptr);
   begin
      if this.m_IAllJoynBusObject /= null then
         if this.m_IAllJoynBusObject.all /= null then
            RefCount := this.m_IAllJoynBusObject.all.Release;
            Free (this.m_IAllJoynBusObject);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynBusObject

   function Constructor
   (
      objectPath : WinRt.WString
   )
   return AllJoynBusObject is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusObject");
      m_Factory    : access IAllJoynBusObjectFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynBusObject;
      HStr_objectPath : WinRt.HString := To_HString (objectPath);
   begin
      return RetVal : AllJoynBusObject do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynBusObjectFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_objectPath, m_ComRetVal'Access);
            Retval.m_IAllJoynBusObject := new Windows.Devices.AllJoyn.IAllJoynBusObject;
            Retval.m_IAllJoynBusObject.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_objectPath);
      end return;
   end;

   function Constructor
   (
      objectPath : WinRt.WString;
      busAttachment : Windows.Devices.AllJoyn.AllJoynBusAttachment'Class
   )
   return AllJoynBusObject is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusObject");
      m_Factory    : access IAllJoynBusObjectFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynBusObject;
      HStr_objectPath : WinRt.HString := To_HString (objectPath);
   begin
      return RetVal : AllJoynBusObject do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynBusObjectFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithBusAttachment (HStr_objectPath, busAttachment.m_IAllJoynBusAttachment.all, m_ComRetVal'Access);
            Retval.m_IAllJoynBusObject := new Windows.Devices.AllJoyn.IAllJoynBusObject;
            Retval.m_IAllJoynBusObject.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_objectPath);
      end return;
   end;

   function Constructor return AllJoynBusObject is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusObject");
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynBusObject;
   begin
      return RetVal : AllJoynBusObject do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAllJoynBusObject := new Windows.Devices.AllJoyn.IAllJoynBusObject;
            Retval.m_IAllJoynBusObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynBusObject

   procedure Start
   (
      this : in out AllJoynBusObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusObject.all.Start;
   end;

   procedure Stop
   (
      this : in out AllJoynBusObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusObject.all.Stop;
   end;

   procedure AddProducer
   (
      this : in out AllJoynBusObject;
      producer : Windows.Devices.AllJoyn.IAllJoynProducer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusObject.all.AddProducer (producer);
   end;

   function get_BusAttachment
   (
      this : in out AllJoynBusObject
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynBusAttachment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.IAllJoynBusAttachment;
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynBusAttachment do
         Hr := this.m_IAllJoynBusObject.all.get_BusAttachment (m_ComRetVal'Access);
         Retval.m_IAllJoynBusAttachment := new Windows.Devices.AllJoyn.IAllJoynBusAttachment;
         Retval.m_IAllJoynBusAttachment.all := m_ComRetVal;
      end return;
   end;

   function get_Session
   (
      this : in out AllJoynBusObject
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.IAllJoynSession;
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynSession do
         Hr := this.m_IAllJoynBusObject.all.get_Session (m_ComRetVal'Access);
         Retval.m_IAllJoynSession := new Windows.Devices.AllJoyn.IAllJoynSession;
         Retval.m_IAllJoynSession.all := m_ComRetVal;
      end return;
   end;

   function add_Stopped
   (
      this : in out AllJoynBusObject;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynBusObject.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out AllJoynBusObject;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynBusObject.all.remove_Stopped (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynBusObjectStoppedEventArgs

   procedure Initialize (this : in out AllJoynBusObjectStoppedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynBusObjectStoppedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynBusObjectStoppedEventArgs, IAllJoynBusObjectStoppedEventArgs_Ptr);
   begin
      if this.m_IAllJoynBusObjectStoppedEventArgs /= null then
         if this.m_IAllJoynBusObjectStoppedEventArgs.all /= null then
            RefCount := this.m_IAllJoynBusObjectStoppedEventArgs.all.Release;
            Free (this.m_IAllJoynBusObjectStoppedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynBusObjectStoppedEventArgs

   function Constructor
   (
      status : WinRt.Int32
   )
   return AllJoynBusObjectStoppedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynBusObjectStoppedEventArgs");
      m_Factory    : access IAllJoynBusObjectStoppedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynBusObjectStoppedEventArgs;
   begin
      return RetVal : AllJoynBusObjectStoppedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynBusObjectStoppedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (status, m_ComRetVal'Access);
            Retval.m_IAllJoynBusObjectStoppedEventArgs := new Windows.Devices.AllJoyn.IAllJoynBusObjectStoppedEventArgs;
            Retval.m_IAllJoynBusObjectStoppedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynBusObjectStoppedEventArgs

   function get_Status
   (
      this : in out AllJoynBusObjectStoppedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynBusObjectStoppedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynCredentials

   procedure Initialize (this : in out AllJoynCredentials) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynCredentials) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynCredentials, IAllJoynCredentials_Ptr);
   begin
      if this.m_IAllJoynCredentials /= null then
         if this.m_IAllJoynCredentials.all /= null then
            RefCount := this.m_IAllJoynCredentials.all.Release;
            Free (this.m_IAllJoynCredentials);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynCredentials

   function get_AuthenticationMechanism
   (
      this : in out AllJoynCredentials
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAuthenticationMechanism is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynAuthenticationMechanism;
   begin
      Hr := this.m_IAllJoynCredentials.all.get_AuthenticationMechanism (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Certificate
   (
      this : in out AllJoynCredentials
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IAllJoynCredentials.all.get_Certificate (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   procedure put_Certificate
   (
      this : in out AllJoynCredentials;
      value : Windows.Security.Cryptography.Certificates.Certificate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynCredentials.all.put_Certificate (value.m_ICertificate.all);
   end;

   function get_PasswordCredential
   (
      this : in out AllJoynCredentials
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IAllJoynCredentials.all.get_PasswordCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_PasswordCredential
   (
      this : in out AllJoynCredentials;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynCredentials.all.put_PasswordCredential (value.m_IPasswordCredential.all);
   end;

   function get_Timeout
   (
      this : in out AllJoynCredentials
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAllJoynCredentials.all.get_Timeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Timeout
   (
      this : in out AllJoynCredentials;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynCredentials.all.put_Timeout (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynCredentialsRequestedEventArgs

   procedure Initialize (this : in out AllJoynCredentialsRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynCredentialsRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynCredentialsRequestedEventArgs, IAllJoynCredentialsRequestedEventArgs_Ptr);
   begin
      if this.m_IAllJoynCredentialsRequestedEventArgs /= null then
         if this.m_IAllJoynCredentialsRequestedEventArgs.all /= null then
            RefCount := this.m_IAllJoynCredentialsRequestedEventArgs.all.Release;
            Free (this.m_IAllJoynCredentialsRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynCredentialsRequestedEventArgs

   function get_AttemptCount
   (
      this : in out AllJoynCredentialsRequestedEventArgs
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IAllJoynCredentialsRequestedEventArgs.all.get_AttemptCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Credentials
   (
      this : in out AllJoynCredentialsRequestedEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynCredentials'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.IAllJoynCredentials;
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynCredentials do
         Hr := this.m_IAllJoynCredentialsRequestedEventArgs.all.get_Credentials (m_ComRetVal'Access);
         Retval.m_IAllJoynCredentials := new Windows.Devices.AllJoyn.IAllJoynCredentials;
         Retval.m_IAllJoynCredentials.all := m_ComRetVal;
      end return;
   end;

   function get_PeerUniqueName
   (
      this : in out AllJoynCredentialsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynCredentialsRequestedEventArgs.all.get_PeerUniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RequestedUserName
   (
      this : in out AllJoynCredentialsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynCredentialsRequestedEventArgs.all.get_RequestedUserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeferral
   (
      this : in out AllJoynCredentialsRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAllJoynCredentialsRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynCredentialsVerificationRequestedEventArgs

   procedure Initialize (this : in out AllJoynCredentialsVerificationRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynCredentialsVerificationRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynCredentialsVerificationRequestedEventArgs, IAllJoynCredentialsVerificationRequestedEventArgs_Ptr);
   begin
      if this.m_IAllJoynCredentialsVerificationRequestedEventArgs /= null then
         if this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all /= null then
            RefCount := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.Release;
            Free (this.m_IAllJoynCredentialsVerificationRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynCredentialsVerificationRequestedEventArgs

   function get_AuthenticationMechanism
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynAuthenticationMechanism is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynAuthenticationMechanism;
   begin
      Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.get_AuthenticationMechanism (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeerUniqueName
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.get_PeerUniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PeerCertificate
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.get_PeerCertificate (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_PeerCertificateErrorSeverity
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
   begin
      Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.get_PeerCertificateErrorSeverity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeerCertificateErrors
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.get_PeerCertificateErrors (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeerIntermediateCertificates
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.get_PeerIntermediateCertificates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Accept_x
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.Accept_x;
   end;

   function GetDeferral
   (
      this : in out AllJoynCredentialsVerificationRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAllJoynCredentialsVerificationRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynMessageInfo

   procedure Initialize (this : in out AllJoynMessageInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynMessageInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynMessageInfo, IAllJoynMessageInfo_Ptr);
   begin
      if this.m_IAllJoynMessageInfo /= null then
         if this.m_IAllJoynMessageInfo.all /= null then
            RefCount := this.m_IAllJoynMessageInfo.all.Release;
            Free (this.m_IAllJoynMessageInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynMessageInfo

   function Constructor
   (
      senderUniqueName : WinRt.WString
   )
   return AllJoynMessageInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynMessageInfo");
      m_Factory    : access IAllJoynMessageInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynMessageInfo;
      HStr_senderUniqueName : WinRt.HString := To_HString (senderUniqueName);
   begin
      return RetVal : AllJoynMessageInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynMessageInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_senderUniqueName, m_ComRetVal'Access);
            Retval.m_IAllJoynMessageInfo := new Windows.Devices.AllJoyn.IAllJoynMessageInfo;
            Retval.m_IAllJoynMessageInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_senderUniqueName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynMessageInfo

   function get_SenderUniqueName
   (
      this : in out AllJoynMessageInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynMessageInfo.all.get_SenderUniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynProducerStoppedEventArgs

   procedure Initialize (this : in out AllJoynProducerStoppedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynProducerStoppedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynProducerStoppedEventArgs, IAllJoynProducerStoppedEventArgs_Ptr);
   begin
      if this.m_IAllJoynProducerStoppedEventArgs /= null then
         if this.m_IAllJoynProducerStoppedEventArgs.all /= null then
            RefCount := this.m_IAllJoynProducerStoppedEventArgs.all.Release;
            Free (this.m_IAllJoynProducerStoppedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynProducerStoppedEventArgs

   function Constructor
   (
      status : WinRt.Int32
   )
   return AllJoynProducerStoppedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynProducerStoppedEventArgs");
      m_Factory    : access IAllJoynProducerStoppedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynProducerStoppedEventArgs;
   begin
      return RetVal : AllJoynProducerStoppedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynProducerStoppedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (status, m_ComRetVal'Access);
            Retval.m_IAllJoynProducerStoppedEventArgs := new Windows.Devices.AllJoyn.IAllJoynProducerStoppedEventArgs;
            Retval.m_IAllJoynProducerStoppedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynProducerStoppedEventArgs

   function get_Status
   (
      this : in out AllJoynProducerStoppedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynProducerStoppedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynServiceInfo

   procedure Initialize (this : in out AllJoynServiceInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynServiceInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynServiceInfo, IAllJoynServiceInfo_Ptr);
   begin
      if this.m_IAllJoynServiceInfo /= null then
         if this.m_IAllJoynServiceInfo.all /= null then
            RefCount := this.m_IAllJoynServiceInfo.all.Release;
            Free (this.m_IAllJoynServiceInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynServiceInfo

   function Constructor
   (
      uniqueName : WinRt.WString;
      objectPath : WinRt.WString;
      sessionPort : WinRt.UInt16
   )
   return AllJoynServiceInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynServiceInfo");
      m_Factory    : access IAllJoynServiceInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynServiceInfo;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
      HStr_objectPath : WinRt.HString := To_HString (objectPath);
   begin
      return RetVal : AllJoynServiceInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynServiceInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_uniqueName, HStr_objectPath, sessionPort, m_ComRetVal'Access);
            Retval.m_IAllJoynServiceInfo := new Windows.Devices.AllJoyn.IAllJoynServiceInfo;
            Retval.m_IAllJoynServiceInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
         Hr := WindowsDeleteString (HStr_objectPath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AllJoynServiceInfo

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynServiceInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynServiceInfo");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynServiceInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynServiceInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynServiceInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynServiceInfo;
      m_IID            : aliased WinRt.IID := (3117304001, 5836, 24134, (145, 213, 229, 205, 6, 248, 2, 110 )); -- Windows.Devices.AllJoyn.AllJoynServiceInfo;
      m_HandlerIID     : aliased WinRt.IID := (4289864345, 43465, 23594, (172, 227, 12, 208, 166, 221, 16, 57 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynServiceInfo.Kind := new AsyncOperationCompletedHandler_AllJoynServiceInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynServiceInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynServiceInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynServiceInfo.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynServiceInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynServiceInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynServiceInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAllJoynServiceInfo := new Windows.Devices.AllJoyn.IAllJoynServiceInfo;
                     Retval.m_IAllJoynServiceInfo.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynServiceInfo

   function get_UniqueName
   (
      this : in out AllJoynServiceInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynServiceInfo.all.get_UniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ObjectPath
   (
      this : in out AllJoynServiceInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynServiceInfo.all.get_ObjectPath (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SessionPort
   (
      this : in out AllJoynServiceInfo
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IAllJoynServiceInfo.all.get_SessionPort (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynServiceInfoRemovedEventArgs

   procedure Initialize (this : in out AllJoynServiceInfoRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynServiceInfoRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynServiceInfoRemovedEventArgs, IAllJoynServiceInfoRemovedEventArgs_Ptr);
   begin
      if this.m_IAllJoynServiceInfoRemovedEventArgs /= null then
         if this.m_IAllJoynServiceInfoRemovedEventArgs.all /= null then
            RefCount := this.m_IAllJoynServiceInfoRemovedEventArgs.all.Release;
            Free (this.m_IAllJoynServiceInfoRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynServiceInfoRemovedEventArgs

   function Constructor
   (
      uniqueName : WinRt.WString
   )
   return AllJoynServiceInfoRemovedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynServiceInfoRemovedEventArgs");
      m_Factory    : access IAllJoynServiceInfoRemovedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynServiceInfoRemovedEventArgs;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
   begin
      return RetVal : AllJoynServiceInfoRemovedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynServiceInfoRemovedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_uniqueName, m_ComRetVal'Access);
            Retval.m_IAllJoynServiceInfoRemovedEventArgs := new Windows.Devices.AllJoyn.IAllJoynServiceInfoRemovedEventArgs;
            Retval.m_IAllJoynServiceInfoRemovedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynServiceInfoRemovedEventArgs

   function get_UniqueName
   (
      this : in out AllJoynServiceInfoRemovedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynServiceInfoRemovedEventArgs.all.get_UniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynSession

   procedure Initialize (this : in out AllJoynSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynSession, IAllJoynSession_Ptr);
   begin
      if this.m_IAllJoynSession /= null then
         if this.m_IAllJoynSession.all /= null then
            RefCount := this.m_IAllJoynSession.all.Release;
            Free (this.m_IAllJoynSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AllJoynSession

   function GetFromServiceInfoAsync
   (
      serviceInfo : Windows.Devices.AllJoyn.AllJoynServiceInfo'Class
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynSession");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynSession;
      m_IID            : aliased WinRt.IID := (1957582328, 15715, 21618, (145, 61, 116, 233, 161, 18, 93, 211 )); -- Windows.Devices.AllJoyn.AllJoynSession;
      m_HandlerIID     : aliased WinRt.IID := (1380519780, 51599, 20505, (131, 97, 178, 163, 225, 103, 159, 39 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynSession.Kind := new AsyncOperationCompletedHandler_AllJoynSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynSession.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynSession do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFromServiceInfoAsync (serviceInfo.m_IAllJoynServiceInfo.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAllJoynSession := new Windows.Devices.AllJoyn.IAllJoynSession;
                     Retval.m_IAllJoynSession.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetFromServiceInfoAsync
   (
      serviceInfo : Windows.Devices.AllJoyn.AllJoynServiceInfo'Class;
      busAttachment : Windows.Devices.AllJoyn.AllJoynBusAttachment'Class
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynSession");
      m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AllJoynSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AllJoynSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.AllJoyn.IAllJoynSession;
      m_IID            : aliased WinRt.IID := (1957582328, 15715, 21618, (145, 61, 116, 233, 161, 18, 93, 211 )); -- Windows.Devices.AllJoyn.AllJoynSession;
      m_HandlerIID     : aliased WinRt.IID := (1380519780, 51599, 20505, (131, 97, 178, 163, 225, 103, 159, 39 ));
      m_Handler        : AsyncOperationCompletedHandler_AllJoynSession.Kind := new AsyncOperationCompletedHandler_AllJoynSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AllJoynSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AllJoynSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AllJoynSession.Kind_Delegate, AsyncOperationCompletedHandler_AllJoynSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynSession do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFromServiceInfoAsync (serviceInfo.m_IAllJoynServiceInfo.all, busAttachment.m_IAllJoynBusAttachment.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IAllJoynSession := new Windows.Devices.AllJoyn.IAllJoynSession;
                     Retval.m_IAllJoynSession.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynSession

   function get_Id
   (
      this : in out AllJoynSession
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynSession.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out AllJoynSession
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynSession.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RemoveMemberAsync
   (
      this : in out AllJoynSession;
      uniqueName : WinRt.WString
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Int32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Int32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Int32;
      m_IID            : aliased WinRt.IID := (2525730405, 1773, 22388, (143, 83, 142, 222, 171, 213, 247, 181 )); -- Int32;
      m_HandlerIID     : aliased WinRt.IID := (3591155357, 35019, 23025, (133, 118, 63, 186, 68, 121, 107, 232 ));
      m_Handler        : AsyncOperationCompletedHandler_Int32.Kind := new AsyncOperationCompletedHandler_Int32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Int32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Int32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Int32.Kind_Delegate, AsyncOperationCompletedHandler_Int32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAllJoynSession.all.RemoveMemberAsync (HStr_uniqueName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_uniqueName);
      return m_RetVal;
   end;

   function add_MemberAdded
   (
      this : in out AllJoynSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynSession.all.add_MemberAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MemberAdded
   (
      this : in out AllJoynSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynSession.all.remove_MemberAdded (token);
   end;

   function add_MemberRemoved
   (
      this : in out AllJoynSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynSession.all.add_MemberRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MemberRemoved
   (
      this : in out AllJoynSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynSession.all.remove_MemberRemoved (token);
   end;

   function add_Lost
   (
      this : in out AllJoynSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAllJoynSession.all.add_Lost (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Lost
   (
      this : in out AllJoynSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAllJoynSession.all.remove_Lost (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynSessionJoinedEventArgs

   procedure Initialize (this : in out AllJoynSessionJoinedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynSessionJoinedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynSessionJoinedEventArgs, IAllJoynSessionJoinedEventArgs_Ptr);
   begin
      if this.m_IAllJoynSessionJoinedEventArgs /= null then
         if this.m_IAllJoynSessionJoinedEventArgs.all /= null then
            RefCount := this.m_IAllJoynSessionJoinedEventArgs.all.Release;
            Free (this.m_IAllJoynSessionJoinedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynSessionJoinedEventArgs

   function Constructor
   (
      session : Windows.Devices.AllJoyn.AllJoynSession'Class
   )
   return AllJoynSessionJoinedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynSessionJoinedEventArgs");
      m_Factory    : access IAllJoynSessionJoinedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynSessionJoinedEventArgs;
   begin
      return RetVal : AllJoynSessionJoinedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynSessionJoinedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (session.m_IAllJoynSession.all, m_ComRetVal'Access);
            Retval.m_IAllJoynSessionJoinedEventArgs := new Windows.Devices.AllJoyn.IAllJoynSessionJoinedEventArgs;
            Retval.m_IAllJoynSessionJoinedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynSessionJoinedEventArgs

   function get_Session
   (
      this : in out AllJoynSessionJoinedEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.IAllJoynSession;
   begin
      return RetVal : WinRt.Windows.Devices.AllJoyn.AllJoynSession do
         Hr := this.m_IAllJoynSessionJoinedEventArgs.all.get_Session (m_ComRetVal'Access);
         Retval.m_IAllJoynSession := new Windows.Devices.AllJoyn.IAllJoynSession;
         Retval.m_IAllJoynSession.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynSessionLostEventArgs

   procedure Initialize (this : in out AllJoynSessionLostEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynSessionLostEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynSessionLostEventArgs, IAllJoynSessionLostEventArgs_Ptr);
   begin
      if this.m_IAllJoynSessionLostEventArgs /= null then
         if this.m_IAllJoynSessionLostEventArgs.all /= null then
            RefCount := this.m_IAllJoynSessionLostEventArgs.all.Release;
            Free (this.m_IAllJoynSessionLostEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynSessionLostEventArgs

   function Constructor
   (
      reason : Windows.Devices.AllJoyn.AllJoynSessionLostReason
   )
   return AllJoynSessionLostEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynSessionLostEventArgs");
      m_Factory    : access IAllJoynSessionLostEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynSessionLostEventArgs;
   begin
      return RetVal : AllJoynSessionLostEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynSessionLostEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (reason, m_ComRetVal'Access);
            Retval.m_IAllJoynSessionLostEventArgs := new Windows.Devices.AllJoyn.IAllJoynSessionLostEventArgs;
            Retval.m_IAllJoynSessionLostEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynSessionLostEventArgs

   function get_Reason
   (
      this : in out AllJoynSessionLostEventArgs
   )
   return WinRt.Windows.Devices.AllJoyn.AllJoynSessionLostReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.AllJoyn.AllJoynSessionLostReason;
   begin
      Hr := this.m_IAllJoynSessionLostEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynSessionMemberAddedEventArgs

   procedure Initialize (this : in out AllJoynSessionMemberAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynSessionMemberAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynSessionMemberAddedEventArgs, IAllJoynSessionMemberAddedEventArgs_Ptr);
   begin
      if this.m_IAllJoynSessionMemberAddedEventArgs /= null then
         if this.m_IAllJoynSessionMemberAddedEventArgs.all /= null then
            RefCount := this.m_IAllJoynSessionMemberAddedEventArgs.all.Release;
            Free (this.m_IAllJoynSessionMemberAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynSessionMemberAddedEventArgs

   function Constructor
   (
      uniqueName : WinRt.WString
   )
   return AllJoynSessionMemberAddedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynSessionMemberAddedEventArgs");
      m_Factory    : access IAllJoynSessionMemberAddedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynSessionMemberAddedEventArgs;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
   begin
      return RetVal : AllJoynSessionMemberAddedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynSessionMemberAddedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_uniqueName, m_ComRetVal'Access);
            Retval.m_IAllJoynSessionMemberAddedEventArgs := new Windows.Devices.AllJoyn.IAllJoynSessionMemberAddedEventArgs;
            Retval.m_IAllJoynSessionMemberAddedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynSessionMemberAddedEventArgs

   function get_UniqueName
   (
      this : in out AllJoynSessionMemberAddedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynSessionMemberAddedEventArgs.all.get_UniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynSessionMemberRemovedEventArgs

   procedure Initialize (this : in out AllJoynSessionMemberRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynSessionMemberRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynSessionMemberRemovedEventArgs, IAllJoynSessionMemberRemovedEventArgs_Ptr);
   begin
      if this.m_IAllJoynSessionMemberRemovedEventArgs /= null then
         if this.m_IAllJoynSessionMemberRemovedEventArgs.all /= null then
            RefCount := this.m_IAllJoynSessionMemberRemovedEventArgs.all.Release;
            Free (this.m_IAllJoynSessionMemberRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynSessionMemberRemovedEventArgs

   function Constructor
   (
      uniqueName : WinRt.WString
   )
   return AllJoynSessionMemberRemovedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynSessionMemberRemovedEventArgs");
      m_Factory    : access IAllJoynSessionMemberRemovedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynSessionMemberRemovedEventArgs;
      HStr_uniqueName : WinRt.HString := To_HString (uniqueName);
   begin
      return RetVal : AllJoynSessionMemberRemovedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynSessionMemberRemovedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_uniqueName, m_ComRetVal'Access);
            Retval.m_IAllJoynSessionMemberRemovedEventArgs := new Windows.Devices.AllJoyn.IAllJoynSessionMemberRemovedEventArgs;
            Retval.m_IAllJoynSessionMemberRemovedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uniqueName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynSessionMemberRemovedEventArgs

   function get_UniqueName
   (
      this : in out AllJoynSessionMemberRemovedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAllJoynSessionMemberRemovedEventArgs.all.get_UniqueName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AllJoynStatus is

      function get_Ok
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ok (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Fail
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Fail (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OperationTimedOut
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OperationTimedOut (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OtherEndClosed
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OtherEndClosed (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ConnectionRefused
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ConnectionRefused (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AuthenticationFailed
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AuthenticationFailed (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AuthenticationRejectedByUser
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AuthenticationRejectedByUser (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SslConnectFailed
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SslConnectFailed (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SslIdentityVerificationFailed
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SslIdentityVerificationFailed (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InsufficientSecurity
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InsufficientSecurity (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument1
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument2
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument3
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument4
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument4 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument5
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument6
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument6 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument7
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument7 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidArgument8
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynStatus");
         m_Factory        : access WinRt.Windows.Devices.AllJoyn.IAllJoynStatusStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynStatusStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidArgument8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end AllJoynStatus;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AllJoynWatcherStoppedEventArgs

   procedure Initialize (this : in out AllJoynWatcherStoppedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AllJoynWatcherStoppedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAllJoynWatcherStoppedEventArgs, IAllJoynWatcherStoppedEventArgs_Ptr);
   begin
      if this.m_IAllJoynWatcherStoppedEventArgs /= null then
         if this.m_IAllJoynWatcherStoppedEventArgs.all /= null then
            RefCount := this.m_IAllJoynWatcherStoppedEventArgs.all.Release;
            Free (this.m_IAllJoynWatcherStoppedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AllJoynWatcherStoppedEventArgs

   function Constructor
   (
      status : WinRt.Int32
   )
   return AllJoynWatcherStoppedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.AllJoyn.AllJoynWatcherStoppedEventArgs");
      m_Factory    : access IAllJoynWatcherStoppedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.AllJoyn.IAllJoynWatcherStoppedEventArgs;
   begin
      return RetVal : AllJoynWatcherStoppedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IAllJoynWatcherStoppedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (status, m_ComRetVal'Access);
            Retval.m_IAllJoynWatcherStoppedEventArgs := new Windows.Devices.AllJoyn.IAllJoynWatcherStoppedEventArgs;
            Retval.m_IAllJoynWatcherStoppedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AllJoynWatcherStoppedEventArgs

   function get_Status
   (
      this : in out AllJoynWatcherStoppedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAllJoynWatcherStoppedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

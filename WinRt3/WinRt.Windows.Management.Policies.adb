--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Management.Policies is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body NamedPolicy is

      function GetPolicyFromPath
      (
         area : WinRt.WString;
         name : WinRt.WString
      )
      return WinRt.Windows.Management.Policies.NamedPolicyData is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Management.Policies.NamedPolicy");
         m_Factory        : access WinRt.Windows.Management.Policies.INamedPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Management.Policies.INamedPolicyData;
         HStr_area : WinRt.HString := To_HString (area);
         HStr_name : WinRt.HString := To_HString (name);
      begin
         return RetVal : WinRt.Windows.Management.Policies.NamedPolicyData do
            Hr := RoGetActivationFactory (m_hString, IID_INamedPolicyStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetPolicyFromPath (HStr_area, HStr_name, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_INamedPolicyData := new Windows.Management.Policies.INamedPolicyData;
               Retval.m_INamedPolicyData.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_area);
            Hr := WindowsDeleteString (HStr_name);
         end return;
      end;

      function GetPolicyFromPathForUser
      (
         user : Windows.System.User'Class;
         area : WinRt.WString;
         name : WinRt.WString
      )
      return WinRt.Windows.Management.Policies.NamedPolicyData is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Management.Policies.NamedPolicy");
         m_Factory        : access WinRt.Windows.Management.Policies.INamedPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Management.Policies.INamedPolicyData;
         HStr_area : WinRt.HString := To_HString (area);
         HStr_name : WinRt.HString := To_HString (name);
      begin
         return RetVal : WinRt.Windows.Management.Policies.NamedPolicyData do
            Hr := RoGetActivationFactory (m_hString, IID_INamedPolicyStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetPolicyFromPathForUser (user.m_IUser.all, HStr_area, HStr_name, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_INamedPolicyData := new Windows.Management.Policies.INamedPolicyData;
               Retval.m_INamedPolicyData.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_area);
            Hr := WindowsDeleteString (HStr_name);
         end return;
      end;

   end NamedPolicy;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NamedPolicyData

   procedure Initialize (this : in out NamedPolicyData) is
   begin
      null;
   end;

   procedure Finalize (this : in out NamedPolicyData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INamedPolicyData, INamedPolicyData_Ptr);
   begin
      if this.m_INamedPolicyData /= null then
         if this.m_INamedPolicyData.all /= null then
            RefCount := this.m_INamedPolicyData.all.Release;
            Free (this.m_INamedPolicyData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NamedPolicyData

   function get_Area
   (
      this : in out NamedPolicyData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INamedPolicyData.all.get_Area (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out NamedPolicyData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INamedPolicyData.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out NamedPolicyData
   )
   return WinRt.Windows.Management.Policies.NamedPolicyKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Policies.NamedPolicyKind;
   begin
      Hr := this.m_INamedPolicyData.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsManaged
   (
      this : in out NamedPolicyData
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INamedPolicyData.all.get_IsManaged (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsUserPolicy
   (
      this : in out NamedPolicyData
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INamedPolicyData.all.get_IsUserPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_User
   (
      this : in out NamedPolicyData
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_INamedPolicyData.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function GetBoolean
   (
      this : in out NamedPolicyData
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INamedPolicyData.all.GetBoolean (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetBinary
   (
      this : in out NamedPolicyData
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_INamedPolicyData.all.GetBinary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetInt32
   (
      this : in out NamedPolicyData
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INamedPolicyData.all.GetInt32 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetInt64
   (
      this : in out NamedPolicyData
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_INamedPolicyData.all.GetInt64 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetString
   (
      this : in out NamedPolicyData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INamedPolicyData.all.GetString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_Changed
   (
      this : in out NamedPolicyData;
      changedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INamedPolicyData.all.add_Changed (changedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Changed
   (
      this : in out NamedPolicyData;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INamedPolicyData.all.remove_Changed (cookie);
   end;

end;

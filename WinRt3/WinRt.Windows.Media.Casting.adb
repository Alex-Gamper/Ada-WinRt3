--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.Popups;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Casting is

   package IAsyncOperation_CastingConnectionErrorStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Casting.CastingConnectionErrorStatus);
   package AsyncOperationCompletedHandler_CastingConnectionErrorStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Casting.CastingConnectionErrorStatus);

   package IAsyncOperation_CastingPlaybackTypes is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Casting.CastingPlaybackTypes);
   package AsyncOperationCompletedHandler_CastingPlaybackTypes is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Casting.CastingPlaybackTypes);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_CastingDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Casting.ICastingDevice);
   package AsyncOperationCompletedHandler_CastingDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Casting.ICastingDevice);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingConnection

   procedure Initialize (this : in out CastingConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingConnection, ICastingConnection_Ptr);
   begin
      if this.m_ICastingConnection /= null then
         if this.m_ICastingConnection.all /= null then
            RefCount := this.m_ICastingConnection.all.Release;
            Free (this.m_ICastingConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingConnection

   function get_State
   (
      this : in out CastingConnection
   )
   return WinRt.Windows.Media.Casting.CastingConnectionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.CastingConnectionState;
   begin
      Hr := this.m_ICastingConnection.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Device
   (
      this : in out CastingConnection
   )
   return WinRt.Windows.Media.Casting.CastingDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.ICastingDevice;
   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingDevice do
         Hr := this.m_ICastingConnection.all.get_Device (m_ComRetVal'Access);
         Retval.m_ICastingDevice := new Windows.Media.Casting.ICastingDevice;
         Retval.m_ICastingDevice.all := m_ComRetVal;
      end return;
   end;

   function get_Source
   (
      this : in out CastingConnection
   )
   return WinRt.Windows.Media.Casting.CastingSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.ICastingSource;
   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingSource do
         Hr := this.m_ICastingConnection.all.get_Source (m_ComRetVal'Access);
         Retval.m_ICastingSource := new Windows.Media.Casting.ICastingSource;
         Retval.m_ICastingSource.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out CastingConnection;
      value : Windows.Media.Casting.CastingSource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingConnection.all.put_Source (value.m_ICastingSource.all);
   end;

   function add_StateChanged
   (
      this : in out CastingConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICastingConnection.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out CastingConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingConnection.all.remove_StateChanged (token);
   end;

   function add_ErrorOccurred
   (
      this : in out CastingConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICastingConnection.all.add_ErrorOccurred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ErrorOccurred
   (
      this : in out CastingConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingConnection.all.remove_ErrorOccurred (token);
   end;

   function RequestStartCastingAsync
   (
      this : in out CastingConnection;
      value : Windows.Media.Casting.CastingSource'Class
   )
   return WinRt.Windows.Media.Casting.CastingConnectionErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CastingConnectionErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CastingConnectionErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Casting.CastingConnectionErrorStatus;
      m_IID            : aliased WinRt.IID := (633872828, 57016, 22608, (138, 242, 211, 172, 53, 66, 107, 210 )); -- Windows.Media.Casting.CastingConnectionErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (1914087754, 41226, 22371, (142, 150, 191, 51, 197, 130, 237, 146 ));
      m_Handler        : AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind := new AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CastingConnectionErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICastingConnection.all.RequestStartCastingAsync (value.m_ICastingSource.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DisconnectAsync
   (
      this : in out CastingConnection
   )
   return WinRt.Windows.Media.Casting.CastingConnectionErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CastingConnectionErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CastingConnectionErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Casting.CastingConnectionErrorStatus;
      m_IID            : aliased WinRt.IID := (633872828, 57016, 22608, (138, 242, 211, 172, 53, 66, 107, 210 )); -- Windows.Media.Casting.CastingConnectionErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (1914087754, 41226, 22371, (142, 150, 191, 51, 197, 130, 237, 146 ));
      m_Handler        : AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind := new AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CastingConnectionErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_CastingConnectionErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICastingConnection.all.DisconnectAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out CastingConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Casting.ICastingConnection_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICastingConnection.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingConnectionErrorOccurredEventArgs

   procedure Initialize (this : in out CastingConnectionErrorOccurredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingConnectionErrorOccurredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingConnectionErrorOccurredEventArgs, ICastingConnectionErrorOccurredEventArgs_Ptr);
   begin
      if this.m_ICastingConnectionErrorOccurredEventArgs /= null then
         if this.m_ICastingConnectionErrorOccurredEventArgs.all /= null then
            RefCount := this.m_ICastingConnectionErrorOccurredEventArgs.all.Release;
            Free (this.m_ICastingConnectionErrorOccurredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingConnectionErrorOccurredEventArgs

   function get_ErrorStatus
   (
      this : in out CastingConnectionErrorOccurredEventArgs
   )
   return WinRt.Windows.Media.Casting.CastingConnectionErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.CastingConnectionErrorStatus;
   begin
      Hr := this.m_ICastingConnectionErrorOccurredEventArgs.all.get_ErrorStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Message
   (
      this : in out CastingConnectionErrorOccurredEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICastingConnectionErrorOccurredEventArgs.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingDevice

   procedure Initialize (this : in out CastingDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingDevice, ICastingDevice_Ptr);
   begin
      if this.m_ICastingDevice /= null then
         if this.m_ICastingDevice.all /= null then
            RefCount := this.m_ICastingDevice.all.Release;
            Free (this.m_ICastingDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CastingDevice

   function GetDeviceSelector
   (
      type_x : Windows.Media.Casting.CastingPlaybackTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Casting.CastingDevice");
      m_Factory        : access WinRt.Windows.Media.Casting.ICastingDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICastingDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (type_x, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromCastingSourceAsync
   (
      castingSource_p : Windows.Media.Casting.CastingSource'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Casting.CastingDevice");
      m_Factory        : access WinRt.Windows.Media.Casting.ICastingDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICastingDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromCastingSourceAsync (castingSource_p.m_ICastingSource.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      value : WinRt.WString
   )
   return WinRt.Windows.Media.Casting.CastingDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Casting.CastingDevice");
      m_Factory        : access WinRt.Windows.Media.Casting.ICastingDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CastingDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CastingDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Casting.ICastingDevice;
      m_IID            : aliased WinRt.IID := (458154072, 19561, 24176, (136, 52, 193, 209, 113, 204, 27, 34 )); -- Windows.Media.Casting.CastingDevice;
      m_HandlerIID     : aliased WinRt.IID := (4039547806, 5323, 20746, (142, 240, 126, 134, 215, 113, 186, 175 ));
      m_Handler        : AsyncOperationCompletedHandler_CastingDevice.Kind := new AsyncOperationCompletedHandler_CastingDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CastingDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CastingDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CastingDevice.Kind_Delegate, AsyncOperationCompletedHandler_CastingDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ICastingDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ICastingDevice := new Windows.Media.Casting.ICastingDevice;
                     Retval.m_ICastingDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function DeviceInfoSupportsCastingAsync
   (
      device : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Casting.CastingDevice");
      m_Factory        : access WinRt.Windows.Media.Casting.ICastingDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICastingDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.DeviceInfoSupportsCastingAsync (device.m_IDeviceInformation.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingDevice

   function get_Id
   (
      this : in out CastingDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICastingDevice.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FriendlyName
   (
      this : in out CastingDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICastingDevice.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Icon
   (
      this : in out CastingDevice
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      Hr := this.m_ICastingDevice.all.get_Icon (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetSupportedCastingPlaybackTypesAsync
   (
      this : in out CastingDevice
   )
   return WinRt.Windows.Media.Casting.CastingPlaybackTypes is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CastingPlaybackTypes.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CastingPlaybackTypes.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Casting.CastingPlaybackTypes;
      m_IID            : aliased WinRt.IID := (459030005, 8398, 21026, (183, 134, 244, 45, 189, 243, 4, 154 )); -- Windows.Media.Casting.CastingPlaybackTypes;
      m_HandlerIID     : aliased WinRt.IID := (3244521822, 2716, 21508, (176, 79, 20, 121, 199, 66, 213, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_CastingPlaybackTypes.Kind := new AsyncOperationCompletedHandler_CastingPlaybackTypes.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CastingPlaybackTypes.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CastingPlaybackTypes.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CastingPlaybackTypes.Kind_Delegate, AsyncOperationCompletedHandler_CastingPlaybackTypes.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICastingDevice.all.GetSupportedCastingPlaybackTypesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function CreateCastingConnection
   (
      this : in out CastingDevice
   )
   return WinRt.Windows.Media.Casting.CastingConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.ICastingConnection;
   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingConnection do
         Hr := this.m_ICastingDevice.all.CreateCastingConnection (m_ComRetVal'Access);
         Retval.m_ICastingConnection := new Windows.Media.Casting.ICastingConnection;
         Retval.m_ICastingConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingDevicePicker

   procedure Initialize (this : in out CastingDevicePicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingDevicePicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingDevicePicker, ICastingDevicePicker_Ptr);
   begin
      if this.m_ICastingDevicePicker /= null then
         if this.m_ICastingDevicePicker.all /= null then
            RefCount := this.m_ICastingDevicePicker.all.Release;
            Free (this.m_ICastingDevicePicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CastingDevicePicker

   function Constructor return CastingDevicePicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Casting.CastingDevicePicker");
      m_ComRetVal  : aliased Windows.Media.Casting.ICastingDevicePicker;
   begin
      return RetVal : CastingDevicePicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICastingDevicePicker := new Windows.Media.Casting.ICastingDevicePicker;
            Retval.m_ICastingDevicePicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingDevicePicker

   function get_Filter
   (
      this : in out CastingDevicePicker
   )
   return WinRt.Windows.Media.Casting.CastingDevicePickerFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.ICastingDevicePickerFilter;
   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingDevicePickerFilter do
         Hr := this.m_ICastingDevicePicker.all.get_Filter (m_ComRetVal'Access);
         Retval.m_ICastingDevicePickerFilter := new Windows.Media.Casting.ICastingDevicePickerFilter;
         Retval.m_ICastingDevicePickerFilter.all := m_ComRetVal;
      end return;
   end;

   function get_Appearance
   (
      this : in out CastingDevicePicker
   )
   return WinRt.Windows.Devices.Enumeration.DevicePickerAppearance'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDevicePickerAppearance;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePickerAppearance do
         Hr := this.m_ICastingDevicePicker.all.get_Appearance (m_ComRetVal'Access);
         Retval.m_IDevicePickerAppearance := new Windows.Devices.Enumeration.IDevicePickerAppearance;
         Retval.m_IDevicePickerAppearance.all := m_ComRetVal;
      end return;
   end;

   function add_CastingDeviceSelected
   (
      this : in out CastingDevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICastingDevicePicker.all.add_CastingDeviceSelected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CastingDeviceSelected
   (
      this : in out CastingDevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePicker.all.remove_CastingDeviceSelected (token);
   end;

   function add_CastingDevicePickerDismissed
   (
      this : in out CastingDevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICastingDevicePicker.all.add_CastingDevicePickerDismissed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CastingDevicePickerDismissed
   (
      this : in out CastingDevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePicker.all.remove_CastingDevicePickerDismissed (token);
   end;

   procedure Show
   (
      this : in out CastingDevicePicker;
      selection : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePicker.all.Show (selection);
   end;

   procedure Show
   (
      this : in out CastingDevicePicker;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePicker.all.Show (selection, preferredPlacement);
   end;

   procedure Hide
   (
      this : in out CastingDevicePicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePicker.all.Hide;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingDevicePickerFilter

   procedure Initialize (this : in out CastingDevicePickerFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingDevicePickerFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingDevicePickerFilter, ICastingDevicePickerFilter_Ptr);
   begin
      if this.m_ICastingDevicePickerFilter /= null then
         if this.m_ICastingDevicePickerFilter.all /= null then
            RefCount := this.m_ICastingDevicePickerFilter.all.Release;
            Free (this.m_ICastingDevicePickerFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingDevicePickerFilter

   function get_SupportsAudio
   (
      this : in out CastingDevicePickerFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.get_SupportsAudio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SupportsAudio
   (
      this : in out CastingDevicePickerFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.put_SupportsAudio (value);
   end;

   function get_SupportsVideo
   (
      this : in out CastingDevicePickerFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.get_SupportsVideo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SupportsVideo
   (
      this : in out CastingDevicePickerFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.put_SupportsVideo (value);
   end;

   function get_SupportsPictures
   (
      this : in out CastingDevicePickerFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.get_SupportsPictures (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SupportsPictures
   (
      this : in out CastingDevicePickerFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.put_SupportsPictures (value);
   end;

   function get_SupportedCastingSources
   (
      this : in out CastingDevicePickerFilter
   )
   return IVector_ICastingSource.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ICastingSource.Kind;
   begin
      Hr := this.m_ICastingDevicePickerFilter.all.get_SupportedCastingSources (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ICastingSource (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingDeviceSelectedEventArgs

   procedure Initialize (this : in out CastingDeviceSelectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingDeviceSelectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingDeviceSelectedEventArgs, ICastingDeviceSelectedEventArgs_Ptr);
   begin
      if this.m_ICastingDeviceSelectedEventArgs /= null then
         if this.m_ICastingDeviceSelectedEventArgs.all /= null then
            RefCount := this.m_ICastingDeviceSelectedEventArgs.all.Release;
            Free (this.m_ICastingDeviceSelectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingDeviceSelectedEventArgs

   function get_SelectedCastingDevice
   (
      this : in out CastingDeviceSelectedEventArgs
   )
   return WinRt.Windows.Media.Casting.CastingDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.ICastingDevice;
   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingDevice do
         Hr := this.m_ICastingDeviceSelectedEventArgs.all.get_SelectedCastingDevice (m_ComRetVal'Access);
         Retval.m_ICastingDevice := new Windows.Media.Casting.ICastingDevice;
         Retval.m_ICastingDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CastingSource

   procedure Initialize (this : in out CastingSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out CastingSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICastingSource, ICastingSource_Ptr);
   begin
      if this.m_ICastingSource /= null then
         if this.m_ICastingSource.all /= null then
            RefCount := this.m_ICastingSource.all.Release;
            Free (this.m_ICastingSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CastingSource

   function get_PreferredSourceUri
   (
      this : in out CastingSource
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ICastingSource.all.get_PreferredSourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_PreferredSourceUri
   (
      this : in out CastingSource;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICastingSource.all.put_PreferredSourceUri (value.m_IUriRuntimeClass.all);
   end;

end;

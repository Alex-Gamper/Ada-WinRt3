--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
limited with WinRt.Windows.UI.Text.Core;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Data.Text is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Delegates declarations
   -----------------------------------------------------------------------------

   type SelectableWordSegmentsTokenizingHandler_Delegate;
   type SelectableWordSegmentsTokenizingHandler is access all SelectableWordSegmentsTokenizingHandler_Delegate;

   type WordSegmentsTokenizingHandler_Delegate;
   type WordSegmentsTokenizingHandler is access all WordSegmentsTokenizingHandler_Delegate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IAlternateWordForm_Interface is interface and WinRt.IInspectable_Interface;
   type IAlternateWordForm is access IAlternateWordForm_Interface'Class;
   type IAlternateWordForm_Ptr is access all IAlternateWordForm;

   type ISelectableWordSegment_Interface is interface and WinRt.IInspectable_Interface;
   type ISelectableWordSegment is access ISelectableWordSegment_Interface'Class;
   type ISelectableWordSegment_Ptr is access all ISelectableWordSegment;

   type ISelectableWordsSegmenter_Interface is interface and WinRt.IInspectable_Interface;
   type ISelectableWordsSegmenter is access ISelectableWordsSegmenter_Interface'Class;
   type ISelectableWordsSegmenter_Ptr is access all ISelectableWordsSegmenter;

   type ISelectableWordsSegmenterFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ISelectableWordsSegmenterFactory is access ISelectableWordsSegmenterFactory_Interface'Class;

   type ISemanticTextQuery_Interface is interface and WinRt.IInspectable_Interface;
   type ISemanticTextQuery is access ISemanticTextQuery_Interface'Class;
   type ISemanticTextQuery_Ptr is access all ISemanticTextQuery;

   type ISemanticTextQueryFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ISemanticTextQueryFactory is access ISemanticTextQueryFactory_Interface'Class;

   type ITextConversionGenerator_Interface is interface and WinRt.IInspectable_Interface;
   type ITextConversionGenerator is access ITextConversionGenerator_Interface'Class;
   type ITextConversionGenerator_Ptr is access all ITextConversionGenerator;

   type ITextConversionGeneratorFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ITextConversionGeneratorFactory is access ITextConversionGeneratorFactory_Interface'Class;

   type ITextPhoneme_Interface is interface and WinRt.IInspectable_Interface;
   type ITextPhoneme is access ITextPhoneme_Interface'Class;
   type ITextPhoneme_Ptr is access all ITextPhoneme;

   type ITextPredictionGenerator_Interface is interface and WinRt.IInspectable_Interface;
   type ITextPredictionGenerator is access ITextPredictionGenerator_Interface'Class;
   type ITextPredictionGenerator_Ptr is access all ITextPredictionGenerator;

   type ITextPredictionGenerator2_Interface is interface and WinRt.IInspectable_Interface;
   type ITextPredictionGenerator2 is access ITextPredictionGenerator2_Interface'Class;

   type ITextPredictionGeneratorFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ITextPredictionGeneratorFactory is access ITextPredictionGeneratorFactory_Interface'Class;

   type ITextReverseConversionGenerator_Interface is interface and WinRt.IInspectable_Interface;
   type ITextReverseConversionGenerator is access ITextReverseConversionGenerator_Interface'Class;
   type ITextReverseConversionGenerator_Ptr is access all ITextReverseConversionGenerator;

   type ITextReverseConversionGenerator2_Interface is interface and WinRt.IInspectable_Interface;
   type ITextReverseConversionGenerator2 is access ITextReverseConversionGenerator2_Interface'Class;

   type ITextReverseConversionGeneratorFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ITextReverseConversionGeneratorFactory is access ITextReverseConversionGeneratorFactory_Interface'Class;

   type IUnicodeCharactersStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IUnicodeCharactersStatics is access IUnicodeCharactersStatics_Interface'Class;

   type IWordSegment_Interface is interface and WinRt.IInspectable_Interface;
   type IWordSegment is access IWordSegment_Interface'Class;
   type IWordSegment_Ptr is access all IWordSegment;

   type IWordsSegmenter_Interface is interface and WinRt.IInspectable_Interface;
   type IWordsSegmenter is access IWordsSegmenter_Interface'Class;
   type IWordsSegmenter_Ptr is access all IWordsSegmenter;

   type IWordsSegmenterFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IWordsSegmenterFactory is access IWordsSegmenterFactory_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type AlternateWordForm is new Ada.Finalization.Limited_Controlled with
      record
         m_IAlternateWordForm : access Windows.Data.Text.IAlternateWordForm;
      end record;
   type AlternateWordForm_Ptr is access all AlternateWordForm;

   type SelectableWordSegment is new Ada.Finalization.Limited_Controlled with
      record
         m_ISelectableWordSegment : access Windows.Data.Text.ISelectableWordSegment;
      end record;
   type SelectableWordSegment_Ptr is access all SelectableWordSegment;

   type SelectableWordsSegmenter is new Ada.Finalization.Limited_Controlled with
      record
         m_ISelectableWordsSegmenter : access Windows.Data.Text.ISelectableWordsSegmenter;
      end record;
   type SelectableWordsSegmenter_Ptr is access all SelectableWordsSegmenter;

   type SemanticTextQuery is new Ada.Finalization.Limited_Controlled with
      record
         m_ISemanticTextQuery : access Windows.Data.Text.ISemanticTextQuery;
      end record;
   type SemanticTextQuery_Ptr is access all SemanticTextQuery;

   type TextConversionGenerator is new Ada.Finalization.Limited_Controlled with
      record
         m_ITextConversionGenerator : access Windows.Data.Text.ITextConversionGenerator;
      end record;
   type TextConversionGenerator_Ptr is access all TextConversionGenerator;

   type TextPhoneme is new Ada.Finalization.Limited_Controlled with
      record
         m_ITextPhoneme : access Windows.Data.Text.ITextPhoneme;
      end record;
   type TextPhoneme_Ptr is access all TextPhoneme;

   type TextPredictionGenerator is new Ada.Finalization.Limited_Controlled with
      record
         m_ITextPredictionGenerator : access Windows.Data.Text.ITextPredictionGenerator;
      end record;
   type TextPredictionGenerator_Ptr is access all TextPredictionGenerator;

   type TextReverseConversionGenerator is new Ada.Finalization.Limited_Controlled with
      record
         m_ITextReverseConversionGenerator : access Windows.Data.Text.ITextReverseConversionGenerator;
      end record;
   type TextReverseConversionGenerator_Ptr is access all TextReverseConversionGenerator;

   type WordSegment is new Ada.Finalization.Limited_Controlled with
      record
         m_IWordSegment : access Windows.Data.Text.IWordSegment;
      end record;
   type WordSegment_Ptr is access all WordSegment;

   type WordsSegmenter is new Ada.Finalization.Limited_Controlled with
      record
         m_IWordsSegmenter : access Windows.Data.Text.IWordsSegmenter;
      end record;
   type WordsSegmenter_Ptr is access all WordsSegmenter;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type AlternateNormalizationFormat is (
      NotNormalized_e,
      Number_e,
      Currency_e,
      Date_e,
      Time_e
   );
   for AlternateNormalizationFormat use (
      NotNormalized_e => 0,
      Number_e => 1,
      Currency_e => 3,
      Date_e => 4,
      Time_e => 5
   );
   type AlternateNormalizationFormat_Ptr is access all AlternateNormalizationFormat;

   type TextPredictionOptions is (
      None_e,
      Predictions_e,
      Corrections_e
   );
   for TextPredictionOptions use (
      None_e => 0,
      Predictions_e => 1,
      Corrections_e => 2
   );
   type TextPredictionOptions_Ptr is access all TextPredictionOptions;

   type UnicodeGeneralCategory is (
      UppercaseLetter_e,
      LowercaseLetter_e,
      TitlecaseLetter_e,
      ModifierLetter_e,
      OtherLetter_e,
      NonspacingMark_e,
      SpacingCombiningMark_e,
      EnclosingMark_e,
      DecimalDigitNumber_e,
      LetterNumber_e,
      OtherNumber_e,
      SpaceSeparator_e,
      LineSeparator_e,
      ParagraphSeparator_e,
      Control_e,
      Format_e,
      Surrogate_e,
      PrivateUse_e,
      ConnectorPunctuation_e,
      DashPunctuation_e,
      OpenPunctuation_e,
      ClosePunctuation_e,
      InitialQuotePunctuation_e,
      FinalQuotePunctuation_e,
      OtherPunctuation_e,
      MathSymbol_e,
      CurrencySymbol_e,
      ModifierSymbol_e,
      OtherSymbol_e,
      NotAssigned_e
   );
   for UnicodeGeneralCategory use (
      UppercaseLetter_e => 0,
      LowercaseLetter_e => 1,
      TitlecaseLetter_e => 2,
      ModifierLetter_e => 3,
      OtherLetter_e => 4,
      NonspacingMark_e => 5,
      SpacingCombiningMark_e => 6,
      EnclosingMark_e => 7,
      DecimalDigitNumber_e => 8,
      LetterNumber_e => 9,
      OtherNumber_e => 10,
      SpaceSeparator_e => 11,
      LineSeparator_e => 12,
      ParagraphSeparator_e => 13,
      Control_e => 14,
      Format_e => 15,
      Surrogate_e => 16,
      PrivateUse_e => 17,
      ConnectorPunctuation_e => 18,
      DashPunctuation_e => 19,
      OpenPunctuation_e => 20,
      ClosePunctuation_e => 21,
      InitialQuotePunctuation_e => 22,
      FinalQuotePunctuation_e => 23,
      OtherPunctuation_e => 24,
      MathSymbol_e => 25,
      CurrencySymbol_e => 26,
      ModifierSymbol_e => 27,
      OtherSymbol_e => 28,
      NotAssigned_e => 29
   );
   type UnicodeGeneralCategory_Ptr is access all UnicodeGeneralCategory;

   type UnicodeNumericType is (
      None_e,
      Decimal_e,
      Digit_e,
      Numeric_e
   );
   for UnicodeNumericType use (
      None_e => 0,
      Decimal_e => 1,
      Digit_e => 2,
      Numeric_e => 3
   );
   type UnicodeNumericType_Ptr is access all UnicodeNumericType;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type TextSegment is record
      StartPosition : WinRt.UInt32;
      Length : WinRt.UInt32;
   end record with Convention => C_Pass_By_Copy;
   type TextSegment_Ptr is access all TextSegment;

   -----------------------------------------------------------------------------
   -- Delegate declarations
   -----------------------------------------------------------------------------

   IID_SelectableWordSegmentsTokenizingHandler : aliased WinRt.IID := (977140892, 44766, 19911, (158, 108, 65, 192, 68, 189, 53, 146 ));
   type SelectableWordSegmentsTokenizingHandler_Delegate (Callback : access procedure  (precedingWords : GenericObject;words : GenericObject)) is new WinRt.IMulticastDelegate_Interface (IID_SelectableWordSegmentsTokenizingHandler'Access) with null record;
      function Invoke
      (
         this : access SelectableWordSegmentsTokenizingHandler_Delegate;
         precedingWords : GenericObject;
         words : GenericObject
      )
      return WinRt.Hresult;

   IID_WordSegmentsTokenizingHandler : aliased WinRt.IID := (2782749527, 48938, 19535, (163, 31, 41, 231, 28, 111, 139, 53 ));
   type WordSegmentsTokenizingHandler_Delegate (Callback : access procedure  (precedingWords : GenericObject;words : GenericObject)) is new WinRt.IMulticastDelegate_Interface (IID_WordSegmentsTokenizingHandler'Access) with null record;
      function Invoke
      (
         this : access WordSegmentsTokenizingHandler_Delegate;
         precedingWords : GenericObject;
         words : GenericObject
      )
      return WinRt.Hresult;

   -----------------------------------------------------------------------------
   -- Generic package declarations
   -----------------------------------------------------------------------------

   package IVectorView_ISelectableWordSegment is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Data.Text.ISelectableWordSegment);
   IID_IVectorView_ISelectableWordSegment : aliased WinRt.IID := (814508886, 14639, 21166, (151, 45, 118, 178, 11, 214, 149, 165 ));
   function QInterface_IVectorView_ISelectableWordSegment is new Generic_QueryInterface (GenericObject_Interface, IVectorView_ISelectableWordSegment.Kind, IID_IVectorView_ISelectableWordSegment'Access);

   package IVectorView_TextSegment is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Data.Text.TextSegment);
   IID_IVectorView_TextSegment : aliased WinRt.IID := (4260989200, 17484, 20810, (166, 191, 175, 125, 91, 99, 58, 71 ));
   function QInterface_IVectorView_TextSegment is new Generic_QueryInterface (GenericObject_Interface, IVectorView_TextSegment.Kind, IID_IVectorView_TextSegment'Access);

   package IVectorView_IAlternateWordForm is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Data.Text.IAlternateWordForm);
   IID_IVectorView_IAlternateWordForm : aliased WinRt.IID := (2320298673, 48094, 21397, (165, 79, 120, 68, 202, 159, 144, 36 ));
   function QInterface_IVectorView_IAlternateWordForm is new Generic_QueryInterface (GenericObject_Interface, IVectorView_IAlternateWordForm.Kind, IID_IVectorView_IAlternateWordForm'Access);

   package IVectorView_IWordSegment is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Data.Text.IWordSegment);
   IID_IVectorView_IWordSegment : aliased WinRt.IID := (2204304531, 10851, 22692, (132, 51, 34, 66, 87, 207, 197, 238 ));
   function QInterface_IVectorView_IWordSegment is new Generic_QueryInterface (GenericObject_Interface, IVectorView_IWordSegment.Kind, IID_IVectorView_IWordSegment'Access);

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IAlternateWordForm is interface and WinRt.IInspectable;

      function get_SourceTextSegment
      (
         this : access IAlternateWordForm_Interface;
         RetVal : access Windows.Data.Text.TextSegment
      )
      return WinRt.Hresult is abstract;

      function get_AlternateText
      (
         this : access IAlternateWordForm_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NormalizationFormat
      (
         this : access IAlternateWordForm_Interface;
         RetVal : access Windows.Data.Text.AlternateNormalizationFormat
      )
      return WinRt.Hresult is abstract;

      IID_IAlternateWordForm : aliased WinRt.IID := (1194945566, 20921, 16903, (145, 70, 36, 142, 99, 106, 29, 29 ));

   -----------------------------------------------------------------------------
   -- type ISelectableWordSegment is interface and WinRt.IInspectable;

      function get_Text
      (
         this : access ISelectableWordSegment_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SourceTextSegment
      (
         this : access ISelectableWordSegment_Interface;
         RetVal : access Windows.Data.Text.TextSegment
      )
      return WinRt.Hresult is abstract;

      IID_ISelectableWordSegment : aliased WinRt.IID := (2439662775, 35495, 19576, (179, 116, 93, 237, 183, 82, 230, 11 ));

   -----------------------------------------------------------------------------
   -- type ISelectableWordsSegmenter is interface and WinRt.IInspectable;

      function get_ResolvedLanguage
      (
         this : access ISelectableWordsSegmenter_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function GetTokenAt
      (
         this : access ISelectableWordsSegmenter_Interface;
         text : WinRt.HString;
         startIndex : WinRt.UInt32;
         RetVal : access Windows.Data.Text.ISelectableWordSegment
      )
      return WinRt.Hresult is abstract;

      function GetTokens
      (
         this : access ISelectableWordsSegmenter_Interface;
         text : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function Tokenize
      (
         this : access ISelectableWordsSegmenter_Interface;
         text : WinRt.HString;
         startIndex : WinRt.UInt32;
         handler : Windows.Data.Text.SelectableWordSegmentsTokenizingHandler
      )
      return WinRt.Hresult is abstract;

      IID_ISelectableWordsSegmenter : aliased WinRt.IID := (4141625831, 19219, 17861, (136, 151, 125, 113, 38, 158, 8, 93 ));

   -----------------------------------------------------------------------------
   -- type ISelectableWordsSegmenterFactory is interface and WinRt.IInspectable;

      function CreateWithLanguage
      (
         this : access ISelectableWordsSegmenterFactory_Interface;
         language : WinRt.HString;
         RetVal : access Windows.Data.Text.ISelectableWordsSegmenter
      )
      return WinRt.Hresult is abstract;

      IID_ISelectableWordsSegmenterFactory : aliased WinRt.IID := (2356835912, 24663, 17209, (188, 112, 242, 16, 1, 10, 65, 80 ));

   -----------------------------------------------------------------------------
   -- type ISemanticTextQuery is interface and WinRt.IInspectable;

      function Find
      (
         this : access ISemanticTextQuery_Interface;
         content : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function FindInProperty
      (
         this : access ISemanticTextQuery_Interface;
         propertyContent : WinRt.HString;
         propertyName : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ISemanticTextQuery : aliased WinRt.IID := (1780263761, 8114, 18697, (128, 184, 53, 115, 26, 43, 62, 127 ));

   -----------------------------------------------------------------------------
   -- type ISemanticTextQueryFactory is interface and WinRt.IInspectable;

      function Create
      (
         this : access ISemanticTextQueryFactory_Interface;
         aqsFilter : WinRt.HString;
         RetVal : access Windows.Data.Text.ISemanticTextQuery
      )
      return WinRt.Hresult is abstract;

      function CreateWithLanguage
      (
         this : access ISemanticTextQueryFactory_Interface;
         aqsFilter : WinRt.HString;
         filterLanguage : WinRt.HString;
         RetVal : access Windows.Data.Text.ISemanticTextQuery
      )
      return WinRt.Hresult is abstract;

      IID_ISemanticTextQueryFactory : aliased WinRt.IID := (596378883, 63893, 17799, (135, 119, 162, 183, 216, 10, 207, 239 ));

   -----------------------------------------------------------------------------
   -- type ITextConversionGenerator is interface and WinRt.IInspectable;

      function get_ResolvedLanguage
      (
         this : access ITextConversionGenerator_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_LanguageAvailableButNotInstalled
      (
         this : access ITextConversionGenerator_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetCandidatesAsync
      (
         this : access ITextConversionGenerator_Interface;
         input : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function GetCandidatesAsync
      (
         this : access ITextConversionGenerator_Interface;
         input : WinRt.HString;
         maxCandidates : WinRt.UInt32;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ITextConversionGenerator : aliased WinRt.IID := (56650334, 10921, 19126, (175, 139, 165, 98, 182, 58, 137, 146 ));

   -----------------------------------------------------------------------------
   -- type ITextConversionGeneratorFactory is interface and WinRt.IInspectable;

      function Create
      (
         this : access ITextConversionGeneratorFactory_Interface;
         languageTag : WinRt.HString;
         RetVal : access Windows.Data.Text.ITextConversionGenerator
      )
      return WinRt.Hresult is abstract;

      IID_ITextConversionGeneratorFactory : aliased WinRt.IID := (4239013761, 12419, 18859, (190, 21, 86, 223, 187, 183, 77, 111 ));

   -----------------------------------------------------------------------------
   -- type ITextPhoneme is interface and WinRt.IInspectable;

      function get_DisplayText
      (
         this : access ITextPhoneme_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_ReadingText
      (
         this : access ITextPhoneme_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_ITextPhoneme : aliased WinRt.IID := (2472715274, 39802, 17769, (148, 207, 216, 79, 47, 56, 207, 155 ));

   -----------------------------------------------------------------------------
   -- type ITextPredictionGenerator is interface and WinRt.IInspectable;

      function get_ResolvedLanguage
      (
         this : access ITextPredictionGenerator_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_LanguageAvailableButNotInstalled
      (
         this : access ITextPredictionGenerator_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetCandidatesAsync
      (
         this : access ITextPredictionGenerator_Interface;
         input : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function GetCandidatesAsync
      (
         this : access ITextPredictionGenerator_Interface;
         input : WinRt.HString;
         maxCandidates : WinRt.UInt32;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ITextPredictionGenerator : aliased WinRt.IID := (1588374279, 44017, 19638, (157, 158, 50, 111, 43, 70, 135, 86 ));

   -----------------------------------------------------------------------------
   -- type ITextPredictionGenerator2 is interface and WinRt.IInspectable;

      function GetCandidatesAsync
      (
         this : access ITextPredictionGenerator2_Interface;
         input : WinRt.HString;
         maxCandidates : WinRt.UInt32;
         predictionOptions : Windows.Data.Text.TextPredictionOptions;
         previousStrings : GenericObject;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function GetNextWordCandidatesAsync
      (
         this : access ITextPredictionGenerator2_Interface;
         maxCandidates : WinRt.UInt32;
         previousStrings : GenericObject;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function get_InputScope
      (
         this : access ITextPredictionGenerator2_Interface;
         RetVal : access Windows.UI.Text.Core.CoreTextInputScope
      )
      return WinRt.Hresult is abstract;

      function put_InputScope
      (
         this : access ITextPredictionGenerator2_Interface;
         value : Windows.UI.Text.Core.CoreTextInputScope
      )
      return WinRt.Hresult is abstract;

      IID_ITextPredictionGenerator2 : aliased WinRt.IID := (3091669944, 11383, 18538, (144, 10, 163, 69, 62, 237, 193, 93 ));

   -----------------------------------------------------------------------------
   -- type ITextPredictionGeneratorFactory is interface and WinRt.IInspectable;

      function Create
      (
         this : access ITextPredictionGeneratorFactory_Interface;
         languageTag : WinRt.HString;
         RetVal : access Windows.Data.Text.ITextPredictionGenerator
      )
      return WinRt.Hresult is abstract;

      IID_ITextPredictionGeneratorFactory : aliased WinRt.IID := (1918350358, 35746, 18257, (157, 48, 157, 133, 67, 86, 83, 162 ));

   -----------------------------------------------------------------------------
   -- type ITextReverseConversionGenerator is interface and WinRt.IInspectable;

      function get_ResolvedLanguage
      (
         this : access ITextReverseConversionGenerator_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_LanguageAvailableButNotInstalled
      (
         this : access ITextReverseConversionGenerator_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function ConvertBackAsync
      (
         this : access ITextReverseConversionGenerator_Interface;
         input : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ITextReverseConversionGenerator : aliased WinRt.IID := (1374156052, 40017, 19846, (174, 27, 180, 152, 251, 173, 131, 19 ));

   -----------------------------------------------------------------------------
   -- type ITextReverseConversionGenerator2 is interface and WinRt.IInspectable;

      function GetPhonemesAsync
      (
         this : access ITextReverseConversionGenerator2_Interface;
         input : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ITextReverseConversionGenerator2 : aliased WinRt.IID := (447730412, 34262, 18173, (130, 138, 58, 72, 48, 250, 110, 24 ));

   -----------------------------------------------------------------------------
   -- type ITextReverseConversionGeneratorFactory is interface and WinRt.IInspectable;

      function Create
      (
         this : access ITextReverseConversionGeneratorFactory_Interface;
         languageTag : WinRt.HString;
         RetVal : access Windows.Data.Text.ITextReverseConversionGenerator
      )
      return WinRt.Hresult is abstract;

      IID_ITextReverseConversionGeneratorFactory : aliased WinRt.IID := (1673450278, 8154, 16886, (137, 213, 35, 221, 234, 60, 114, 154 ));

   -----------------------------------------------------------------------------
   -- type IUnicodeCharactersStatics is interface and WinRt.IInspectable;

      function GetCodepointFromSurrogatePair
      (
         this : access IUnicodeCharactersStatics_Interface;
         highSurrogate : WinRt.UInt32;
         lowSurrogate : WinRt.UInt32;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function GetSurrogatePairFromCodepoint
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         highSurrogate : WinRt.Wide_Char_Ptr;
         lowSurrogate : WinRt.Wide_Char_Ptr
      )
      return WinRt.Hresult is abstract;

      function IsHighSurrogate
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsLowSurrogate
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsSupplementary
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsNoncharacter
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsWhitespace
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsAlphabetic
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsCased
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsUppercase
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsLowercase
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsIdStart
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsIdContinue
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsGraphemeBase
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsGraphemeExtend
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetNumericType
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access Windows.Data.Text.UnicodeNumericType
      )
      return WinRt.Hresult is abstract;

      function GetGeneralCategory
      (
         this : access IUnicodeCharactersStatics_Interface;
         codepoint : WinRt.UInt32;
         RetVal : access Windows.Data.Text.UnicodeGeneralCategory
      )
      return WinRt.Hresult is abstract;

      IID_IUnicodeCharactersStatics : aliased WinRt.IID := (2542837383, 37521, 20369, (182, 200, 182, 227, 89, 215, 167, 251 ));

   -----------------------------------------------------------------------------
   -- type IWordSegment is interface and WinRt.IInspectable;

      function get_Text
      (
         this : access IWordSegment_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SourceTextSegment
      (
         this : access IWordSegment_Interface;
         RetVal : access Windows.Data.Text.TextSegment
      )
      return WinRt.Hresult is abstract;

      function get_AlternateForms
      (
         this : access IWordSegment_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IWordSegment : aliased WinRt.IID := (3537156717, 39036, 19648, (182, 189, 212, 154, 17, 179, 143, 154 ));

   -----------------------------------------------------------------------------
   -- type IWordsSegmenter is interface and WinRt.IInspectable;

      function get_ResolvedLanguage
      (
         this : access IWordsSegmenter_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function GetTokenAt
      (
         this : access IWordsSegmenter_Interface;
         text : WinRt.HString;
         startIndex : WinRt.UInt32;
         RetVal : access Windows.Data.Text.IWordSegment
      )
      return WinRt.Hresult is abstract;

      function GetTokens
      (
         this : access IWordsSegmenter_Interface;
         text : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function Tokenize
      (
         this : access IWordsSegmenter_Interface;
         text : WinRt.HString;
         startIndex : WinRt.UInt32;
         handler : Windows.Data.Text.WordSegmentsTokenizingHandler
      )
      return WinRt.Hresult is abstract;

      IID_IWordsSegmenter : aliased WinRt.IID := (2259997905, 45822, 20020, (168, 29, 102, 100, 3, 0, 69, 79 ));

   -----------------------------------------------------------------------------
   -- type IWordsSegmenterFactory is interface and WinRt.IInspectable;

      function CreateWithLanguage
      (
         this : access IWordsSegmenterFactory_Interface;
         language : WinRt.HString;
         RetVal : access Windows.Data.Text.IWordsSegmenter
      )
      return WinRt.Hresult is abstract;

      IID_IWordsSegmenterFactory : aliased WinRt.IID := (3868684916, 64565, 17756, (139, 251, 109, 127, 70, 83, 202, 151 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AlternateWordForm

   overriding procedure Initialize (this : in out AlternateWordForm);
   overriding procedure Finalize (this : in out AlternateWordForm);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AlternateWordForm

   function get_SourceTextSegment
   (
      this : in out AlternateWordForm
   )
   return WinRt.Windows.Data.Text.TextSegment;

   function get_AlternateText
   (
      this : in out AlternateWordForm
   )
   return WinRt.WString;

   function get_NormalizationFormat
   (
      this : in out AlternateWordForm
   )
   return WinRt.Windows.Data.Text.AlternateNormalizationFormat;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SelectableWordSegment

   overriding procedure Initialize (this : in out SelectableWordSegment);
   overriding procedure Finalize (this : in out SelectableWordSegment);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SelectableWordSegment

   function get_Text
   (
      this : in out SelectableWordSegment
   )
   return WinRt.WString;

   function get_SourceTextSegment
   (
      this : in out SelectableWordSegment
   )
   return WinRt.Windows.Data.Text.TextSegment;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SelectableWordsSegmenter

   overriding procedure Initialize (this : in out SelectableWordsSegmenter);
   overriding procedure Finalize (this : in out SelectableWordsSegmenter);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SelectableWordsSegmenter

   function Constructor
   (
      language : WinRt.WString
   )
   return SelectableWordsSegmenter;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SelectableWordsSegmenter

   function get_ResolvedLanguage
   (
      this : in out SelectableWordsSegmenter
   )
   return WinRt.WString;

   function GetTokenAt
   (
      this : in out SelectableWordsSegmenter;
      text : WinRt.WString;
      startIndex : WinRt.UInt32
   )
   return WinRt.Windows.Data.Text.SelectableWordSegment'Class;

   function GetTokens
   (
      this : in out SelectableWordsSegmenter;
      text : WinRt.WString
   )
   return IVectorView_ISelectableWordSegment.Kind;

   procedure Tokenize
   (
      this : in out SelectableWordsSegmenter;
      text : WinRt.WString;
      startIndex : WinRt.UInt32;
      handler : Windows.Data.Text.SelectableWordSegmentsTokenizingHandler
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SemanticTextQuery

   overriding procedure Initialize (this : in out SemanticTextQuery);
   overriding procedure Finalize (this : in out SemanticTextQuery);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SemanticTextQuery

   function Constructor
   (
      aqsFilter : WinRt.WString
   )
   return SemanticTextQuery;

   function Constructor
   (
      aqsFilter : WinRt.WString;
      filterLanguage : WinRt.WString
   )
   return SemanticTextQuery;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SemanticTextQuery

   function Find
   (
      this : in out SemanticTextQuery;
      content : WinRt.WString
   )
   return IVectorView_TextSegment.Kind;

   function FindInProperty
   (
      this : in out SemanticTextQuery;
      propertyContent : WinRt.WString;
      propertyName : WinRt.WString
   )
   return IVectorView_TextSegment.Kind;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextConversionGenerator

   overriding procedure Initialize (this : in out TextConversionGenerator);
   overriding procedure Finalize (this : in out TextConversionGenerator);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextConversionGenerator

   function Constructor
   (
      languageTag : WinRt.WString
   )
   return TextConversionGenerator;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextConversionGenerator

   function get_ResolvedLanguage
   (
      this : in out TextConversionGenerator
   )
   return WinRt.WString;

   function get_LanguageAvailableButNotInstalled
   (
      this : in out TextConversionGenerator
   )
   return WinRt.Boolean;

   function GetCandidatesAsync
   (
      this : in out TextConversionGenerator;
      input : WinRt.WString
   )
   return WinRt.GenericObject;

   function GetCandidatesAsync
   (
      this : in out TextConversionGenerator;
      input : WinRt.WString;
      maxCandidates : WinRt.UInt32
   )
   return WinRt.GenericObject;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextPhoneme

   overriding procedure Initialize (this : in out TextPhoneme);
   overriding procedure Finalize (this : in out TextPhoneme);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextPhoneme

   function get_DisplayText
   (
      this : in out TextPhoneme
   )
   return WinRt.WString;

   function get_ReadingText
   (
      this : in out TextPhoneme
   )
   return WinRt.WString;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextPredictionGenerator

   overriding procedure Initialize (this : in out TextPredictionGenerator);
   overriding procedure Finalize (this : in out TextPredictionGenerator);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextPredictionGenerator

   function Constructor
   (
      languageTag : WinRt.WString
   )
   return TextPredictionGenerator;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextPredictionGenerator

   function get_ResolvedLanguage
   (
      this : in out TextPredictionGenerator
   )
   return WinRt.WString;

   function get_LanguageAvailableButNotInstalled
   (
      this : in out TextPredictionGenerator
   )
   return WinRt.Boolean;

   function GetCandidatesAsync
   (
      this : in out TextPredictionGenerator;
      input : WinRt.WString
   )
   return WinRt.GenericObject;

   function GetCandidatesAsync
   (
      this : in out TextPredictionGenerator;
      input : WinRt.WString;
      maxCandidates : WinRt.UInt32
   )
   return WinRt.GenericObject;

   function GetCandidatesAsync
   (
      this : in out TextPredictionGenerator;
      input : WinRt.WString;
      maxCandidates : WinRt.UInt32;
      predictionOptions : Windows.Data.Text.TextPredictionOptions;
      previousStrings : GenericObject
   )
   return WinRt.GenericObject;

   function GetNextWordCandidatesAsync
   (
      this : in out TextPredictionGenerator;
      maxCandidates : WinRt.UInt32;
      previousStrings : GenericObject
   )
   return WinRt.GenericObject;

   function get_InputScope
   (
      this : in out TextPredictionGenerator
   )
   return WinRt.Windows.UI.Text.Core.CoreTextInputScope;

   procedure put_InputScope
   (
      this : in out TextPredictionGenerator;
      value : Windows.UI.Text.Core.CoreTextInputScope
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextReverseConversionGenerator

   overriding procedure Initialize (this : in out TextReverseConversionGenerator);
   overriding procedure Finalize (this : in out TextReverseConversionGenerator);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextReverseConversionGenerator

   function Constructor
   (
      languageTag : WinRt.WString
   )
   return TextReverseConversionGenerator;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextReverseConversionGenerator

   function get_ResolvedLanguage
   (
      this : in out TextReverseConversionGenerator
   )
   return WinRt.WString;

   function get_LanguageAvailableButNotInstalled
   (
      this : in out TextReverseConversionGenerator
   )
   return WinRt.Boolean;

   function ConvertBackAsync
   (
      this : in out TextReverseConversionGenerator;
      input : WinRt.WString
   )
   return WinRt.WString;

   function GetPhonemesAsync
   (
      this : in out TextReverseConversionGenerator;
      input : WinRt.WString
   )
   return WinRt.GenericObject;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package UnicodeCharacters is

      function GetCodepointFromSurrogatePair
      (
         highSurrogate : WinRt.UInt32;
         lowSurrogate : WinRt.UInt32
      )
      return WinRt.UInt32;

      procedure GetSurrogatePairFromCodepoint
      (
         codepoint : WinRt.UInt32;
         highSurrogate : WinRt.Wide_Char_Ptr;
         lowSurrogate : WinRt.Wide_Char_Ptr
      );

      function IsHighSurrogate
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsLowSurrogate
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsSupplementary
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsNoncharacter
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsWhitespace
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsAlphabetic
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsCased
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsUppercase
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsLowercase
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsIdStart
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsIdContinue
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsGraphemeBase
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function IsGraphemeExtend
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Boolean;

      function GetNumericType
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Windows.Data.Text.UnicodeNumericType;

      function GetGeneralCategory
      (
         codepoint : WinRt.UInt32
      )
      return WinRt.Windows.Data.Text.UnicodeGeneralCategory;

   end UnicodeCharacters;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WordSegment

   overriding procedure Initialize (this : in out WordSegment);
   overriding procedure Finalize (this : in out WordSegment);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WordSegment

   function get_Text
   (
      this : in out WordSegment
   )
   return WinRt.WString;

   function get_SourceTextSegment
   (
      this : in out WordSegment
   )
   return WinRt.Windows.Data.Text.TextSegment;

   function get_AlternateForms
   (
      this : in out WordSegment
   )
   return IVectorView_IAlternateWordForm.Kind;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WordsSegmenter

   overriding procedure Initialize (this : in out WordsSegmenter);
   overriding procedure Finalize (this : in out WordsSegmenter);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WordsSegmenter

   function Constructor
   (
      language : WinRt.WString
   )
   return WordsSegmenter;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WordsSegmenter

   function get_ResolvedLanguage
   (
      this : in out WordsSegmenter
   )
   return WinRt.WString;

   function GetTokenAt
   (
      this : in out WordsSegmenter;
      text : WinRt.WString;
      startIndex : WinRt.UInt32
   )
   return WinRt.Windows.Data.Text.WordSegment'Class;

   function GetTokens
   (
      this : in out WordsSegmenter;
      text : WinRt.WString
   )
   return IVectorView_IWordSegment.Kind;

   procedure Tokenize
   (
      this : in out WordsSegmenter;
      text : WinRt.WString;
      startIndex : WinRt.UInt32;
      handler : Windows.Data.Text.WordSegmentsTokenizingHandler
   );

end;

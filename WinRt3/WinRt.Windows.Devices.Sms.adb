--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Sms is

   package IAsyncOperation_ISmsDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Sms.ISmsDevice);
   package IAsyncOperation_ISmsMessage is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Sms.ISmsMessage);
   package IAsyncOperation_SmsDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Sms.ISmsDevice);
   package AsyncOperationCompletedHandler_SmsDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Sms.ISmsDevice);

   package IAsyncOperation_SmsSendMessageResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Sms.ISmsSendMessageResult);
   package AsyncOperationCompletedHandler_SmsSendMessageResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Sms.ISmsSendMessageResult);

   package AsyncOperationCompletedHandler_ISmsMessage is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Sms.ISmsMessage);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.GenericObject, GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.GenericObject, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeleteSmsMessageOperation

   procedure Initialize (this : in out DeleteSmsMessageOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeleteSmsMessageOperation) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Foundation.IAsyncAction;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.IAsyncAction, WinRt.Windows.Foundation.IAsyncAction_Ptr);
   begin
      if this.m_IAsyncAction /= null then
         if this.m_IAsyncAction.all /= null then
            RefCount := this.m_IAsyncAction.all.Release;
            Free (this.m_IAsyncAction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeleteSmsMessageOperation

   procedure put_Completed
   (
      this : in out DeleteSmsMessageOperation;
      handler : Windows.Foundation.AsyncActionCompletedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.put_Completed (handler);
   end;

   function get_Completed
   (
      this : in out DeleteSmsMessageOperation
   )
   return WinRt.Windows.Foundation.AsyncActionCompletedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncActionCompletedHandler;
   begin
      Hr := this.m_IAsyncAction.all.get_Completed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetResults
   (
      this : in out DeleteSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.GetResults;
   end;

   function get_Id
   (
      this : in out DeleteSmsMessageOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out DeleteSmsMessageOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out DeleteSmsMessageOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out DeleteSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out DeleteSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeleteSmsMessagesOperation

   procedure Initialize (this : in out DeleteSmsMessagesOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeleteSmsMessagesOperation) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Foundation.IAsyncAction;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.IAsyncAction, WinRt.Windows.Foundation.IAsyncAction_Ptr);
   begin
      if this.m_IAsyncAction /= null then
         if this.m_IAsyncAction.all /= null then
            RefCount := this.m_IAsyncAction.all.Release;
            Free (this.m_IAsyncAction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeleteSmsMessagesOperation

   procedure put_Completed
   (
      this : in out DeleteSmsMessagesOperation;
      handler : Windows.Foundation.AsyncActionCompletedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.put_Completed (handler);
   end;

   function get_Completed
   (
      this : in out DeleteSmsMessagesOperation
   )
   return WinRt.Windows.Foundation.AsyncActionCompletedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncActionCompletedHandler;
   begin
      Hr := this.m_IAsyncAction.all.get_Completed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetResults
   (
      this : in out DeleteSmsMessagesOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.GetResults;
   end;

   function get_Id
   (
      this : in out DeleteSmsMessagesOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out DeleteSmsMessagesOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out DeleteSmsMessagesOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out DeleteSmsMessagesOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out DeleteSmsMessagesOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GetSmsDeviceOperation

   procedure Initialize (this : in out GetSmsDeviceOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out GetSmsDeviceOperation) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GetSmsDeviceOperation

   -- Generic Interface Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sms.SmsDevice>
   procedure put_Completed
   (
      this : in out GetSmsDeviceOperation;
      handler : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_ISmsDevice.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2876313057, 64699, 23510, (159, 47, 40, 95, 169, 251, 68, 232 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_ISmsDevice.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_Completed (handler);
      m_RefCount := m_Interface.Release;
   end;

   function get_Completed
   (
      this : in out GetSmsDeviceOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_ISmsDevice.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2876313057, 64699, 23510, (159, 47, 40, 95, 169, 251, 68, 232 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_ISmsDevice.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Completed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResults
   (
      this : in out GetSmsDeviceOperation
   )
   return WinRt.Windows.Devices.Sms.SmsDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_ISmsDevice.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsDevice;
      m_GenericIID     : aliased WinRt.IID := (2876313057, 64699, 23510, (159, 47, 40, 95, 169, 251, 68, 232 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_ISmsDevice.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetResults (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISmsDevice := new Windows.Devices.Sms.ISmsDevice;
         Retval.m_ISmsDevice.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out GetSmsDeviceOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out GetSmsDeviceOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out GetSmsDeviceOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out GetSmsDeviceOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out GetSmsDeviceOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GetSmsMessageOperation

   procedure Initialize (this : in out GetSmsMessageOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out GetSmsMessageOperation) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GetSmsMessageOperation

   -- Generic Interface Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sms.ISmsMessage>
   procedure put_Completed
   (
      this : in out GetSmsMessageOperation;
      handler : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_ISmsMessage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2885268569, 18627, 24236, (151, 73, 76, 109, 180, 213, 7, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_ISmsMessage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_Completed (handler);
      m_RefCount := m_Interface.Release;
   end;

   function get_Completed
   (
      this : in out GetSmsMessageOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_ISmsMessage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2885268569, 18627, 24236, (151, 73, 76, 109, 180, 213, 7, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_ISmsMessage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Completed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResults
   (
      this : in out GetSmsMessageOperation
   )
   return WinRt.Windows.Devices.Sms.ISmsMessage is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_ISmsMessage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsMessage;
      m_GenericIID     : aliased WinRt.IID := (2885268569, 18627, 24236, (151, 73, 76, 109, 180, 213, 7, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_ISmsMessage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetResults (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out GetSmsMessageOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out GetSmsMessageOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out GetSmsMessageOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out GetSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out GetSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GetSmsMessagesOperation

   procedure Initialize (this : in out GetSmsMessagesOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out GetSmsMessagesOperation) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GetSmsMessagesOperation

   function get_Id
   (
      this : in out GetSmsMessagesOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out GetSmsMessagesOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out GetSmsMessagesOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out GetSmsMessagesOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out GetSmsMessagesOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SendSmsMessageOperation

   procedure Initialize (this : in out SendSmsMessageOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SendSmsMessageOperation) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Foundation.IAsyncAction;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.IAsyncAction, WinRt.Windows.Foundation.IAsyncAction_Ptr);
   begin
      if this.m_IAsyncAction /= null then
         if this.m_IAsyncAction.all /= null then
            RefCount := this.m_IAsyncAction.all.Release;
            Free (this.m_IAsyncAction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SendSmsMessageOperation

   procedure put_Completed
   (
      this : in out SendSmsMessageOperation;
      handler : Windows.Foundation.AsyncActionCompletedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.put_Completed (handler);
   end;

   function get_Completed
   (
      this : in out SendSmsMessageOperation
   )
   return WinRt.Windows.Foundation.AsyncActionCompletedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncActionCompletedHandler;
   begin
      Hr := this.m_IAsyncAction.all.get_Completed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetResults
   (
      this : in out SendSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.GetResults;
   end;

   function get_Id
   (
      this : in out SendSmsMessageOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out SendSmsMessageOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out SendSmsMessageOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out SendSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out SendSmsMessageOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsAppMessage

   procedure Initialize (this : in out SmsAppMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsAppMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsAppMessage, ISmsAppMessage_Ptr);
   begin
      if this.m_ISmsAppMessage /= null then
         if this.m_ISmsAppMessage.all /= null then
            RefCount := this.m_ISmsAppMessage.all.Release;
            Free (this.m_ISmsAppMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsAppMessage

   function Constructor return SmsAppMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsAppMessage");
      m_ComRetVal  : aliased Windows.Devices.Sms.ISmsAppMessage;
   begin
      return RetVal : SmsAppMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmsAppMessage := new Windows.Devices.Sms.ISmsAppMessage;
            Retval.m_ISmsAppMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsAppMessage

   function get_Timestamp
   (
      this : in out SmsAppMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsAppMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_To
   (
      this : in out SmsAppMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsAppMessage.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_To
   (
      this : in out SmsAppMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsAppMessage.all.put_To (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_From
   (
      this : in out SmsAppMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsAppMessage.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Body
   (
      this : in out SmsAppMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsAppMessage.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Body
   (
      this : in out SmsAppMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsAppMessage.all.put_Body (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CallbackNumber
   (
      this : in out SmsAppMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsAppMessage.all.get_CallbackNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CallbackNumber
   (
      this : in out SmsAppMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsAppMessage.all.put_CallbackNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsDeliveryNotificationEnabled
   (
      this : in out SmsAppMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmsAppMessage.all.get_IsDeliveryNotificationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDeliveryNotificationEnabled
   (
      this : in out SmsAppMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_IsDeliveryNotificationEnabled (value);
   end;

   function get_RetryAttemptCount
   (
      this : in out SmsAppMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsAppMessage.all.get_RetryAttemptCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RetryAttemptCount
   (
      this : in out SmsAppMessage;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_RetryAttemptCount (value);
   end;

   function get_Encoding
   (
      this : in out SmsAppMessage
   )
   return WinRt.Windows.Devices.Sms.SmsEncoding is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsEncoding;
   begin
      Hr := this.m_ISmsAppMessage.all.get_Encoding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Encoding
   (
      this : in out SmsAppMessage;
      value : Windows.Devices.Sms.SmsEncoding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_Encoding (value);
   end;

   function get_PortNumber
   (
      this : in out SmsAppMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsAppMessage.all.get_PortNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PortNumber
   (
      this : in out SmsAppMessage;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_PortNumber (value);
   end;

   function get_TeleserviceId
   (
      this : in out SmsAppMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsAppMessage.all.get_TeleserviceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TeleserviceId
   (
      this : in out SmsAppMessage;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_TeleserviceId (value);
   end;

   function get_ProtocolId
   (
      this : in out SmsAppMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsAppMessage.all.get_ProtocolId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProtocolId
   (
      this : in out SmsAppMessage;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_ProtocolId (value);
   end;

   function get_BinaryBody
   (
      this : in out SmsAppMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmsAppMessage.all.get_BinaryBody (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BinaryBody
   (
      this : in out SmsAppMessage;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsAppMessage.all.put_BinaryBody (value);
   end;

   function get_MessageType
   (
      this : in out SmsAppMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsAppMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsAppMessage.all);
      Hr := m_Interface.get_MessageType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SmsAppMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsAppMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsAppMessage.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsAppMessage
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsAppMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsAppMessage.all);
      Hr := m_Interface.get_CellularClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsAppMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsAppMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsAppMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SimIccId
   (
      this : in out SmsAppMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsAppMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsAppMessage.all);
      Hr := m_Interface.get_SimIccId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsBinaryMessage

   procedure Initialize (this : in out SmsBinaryMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsBinaryMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsBinaryMessage, ISmsBinaryMessage_Ptr);
   begin
      if this.m_ISmsBinaryMessage /= null then
         if this.m_ISmsBinaryMessage.all /= null then
            RefCount := this.m_ISmsBinaryMessage.all.Release;
            Free (this.m_ISmsBinaryMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsBinaryMessage

   function Constructor return SmsBinaryMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsBinaryMessage");
      m_ComRetVal  : aliased Windows.Devices.Sms.ISmsBinaryMessage;
   begin
      return RetVal : SmsBinaryMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmsBinaryMessage := new Windows.Devices.Sms.ISmsBinaryMessage;
            Retval.m_ISmsBinaryMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsBinaryMessage

   function get_Format
   (
      this : in out SmsBinaryMessage
   )
   return WinRt.Windows.Devices.Sms.SmsDataFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsDataFormat;
   begin
      Hr := this.m_ISmsBinaryMessage.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out SmsBinaryMessage;
      value : Windows.Devices.Sms.SmsDataFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsBinaryMessage.all.put_Format (value);
   end;

   function GetData
   (
      this : in out SmsBinaryMessage
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsBinaryMessage.all.GetData (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   procedure SetData
   (
      this : in out SmsBinaryMessage;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_ISmsBinaryMessage.all.SetData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   function get_Id
   (
      this : in out SmsBinaryMessage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBinaryMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessage, WinRt.Windows.Devices.Sms.IID_ISmsMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBinaryMessage.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsBinaryMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBinaryMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessage, WinRt.Windows.Devices.Sms.IID_ISmsMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBinaryMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsBroadcastMessage

   procedure Initialize (this : in out SmsBroadcastMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsBroadcastMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsBroadcastMessage, ISmsBroadcastMessage_Ptr);
   begin
      if this.m_ISmsBroadcastMessage /= null then
         if this.m_ISmsBroadcastMessage.all /= null then
            RefCount := this.m_ISmsBroadcastMessage.all.Release;
            Free (this.m_ISmsBroadcastMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsBroadcastMessage

   function get_Timestamp
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_To
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Body
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Channel
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GeographicalScope
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Windows.Devices.Sms.SmsGeographicalScope is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsGeographicalScope;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_GeographicalScope (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageCode
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_MessageCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateNumber
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_UpdateNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BroadcastType
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Windows.Devices.Sms.SmsBroadcastType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsBroadcastType;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_BroadcastType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsEmergencyAlert
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_IsEmergencyAlert (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsUserPopupRequested
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmsBroadcastMessage.all.get_IsUserPopupRequested (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageType
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBroadcastMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBroadcastMessage.all);
      Hr := m_Interface.get_MessageType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBroadcastMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBroadcastMessage.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBroadcastMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBroadcastMessage.all);
      Hr := m_Interface.get_CellularClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBroadcastMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBroadcastMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SimIccId
   (
      this : in out SmsBroadcastMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsBroadcastMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsBroadcastMessage.all);
      Hr := m_Interface.get_SimIccId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsDevice

   procedure Initialize (this : in out SmsDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsDevice, ISmsDevice_Ptr);
   begin
      if this.m_ISmsDevice /= null then
         if this.m_ISmsDevice.all /= null then
            RefCount := this.m_ISmsDevice.all.Release;
            Free (this.m_ISmsDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmsDevice

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmsDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Sms.SmsDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmsDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmsDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Sms.ISmsDevice;
      m_IID            : aliased WinRt.IID := (2876313057, 64699, 23510, (159, 47, 40, 95, 169, 251, 68, 232 )); -- Windows.Devices.Sms.SmsDevice;
      m_HandlerIID     : aliased WinRt.IID := (1152013444, 17360, 22675, (164, 238, 125, 176, 1, 19, 174, 96 ));
      m_Handler        : AsyncOperationCompletedHandler_SmsDevice.Kind := new AsyncOperationCompletedHandler_SmsDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmsDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmsDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmsDevice.Kind_Delegate, AsyncOperationCompletedHandler_SmsDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmsDevice := new Windows.Devices.Sms.ISmsDevice;
                     Retval.m_ISmsDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.Sms.SmsDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmsDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmsDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Sms.ISmsDevice;
      m_IID            : aliased WinRt.IID := (2876313057, 64699, 23510, (159, 47, 40, 95, 169, 251, 68, 232 )); -- Windows.Devices.Sms.SmsDevice;
      m_HandlerIID     : aliased WinRt.IID := (1152013444, 17360, 22675, (164, 238, 125, 176, 1, 19, 174, 96 ));
      m_Handler        : AsyncOperationCompletedHandler_SmsDevice.Kind := new AsyncOperationCompletedHandler_SmsDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmsDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmsDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmsDevice.Kind_Delegate, AsyncOperationCompletedHandler_SmsDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmsDevice := new Windows.Devices.Sms.ISmsDevice;
                     Retval.m_ISmsDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromNetworkAccountIdAsync
   (
      networkAccountId : WinRt.WString
   )
   return WinRt.Windows.Devices.Sms.SmsDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmsDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmsDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Sms.ISmsDevice;
      m_IID            : aliased WinRt.IID := (2876313057, 64699, 23510, (159, 47, 40, 95, 169, 251, 68, 232 )); -- Windows.Devices.Sms.SmsDevice;
      m_HandlerIID     : aliased WinRt.IID := (1152013444, 17360, 22675, (164, 238, 125, 176, 1, 19, 174, 96 ));
      m_Handler        : AsyncOperationCompletedHandler_SmsDevice.Kind := new AsyncOperationCompletedHandler_SmsDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmsDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmsDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmsDevice.Kind_Delegate, AsyncOperationCompletedHandler_SmsDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsDeviceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromNetworkAccountIdAsync (HStr_networkAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmsDevice := new Windows.Devices.Sms.ISmsDevice;
                     Retval.m_ISmsDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkAccountId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsDevice

   function SendMessageAsync
   (
      this : in out SmsDevice;
      message : Windows.Devices.Sms.ISmsMessage
   )
   return WinRt.Windows.Devices.Sms.SendSmsMessageOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IAsyncAction;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SendSmsMessageOperation do
         Hr := this.m_ISmsDevice.all.SendMessageAsync (message, m_ComRetVal'Access);
         Retval.m_IAsyncAction := new Windows.Foundation.IAsyncAction;
         Retval.m_IAsyncAction.all := m_ComRetVal;
      end return;
   end;

   function CalculateLength
   (
      this : in out SmsDevice;
      message : Windows.Devices.Sms.SmsTextMessage'Class
   )
   return WinRt.Windows.Devices.Sms.SmsEncodedLength is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsEncodedLength;
   begin
      Hr := this.m_ISmsDevice.all.CalculateLength (message.m_ISmsTextMessage.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AccountPhoneNumber
   (
      this : in out SmsDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsDevice.all.get_AccountPhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsDevice
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
   begin
      Hr := this.m_ISmsDevice.all.get_CellularClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageStore
   (
      this : in out SmsDevice
   )
   return WinRt.Windows.Devices.Sms.SmsDeviceMessageStore'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsDeviceMessageStore;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDeviceMessageStore do
         Hr := this.m_ISmsDevice.all.get_MessageStore (m_ComRetVal'Access);
         Retval.m_ISmsDeviceMessageStore := new Windows.Devices.Sms.ISmsDeviceMessageStore;
         Retval.m_ISmsDeviceMessageStore.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceStatus
   (
      this : in out SmsDevice
   )
   return WinRt.Windows.Devices.Sms.SmsDeviceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsDeviceStatus;
   begin
      Hr := this.m_ISmsDevice.all.get_DeviceStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SmsMessageReceived
   (
      this : in out SmsDevice;
      eventHandler : Windows.Devices.Sms.SmsMessageReceivedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISmsDevice.all.add_SmsMessageReceived (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SmsMessageReceived
   (
      this : in out SmsDevice;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsDevice.all.remove_SmsMessageReceived (eventCookie);
   end;

   function add_SmsDeviceStatusChanged
   (
      this : in out SmsDevice;
      eventHandler : Windows.Devices.Sms.SmsDeviceStatusChangedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISmsDevice.all.add_SmsDeviceStatusChanged (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SmsDeviceStatusChanged
   (
      this : in out SmsDevice;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsDevice.all.remove_SmsDeviceStatusChanged (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsDevice2

   procedure Initialize (this : in out SmsDevice2) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsDevice2) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsDevice2, ISmsDevice2_Ptr);
   begin
      if this.m_ISmsDevice2 /= null then
         if this.m_ISmsDevice2.all /= null then
            RefCount := this.m_ISmsDevice2.all.Release;
            Free (this.m_ISmsDevice2);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmsDevice2

   function GetDeviceSelector_SmsDevice2
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice2");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDevice2Statics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmsDevice2Statics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Sms.SmsDevice2 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice2");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDevice2Statics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsDevice2;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice2 do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsDevice2Statics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISmsDevice2 := new Windows.Devices.Sms.ISmsDevice2;
            Retval.m_ISmsDevice2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefault
   return WinRt.Windows.Devices.Sms.SmsDevice2 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice2");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDevice2Statics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsDevice2;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice2 do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsDevice2Statics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISmsDevice2 := new Windows.Devices.Sms.ISmsDevice2;
            Retval.m_ISmsDevice2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromParentId
   (
      parentDeviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Sms.SmsDevice2 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsDevice2");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsDevice2Statics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsDevice2;
      HStr_parentDeviceId : WinRt.HString := To_HString (parentDeviceId);
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsDevice2 do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsDevice2Statics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromParentId (HStr_parentDeviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISmsDevice2 := new Windows.Devices.Sms.ISmsDevice2;
            Retval.m_ISmsDevice2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_parentDeviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsDevice2

   function get_SmscAddress
   (
      this : in out SmsDevice2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsDevice2.all.get_SmscAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SmscAddress
   (
      this : in out SmsDevice2;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsDevice2.all.put_SmscAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DeviceId
   (
      this : in out SmsDevice2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsDevice2.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentDeviceId
   (
      this : in out SmsDevice2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsDevice2.all.get_ParentDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccountPhoneNumber
   (
      this : in out SmsDevice2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsDevice2.all.get_AccountPhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsDevice2
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
   begin
      Hr := this.m_ISmsDevice2.all.get_CellularClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceStatus
   (
      this : in out SmsDevice2
   )
   return WinRt.Windows.Devices.Sms.SmsDeviceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsDeviceStatus;
   begin
      Hr := this.m_ISmsDevice2.all.get_DeviceStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CalculateLength
   (
      this : in out SmsDevice2;
      message : Windows.Devices.Sms.ISmsMessageBase
   )
   return WinRt.Windows.Devices.Sms.SmsEncodedLength is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsEncodedLength;
   begin
      Hr := this.m_ISmsDevice2.all.CalculateLength (message, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function SendMessageAndGetResultAsync
   (
      this : in out SmsDevice2;
      message : Windows.Devices.Sms.ISmsMessageBase
   )
   return WinRt.Windows.Devices.Sms.SmsSendMessageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmsSendMessageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmsSendMessageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Sms.ISmsSendMessageResult;
      m_IID            : aliased WinRt.IID := (4228516623, 19916, 21079, (188, 97, 52, 53, 227, 2, 206, 31 )); -- Windows.Devices.Sms.SmsSendMessageResult;
      m_HandlerIID     : aliased WinRt.IID := (3352676094, 37382, 24241, (171, 193, 193, 188, 33, 128, 78, 235 ));
      m_Handler        : AsyncOperationCompletedHandler_SmsSendMessageResult.Kind := new AsyncOperationCompletedHandler_SmsSendMessageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmsSendMessageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmsSendMessageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmsSendMessageResult.Kind_Delegate, AsyncOperationCompletedHandler_SmsSendMessageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsSendMessageResult do
         Hr := this.m_ISmsDevice2.all.SendMessageAndGetResultAsync (message, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmsSendMessageResult := new Windows.Devices.Sms.ISmsSendMessageResult;
                  Retval.m_ISmsSendMessageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_DeviceStatusChanged
   (
      this : in out SmsDevice2;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISmsDevice2.all.add_DeviceStatusChanged (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DeviceStatusChanged
   (
      this : in out SmsDevice2;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsDevice2.all.remove_DeviceStatusChanged (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsDeviceMessageStore

   procedure Initialize (this : in out SmsDeviceMessageStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsDeviceMessageStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsDeviceMessageStore, ISmsDeviceMessageStore_Ptr);
   begin
      if this.m_ISmsDeviceMessageStore /= null then
         if this.m_ISmsDeviceMessageStore.all /= null then
            RefCount := this.m_ISmsDeviceMessageStore.all.Release;
            Free (this.m_ISmsDeviceMessageStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsDeviceMessageStore

   procedure DeleteMessageAsync
   (
      this : in out SmsDeviceMessageStore;
      messageId : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISmsDeviceMessageStore.all.DeleteMessageAsync (messageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteMessagesAsync
   (
      this : in out SmsDeviceMessageStore;
      messageFilter : Windows.Devices.Sms.SmsMessageFilter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISmsDeviceMessageStore.all.DeleteMessagesAsync (messageFilter, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetMessageAsync
   (
      this : in out SmsDeviceMessageStore;
      messageId : WinRt.UInt32
   )
   return WinRt.Windows.Devices.Sms.ISmsMessage is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ISmsMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ISmsMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Sms.ISmsMessage;
      m_IID            : aliased WinRt.IID := (2885268569, 18627, 24236, (151, 73, 76, 109, 180, 213, 7, 230 )); -- Windows.Devices.Sms.ISmsMessage;
      m_HandlerIID     : aliased WinRt.IID := (1315720326, 60390, 21977, (173, 192, 254, 204, 56, 200, 42, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_ISmsMessage.Kind := new AsyncOperationCompletedHandler_ISmsMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ISmsMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ISmsMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ISmsMessage.Kind_Delegate, AsyncOperationCompletedHandler_ISmsMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmsDeviceMessageStore.all.GetMessageAsync (messageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetMessagesAsync
   (
      this : in out SmsDeviceMessageStore;
      messageFilter : Windows.Devices.Sms.SmsMessageFilter
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (318264713, 16733, 23389, (176, 208, 253, 163, 176, 41, 90, 220 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3225767164, 12079, 24076, (141, 233, 88, 185, 232, 42, 3, 186 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmsDeviceMessageStore.all.GetMessagesAsync (messageFilter, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_MaxMessages
   (
      this : in out SmsDeviceMessageStore
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmsDeviceMessageStore.all.get_MaxMessages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate SmsDeviceStatusChangedEventHandler

   function Invoke
   (
      this : access SmsDeviceStatusChangedEventHandler_Delegate;
      sender : Windows.Devices.Sms.ISmsDevice
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsFilterRule

   procedure Initialize (this : in out SmsFilterRule) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsFilterRule) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsFilterRule, ISmsFilterRule_Ptr);
   begin
      if this.m_ISmsFilterRule /= null then
         if this.m_ISmsFilterRule.all /= null then
            RefCount := this.m_ISmsFilterRule.all.Release;
            Free (this.m_ISmsFilterRule);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsFilterRule

   function Constructor
   (
      messageType : Windows.Devices.Sms.SmsMessageType
   )
   return SmsFilterRule is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsFilterRule");
      m_Factory    : access ISmsFilterRuleFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Sms.ISmsFilterRule;
   begin
      return RetVal : SmsFilterRule do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsFilterRuleFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFilterRule (messageType, m_ComRetVal'Access);
            Retval.m_ISmsFilterRule := new Windows.Devices.Sms.ISmsFilterRule;
            Retval.m_ISmsFilterRule.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsFilterRule

   function get_MessageType
   (
      this : in out SmsFilterRule
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
   begin
      Hr := this.m_ISmsFilterRule.all.get_MessageType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImsiPrefixes
   (
      this : in out SmsFilterRule
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_ImsiPrefixes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DeviceIds
   (
      this : in out SmsFilterRule
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_DeviceIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SenderNumbers
   (
      this : in out SmsFilterRule
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_SenderNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TextMessagePrefixes
   (
      this : in out SmsFilterRule
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_TextMessagePrefixes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PortNumbers
   (
      this : in out SmsFilterRule
   )
   return IVector_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_Int32.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_PortNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsFilterRule
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
   begin
      Hr := this.m_ISmsFilterRule.all.get_CellularClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CellularClass
   (
      this : in out SmsFilterRule;
      value : Windows.Devices.Sms.CellularClass
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsFilterRule.all.put_CellularClass (value);
   end;

   function get_ProtocolIds
   (
      this : in out SmsFilterRule
   )
   return IVector_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_Int32.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_ProtocolIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TeleserviceIds
   (
      this : in out SmsFilterRule
   )
   return IVector_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_Int32.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_TeleserviceIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_WapApplicationIds
   (
      this : in out SmsFilterRule
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_WapApplicationIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_WapContentTypes
   (
      this : in out SmsFilterRule
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_WapContentTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BroadcastTypes
   (
      this : in out SmsFilterRule
   )
   return IVector_SmsBroadcastType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_SmsBroadcastType.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_BroadcastTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_SmsBroadcastType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BroadcastChannels
   (
      this : in out SmsFilterRule
   )
   return IVector_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_Int32.Kind;
   begin
      Hr := this.m_ISmsFilterRule.all.get_BroadcastChannels (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsFilterRules

   procedure Initialize (this : in out SmsFilterRules) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsFilterRules) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsFilterRules, ISmsFilterRules_Ptr);
   begin
      if this.m_ISmsFilterRules /= null then
         if this.m_ISmsFilterRules.all /= null then
            RefCount := this.m_ISmsFilterRules.all.Release;
            Free (this.m_ISmsFilterRules);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsFilterRules

   function Constructor
   (
      actionType : Windows.Devices.Sms.SmsFilterActionType
   )
   return SmsFilterRules is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsFilterRules");
      m_Factory    : access ISmsFilterRulesFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Sms.ISmsFilterRules;
   begin
      return RetVal : SmsFilterRules do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsFilterRulesFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFilterRules (actionType, m_ComRetVal'Access);
            Retval.m_ISmsFilterRules := new Windows.Devices.Sms.ISmsFilterRules;
            Retval.m_ISmsFilterRules.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsFilterRules

   function get_ActionType
   (
      this : in out SmsFilterRules
   )
   return WinRt.Windows.Devices.Sms.SmsFilterActionType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsFilterActionType;
   begin
      Hr := this.m_ISmsFilterRules.all.get_ActionType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Rules
   (
      this : in out SmsFilterRules
   )
   return IVector_ISmsFilterRule.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISmsFilterRule.Kind;
   begin
      Hr := this.m_ISmsFilterRules.all.get_Rules (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISmsFilterRule (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsMessageReceivedEventArgs

   procedure Initialize (this : in out SmsMessageReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsMessageReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsMessageReceivedEventArgs, ISmsMessageReceivedEventArgs_Ptr);
   begin
      if this.m_ISmsMessageReceivedEventArgs /= null then
         if this.m_ISmsMessageReceivedEventArgs.all /= null then
            RefCount := this.m_ISmsMessageReceivedEventArgs.all.Release;
            Free (this.m_ISmsMessageReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsMessageReceivedEventArgs

   function get_TextMessage
   (
      this : in out SmsMessageReceivedEventArgs
   )
   return WinRt.Windows.Devices.Sms.SmsTextMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsTextMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsTextMessage do
         Hr := this.m_ISmsMessageReceivedEventArgs.all.get_TextMessage (m_ComRetVal'Access);
         Retval.m_ISmsTextMessage := new Windows.Devices.Sms.ISmsTextMessage;
         Retval.m_ISmsTextMessage.all := m_ComRetVal;
      end return;
   end;

   function get_BinaryMessage
   (
      this : in out SmsMessageReceivedEventArgs
   )
   return WinRt.Windows.Devices.Sms.SmsBinaryMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsBinaryMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsBinaryMessage do
         Hr := this.m_ISmsMessageReceivedEventArgs.all.get_BinaryMessage (m_ComRetVal'Access);
         Retval.m_ISmsBinaryMessage := new Windows.Devices.Sms.ISmsBinaryMessage;
         Retval.m_ISmsBinaryMessage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate SmsMessageReceivedEventHandler

   function Invoke
   (
      this : access SmsMessageReceivedEventHandler_Delegate;
      sender : Windows.Devices.Sms.ISmsDevice;
      e : Windows.Devices.Sms.ISmsMessageReceivedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsMessageReceivedTriggerDetails

   procedure Initialize (this : in out SmsMessageReceivedTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsMessageReceivedTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsMessageReceivedTriggerDetails, ISmsMessageReceivedTriggerDetails_Ptr);
   begin
      if this.m_ISmsMessageReceivedTriggerDetails /= null then
         if this.m_ISmsMessageReceivedTriggerDetails.all /= null then
            RefCount := this.m_ISmsMessageReceivedTriggerDetails.all.Release;
            Free (this.m_ISmsMessageReceivedTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsMessageReceivedTriggerDetails

   function get_MessageType
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
   begin
      Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_MessageType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TextMessage
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsTextMessage2'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsTextMessage2;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsTextMessage2 do
         Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_TextMessage (m_ComRetVal'Access);
         Retval.m_ISmsTextMessage2 := new Windows.Devices.Sms.ISmsTextMessage2;
         Retval.m_ISmsTextMessage2.all := m_ComRetVal;
      end return;
   end;

   function get_WapMessage
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsWapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsWapMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsWapMessage do
         Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_WapMessage (m_ComRetVal'Access);
         Retval.m_ISmsWapMessage := new Windows.Devices.Sms.ISmsWapMessage;
         Retval.m_ISmsWapMessage.all := m_ComRetVal;
      end return;
   end;

   function get_AppMessage
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsAppMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsAppMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsAppMessage do
         Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_AppMessage (m_ComRetVal'Access);
         Retval.m_ISmsAppMessage := new Windows.Devices.Sms.ISmsAppMessage;
         Retval.m_ISmsAppMessage.all := m_ComRetVal;
      end return;
   end;

   function get_BroadcastMessage
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsBroadcastMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsBroadcastMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsBroadcastMessage do
         Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_BroadcastMessage (m_ComRetVal'Access);
         Retval.m_ISmsBroadcastMessage := new Windows.Devices.Sms.ISmsBroadcastMessage;
         Retval.m_ISmsBroadcastMessage.all := m_ComRetVal;
      end return;
   end;

   function get_VoicemailMessage
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsVoicemailMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsVoicemailMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsVoicemailMessage do
         Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_VoicemailMessage (m_ComRetVal'Access);
         Retval.m_ISmsVoicemailMessage := new Windows.Devices.Sms.ISmsVoicemailMessage;
         Retval.m_ISmsVoicemailMessage.all := m_ComRetVal;
      end return;
   end;

   function get_StatusMessage
   (
      this : in out SmsMessageReceivedTriggerDetails
   )
   return WinRt.Windows.Devices.Sms.SmsStatusMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsStatusMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsStatusMessage do
         Hr := this.m_ISmsMessageReceivedTriggerDetails.all.get_StatusMessage (m_ComRetVal'Access);
         Retval.m_ISmsStatusMessage := new Windows.Devices.Sms.ISmsStatusMessage;
         Retval.m_ISmsStatusMessage.all := m_ComRetVal;
      end return;
   end;

   procedure Drop
   (
      this : in out SmsMessageReceivedTriggerDetails
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsMessageReceivedTriggerDetails.all.Drop;
   end;

   procedure Accept_x
   (
      this : in out SmsMessageReceivedTriggerDetails
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsMessageReceivedTriggerDetails.all.Accept_x;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsMessageRegistration

   procedure Initialize (this : in out SmsMessageRegistration) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsMessageRegistration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsMessageRegistration, ISmsMessageRegistration_Ptr);
   begin
      if this.m_ISmsMessageRegistration /= null then
         if this.m_ISmsMessageRegistration.all /= null then
            RefCount := this.m_ISmsMessageRegistration.all.Release;
            Free (this.m_ISmsMessageRegistration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmsMessageRegistration

   function get_AllRegistrations
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsMessageRegistration");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsMessageRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmsMessageRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AllRegistrations (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function Register
   (
      id : WinRt.WString;
      filterRules : Windows.Devices.Sms.SmsFilterRules'Class
   )
   return WinRt.Windows.Devices.Sms.SmsMessageRegistration is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsMessageRegistration");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsMessageRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsMessageRegistration;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsMessageRegistration do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsMessageRegistrationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Register (HStr_id, filterRules.m_ISmsFilterRules.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISmsMessageRegistration := new Windows.Devices.Sms.ISmsMessageRegistration;
            Retval.m_ISmsMessageRegistration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsMessageRegistration

   function get_Id
   (
      this : in out SmsMessageRegistration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsMessageRegistration.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Unregister
   (
      this : in out SmsMessageRegistration
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsMessageRegistration.all.Unregister;
   end;

   function add_MessageReceived
   (
      this : in out SmsMessageRegistration;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISmsMessageRegistration.all.add_MessageReceived (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageReceived
   (
      this : in out SmsMessageRegistration;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsMessageRegistration.all.remove_MessageReceived (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsReceivedEventDetails

   procedure Initialize (this : in out SmsReceivedEventDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsReceivedEventDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsReceivedEventDetails, ISmsReceivedEventDetails_Ptr);
   begin
      if this.m_ISmsReceivedEventDetails /= null then
         if this.m_ISmsReceivedEventDetails.all /= null then
            RefCount := this.m_ISmsReceivedEventDetails.all.Release;
            Free (this.m_ISmsReceivedEventDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsReceivedEventDetails

   function get_DeviceId
   (
      this : in out SmsReceivedEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsReceivedEventDetails.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MessageIndex
   (
      this : in out SmsReceivedEventDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmsReceivedEventDetails.all.get_MessageIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsReceivedEventDetails
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsReceivedEventDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsReceivedEventDetails_Interface, WinRt.Windows.Devices.Sms.ISmsReceivedEventDetails2, WinRt.Windows.Devices.Sms.IID_ISmsReceivedEventDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsReceivedEventDetails.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BinaryMessage
   (
      this : in out SmsReceivedEventDetails
   )
   return WinRt.Windows.Devices.Sms.SmsBinaryMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsReceivedEventDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsBinaryMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsReceivedEventDetails_Interface, WinRt.Windows.Devices.Sms.ISmsReceivedEventDetails2, WinRt.Windows.Devices.Sms.IID_ISmsReceivedEventDetails2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsBinaryMessage do
         m_Interface := QInterface (this.m_ISmsReceivedEventDetails.all);
         Hr := m_Interface.get_BinaryMessage (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISmsBinaryMessage := new Windows.Devices.Sms.ISmsBinaryMessage;
         Retval.m_ISmsBinaryMessage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsSendMessageResult

   procedure Initialize (this : in out SmsSendMessageResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsSendMessageResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsSendMessageResult, ISmsSendMessageResult_Ptr);
   begin
      if this.m_ISmsSendMessageResult /= null then
         if this.m_ISmsSendMessageResult.all /= null then
            RefCount := this.m_ISmsSendMessageResult.all.Release;
            Free (this.m_ISmsSendMessageResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsSendMessageResult

   function get_IsSuccessful
   (
      this : in out SmsSendMessageResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_IsSuccessful (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageReferenceNumbers
   (
      this : in out SmsSendMessageResult
   )
   return IVectorView_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int32.Kind;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_MessageReferenceNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsSendMessageResult
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_CellularClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ModemErrorCode
   (
      this : in out SmsSendMessageResult
   )
   return WinRt.Windows.Devices.Sms.SmsModemErrorCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsModemErrorCode;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_ModemErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsErrorTransient
   (
      this : in out SmsSendMessageResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_IsErrorTransient (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkCauseCode
   (
      this : in out SmsSendMessageResult
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_NetworkCauseCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TransportFailureCause
   (
      this : in out SmsSendMessageResult
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsSendMessageResult.all.get_TransportFailureCause (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsStatusMessage

   procedure Initialize (this : in out SmsStatusMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsStatusMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsStatusMessage, ISmsStatusMessage_Ptr);
   begin
      if this.m_ISmsStatusMessage /= null then
         if this.m_ISmsStatusMessage.all /= null then
            RefCount := this.m_ISmsStatusMessage.all.Release;
            Free (this.m_ISmsStatusMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsStatusMessage

   function get_To
   (
      this : in out SmsStatusMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_From
   (
      this : in out SmsStatusMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Body
   (
      this : in out SmsStatusMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Status
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageReferenceNumber
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_MessageReferenceNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceCenterTimestamp
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_ServiceCenterTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DischargeTime
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsStatusMessage.all.get_DischargeTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageType
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsStatusMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsStatusMessage.all);
      Hr := m_Interface.get_MessageType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SmsStatusMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsStatusMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsStatusMessage.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsStatusMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsStatusMessage.all);
      Hr := m_Interface.get_CellularClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsStatusMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsStatusMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsStatusMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SimIccId
   (
      this : in out SmsStatusMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsStatusMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsStatusMessage.all);
      Hr := m_Interface.get_SimIccId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsTextMessage

   procedure Initialize (this : in out SmsTextMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsTextMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsTextMessage, ISmsTextMessage_Ptr);
   begin
      if this.m_ISmsTextMessage /= null then
         if this.m_ISmsTextMessage.all /= null then
            RefCount := this.m_ISmsTextMessage.all.Release;
            Free (this.m_ISmsTextMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsTextMessage

   function Constructor return SmsTextMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsTextMessage");
      m_ComRetVal  : aliased Windows.Devices.Sms.ISmsTextMessage;
   begin
      return RetVal : SmsTextMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmsTextMessage := new Windows.Devices.Sms.ISmsTextMessage;
            Retval.m_ISmsTextMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmsTextMessage

   function FromBinaryMessage
   (
      binaryMessage : Windows.Devices.Sms.SmsBinaryMessage'Class
   )
   return WinRt.Windows.Devices.Sms.SmsTextMessage is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsTextMessage");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsTextMessageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsTextMessage;
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsTextMessage do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsTextMessageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBinaryMessage (binaryMessage.m_ISmsBinaryMessage.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISmsTextMessage := new Windows.Devices.Sms.ISmsTextMessage;
            Retval.m_ISmsTextMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromBinaryData
   (
      format : Windows.Devices.Sms.SmsDataFormat;
      value : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.Sms.SmsTextMessage is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsTextMessage");
      m_Factory        : access WinRt.Windows.Devices.Sms.ISmsTextMessageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsTextMessage;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Devices.Sms.SmsTextMessage do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsTextMessageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBinaryData (format, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISmsTextMessage := new Windows.Devices.Sms.ISmsTextMessage;
            Retval.m_ISmsTextMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsTextMessage

   function get_Timestamp
   (
      this : in out SmsTextMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsTextMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PartReferenceId
   (
      this : in out SmsTextMessage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmsTextMessage.all.get_PartReferenceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PartNumber
   (
      this : in out SmsTextMessage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmsTextMessage.all.get_PartNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PartCount
   (
      this : in out SmsTextMessage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmsTextMessage.all.get_PartCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_To
   (
      this : in out SmsTextMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_To
   (
      this : in out SmsTextMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsTextMessage.all.put_To (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_From
   (
      this : in out SmsTextMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_From
   (
      this : in out SmsTextMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsTextMessage.all.put_From (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Body
   (
      this : in out SmsTextMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Body
   (
      this : in out SmsTextMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsTextMessage.all.put_Body (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Encoding
   (
      this : in out SmsTextMessage
   )
   return WinRt.Windows.Devices.Sms.SmsEncoding is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsEncoding;
   begin
      Hr := this.m_ISmsTextMessage.all.get_Encoding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Encoding
   (
      this : in out SmsTextMessage;
      value : Windows.Devices.Sms.SmsEncoding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsTextMessage.all.put_Encoding (value);
   end;

   function ToBinaryMessages
   (
      this : in out SmsTextMessage;
      format : Windows.Devices.Sms.SmsDataFormat
   )
   return IVectorView_ISmsBinaryMessage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISmsBinaryMessage.Kind;
   begin
      Hr := this.m_ISmsTextMessage.all.ToBinaryMessages (format, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISmsBinaryMessage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Id
   (
      this : in out SmsTextMessage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessage, WinRt.Windows.Devices.Sms.IID_ISmsMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsTextMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessage, WinRt.Windows.Devices.Sms.IID_ISmsMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsTextMessage2

   procedure Initialize (this : in out SmsTextMessage2) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsTextMessage2) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsTextMessage2, ISmsTextMessage2_Ptr);
   begin
      if this.m_ISmsTextMessage2 /= null then
         if this.m_ISmsTextMessage2.all /= null then
            RefCount := this.m_ISmsTextMessage2.all.Release;
            Free (this.m_ISmsTextMessage2);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsTextMessage2

   function Constructor return SmsTextMessage2 is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Sms.SmsTextMessage2");
      m_ComRetVal  : aliased Windows.Devices.Sms.ISmsTextMessage2;
   begin
      return RetVal : SmsTextMessage2 do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmsTextMessage2 := new Windows.Devices.Sms.ISmsTextMessage2;
            Retval.m_ISmsTextMessage2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsTextMessage2

   function get_Timestamp
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_To
   (
      this : in out SmsTextMessage2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_To
   (
      this : in out SmsTextMessage2;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsTextMessage2.all.put_To (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_From
   (
      this : in out SmsTextMessage2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Body
   (
      this : in out SmsTextMessage2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Body
   (
      this : in out SmsTextMessage2;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsTextMessage2.all.put_Body (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Encoding
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Windows.Devices.Sms.SmsEncoding is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsEncoding;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_Encoding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Encoding
   (
      this : in out SmsTextMessage2;
      value : Windows.Devices.Sms.SmsEncoding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsTextMessage2.all.put_Encoding (value);
   end;

   function get_CallbackNumber
   (
      this : in out SmsTextMessage2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_CallbackNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CallbackNumber
   (
      this : in out SmsTextMessage2;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmsTextMessage2.all.put_CallbackNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsDeliveryNotificationEnabled
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_IsDeliveryNotificationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDeliveryNotificationEnabled
   (
      this : in out SmsTextMessage2;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsTextMessage2.all.put_IsDeliveryNotificationEnabled (value);
   end;

   function get_RetryAttemptCount
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_RetryAttemptCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RetryAttemptCount
   (
      this : in out SmsTextMessage2;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmsTextMessage2.all.put_RetryAttemptCount (value);
   end;

   function get_TeleserviceId
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_TeleserviceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolId
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmsTextMessage2.all.get_ProtocolId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageType
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage2_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage2.all);
      Hr := m_Interface.get_MessageType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SmsTextMessage2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage2_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage2.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage2_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage2.all);
      Hr := m_Interface.get_CellularClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsTextMessage2
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage2_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage2.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SimIccId
   (
      this : in out SmsTextMessage2
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsTextMessage2_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsTextMessage2.all);
      Hr := m_Interface.get_SimIccId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsVoicemailMessage

   procedure Initialize (this : in out SmsVoicemailMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsVoicemailMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsVoicemailMessage, ISmsVoicemailMessage_Ptr);
   begin
      if this.m_ISmsVoicemailMessage /= null then
         if this.m_ISmsVoicemailMessage.all /= null then
            RefCount := this.m_ISmsVoicemailMessage.all.Release;
            Free (this.m_ISmsVoicemailMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsVoicemailMessage

   function get_Timestamp
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsVoicemailMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_To
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsVoicemailMessage.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Body
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsVoicemailMessage.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MessageCount
   (
      this : in out SmsVoicemailMessage
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_ISmsVoicemailMessage.all.get_MessageCount (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MessageType
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsVoicemailMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsVoicemailMessage.all);
      Hr := m_Interface.get_MessageType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsVoicemailMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsVoicemailMessage.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsVoicemailMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsVoicemailMessage.all);
      Hr := m_Interface.get_CellularClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsVoicemailMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsVoicemailMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SimIccId
   (
      this : in out SmsVoicemailMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsVoicemailMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsVoicemailMessage.all);
      Hr := m_Interface.get_SimIccId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsWapMessage

   procedure Initialize (this : in out SmsWapMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsWapMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmsWapMessage, ISmsWapMessage_Ptr);
   begin
      if this.m_ISmsWapMessage /= null then
         if this.m_ISmsWapMessage.all /= null then
            RefCount := this.m_ISmsWapMessage.all.Release;
            Free (this.m_ISmsWapMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsWapMessage

   function get_Timestamp
   (
      this : in out SmsWapMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmsWapMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_To
   (
      this : in out SmsWapMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsWapMessage.all.get_To (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_From
   (
      this : in out SmsWapMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsWapMessage.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ApplicationId
   (
      this : in out SmsWapMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsWapMessage.all.get_ApplicationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContentType
   (
      this : in out SmsWapMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmsWapMessage.all.get_ContentType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_BinaryBody
   (
      this : in out SmsWapMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmsWapMessage.all.get_BinaryBody (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Headers
   (
      this : in out SmsWapMessage
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_ISmsWapMessage.all.get_Headers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MessageType
   (
      this : in out SmsWapMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsWapMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsWapMessage.all);
      Hr := m_Interface.get_MessageType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SmsWapMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsWapMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsWapMessage.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out SmsWapMessage
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsWapMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsWapMessage.all);
      Hr := m_Interface.get_CellularClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MessageClass
   (
      this : in out SmsWapMessage
   )
   return WinRt.Windows.Devices.Sms.SmsMessageClass is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.SmsMessageClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsWapMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsWapMessage.all);
      Hr := m_Interface.get_MessageClass (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SimIccId
   (
      this : in out SmsWapMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sms.ISmsMessageBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sms.ISmsWapMessage_Interface, WinRt.Windows.Devices.Sms.ISmsMessageBase, WinRt.Windows.Devices.Sms.IID_ISmsMessageBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmsWapMessage.all);
      Hr := m_Interface.get_SimIccId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

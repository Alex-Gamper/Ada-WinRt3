--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.AppBroadcasting is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastingMonitor

   procedure Initialize (this : in out AppBroadcastingMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastingMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastingMonitor, IAppBroadcastingMonitor_Ptr);
   begin
      if this.m_IAppBroadcastingMonitor /= null then
         if this.m_IAppBroadcastingMonitor.all /= null then
            RefCount := this.m_IAppBroadcastingMonitor.all.Release;
            Free (this.m_IAppBroadcastingMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppBroadcastingMonitor

   function Constructor return AppBroadcastingMonitor is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.AppBroadcasting.AppBroadcastingMonitor");
      m_ComRetVal  : aliased Windows.Media.AppBroadcasting.IAppBroadcastingMonitor;
   begin
      return RetVal : AppBroadcastingMonitor do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppBroadcastingMonitor := new Windows.Media.AppBroadcasting.IAppBroadcastingMonitor;
            Retval.m_IAppBroadcastingMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastingMonitor

   function get_IsCurrentAppBroadcasting
   (
      this : in out AppBroadcastingMonitor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingMonitor.all.get_IsCurrentAppBroadcasting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_IsCurrentAppBroadcastingChanged
   (
      this : in out AppBroadcastingMonitor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastingMonitor.all.add_IsCurrentAppBroadcastingChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsCurrentAppBroadcastingChanged
   (
      this : in out AppBroadcastingMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastingMonitor.all.remove_IsCurrentAppBroadcastingChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastingStatus

   procedure Initialize (this : in out AppBroadcastingStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastingStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastingStatus, IAppBroadcastingStatus_Ptr);
   begin
      if this.m_IAppBroadcastingStatus /= null then
         if this.m_IAppBroadcastingStatus.all /= null then
            RefCount := this.m_IAppBroadcastingStatus.all.Release;
            Free (this.m_IAppBroadcastingStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastingStatus

   function get_CanStartBroadcast
   (
      this : in out AppBroadcastingStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatus.all.get_CanStartBroadcast (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Details
   (
      this : in out AppBroadcastingStatus
   )
   return WinRt.Windows.Media.AppBroadcasting.AppBroadcastingStatusDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AppBroadcasting.IAppBroadcastingStatusDetails;
   begin
      return RetVal : WinRt.Windows.Media.AppBroadcasting.AppBroadcastingStatusDetails do
         Hr := this.m_IAppBroadcastingStatus.all.get_Details (m_ComRetVal'Access);
         Retval.m_IAppBroadcastingStatusDetails := new Windows.Media.AppBroadcasting.IAppBroadcastingStatusDetails;
         Retval.m_IAppBroadcastingStatusDetails.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastingStatusDetails

   procedure Initialize (this : in out AppBroadcastingStatusDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastingStatusDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastingStatusDetails, IAppBroadcastingStatusDetails_Ptr);
   begin
      if this.m_IAppBroadcastingStatusDetails /= null then
         if this.m_IAppBroadcastingStatusDetails.all /= null then
            RefCount := this.m_IAppBroadcastingStatusDetails.all.Release;
            Free (this.m_IAppBroadcastingStatusDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastingStatusDetails

   function get_IsAnyAppBroadcasting
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsAnyAppBroadcasting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCaptureResourceUnavailable
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsCaptureResourceUnavailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGameStreamInProgress
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsGameStreamInProgress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGpuConstrained
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsGpuConstrained (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAppInactive
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsAppInactive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsBlockedForApp
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsBlockedForApp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDisabledByUser
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsDisabledByUser (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDisabledBySystem
   (
      this : in out AppBroadcastingStatusDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastingStatusDetails.all.get_IsDisabledBySystem (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastingUI

   procedure Initialize (this : in out AppBroadcastingUI) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastingUI) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastingUI, IAppBroadcastingUI_Ptr);
   begin
      if this.m_IAppBroadcastingUI /= null then
         if this.m_IAppBroadcastingUI.all /= null then
            RefCount := this.m_IAppBroadcastingUI.all.Release;
            Free (this.m_IAppBroadcastingUI);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppBroadcastingUI

   function GetDefault
   return WinRt.Windows.Media.AppBroadcasting.AppBroadcastingUI is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.AppBroadcasting.AppBroadcastingUI");
      m_Factory        : access WinRt.Windows.Media.AppBroadcasting.IAppBroadcastingUIStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AppBroadcasting.IAppBroadcastingUI;
   begin
      return RetVal : WinRt.Windows.Media.AppBroadcasting.AppBroadcastingUI do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastingUIStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppBroadcastingUI := new Windows.Media.AppBroadcasting.IAppBroadcastingUI;
            Retval.m_IAppBroadcastingUI.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Media.AppBroadcasting.AppBroadcastingUI is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.AppBroadcasting.AppBroadcastingUI");
      m_Factory        : access WinRt.Windows.Media.AppBroadcasting.IAppBroadcastingUIStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AppBroadcasting.IAppBroadcastingUI;
   begin
      return RetVal : WinRt.Windows.Media.AppBroadcasting.AppBroadcastingUI do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastingUIStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppBroadcastingUI := new Windows.Media.AppBroadcasting.IAppBroadcastingUI;
            Retval.m_IAppBroadcastingUI.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastingUI

   function GetStatus
   (
      this : in out AppBroadcastingUI
   )
   return WinRt.Windows.Media.AppBroadcasting.AppBroadcastingStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AppBroadcasting.IAppBroadcastingStatus;
   begin
      return RetVal : WinRt.Windows.Media.AppBroadcasting.AppBroadcastingStatus do
         Hr := this.m_IAppBroadcastingUI.all.GetStatus (m_ComRetVal'Access);
         Retval.m_IAppBroadcastingStatus := new Windows.Media.AppBroadcasting.IAppBroadcastingStatus;
         Retval.m_IAppBroadcastingStatus.all := m_ComRetVal;
      end return;
   end;

   procedure ShowBroadcastUI
   (
      this : in out AppBroadcastingUI
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastingUI.all.ShowBroadcastUI;
   end;

end;

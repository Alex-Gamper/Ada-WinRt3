--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Management.Deployment is

   package IAsyncOperation_DeploymentResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Management.Deployment.IDeploymentResult, GenericObject);
   package AsyncOperationCompletedHandler_DeploymentResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Management.Deployment.IDeploymentResult, GenericObject);

   package IAsyncOperation_PackageVolume is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Management.Deployment.IPackageVolume);
   package AsyncOperationCompletedHandler_PackageVolume is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Management.Deployment.IPackageVolume);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_UInt64 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt64);
   package AsyncOperationCompletedHandler_UInt64 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt64);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AddPackageOptions

   procedure Initialize (this : in out AddPackageOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out AddPackageOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAddPackageOptions, IAddPackageOptions_Ptr);
   begin
      if this.m_IAddPackageOptions /= null then
         if this.m_IAddPackageOptions.all /= null then
            RefCount := this.m_IAddPackageOptions.all.Release;
            Free (this.m_IAddPackageOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AddPackageOptions

   function Constructor return AddPackageOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Management.Deployment.AddPackageOptions");
      m_ComRetVal  : aliased Windows.Management.Deployment.IAddPackageOptions;
   begin
      return RetVal : AddPackageOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAddPackageOptions := new Windows.Management.Deployment.IAddPackageOptions;
            Retval.m_IAddPackageOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AddPackageOptions

   function get_DependencyPackageUris
   (
      this : in out AddPackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IAddPackageOptions.all.get_DependencyPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TargetVolume
   (
      this : in out AddPackageOptions
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageVolume;
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         Hr := this.m_IAddPackageOptions.all.get_TargetVolume (m_ComRetVal'Access);
         Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
         Retval.m_IPackageVolume.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetVolume
   (
      this : in out AddPackageOptions;
      value : Windows.Management.Deployment.PackageVolume'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_TargetVolume (value.m_IPackageVolume.all);
   end;

   function get_OptionalPackageFamilyNames
   (
      this : in out AddPackageOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IAddPackageOptions.all.get_OptionalPackageFamilyNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_OptionalPackageUris
   (
      this : in out AddPackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IAddPackageOptions.all.get_OptionalPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RelatedPackageUris
   (
      this : in out AddPackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IAddPackageOptions.all.get_RelatedPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExternalLocationUri
   (
      this : in out AddPackageOptions
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAddPackageOptions.all.get_ExternalLocationUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExternalLocationUri
   (
      this : in out AddPackageOptions;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_ExternalLocationUri (value.m_IUriRuntimeClass.all);
   end;

   function get_StubPackageOption
   (
      this : in out AddPackageOptions
   )
   return WinRt.Windows.Management.Deployment.StubPackageOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.StubPackageOption;
   begin
      Hr := this.m_IAddPackageOptions.all.get_StubPackageOption (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StubPackageOption
   (
      this : in out AddPackageOptions;
      value : Windows.Management.Deployment.StubPackageOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_StubPackageOption (value);
   end;

   function get_DeveloperMode
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_DeveloperMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DeveloperMode
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_DeveloperMode (value);
   end;

   function get_ForceAppShutdown
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_ForceAppShutdown (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceAppShutdown
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_ForceAppShutdown (value);
   end;

   function get_ForceTargetAppShutdown
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_ForceTargetAppShutdown (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceTargetAppShutdown
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_ForceTargetAppShutdown (value);
   end;

   function get_ForceUpdateFromAnyVersion
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_ForceUpdateFromAnyVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceUpdateFromAnyVersion
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_ForceUpdateFromAnyVersion (value);
   end;

   function get_InstallAllResources
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_InstallAllResources (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InstallAllResources
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_InstallAllResources (value);
   end;

   function get_RequiredContentGroupOnly
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_RequiredContentGroupOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequiredContentGroupOnly
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_RequiredContentGroupOnly (value);
   end;

   function get_RetainFilesOnFailure
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_RetainFilesOnFailure (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RetainFilesOnFailure
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_RetainFilesOnFailure (value);
   end;

   function get_StageInPlace
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_StageInPlace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StageInPlace
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_StageInPlace (value);
   end;

   function get_AllowUnsigned
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_AllowUnsigned (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowUnsigned
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_AllowUnsigned (value);
   end;

   function get_DeferRegistrationWhenPackagesAreInUse
   (
      this : in out AddPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAddPackageOptions.all.get_DeferRegistrationWhenPackagesAreInUse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DeferRegistrationWhenPackagesAreInUse
   (
      this : in out AddPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddPackageOptions.all.put_DeferRegistrationWhenPackagesAreInUse (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeploymentResult

   procedure Initialize (this : in out DeploymentResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeploymentResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeploymentResult, IDeploymentResult_Ptr);
   begin
      if this.m_IDeploymentResult /= null then
         if this.m_IDeploymentResult.all /= null then
            RefCount := this.m_IDeploymentResult.all.Release;
            Free (this.m_IDeploymentResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeploymentResult

   function get_ErrorText
   (
      this : in out DeploymentResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeploymentResult.all.get_ErrorText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ActivityId
   (
      this : in out DeploymentResult
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IDeploymentResult.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedErrorCode
   (
      this : in out DeploymentResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IDeploymentResult.all.get_ExtendedErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsRegistered
   (
      this : in out DeploymentResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IDeploymentResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IDeploymentResult_Interface, WinRt.Windows.Management.Deployment.IDeploymentResult2, WinRt.Windows.Management.Deployment.IID_IDeploymentResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeploymentResult.all);
      Hr := m_Interface.get_IsRegistered (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageManager

   procedure Initialize (this : in out PackageManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageManager, IPackageManager_Ptr);
   begin
      if this.m_IPackageManager /= null then
         if this.m_IPackageManager.all /= null then
            RefCount := this.m_IPackageManager.all.Release;
            Free (this.m_IPackageManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PackageManager

   function Constructor return PackageManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Management.Deployment.PackageManager");
      m_ComRetVal  : aliased Windows.Management.Deployment.IPackageManager;
   begin
      return RetVal : PackageManager do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPackageManager := new Windows.Management.Deployment.IPackageManager;
            Retval.m_IPackageManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageManager

   function AddPackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         Hr := this.m_IPackageManager.all.AddPackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function UpdatePackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         Hr := this.m_IPackageManager.all.UpdatePackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RemovePackageAsync
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         Hr := this.m_IPackageManager.all.RemovePackageAsync (HStr_packageFullName, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function StagePackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         Hr := this.m_IPackageManager.all.StagePackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterPackageAsync
   (
      this : in out PackageManager;
      manifestUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         Hr := this.m_IPackageManager.all.RegisterPackageAsync (manifestUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function FindPackages
   (
      this : in out PackageManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IPackageManager.all.FindPackages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function FindPackagesForUser
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
   begin
      Hr := this.m_IPackageManager.all.FindPackagesForUser (HStr_userSecurityId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      return m_ComRetVal;
   end;

   function FindPackages
   (
      this : in out PackageManager;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
   begin
      Hr := this.m_IPackageManager.all.FindPackages (HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackagesForUser
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
   begin
      Hr := this.m_IPackageManager.all.FindPackagesForUser (HStr_userSecurityId, HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindUsers
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString
   )
   return IIterable_IPackageUserInformation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_IPackageUserInformation.Kind;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
   begin
      Hr := this.m_IPackageManager.all.FindUsers (HStr_packageFullName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageFullName);
      m_GenericRetVal := QInterface_IIterable_IPackageUserInformation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure SetPackageState
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString;
      packageState : Windows.Management.Deployment.PackageState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
   begin
      Hr := this.m_IPackageManager.all.SetPackageState (HStr_packageFullName, packageState);
      Hr := WindowsDeleteString (HStr_packageFullName);
   end;

   function FindPackage
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageManager.all.FindPackage (HStr_packageFullName, m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function CleanupPackageForUserAsync
   (
      this : in out PackageManager;
      packageName : WinRt.WString;
      userSecurityId : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         Hr := this.m_IPackageManager.all.CleanupPackageForUserAsync (HStr_packageName, HStr_userSecurityId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageName);
         Hr := WindowsDeleteString (HStr_userSecurityId);
      end return;
   end;

   function FindPackages
   (
      this : in out PackageManager;
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
   begin
      Hr := this.m_IPackageManager.all.FindPackages (HStr_packageFamilyName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackagesForUser
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString;
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
   begin
      Hr := this.m_IPackageManager.all.FindPackagesForUser (HStr_userSecurityId, HStr_packageFamilyName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackageForUser
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString;
      packageFullName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageManager.all.FindPackageForUser (HStr_userSecurityId, HStr_packageFullName, m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_userSecurityId);
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function RemovePackageAsync
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString;
      removalOptions : Windows.Management.Deployment.RemovalOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RemovePackageAsync (HStr_packageFullName, removalOptions, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function StagePackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StagePackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterPackageByFullNameAsync
   (
      this : in out PackageManager;
      mainPackageFullName : WinRt.WString;
      dependencyPackageFullNames : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_mainPackageFullName : WinRt.HString := To_HString (mainPackageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RegisterPackageByFullNameAsync (HStr_mainPackageFullName, dependencyPackageFullNames, deploymentOptions, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_mainPackageFullName);
      end return;
   end;

   function FindPackagesWithPackageTypes
   (
      this : in out PackageManager;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackagesWithPackageTypes (packageTypes, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function FindPackagesForUserWithPackageTypes
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackagesForUserWithPackageTypes (HStr_userSecurityId, packageTypes, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_userSecurityId);
      return m_ComRetVal;
   end;

   function FindPackagesWithPackageTypes
   (
      this : in out PackageManager;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackagesWithPackageTypes (HStr_packageName, HStr_packagePublisher, packageTypes, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackagesForUserWithPackageTypes
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackagesForUserWithPackageTypes (HStr_userSecurityId, HStr_packageName, HStr_packagePublisher, packageTypes, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackagesWithPackageTypes
   (
      this : in out PackageManager;
      packageFamilyName : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackagesWithPackageTypes (HStr_packageFamilyName, packageTypes, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackagesForUserWithPackageTypes
   (
      this : in out PackageManager;
      userSecurityId : WinRt.WString;
      packageFamilyName : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackagesForUserWithPackageTypes (HStr_userSecurityId, HStr_packageFamilyName, packageTypes, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function StageUserDataAsync
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager2, WinRt.Windows.Management.Deployment.IID_IPackageManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StageUserDataAsync (HStr_packageFullName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function AddPackageVolumeAsync
   (
      this : in out PackageManager;
      packageStorePath : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageStorePath : WinRt.HString := To_HString (packageStorePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageVolume.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageVolume.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IPackageVolume;
      m_IID            : aliased WinRt.IID := (51768758, 56408, 20940, (165, 25, 68, 144, 26, 210, 207, 21 )); -- Windows.Management.Deployment.PackageVolume;
      m_HandlerIID     : aliased WinRt.IID := (905896801, 27882, 24156, (142, 218, 52, 179, 242, 45, 244, 231 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageVolume.Kind := new AsyncOperationCompletedHandler_PackageVolume.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageVolume.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageVolume.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageVolume.Kind_Delegate, AsyncOperationCompletedHandler_PackageVolume.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.AddPackageVolumeAsync (HStr_packageStorePath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
                  Retval.m_IPackageVolume.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageStorePath);
      end return;
   end;

   function AddPackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.AddPackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure ClearPackageStatus
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString;
      status : Windows.Management.Deployment.PackageStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.ClearPackageStatus (HStr_packageFullName, status);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageFullName);
   end;

   function RegisterPackageAsync
   (
      this : in out PackageManager;
      manifestUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      appDataVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RegisterPackageAsync (manifestUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, appDataVolume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function FindPackageVolume
   (
      this : in out PackageManager;
      volumeName : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageVolume;
      HStr_volumeName : WinRt.HString := To_HString (volumeName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.FindPackageVolume (HStr_volumeName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
         Retval.m_IPackageVolume.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_volumeName);
      end return;
   end;

   function FindPackageVolumes
   (
      this : in out PackageManager
   )
   return IIterable_IPackageVolume.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_IPackageVolume.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindPackageVolumes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IIterable_IPackageVolume (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDefaultPackageVolume
   (
      this : in out PackageManager
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageVolume;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.GetDefaultPackageVolume (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
         Retval.m_IPackageVolume.all := m_ComRetVal;
      end return;
   end;

   function MovePackageToVolumeAsync
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.MovePackageToVolumeAsync (HStr_packageFullName, deploymentOptions, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function RemovePackageVolumeAsync
   (
      this : in out PackageManager;
      volume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RemovePackageVolumeAsync (volume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure SetDefaultPackageVolume
   (
      this : in out PackageManager;
      volume : Windows.Management.Deployment.PackageVolume'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.SetDefaultPackageVolume (volume.m_IPackageVolume.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetPackageStatus
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString;
      status : Windows.Management.Deployment.PackageStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.SetPackageStatus (HStr_packageFullName, status);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageFullName);
   end;

   function SetPackageVolumeOfflineAsync
   (
      this : in out PackageManager;
      packageVolume_p : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.SetPackageVolumeOfflineAsync (packageVolume_p.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SetPackageVolumeOnlineAsync
   (
      this : in out PackageManager;
      packageVolume_p : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.SetPackageVolumeOnlineAsync (packageVolume_p.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StagePackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StagePackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StageUserDataAsync
   (
      this : in out PackageManager;
      packageFullName : WinRt.WString;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager3, WinRt.Windows.Management.Deployment.IID_IPackageManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StageUserDataAsync (HStr_packageFullName, deploymentOptions, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFullName);
      end return;
   end;

   function GetPackageVolumesAsync
   (
      this : in out PackageManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (506822151, 54071, 23559, (174, 6, 144, 12, 27, 154, 119, 193 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1913799106, 2947, 22858, (155, 97, 206, 127, 20, 146, 196, 21 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager4, WinRt.Windows.Management.Deployment.IID_IPackageManager4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.GetPackageVolumesAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function AddPackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject;
      externalPackageUris : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager5, WinRt.Windows.Management.Deployment.IID_IPackageManager5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.AddPackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, targetVolume.m_IPackageVolume.all, optionalPackageFamilyNames, externalPackageUris, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StagePackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject;
      externalPackageUris : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager5, WinRt.Windows.Management.Deployment.IID_IPackageManager5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StagePackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, targetVolume.m_IPackageVolume.all, optionalPackageFamilyNames, externalPackageUris, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterPackageByFamilyNameAsync
   (
      this : in out PackageManager;
      mainPackageFamilyName : WinRt.WString;
      dependencyPackageFamilyNames : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      appDataVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_mainPackageFamilyName : WinRt.HString := To_HString (mainPackageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager5, WinRt.Windows.Management.Deployment.IID_IPackageManager5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RegisterPackageByFamilyNameAsync (HStr_mainPackageFamilyName, dependencyPackageFamilyNames, deploymentOptions, appDataVolume.m_IPackageVolume.all, optionalPackageFamilyNames, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_mainPackageFamilyName);
      end return;
   end;

   function get_DebugSettings
   (
      this : in out PackageManager
   )
   return WinRt.Windows.Management.Deployment.PackageManagerDebugSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageManagerDebugSettings;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager5, WinRt.Windows.Management.Deployment.IID_IPackageManager5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageManagerDebugSettings do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.get_DebugSettings (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPackageManagerDebugSettings := new Windows.Management.Deployment.IPackageManagerDebugSettings;
         Retval.m_IPackageManagerDebugSettings.all := m_ComRetVal;
      end return;
   end;

   function ProvisionPackageForAllUsersAsync
   (
      this : in out PackageManager;
      packageFamilyName : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager6, WinRt.Windows.Management.Deployment.IID_IPackageManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.ProvisionPackageForAllUsersAsync (HStr_packageFamilyName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFamilyName);
      end return;
   end;

   function AddPackageByAppInstallerFileAsync
   (
      this : in out PackageManager;
      appInstallerFileUri : Windows.Foundation.Uri'Class;
      options : Windows.Management.Deployment.AddPackageByAppInstallerOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager6, WinRt.Windows.Management.Deployment.IID_IPackageManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.AddPackageByAppInstallerFileAsync (appInstallerFileUri.m_IUriRuntimeClass.all, options, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestAddPackageByAppInstallerFileAsync
   (
      this : in out PackageManager;
      appInstallerFileUri : Windows.Foundation.Uri'Class;
      options : Windows.Management.Deployment.AddPackageByAppInstallerOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager6, WinRt.Windows.Management.Deployment.IID_IPackageManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RequestAddPackageByAppInstallerFileAsync (appInstallerFileUri.m_IUriRuntimeClass.all, options, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function AddPackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      options : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject;
      packageUrisToInstall : GenericObject;
      relatedPackageUris : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager6, WinRt.Windows.Management.Deployment.IID_IPackageManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.AddPackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, options, targetVolume.m_IPackageVolume.all, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StagePackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      options : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject;
      packageUrisToInstall : GenericObject;
      relatedPackageUris : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager6, WinRt.Windows.Management.Deployment.IID_IPackageManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StagePackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, options, targetVolume.m_IPackageVolume.all, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestAddPackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject;
      relatedPackageUris : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager6, WinRt.Windows.Management.Deployment.IID_IPackageManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RequestAddPackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, targetVolume.m_IPackageVolume.all, optionalPackageFamilyNames, relatedPackageUris, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestAddPackageAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      dependencyPackageUris : GenericObject;
      deploymentOptions : Windows.Management.Deployment.DeploymentOptions;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class;
      optionalPackageFamilyNames : GenericObject;
      relatedPackageUris : GenericObject;
      packageUrisToInstall : GenericObject
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager7, WinRt.Windows.Management.Deployment.IID_IPackageManager7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RequestAddPackageAsync (packageUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, targetVolume.m_IPackageVolume.all, optionalPackageFamilyNames, relatedPackageUris, packageUrisToInstall, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function DeprovisionPackageForAllUsersAsync
   (
      this : in out PackageManager;
      packageFamilyName : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager8, WinRt.Windows.Management.Deployment.IID_IPackageManager8'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.DeprovisionPackageForAllUsersAsync (HStr_packageFamilyName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFamilyName);
      end return;
   end;

   function FindProvisionedPackages
   (
      this : in out PackageManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.FindProvisionedPackages (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AddPackageByUriAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      options : Windows.Management.Deployment.AddPackageOptions'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.AddPackageByUriAsync (packageUri.m_IUriRuntimeClass.all, options.m_IAddPackageOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StagePackageByUriAsync
   (
      this : in out PackageManager;
      packageUri : Windows.Foundation.Uri'Class;
      options : Windows.Management.Deployment.StagePackageOptions'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.StagePackageByUriAsync (packageUri.m_IUriRuntimeClass.all, options.m_IStagePackageOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterPackageByUriAsync
   (
      this : in out PackageManager;
      manifestUri : Windows.Foundation.Uri'Class;
      options : Windows.Management.Deployment.RegisterPackageOptions'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RegisterPackageByUriAsync (manifestUri.m_IUriRuntimeClass.all, options.m_IRegisterPackageOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterPackagesByFullNameAsync
   (
      this : in out PackageManager;
      packageFullNames : GenericObject;
      options : Windows.Management.Deployment.RegisterPackageOptions'Class
   )
   return WinRt.Windows.Management.Deployment.DeploymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeploymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeploymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Management.Deployment.IDeploymentResult;
      m_IID            : aliased WinRt.IID := (1519889079, 46826, 21932, (165, 220, 213, 177, 100, 217, 78, 148 )); -- Windows.Management.Deployment.DeploymentResult;
      m_HandlerIID     : aliased WinRt.IID := (1847357737, 25056, 23944, (159, 212, 243, 206, 101, 160, 87, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeploymentResult.Kind := new AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeploymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeploymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeploymentResult.Kind_Delegate, AsyncOperationCompletedHandler_DeploymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Management.Deployment.DeploymentResult do
         m_Interface := QInterface (this.m_IPackageManager.all);
         Hr := m_Interface.RegisterPackagesByFullNameAsync (packageFullNames, options.m_IRegisterPackageOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeploymentResult := new Windows.Management.Deployment.IDeploymentResult;
                  Retval.m_IDeploymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure SetPackageStubPreference
   (
      this : in out PackageManager;
      packageFamilyName : WinRt.WString;
      useStub : Windows.Management.Deployment.PackageStubPreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.SetPackageStubPreference (HStr_packageFamilyName, useStub);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageFamilyName);
   end;

   function GetPackageStubPreference
   (
      this : in out PackageManager;
      packageFamilyName : WinRt.WString
   )
   return WinRt.Windows.Management.Deployment.PackageStubPreference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageManager9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.PackageStubPreference;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageManager_Interface, WinRt.Windows.Management.Deployment.IPackageManager9, WinRt.Windows.Management.Deployment.IID_IPackageManager9'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageManager.all);
      Hr := m_Interface.GetPackageStubPreference (HStr_packageFamilyName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageManagerDebugSettings

   procedure Initialize (this : in out PackageManagerDebugSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageManagerDebugSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageManagerDebugSettings, IPackageManagerDebugSettings_Ptr);
   begin
      if this.m_IPackageManagerDebugSettings /= null then
         if this.m_IPackageManagerDebugSettings.all /= null then
            RefCount := this.m_IPackageManagerDebugSettings.all.Release;
            Free (this.m_IPackageManagerDebugSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageManagerDebugSettings

   procedure SetContentGroupStateAsync
   (
      this : in out PackageManagerDebugSettings;
      package_x : Windows.ApplicationModel.Package_x'Class;
      contentGroupName : WinRt.WString;
      state : Windows.ApplicationModel.PackageContentGroupState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentGroupName : WinRt.HString := To_HString (contentGroupName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPackageManagerDebugSettings.all.SetContentGroupStateAsync (package_x.m_IPackage.all, HStr_contentGroupName, state, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_contentGroupName);
   end;

   procedure SetContentGroupStateAsync
   (
      this : in out PackageManagerDebugSettings;
      package_x : Windows.ApplicationModel.Package_x'Class;
      contentGroupName : WinRt.WString;
      state : Windows.ApplicationModel.PackageContentGroupState;
      completionPercentage : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentGroupName : WinRt.HString := To_HString (contentGroupName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPackageManagerDebugSettings.all.SetContentGroupStateAsync (package_x.m_IPackage.all, HStr_contentGroupName, state, completionPercentage, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_contentGroupName);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageUserInformation

   procedure Initialize (this : in out PackageUserInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageUserInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageUserInformation, IPackageUserInformation_Ptr);
   begin
      if this.m_IPackageUserInformation /= null then
         if this.m_IPackageUserInformation.all /= null then
            RefCount := this.m_IPackageUserInformation.all.Release;
            Free (this.m_IPackageUserInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageUserInformation

   function get_UserSecurityId
   (
      this : in out PackageUserInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageUserInformation.all.get_UserSecurityId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InstallState
   (
      this : in out PackageUserInformation
   )
   return WinRt.Windows.Management.Deployment.PackageInstallState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.PackageInstallState;
   begin
      Hr := this.m_IPackageUserInformation.all.get_InstallState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageVolume

   procedure Initialize (this : in out PackageVolume) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageVolume) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageVolume, IPackageVolume_Ptr);
   begin
      if this.m_IPackageVolume /= null then
         if this.m_IPackageVolume.all /= null then
            RefCount := this.m_IPackageVolume.all.Release;
            Free (this.m_IPackageVolume);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageVolume

   function get_IsOffline
   (
      this : in out PackageVolume
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageVolume.all.get_IsOffline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsSystemVolume
   (
      this : in out PackageVolume
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageVolume.all.get_IsSystemVolume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MountPoint
   (
      this : in out PackageVolume
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageVolume.all.get_MountPoint (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out PackageVolume
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageVolume.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PackageStorePath
   (
      this : in out PackageVolume
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageVolume.all.get_PackageStorePath (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportsHardLinks
   (
      this : in out PackageVolume
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageVolume.all.get_SupportsHardLinks (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function FindPackages
   (
      this : in out PackageVolume
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IPackageVolume.all.FindPackages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function FindPackages
   (
      this : in out PackageVolume;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
   begin
      Hr := this.m_IPackageVolume.all.FindPackages (HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackages
   (
      this : in out PackageVolume;
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
   begin
      Hr := this.m_IPackageVolume.all.FindPackages (HStr_packageFamilyName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackagesWithPackageTypes
   (
      this : in out PackageVolume;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesWithPackageTypes (packageTypes, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function FindPackagesWithPackageTypes
   (
      this : in out PackageVolume;
      packageTypes : Windows.Management.Deployment.PackageTypes;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesWithPackageTypes (packageTypes, HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackagesWithPackageTypes
   (
      this : in out PackageVolume;
      packageTypes : Windows.Management.Deployment.PackageTypes;
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesWithPackageTypes (packageTypes, HStr_packageFamilyName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackage
   (
      this : in out PackageVolume;
      packageFullName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
   begin
      Hr := this.m_IPackageVolume.all.FindPackage (HStr_packageFullName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_packageFullName);
      return m_ComRetVal;
   end;

   function FindPackagesForUser
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesForUser (HStr_userSecurityId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      return m_ComRetVal;
   end;

   function FindPackagesForUser
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesForUser (HStr_userSecurityId, HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackagesForUser
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString;
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesForUser (HStr_userSecurityId, HStr_packageFamilyName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackagesForUserWithPackageTypes
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesForUserWithPackageTypes (HStr_userSecurityId, packageTypes, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      return m_ComRetVal;
   end;

   function FindPackagesForUserWithPackageTypes
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes;
      packageName : WinRt.WString;
      packagePublisher : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageName : WinRt.HString := To_HString (packageName);
      HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesForUserWithPackageTypes (HStr_userSecurityId, packageTypes, HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageName);
      Hr := WindowsDeleteString (HStr_packagePublisher);
      return m_ComRetVal;
   end;

   function FindPackagesForUserWithPackageTypes
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString;
      packageTypes : Windows.Management.Deployment.PackageTypes;
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
   begin
      Hr := this.m_IPackageVolume.all.FindPackagesForUserWithPackageTypes (HStr_userSecurityId, packageTypes, HStr_packageFamilyName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_ComRetVal;
   end;

   function FindPackageForUser
   (
      this : in out PackageVolume;
      userSecurityId : WinRt.WString;
      packageFullName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_userSecurityId : WinRt.HString := To_HString (userSecurityId);
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
   begin
      Hr := this.m_IPackageVolume.all.FindPackageForUser (HStr_userSecurityId, HStr_packageFullName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_userSecurityId);
      Hr := WindowsDeleteString (HStr_packageFullName);
      return m_ComRetVal;
   end;

   function get_IsFullTrustPackageSupported
   (
      this : in out PackageVolume
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageVolume2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageVolume_Interface, WinRt.Windows.Management.Deployment.IPackageVolume2, WinRt.Windows.Management.Deployment.IID_IPackageVolume2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageVolume.all);
      Hr := m_Interface.get_IsFullTrustPackageSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsAppxInstallSupported
   (
      this : in out PackageVolume
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageVolume2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageVolume_Interface, WinRt.Windows.Management.Deployment.IPackageVolume2, WinRt.Windows.Management.Deployment.IID_IPackageVolume2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageVolume.all);
      Hr := m_Interface.get_IsAppxInstallSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetAvailableSpaceAsync
   (
      this : in out PackageVolume
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Management.Deployment.IPackageVolume2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (712037936, 1895, 24330, (161, 194, 222, 176, 129, 38, 226, 110 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (4002081538, 64256, 20986, (143, 87, 50, 88, 62, 162, 65, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Management.Deployment.IPackageVolume_Interface, WinRt.Windows.Management.Deployment.IPackageVolume2, WinRt.Windows.Management.Deployment.IID_IPackageVolume2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageVolume.all);
      Hr := m_Interface.GetAvailableSpaceAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RegisterPackageOptions

   procedure Initialize (this : in out RegisterPackageOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out RegisterPackageOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRegisterPackageOptions, IRegisterPackageOptions_Ptr);
   begin
      if this.m_IRegisterPackageOptions /= null then
         if this.m_IRegisterPackageOptions.all /= null then
            RefCount := this.m_IRegisterPackageOptions.all.Release;
            Free (this.m_IRegisterPackageOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RegisterPackageOptions

   function Constructor return RegisterPackageOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Management.Deployment.RegisterPackageOptions");
      m_ComRetVal  : aliased Windows.Management.Deployment.IRegisterPackageOptions;
   begin
      return RetVal : RegisterPackageOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRegisterPackageOptions := new Windows.Management.Deployment.IRegisterPackageOptions;
            Retval.m_IRegisterPackageOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RegisterPackageOptions

   function get_DependencyPackageUris
   (
      this : in out RegisterPackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_DependencyPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AppDataVolume
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageVolume;
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         Hr := this.m_IRegisterPackageOptions.all.get_AppDataVolume (m_ComRetVal'Access);
         Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
         Retval.m_IPackageVolume.all := m_ComRetVal;
      end return;
   end;

   procedure put_AppDataVolume
   (
      this : in out RegisterPackageOptions;
      value : Windows.Management.Deployment.PackageVolume'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_AppDataVolume (value.m_IPackageVolume.all);
   end;

   function get_OptionalPackageFamilyNames
   (
      this : in out RegisterPackageOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_OptionalPackageFamilyNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExternalLocationUri
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IRegisterPackageOptions.all.get_ExternalLocationUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExternalLocationUri
   (
      this : in out RegisterPackageOptions;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_ExternalLocationUri (value.m_IUriRuntimeClass.all);
   end;

   function get_DeveloperMode
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_DeveloperMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DeveloperMode
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_DeveloperMode (value);
   end;

   function get_ForceAppShutdown
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_ForceAppShutdown (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceAppShutdown
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_ForceAppShutdown (value);
   end;

   function get_ForceTargetAppShutdown
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_ForceTargetAppShutdown (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceTargetAppShutdown
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_ForceTargetAppShutdown (value);
   end;

   function get_ForceUpdateFromAnyVersion
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_ForceUpdateFromAnyVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceUpdateFromAnyVersion
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_ForceUpdateFromAnyVersion (value);
   end;

   function get_InstallAllResources
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_InstallAllResources (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InstallAllResources
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_InstallAllResources (value);
   end;

   function get_StageInPlace
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_StageInPlace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StageInPlace
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_StageInPlace (value);
   end;

   function get_AllowUnsigned
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_AllowUnsigned (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowUnsigned
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_AllowUnsigned (value);
   end;

   function get_DeferRegistrationWhenPackagesAreInUse
   (
      this : in out RegisterPackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegisterPackageOptions.all.get_DeferRegistrationWhenPackagesAreInUse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DeferRegistrationWhenPackagesAreInUse
   (
      this : in out RegisterPackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegisterPackageOptions.all.put_DeferRegistrationWhenPackagesAreInUse (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StagePackageOptions

   procedure Initialize (this : in out StagePackageOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out StagePackageOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStagePackageOptions, IStagePackageOptions_Ptr);
   begin
      if this.m_IStagePackageOptions /= null then
         if this.m_IStagePackageOptions.all /= null then
            RefCount := this.m_IStagePackageOptions.all.Release;
            Free (this.m_IStagePackageOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StagePackageOptions

   function Constructor return StagePackageOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Management.Deployment.StagePackageOptions");
      m_ComRetVal  : aliased Windows.Management.Deployment.IStagePackageOptions;
   begin
      return RetVal : StagePackageOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStagePackageOptions := new Windows.Management.Deployment.IStagePackageOptions;
            Retval.m_IStagePackageOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StagePackageOptions

   function get_DependencyPackageUris
   (
      this : in out StagePackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IStagePackageOptions.all.get_DependencyPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TargetVolume
   (
      this : in out StagePackageOptions
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageVolume;
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         Hr := this.m_IStagePackageOptions.all.get_TargetVolume (m_ComRetVal'Access);
         Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
         Retval.m_IPackageVolume.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetVolume
   (
      this : in out StagePackageOptions;
      value : Windows.Management.Deployment.PackageVolume'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_TargetVolume (value.m_IPackageVolume.all);
   end;

   function get_OptionalPackageFamilyNames
   (
      this : in out StagePackageOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IStagePackageOptions.all.get_OptionalPackageFamilyNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_OptionalPackageUris
   (
      this : in out StagePackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IStagePackageOptions.all.get_OptionalPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RelatedPackageUris
   (
      this : in out StagePackageOptions
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IStagePackageOptions.all.get_RelatedPackageUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExternalLocationUri
   (
      this : in out StagePackageOptions
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IStagePackageOptions.all.get_ExternalLocationUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExternalLocationUri
   (
      this : in out StagePackageOptions;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_ExternalLocationUri (value.m_IUriRuntimeClass.all);
   end;

   function get_StubPackageOption
   (
      this : in out StagePackageOptions
   )
   return WinRt.Windows.Management.Deployment.StubPackageOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.StubPackageOption;
   begin
      Hr := this.m_IStagePackageOptions.all.get_StubPackageOption (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StubPackageOption
   (
      this : in out StagePackageOptions;
      value : Windows.Management.Deployment.StubPackageOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_StubPackageOption (value);
   end;

   function get_DeveloperMode
   (
      this : in out StagePackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStagePackageOptions.all.get_DeveloperMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DeveloperMode
   (
      this : in out StagePackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_DeveloperMode (value);
   end;

   function get_ForceUpdateFromAnyVersion
   (
      this : in out StagePackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStagePackageOptions.all.get_ForceUpdateFromAnyVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceUpdateFromAnyVersion
   (
      this : in out StagePackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_ForceUpdateFromAnyVersion (value);
   end;

   function get_InstallAllResources
   (
      this : in out StagePackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStagePackageOptions.all.get_InstallAllResources (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InstallAllResources
   (
      this : in out StagePackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_InstallAllResources (value);
   end;

   function get_RequiredContentGroupOnly
   (
      this : in out StagePackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStagePackageOptions.all.get_RequiredContentGroupOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequiredContentGroupOnly
   (
      this : in out StagePackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_RequiredContentGroupOnly (value);
   end;

   function get_StageInPlace
   (
      this : in out StagePackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStagePackageOptions.all.get_StageInPlace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StageInPlace
   (
      this : in out StagePackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_StageInPlace (value);
   end;

   function get_AllowUnsigned
   (
      this : in out StagePackageOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStagePackageOptions.all.get_AllowUnsigned (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowUnsigned
   (
      this : in out StagePackageOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStagePackageOptions.all.put_AllowUnsigned (value);
   end;

end;

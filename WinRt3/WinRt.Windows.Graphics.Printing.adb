--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.DataTransfer;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Printing is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintManager

   procedure Initialize (this : in out PrintManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintManager, IPrintManager_Ptr);
   begin
      if this.m_IPrintManager /= null then
         if this.m_IPrintManager.all /= null then
            RefCount := this.m_IPrintManager.all.Release;
            Free (this.m_IPrintManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PrintManager

   function GetForCurrentView
   return WinRt.Windows.Graphics.Printing.PrintManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.PrintManager");
      m_Factory        : access WinRt.Windows.Graphics.Printing.IPrintManagerStatic_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintManager;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintManager do
         Hr := RoGetActivationFactory (m_hString, IID_IPrintManagerStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPrintManager := new Windows.Graphics.Printing.IPrintManager;
            Retval.m_IPrintManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function ShowPrintUIAsync
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.PrintManager");
      m_Factory        : access WinRt.Windows.Graphics.Printing.IPrintManagerStatic_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPrintManagerStatic'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowPrintUIAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.PrintManager");
      m_Factory        : access WinRt.Windows.Graphics.Printing.IPrintManagerStatic2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPrintManagerStatic2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintManager

   function add_PrintTaskRequested
   (
      this : in out PrintManager;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintManager.all.add_PrintTaskRequested (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PrintTaskRequested
   (
      this : in out PrintManager;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintManager.all.remove_PrintTaskRequested (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintPageInfo

   procedure Initialize (this : in out PrintPageInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintPageInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintPageInfo, IPrintPageInfo_Ptr);
   begin
      if this.m_IPrintPageInfo /= null then
         if this.m_IPrintPageInfo.all /= null then
            RefCount := this.m_IPrintPageInfo.all.Release;
            Free (this.m_IPrintPageInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PrintPageInfo

   function Constructor return PrintPageInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing.PrintPageInfo");
      m_ComRetVal  : aliased Windows.Graphics.Printing.IPrintPageInfo;
   begin
      return RetVal : PrintPageInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrintPageInfo := new Windows.Graphics.Printing.IPrintPageInfo;
            Retval.m_IPrintPageInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintPageInfo

   procedure put_MediaSize
   (
      this : in out PrintPageInfo;
      value : Windows.Graphics.Printing.PrintMediaSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageInfo.all.put_MediaSize (value);
   end;

   function get_MediaSize
   (
      this : in out PrintPageInfo
   )
   return WinRt.Windows.Graphics.Printing.PrintMediaSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintMediaSize;
   begin
      Hr := this.m_IPrintPageInfo.all.get_MediaSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PageSize
   (
      this : in out PrintPageInfo;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageInfo.all.put_PageSize (value);
   end;

   function get_PageSize
   (
      this : in out PrintPageInfo
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IPrintPageInfo.all.get_PageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DpiX
   (
      this : in out PrintPageInfo;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageInfo.all.put_DpiX (value);
   end;

   function get_DpiX
   (
      this : in out PrintPageInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrintPageInfo.all.get_DpiX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DpiY
   (
      this : in out PrintPageInfo;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageInfo.all.put_DpiY (value);
   end;

   function get_DpiY
   (
      this : in out PrintPageInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrintPageInfo.all.get_DpiY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Orientation
   (
      this : in out PrintPageInfo;
      value : Windows.Graphics.Printing.PrintOrientation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageInfo.all.put_Orientation (value);
   end;

   function get_Orientation
   (
      this : in out PrintPageInfo
   )
   return WinRt.Windows.Graphics.Printing.PrintOrientation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintOrientation;
   begin
      Hr := this.m_IPrintPageInfo.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintPageRange

   procedure Initialize (this : in out PrintPageRange) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintPageRange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintPageRange, IPrintPageRange_Ptr);
   begin
      if this.m_IPrintPageRange /= null then
         if this.m_IPrintPageRange.all /= null then
            RefCount := this.m_IPrintPageRange.all.Release;
            Free (this.m_IPrintPageRange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PrintPageRange

   function Constructor
   (
      firstPage : WinRt.Int32;
      lastPage : WinRt.Int32
   )
   return PrintPageRange is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing.PrintPageRange");
      m_Factory    : access IPrintPageRangeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing.IPrintPageRange;
   begin
      return RetVal : PrintPageRange do
         Hr := RoGetActivationFactory (m_hString, IID_IPrintPageRangeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (firstPage, lastPage, m_ComRetVal'Access);
            Retval.m_IPrintPageRange := new Windows.Graphics.Printing.IPrintPageRange;
            Retval.m_IPrintPageRange.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      page : WinRt.Int32
   )
   return PrintPageRange is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing.PrintPageRange");
      m_Factory    : access IPrintPageRangeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing.IPrintPageRange;
   begin
      return RetVal : PrintPageRange do
         Hr := RoGetActivationFactory (m_hString, IID_IPrintPageRangeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSinglePage (page, m_ComRetVal'Access);
            Retval.m_IPrintPageRange := new Windows.Graphics.Printing.IPrintPageRange;
            Retval.m_IPrintPageRange.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintPageRange

   function get_FirstPageNumber
   (
      this : in out PrintPageRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPrintPageRange.all.get_FirstPageNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastPageNumber
   (
      this : in out PrintPageRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPrintPageRange.all.get_LastPageNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintPageRangeOptions

   procedure Initialize (this : in out PrintPageRangeOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintPageRangeOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintPageRangeOptions, IPrintPageRangeOptions_Ptr);
   begin
      if this.m_IPrintPageRangeOptions /= null then
         if this.m_IPrintPageRangeOptions.all /= null then
            RefCount := this.m_IPrintPageRangeOptions.all.Release;
            Free (this.m_IPrintPageRangeOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintPageRangeOptions

   procedure put_AllowAllPages
   (
      this : in out PrintPageRangeOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageRangeOptions.all.put_AllowAllPages (value);
   end;

   function get_AllowAllPages
   (
      this : in out PrintPageRangeOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPrintPageRangeOptions.all.get_AllowAllPages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowCurrentPage
   (
      this : in out PrintPageRangeOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageRangeOptions.all.put_AllowCurrentPage (value);
   end;

   function get_AllowCurrentPage
   (
      this : in out PrintPageRangeOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPrintPageRangeOptions.all.get_AllowCurrentPage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowCustomSetOfPages
   (
      this : in out PrintPageRangeOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintPageRangeOptions.all.put_AllowCustomSetOfPages (value);
   end;

   function get_AllowCustomSetOfPages
   (
      this : in out PrintPageRangeOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPrintPageRangeOptions.all.get_AllowCustomSetOfPages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTask

   procedure Initialize (this : in out PrintTask) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTask) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTask, IPrintTask_Ptr);
   begin
      if this.m_IPrintTask /= null then
         if this.m_IPrintTask.all /= null then
            RefCount := this.m_IPrintTask.all.Release;
            Free (this.m_IPrintTask);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTask

   function get_Properties
   (
      this : in out PrintTask
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackagePropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackagePropertySet do
         Hr := this.m_IPrintTask.all.get_Properties (m_ComRetVal'Access);
         Retval.m_IDataPackagePropertySet := new Windows.ApplicationModel.DataTransfer.IDataPackagePropertySet;
         Retval.m_IDataPackagePropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Source
   (
      this : in out PrintTask
   )
   return WinRt.Windows.Graphics.Printing.IPrintDocumentSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintDocumentSource;
   begin
      Hr := this.m_IPrintTask.all.get_Source (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Options
   (
      this : in out PrintTask
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTaskOptionsCore;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTaskOptions do
         Hr := this.m_IPrintTask.all.get_Options (m_ComRetVal'Access);
         Retval.m_IPrintTaskOptionsCore := new Windows.Graphics.Printing.IPrintTaskOptionsCore;
         Retval.m_IPrintTaskOptionsCore.all := m_ComRetVal;
      end return;
   end;

   function add_Previewing
   (
      this : in out PrintTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintTask.all.add_Previewing (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Previewing
   (
      this : in out PrintTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTask.all.remove_Previewing (eventCookie);
   end;

   function add_Submitting
   (
      this : in out PrintTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintTask.all.add_Submitting (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Submitting
   (
      this : in out PrintTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTask.all.remove_Submitting (eventCookie);
   end;

   function add_Progressing
   (
      this : in out PrintTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintTask.all.add_Progressing (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Progressing
   (
      this : in out PrintTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTask.all.remove_Progressing (eventCookie);
   end;

   function add_Completed
   (
      this : in out PrintTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintTask.all.add_Completed (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out PrintTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTask.all.remove_Completed (eventCookie);
   end;

   procedure put_IsPrinterTargetEnabled
   (
      this : in out PrintTask;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTask_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport, WinRt.Windows.Graphics.Printing.IID_IPrintTaskTargetDeviceSupport'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTask.all);
      Hr := m_Interface.put_IsPrinterTargetEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsPrinterTargetEnabled
   (
      this : in out PrintTask
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTask_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport, WinRt.Windows.Graphics.Printing.IID_IPrintTaskTargetDeviceSupport'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTask.all);
      Hr := m_Interface.get_IsPrinterTargetEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Is3DManufacturingTargetEnabled
   (
      this : in out PrintTask;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTask_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport, WinRt.Windows.Graphics.Printing.IID_IPrintTaskTargetDeviceSupport'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTask.all);
      Hr := m_Interface.put_Is3DManufacturingTargetEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Is3DManufacturingTargetEnabled
   (
      this : in out PrintTask
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTask_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskTargetDeviceSupport, WinRt.Windows.Graphics.Printing.IID_IPrintTaskTargetDeviceSupport'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTask.all);
      Hr := m_Interface.get_Is3DManufacturingTargetEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsPreviewEnabled
   (
      this : in out PrintTask;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTask2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTask_Interface, WinRt.Windows.Graphics.Printing.IPrintTask2, WinRt.Windows.Graphics.Printing.IID_IPrintTask2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTask.all);
      Hr := m_Interface.put_IsPreviewEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsPreviewEnabled
   (
      this : in out PrintTask
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTask2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTask_Interface, WinRt.Windows.Graphics.Printing.IPrintTask2, WinRt.Windows.Graphics.Printing.IID_IPrintTask2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTask.all);
      Hr := m_Interface.get_IsPreviewEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskCompletedEventArgs

   procedure Initialize (this : in out PrintTaskCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskCompletedEventArgs, IPrintTaskCompletedEventArgs_Ptr);
   begin
      if this.m_IPrintTaskCompletedEventArgs /= null then
         if this.m_IPrintTaskCompletedEventArgs.all /= null then
            RefCount := this.m_IPrintTaskCompletedEventArgs.all.Release;
            Free (this.m_IPrintTaskCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskCompletedEventArgs

   function get_Completion
   (
      this : in out PrintTaskCompletedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskCompletion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintTaskCompletion;
   begin
      Hr := this.m_IPrintTaskCompletedEventArgs.all.get_Completion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskOptions

   procedure Initialize (this : in out PrintTaskOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskOptionsCore, IPrintTaskOptionsCore_Ptr);
   begin
      if this.m_IPrintTaskOptionsCore /= null then
         if this.m_IPrintTaskOptionsCore.all /= null then
            RefCount := this.m_IPrintTaskOptionsCore.all.Release;
            Free (this.m_IPrintTaskOptionsCore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskOptions

   function GetPageDescription
   (
      this : in out PrintTaskOptions;
      jobPageNumber : WinRt.UInt32
   )
   return WinRt.Windows.Graphics.Printing.PrintPageDescription is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintPageDescription;
   begin
      Hr := this.m_IPrintTaskOptionsCore.all.GetPageDescription (jobPageNumber, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MediaSize
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintMediaSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_MediaSize (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MediaSize
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintMediaSize is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintMediaSize;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_MediaSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MediaType
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintMediaType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_MediaType (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MediaType
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintMediaType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintMediaType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_MediaType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Orientation
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintOrientation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_Orientation (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Orientation
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintOrientation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintOrientation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_Orientation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PrintQuality
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintQuality
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_PrintQuality (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PrintQuality
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintQuality is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintQuality;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_PrintQuality (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorMode
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintColorMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_ColorMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ColorMode
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintColorMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintColorMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_ColorMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duplex
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintDuplex
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_Duplex (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duplex
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintDuplex is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintDuplex;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_Duplex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Collation
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintCollation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_Collation (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Collation
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintCollation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintCollation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_Collation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Staple
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintStaple
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_Staple (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Staple
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintStaple is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintStaple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_Staple (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_HolePunch
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintHolePunch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_HolePunch (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_HolePunch
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintHolePunch is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintHolePunch;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_HolePunch (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Binding
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintBinding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_Binding (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Binding
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintBinding is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintBinding;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_Binding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinCopies
   (
      this : in out PrintTaskOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_MinCopies (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxCopies
   (
      this : in out PrintTaskOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_MaxCopies (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NumberOfCopies
   (
      this : in out PrintTaskOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_NumberOfCopies (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumberOfCopies
   (
      this : in out PrintTaskOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_NumberOfCopies (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DisplayedOptions
   (
      this : in out PrintTaskOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreUIConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCoreUIConfiguration, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptionsCoreUIConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_DisplayedOptions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Bordering
   (
      this : in out PrintTaskOptions;
      value : Windows.Graphics.Printing.PrintBordering
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptions, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.put_Bordering (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bordering
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintBordering is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintBordering;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptions, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_Bordering (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetPagePrintTicket
   (
      this : in out PrintTaskOptions;
      printPageInfo_p : Windows.Graphics.Printing.PrintPageInfo'Class
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptions, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.GetPagePrintTicket (printPageInfo_p.m_IPrintPageInfo.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PageRangeOptions
   (
      this : in out PrintTaskOptions
   )
   return WinRt.Windows.Graphics.Printing.PrintPageRangeOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintPageRangeOptions;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptions2, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptions2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintPageRangeOptions do
         m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
         Hr := m_Interface.get_PageRangeOptions (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPrintPageRangeOptions := new Windows.Graphics.Printing.IPrintPageRangeOptions;
         Retval.m_IPrintPageRangeOptions.all := m_ComRetVal;
      end return;
   end;

   function get_CustomPageRanges
   (
      this : in out PrintTaskOptions
   )
   return IVector_IPrintPageRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing.IPrintTaskOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrintPageRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.IPrintTaskOptionsCore_Interface, WinRt.Windows.Graphics.Printing.IPrintTaskOptions2, WinRt.Windows.Graphics.Printing.IID_IPrintTaskOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskOptionsCore.all);
      Hr := m_Interface.get_CustomPageRanges (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IPrintPageRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskProgressingEventArgs

   procedure Initialize (this : in out PrintTaskProgressingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskProgressingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskProgressingEventArgs, IPrintTaskProgressingEventArgs_Ptr);
   begin
      if this.m_IPrintTaskProgressingEventArgs /= null then
         if this.m_IPrintTaskProgressingEventArgs.all /= null then
            RefCount := this.m_IPrintTaskProgressingEventArgs.all.Release;
            Free (this.m_IPrintTaskProgressingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskProgressingEventArgs

   function get_DocumentPageCount
   (
      this : in out PrintTaskProgressingEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrintTaskProgressingEventArgs.all.get_DocumentPageCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskRequest

   procedure Initialize (this : in out PrintTaskRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskRequest, IPrintTaskRequest_Ptr);
   begin
      if this.m_IPrintTaskRequest /= null then
         if this.m_IPrintTaskRequest.all /= null then
            RefCount := this.m_IPrintTaskRequest.all.Release;
            Free (this.m_IPrintTaskRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskRequest

   function get_Deadline
   (
      this : in out PrintTaskRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPrintTaskRequest.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreatePrintTask
   (
      this : in out PrintTaskRequest;
      title : WinRt.WString;
      handler : Windows.Graphics.Printing.PrintTaskSourceRequestedHandler
   )
   return WinRt.Windows.Graphics.Printing.PrintTask'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTask;
      HStr_title : WinRt.HString := To_HString (title);
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTask do
         Hr := this.m_IPrintTaskRequest.all.CreatePrintTask (HStr_title, handler, m_ComRetVal'Access);
         Retval.m_IPrintTask := new Windows.Graphics.Printing.IPrintTask;
         Retval.m_IPrintTask.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_title);
      end return;
   end;

   function GetDeferral
   (
      this : in out PrintTaskRequest
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskRequestedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTaskRequestedDeferral;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTaskRequestedDeferral do
         Hr := this.m_IPrintTaskRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IPrintTaskRequestedDeferral := new Windows.Graphics.Printing.IPrintTaskRequestedDeferral;
         Retval.m_IPrintTaskRequestedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskRequestedDeferral

   procedure Initialize (this : in out PrintTaskRequestedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskRequestedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskRequestedDeferral, IPrintTaskRequestedDeferral_Ptr);
   begin
      if this.m_IPrintTaskRequestedDeferral /= null then
         if this.m_IPrintTaskRequestedDeferral.all /= null then
            RefCount := this.m_IPrintTaskRequestedDeferral.all.Release;
            Free (this.m_IPrintTaskRequestedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskRequestedDeferral

   procedure Complete
   (
      this : in out PrintTaskRequestedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskRequestedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskRequestedEventArgs

   procedure Initialize (this : in out PrintTaskRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskRequestedEventArgs, IPrintTaskRequestedEventArgs_Ptr);
   begin
      if this.m_IPrintTaskRequestedEventArgs /= null then
         if this.m_IPrintTaskRequestedEventArgs.all /= null then
            RefCount := this.m_IPrintTaskRequestedEventArgs.all.Release;
            Free (this.m_IPrintTaskRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskRequestedEventArgs

   function get_Request
   (
      this : in out PrintTaskRequestedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTaskRequest;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTaskRequest do
         Hr := this.m_IPrintTaskRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IPrintTaskRequest := new Windows.Graphics.Printing.IPrintTaskRequest;
         Retval.m_IPrintTaskRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskSourceRequestedArgs

   procedure Initialize (this : in out PrintTaskSourceRequestedArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskSourceRequestedArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskSourceRequestedArgs, IPrintTaskSourceRequestedArgs_Ptr);
   begin
      if this.m_IPrintTaskSourceRequestedArgs /= null then
         if this.m_IPrintTaskSourceRequestedArgs.all /= null then
            RefCount := this.m_IPrintTaskSourceRequestedArgs.all.Release;
            Free (this.m_IPrintTaskSourceRequestedArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskSourceRequestedArgs

   function get_Deadline
   (
      this : in out PrintTaskSourceRequestedArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPrintTaskSourceRequestedArgs.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetSource
   (
      this : in out PrintTaskSourceRequestedArgs;
      source : Windows.Graphics.Printing.IPrintDocumentSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskSourceRequestedArgs.all.SetSource (source);
   end;

   function GetDeferral
   (
      this : in out PrintTaskSourceRequestedArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskSourceRequestedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTaskSourceRequestedDeferral;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTaskSourceRequestedDeferral do
         Hr := this.m_IPrintTaskSourceRequestedArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IPrintTaskSourceRequestedDeferral := new Windows.Graphics.Printing.IPrintTaskSourceRequestedDeferral;
         Retval.m_IPrintTaskSourceRequestedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskSourceRequestedDeferral

   procedure Initialize (this : in out PrintTaskSourceRequestedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskSourceRequestedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskSourceRequestedDeferral, IPrintTaskSourceRequestedDeferral_Ptr);
   begin
      if this.m_IPrintTaskSourceRequestedDeferral /= null then
         if this.m_IPrintTaskSourceRequestedDeferral.all /= null then
            RefCount := this.m_IPrintTaskSourceRequestedDeferral.all.Release;
            Free (this.m_IPrintTaskSourceRequestedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskSourceRequestedDeferral

   procedure Complete
   (
      this : in out PrintTaskSourceRequestedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskSourceRequestedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- Delegate PrintTaskSourceRequestedHandler

   function Invoke
   (
      this : access PrintTaskSourceRequestedHandler_Delegate;
      args : Windows.Graphics.Printing.IPrintTaskSourceRequestedArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (args);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StandardPrintTaskOptions is

      function get_CustomPageRanges
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CustomPageRanges (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MediaSize
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MediaSize (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MediaType
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MediaType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Orientation
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Orientation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PrintQuality
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PrintQuality (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ColorMode
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorMode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Duplex
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Duplex (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Collation
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Collation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Staple
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Staple (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HolePunch
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HolePunch (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Binding
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Binding (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Copies
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Copies (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NUp
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NUp (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_InputBin
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InputBin (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Bordering
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing.StandardPrintTaskOptions");
         m_Factory        : access WinRt.Windows.Graphics.Printing.IStandardPrintTaskOptionsStatic2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStandardPrintTaskOptionsStatic2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bordering (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end StandardPrintTaskOptions;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.UI.Xaml.Interop;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Data is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BindingBase

   procedure Initialize (this : in out BindingBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out BindingBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBindingBase, IBindingBase_Ptr);
   begin
      if this.m_IBindingBase /= null then
         if this.m_IBindingBase.all /= null then
            RefCount := this.m_IBindingBase.all.Release;
            Free (this.m_IBindingBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BindingBase

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return BindingBase is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.BindingBase");
      m_Factory    : access IBindingBaseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.IBindingBase;
   begin
      return RetVal : BindingBase do
         Hr := RoGetActivationFactory (m_hString, IID_IBindingBaseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IBindingBase := new Windows.UI.Xaml.Data.IBindingBase;
            Retval.m_IBindingBase.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BindingBase

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Binding

   procedure Initialize (this : in out Binding) is
   begin
      null;
   end;

   procedure Finalize (this : in out Binding) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBinding, IBinding_Ptr);
   begin
      if this.m_IBinding /= null then
         if this.m_IBinding.all /= null then
            RefCount := this.m_IBinding.all.Release;
            Free (this.m_IBinding);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Binding

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Binding is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.Binding");
      m_Factory    : access IBindingFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.IBinding;
   begin
      return RetVal : Binding do
         Hr := RoGetActivationFactory (m_hString, IID_IBindingFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IBinding := new Windows.UI.Xaml.Data.IBinding;
            Retval.m_IBinding.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Binding

   function get_Path
   (
      this : in out Binding
   )
   return WinRt.Windows.UI.Xaml.PropertyPath'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IPropertyPath;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.PropertyPath do
         Hr := this.m_IBinding.all.get_Path (m_ComRetVal'Access);
         Retval.m_IPropertyPath := new Windows.UI.Xaml.IPropertyPath;
         Retval.m_IPropertyPath.all := m_ComRetVal;
      end return;
   end;

   procedure put_Path
   (
      this : in out Binding;
      value : Windows.UI.Xaml.PropertyPath'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBinding.all.put_Path (value.m_IPropertyPath.all);
   end;

   function get_Mode
   (
      this : in out Binding
   )
   return WinRt.Windows.UI.Xaml.Data.BindingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.BindingMode;
   begin
      Hr := this.m_IBinding.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out Binding;
      value : Windows.UI.Xaml.Data.BindingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBinding.all.put_Mode (value);
   end;

   function get_Source
   (
      this : in out Binding
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IBinding.all.get_Source (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Source
   (
      this : in out Binding;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBinding.all.put_Source (value);
   end;

   function get_RelativeSource
   (
      this : in out Binding
   )
   return WinRt.Windows.UI.Xaml.Data.RelativeSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.IRelativeSource;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Data.RelativeSource do
         Hr := this.m_IBinding.all.get_RelativeSource (m_ComRetVal'Access);
         Retval.m_IRelativeSource := new Windows.UI.Xaml.Data.IRelativeSource;
         Retval.m_IRelativeSource.all := m_ComRetVal;
      end return;
   end;

   procedure put_RelativeSource
   (
      this : in out Binding;
      value : Windows.UI.Xaml.Data.RelativeSource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBinding.all.put_RelativeSource (value.m_IRelativeSource.all);
   end;

   function get_ElementName
   (
      this : in out Binding
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBinding.all.get_ElementName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ElementName
   (
      this : in out Binding;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBinding.all.put_ElementName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Converter
   (
      this : in out Binding
   )
   return WinRt.Windows.UI.Xaml.Data.IValueConverter is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.IValueConverter;
   begin
      Hr := this.m_IBinding.all.get_Converter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Converter
   (
      this : in out Binding;
      value : Windows.UI.Xaml.Data.IValueConverter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBinding.all.put_Converter (value);
   end;

   function get_ConverterParameter
   (
      this : in out Binding
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IBinding.all.get_ConverterParameter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ConverterParameter
   (
      this : in out Binding;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBinding.all.put_ConverterParameter (value);
   end;

   function get_ConverterLanguage
   (
      this : in out Binding
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBinding.all.get_ConverterLanguage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ConverterLanguage
   (
      this : in out Binding;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBinding.all.put_ConverterLanguage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FallbackValue
   (
      this : in out Binding
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IBinding2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Data.IBinding_Interface, WinRt.Windows.UI.Xaml.Data.IBinding2, WinRt.Windows.UI.Xaml.Data.IID_IBinding2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBinding.all);
      Hr := m_Interface.get_FallbackValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FallbackValue
   (
      this : in out Binding;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IBinding2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Data.IBinding_Interface, WinRt.Windows.UI.Xaml.Data.IBinding2, WinRt.Windows.UI.Xaml.Data.IID_IBinding2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBinding.all);
      Hr := m_Interface.put_FallbackValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TargetNullValue
   (
      this : in out Binding
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IBinding2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Data.IBinding_Interface, WinRt.Windows.UI.Xaml.Data.IBinding2, WinRt.Windows.UI.Xaml.Data.IID_IBinding2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBinding.all);
      Hr := m_Interface.get_TargetNullValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TargetNullValue
   (
      this : in out Binding;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IBinding2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Data.IBinding_Interface, WinRt.Windows.UI.Xaml.Data.IBinding2, WinRt.Windows.UI.Xaml.Data.IID_IBinding2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBinding.all);
      Hr := m_Interface.put_TargetNullValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_UpdateSourceTrigger
   (
      this : in out Binding
   )
   return WinRt.Windows.UI.Xaml.Data.UpdateSourceTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IBinding2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.UpdateSourceTrigger;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Data.IBinding_Interface, WinRt.Windows.UI.Xaml.Data.IBinding2, WinRt.Windows.UI.Xaml.Data.IID_IBinding2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBinding.all);
      Hr := m_Interface.get_UpdateSourceTrigger (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_UpdateSourceTrigger
   (
      this : in out Binding;
      value : Windows.UI.Xaml.Data.UpdateSourceTrigger
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IBinding2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Data.IBinding_Interface, WinRt.Windows.UI.Xaml.Data.IBinding2, WinRt.Windows.UI.Xaml.Data.IID_IBinding2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBinding.all);
      Hr := m_Interface.put_UpdateSourceTrigger (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BindingExpressionBase

   procedure Initialize (this : in out BindingExpressionBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out BindingExpressionBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBindingExpressionBase, IBindingExpressionBase_Ptr);
   begin
      if this.m_IBindingExpressionBase /= null then
         if this.m_IBindingExpressionBase.all /= null then
            RefCount := this.m_IBindingExpressionBase.all.Release;
            Free (this.m_IBindingExpressionBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BindingExpressionBase

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BindingExpressionBase

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BindingExpression

   procedure Initialize (this : in out BindingExpression) is
   begin
      null;
   end;

   procedure Finalize (this : in out BindingExpression) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBindingExpression, IBindingExpression_Ptr);
   begin
      if this.m_IBindingExpression /= null then
         if this.m_IBindingExpression.all /= null then
            RefCount := this.m_IBindingExpression.all.Release;
            Free (this.m_IBindingExpression);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BindingExpression

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BindingExpression

   function get_DataItem
   (
      this : in out BindingExpression
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IBindingExpression.all.get_DataItem (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ParentBinding
   (
      this : in out BindingExpression
   )
   return WinRt.Windows.UI.Xaml.Data.Binding'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.IBinding;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Data.Binding do
         Hr := this.m_IBindingExpression.all.get_ParentBinding (m_ComRetVal'Access);
         Retval.m_IBinding := new Windows.UI.Xaml.Data.IBinding;
         Retval.m_IBinding.all := m_ComRetVal;
      end return;
   end;

   procedure UpdateSource
   (
      this : in out BindingExpression
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBindingExpression.all.UpdateSource;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BindingOperations

   procedure Initialize (this : in out BindingOperations) is
   begin
      null;
   end;

   procedure Finalize (this : in out BindingOperations) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBindingOperations, IBindingOperations_Ptr);
   begin
      if this.m_IBindingOperations /= null then
         if this.m_IBindingOperations.all /= null then
            RefCount := this.m_IBindingOperations.all.Release;
            Free (this.m_IBindingOperations);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BindingOperations

   procedure SetBinding
   (
      target : Windows.UI.Xaml.DependencyObject'Class;
      dp : Windows.UI.Xaml.DependencyProperty'Class;
      binding_p : Windows.UI.Xaml.Data.BindingBase'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.BindingOperations");
      m_Factory        : access WinRt.Windows.UI.Xaml.Data.IBindingOperationsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBindingOperationsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetBinding (target.m_IDependencyObject.all, dp.m_IDependencyProperty.all, binding_p.m_IBindingBase.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BindingOperations

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CollectionViewSource

   procedure Initialize (this : in out CollectionViewSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out CollectionViewSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICollectionViewSource, ICollectionViewSource_Ptr);
   begin
      if this.m_ICollectionViewSource /= null then
         if this.m_ICollectionViewSource.all /= null then
            RefCount := this.m_ICollectionViewSource.all.Release;
            Free (this.m_ICollectionViewSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CollectionViewSource

   function Constructor return CollectionViewSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CollectionViewSource");
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.ICollectionViewSource;
   begin
      return RetVal : CollectionViewSource do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICollectionViewSource := new Windows.UI.Xaml.Data.ICollectionViewSource;
            Retval.m_ICollectionViewSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CollectionViewSource

   function get_SourceProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CollectionViewSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Data.ICollectionViewSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICollectionViewSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SourceProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ViewProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CollectionViewSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Data.ICollectionViewSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICollectionViewSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ViewProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsSourceGroupedProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CollectionViewSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Data.ICollectionViewSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICollectionViewSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsSourceGroupedProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ItemsPathProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CollectionViewSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Data.ICollectionViewSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICollectionViewSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItemsPathProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CollectionViewSource

   function get_Source
   (
      this : in out CollectionViewSource
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ICollectionViewSource.all.get_Source (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Source
   (
      this : in out CollectionViewSource;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICollectionViewSource.all.put_Source (value);
   end;

   function get_View
   (
      this : in out CollectionViewSource
   )
   return WinRt.Windows.UI.Xaml.Data.ICollectionView is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.ICollectionView;
   begin
      Hr := this.m_ICollectionViewSource.all.get_View (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsSourceGrouped
   (
      this : in out CollectionViewSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICollectionViewSource.all.get_IsSourceGrouped (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSourceGrouped
   (
      this : in out CollectionViewSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICollectionViewSource.all.put_IsSourceGrouped (value);
   end;

   function get_ItemsPath
   (
      this : in out CollectionViewSource
   )
   return WinRt.Windows.UI.Xaml.PropertyPath'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IPropertyPath;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.PropertyPath do
         Hr := this.m_ICollectionViewSource.all.get_ItemsPath (m_ComRetVal'Access);
         Retval.m_IPropertyPath := new Windows.UI.Xaml.IPropertyPath;
         Retval.m_IPropertyPath.all := m_ComRetVal;
      end return;
   end;

   procedure put_ItemsPath
   (
      this : in out CollectionViewSource;
      value : Windows.UI.Xaml.PropertyPath'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICollectionViewSource.all.put_ItemsPath (value.m_IPropertyPath.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CurrentChangingEventArgs

   procedure Initialize (this : in out CurrentChangingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CurrentChangingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICurrentChangingEventArgs, ICurrentChangingEventArgs_Ptr);
   begin
      if this.m_ICurrentChangingEventArgs /= null then
         if this.m_ICurrentChangingEventArgs.all /= null then
            RefCount := this.m_ICurrentChangingEventArgs.all.Release;
            Free (this.m_ICurrentChangingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CurrentChangingEventArgs

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CurrentChangingEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CurrentChangingEventArgs");
      m_Factory    : access ICurrentChangingEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.ICurrentChangingEventArgs;
   begin
      return RetVal : CurrentChangingEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_ICurrentChangingEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICurrentChangingEventArgs := new Windows.UI.Xaml.Data.ICurrentChangingEventArgs;
            Retval.m_ICurrentChangingEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      isCancelable : WinRt.Boolean;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CurrentChangingEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.CurrentChangingEventArgs");
      m_Factory    : access ICurrentChangingEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.ICurrentChangingEventArgs;
   begin
      return RetVal : CurrentChangingEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_ICurrentChangingEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithCancelableParameter (isCancelable, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICurrentChangingEventArgs := new Windows.UI.Xaml.Data.ICurrentChangingEventArgs;
            Retval.m_ICurrentChangingEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CurrentChangingEventArgs

   function get_Cancel
   (
      this : in out CurrentChangingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICurrentChangingEventArgs.all.get_Cancel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Cancel
   (
      this : in out CurrentChangingEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICurrentChangingEventArgs.all.put_Cancel (value);
   end;

   function get_IsCancelable
   (
      this : in out CurrentChangingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICurrentChangingEventArgs.all.get_IsCancelable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate CurrentChangingEventHandler

   function Invoke
   (
      this : access CurrentChangingEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Data.ICurrentChangingEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ItemIndexRange

   procedure Initialize (this : in out ItemIndexRange) is
   begin
      null;
   end;

   procedure Finalize (this : in out ItemIndexRange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IItemIndexRange, IItemIndexRange_Ptr);
   begin
      if this.m_IItemIndexRange /= null then
         if this.m_IItemIndexRange.all /= null then
            RefCount := this.m_IItemIndexRange.all.Release;
            Free (this.m_IItemIndexRange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ItemIndexRange

   function Constructor
   (
      firstIndex : WinRt.Int32;
      length : WinRt.UInt32;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ItemIndexRange is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.ItemIndexRange");
      m_Factory    : access IItemIndexRangeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.IItemIndexRange;
   begin
      return RetVal : ItemIndexRange do
         Hr := RoGetActivationFactory (m_hString, IID_IItemIndexRangeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (firstIndex, length, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IItemIndexRange := new Windows.UI.Xaml.Data.IItemIndexRange;
            Retval.m_IItemIndexRange.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ItemIndexRange

   function get_FirstIndex
   (
      this : in out ItemIndexRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IItemIndexRange.all.get_FirstIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Length
   (
      this : in out ItemIndexRange
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IItemIndexRange.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastIndex
   (
      this : in out ItemIndexRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IItemIndexRange.all.get_LastIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PropertyChangedEventArgs

   procedure Initialize (this : in out PropertyChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PropertyChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPropertyChangedEventArgs, IPropertyChangedEventArgs_Ptr);
   begin
      if this.m_IPropertyChangedEventArgs /= null then
         if this.m_IPropertyChangedEventArgs.all /= null then
            RefCount := this.m_IPropertyChangedEventArgs.all.Release;
            Free (this.m_IPropertyChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PropertyChangedEventArgs

   function Constructor
   (
      name : WinRt.WString;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return PropertyChangedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.PropertyChangedEventArgs");
      m_Factory    : access IPropertyChangedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.IPropertyChangedEventArgs;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : PropertyChangedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IPropertyChangedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (HStr_name, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPropertyChangedEventArgs := new Windows.UI.Xaml.Data.IPropertyChangedEventArgs;
            Retval.m_IPropertyChangedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PropertyChangedEventArgs

   function get_PropertyName
   (
      this : in out PropertyChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPropertyChangedEventArgs.all.get_PropertyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate PropertyChangedEventHandler

   function Invoke
   (
      this : access PropertyChangedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Data.IPropertyChangedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RelativeSource

   procedure Initialize (this : in out RelativeSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out RelativeSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRelativeSource, IRelativeSource_Ptr);
   begin
      if this.m_IRelativeSource /= null then
         if this.m_IRelativeSource.all /= null then
            RefCount := this.m_IRelativeSource.all.Release;
            Free (this.m_IRelativeSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RelativeSource

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RelativeSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Data.RelativeSource");
      m_Factory    : access IRelativeSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Data.IRelativeSource;
   begin
      return RetVal : RelativeSource do
         Hr := RoGetActivationFactory (m_hString, IID_IRelativeSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRelativeSource := new Windows.UI.Xaml.Data.IRelativeSource;
            Retval.m_IRelativeSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RelativeSource

   function get_Mode
   (
      this : in out RelativeSource
   )
   return WinRt.Windows.UI.Xaml.Data.RelativeSourceMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Data.RelativeSourceMode;
   begin
      Hr := this.m_IRelativeSource.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out RelativeSource;
      value : Windows.UI.Xaml.Data.RelativeSourceMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRelativeSource.all.put_Mode (value);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media.Devices;
with WinRt.Windows.Media.Devices.Core;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Perception.Spatial;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.WindowManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Capture.Frames is

   package IAsyncOperation_MediaFrameReaderStartStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.MediaFrameReaderStartStatus);
   package AsyncOperationCompletedHandler_MediaFrameReaderStartStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.MediaFrameReaderStartStatus);

   package IAsyncOperation_MediaFrameSourceGetPropertyResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult);
   package AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult);

   package IAsyncOperation_MediaFrameSourceSetPropertyStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus);
   package AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_MediaFrameSourceGroup is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGroup);
   package AsyncOperationCompletedHandler_MediaFrameSourceGroup is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGroup);

   package IAsyncOperation_MultiSourceMediaFrameReaderStartStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReaderStartStatus);
   package AsyncOperationCompletedHandler_MultiSourceMediaFrameReaderStartStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReaderStartStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioMediaFrame

   procedure Initialize (this : in out AudioMediaFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioMediaFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioMediaFrame, IAudioMediaFrame_Ptr);
   begin
      if this.m_IAudioMediaFrame /= null then
         if this.m_IAudioMediaFrame.all /= null then
            RefCount := this.m_IAudioMediaFrame.all.Release;
            Free (this.m_IAudioMediaFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioMediaFrame

   function get_FrameReference
   (
      this : in out AudioMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IAudioMediaFrame.all.get_FrameReference (m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function get_AudioEncodingProperties
   (
      this : in out AudioMediaFrame
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IAudioMediaFrame.all.get_AudioEncodingProperties (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function GetAudioFrame
   (
      this : in out AudioMediaFrame
   )
   return WinRt.Windows.Media.AudioFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IAudioFrame;
   begin
      return RetVal : WinRt.Windows.Media.AudioFrame do
         Hr := this.m_IAudioMediaFrame.all.GetAudioFrame (m_ComRetVal'Access);
         Retval.m_IAudioFrame := new Windows.Media.IAudioFrame;
         Retval.m_IAudioFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BufferMediaFrame

   procedure Initialize (this : in out BufferMediaFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out BufferMediaFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBufferMediaFrame, IBufferMediaFrame_Ptr);
   begin
      if this.m_IBufferMediaFrame /= null then
         if this.m_IBufferMediaFrame.all /= null then
            RefCount := this.m_IBufferMediaFrame.all.Release;
            Free (this.m_IBufferMediaFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BufferMediaFrame

   function get_FrameReference
   (
      this : in out BufferMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IBufferMediaFrame.all.get_FrameReference (m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function get_Buffer
   (
      this : in out BufferMediaFrame
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBufferMediaFrame.all.get_Buffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DepthMediaFrame

   procedure Initialize (this : in out DepthMediaFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out DepthMediaFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDepthMediaFrame, IDepthMediaFrame_Ptr);
   begin
      if this.m_IDepthMediaFrame /= null then
         if this.m_IDepthMediaFrame.all /= null then
            RefCount := this.m_IDepthMediaFrame.all.Release;
            Free (this.m_IDepthMediaFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DepthMediaFrame

   function get_FrameReference
   (
      this : in out DepthMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IDepthMediaFrame.all.get_FrameReference (m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function get_VideoMediaFrame
   (
      this : in out DepthMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.VideoMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IVideoMediaFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.VideoMediaFrame do
         Hr := this.m_IDepthMediaFrame.all.get_VideoMediaFrame (m_ComRetVal'Access);
         Retval.m_IVideoMediaFrame := new Windows.Media.Capture.Frames.IVideoMediaFrame;
         Retval.m_IVideoMediaFrame.all := m_ComRetVal;
      end return;
   end;

   function get_DepthFormat
   (
      this : in out DepthMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.DepthMediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IDepthMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.DepthMediaFrameFormat do
         Hr := this.m_IDepthMediaFrame.all.get_DepthFormat (m_ComRetVal'Access);
         Retval.m_IDepthMediaFrameFormat := new Windows.Media.Capture.Frames.IDepthMediaFrameFormat;
         Retval.m_IDepthMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function TryCreateCoordinateMapper
   (
      this : in out DepthMediaFrame;
      cameraIntrinsics : Windows.Media.Devices.Core.CameraIntrinsics'Class;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.Media.Devices.Core.DepthCorrelatedCoordinateMapper'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IDepthCorrelatedCoordinateMapper;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.DepthCorrelatedCoordinateMapper do
         Hr := this.m_IDepthMediaFrame.all.TryCreateCoordinateMapper (cameraIntrinsics.m_ICameraIntrinsics.all, coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_IDepthCorrelatedCoordinateMapper := new Windows.Media.Devices.Core.IDepthCorrelatedCoordinateMapper;
         Retval.m_IDepthCorrelatedCoordinateMapper.all := m_ComRetVal;
      end return;
   end;

   function get_MaxReliableDepth
   (
      this : in out DepthMediaFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IDepthMediaFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IDepthMediaFrame_Interface, WinRt.Windows.Media.Capture.Frames.IDepthMediaFrame2, WinRt.Windows.Media.Capture.Frames.IID_IDepthMediaFrame2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDepthMediaFrame.all);
      Hr := m_Interface.get_MaxReliableDepth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinReliableDepth
   (
      this : in out DepthMediaFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IDepthMediaFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IDepthMediaFrame_Interface, WinRt.Windows.Media.Capture.Frames.IDepthMediaFrame2, WinRt.Windows.Media.Capture.Frames.IID_IDepthMediaFrame2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDepthMediaFrame.all);
      Hr := m_Interface.get_MinReliableDepth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DepthMediaFrameFormat

   procedure Initialize (this : in out DepthMediaFrameFormat) is
   begin
      null;
   end;

   procedure Finalize (this : in out DepthMediaFrameFormat) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDepthMediaFrameFormat, IDepthMediaFrameFormat_Ptr);
   begin
      if this.m_IDepthMediaFrameFormat /= null then
         if this.m_IDepthMediaFrameFormat.all /= null then
            RefCount := this.m_IDepthMediaFrameFormat.all.Release;
            Free (this.m_IDepthMediaFrameFormat);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DepthMediaFrameFormat

   function get_VideoFormat
   (
      this : in out DepthMediaFrameFormat
   )
   return WinRt.Windows.Media.Capture.Frames.VideoMediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.VideoMediaFrameFormat do
         Hr := this.m_IDepthMediaFrameFormat.all.get_VideoFormat (m_ComRetVal'Access);
         Retval.m_IVideoMediaFrameFormat := new Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
         Retval.m_IVideoMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function get_DepthScaleInMeters
   (
      this : in out DepthMediaFrameFormat
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDepthMediaFrameFormat.all.get_DepthScaleInMeters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InfraredMediaFrame

   procedure Initialize (this : in out InfraredMediaFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out InfraredMediaFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInfraredMediaFrame, IInfraredMediaFrame_Ptr);
   begin
      if this.m_IInfraredMediaFrame /= null then
         if this.m_IInfraredMediaFrame.all /= null then
            RefCount := this.m_IInfraredMediaFrame.all.Release;
            Free (this.m_IInfraredMediaFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InfraredMediaFrame

   function get_FrameReference
   (
      this : in out InfraredMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IInfraredMediaFrame.all.get_FrameReference (m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function get_VideoMediaFrame
   (
      this : in out InfraredMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.VideoMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IVideoMediaFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.VideoMediaFrame do
         Hr := this.m_IInfraredMediaFrame.all.get_VideoMediaFrame (m_ComRetVal'Access);
         Retval.m_IVideoMediaFrame := new Windows.Media.Capture.Frames.IVideoMediaFrame;
         Retval.m_IVideoMediaFrame.all := m_ComRetVal;
      end return;
   end;

   function get_IsIlluminated
   (
      this : in out InfraredMediaFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInfraredMediaFrame.all.get_IsIlluminated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameArrivedEventArgs

   procedure Initialize (this : in out MediaFrameArrivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameArrivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameArrivedEventArgs, IMediaFrameArrivedEventArgs_Ptr);
   begin
      if this.m_IMediaFrameArrivedEventArgs /= null then
         if this.m_IMediaFrameArrivedEventArgs.all /= null then
            RefCount := this.m_IMediaFrameArrivedEventArgs.all.Release;
            Free (this.m_IMediaFrameArrivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameArrivedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameFormat

   procedure Initialize (this : in out MediaFrameFormat) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameFormat) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameFormat, IMediaFrameFormat_Ptr);
   begin
      if this.m_IMediaFrameFormat /= null then
         if this.m_IMediaFrameFormat.all /= null then
            RefCount := this.m_IMediaFrameFormat.all.Release;
            Free (this.m_IMediaFrameFormat);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameFormat

   function get_MajorType
   (
      this : in out MediaFrameFormat
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaFrameFormat.all.get_MajorType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Subtype
   (
      this : in out MediaFrameFormat
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaFrameFormat.all.get_Subtype (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FrameRate
   (
      this : in out MediaFrameFormat
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_IMediaFrameFormat.all.get_FrameRate (m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out MediaFrameFormat
   )
   return IMapView_Guid_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_IInspectable.Kind;
   begin
      Hr := this.m_IMediaFrameFormat.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_Guid_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_VideoFormat
   (
      this : in out MediaFrameFormat
   )
   return WinRt.Windows.Media.Capture.Frames.VideoMediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.VideoMediaFrameFormat do
         Hr := this.m_IMediaFrameFormat.all.get_VideoFormat (m_ComRetVal'Access);
         Retval.m_IVideoMediaFrameFormat := new Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
         Retval.m_IVideoMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function get_AudioEncodingProperties
   (
      this : in out MediaFrameFormat
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameFormat2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameFormat_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameFormat2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameFormat2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IMediaFrameFormat.all);
         Hr := m_Interface.get_AudioEncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameReader

   procedure Initialize (this : in out MediaFrameReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameReader, IMediaFrameReader_Ptr);
   begin
      if this.m_IMediaFrameReader /= null then
         if this.m_IMediaFrameReader.all /= null then
            RefCount := this.m_IMediaFrameReader.all.Release;
            Free (this.m_IMediaFrameReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameReader

   function add_FrameArrived
   (
      this : in out MediaFrameReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaFrameReader.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out MediaFrameReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaFrameReader.all.remove_FrameArrived (token);
   end;

   function TryAcquireLatestFrame
   (
      this : in out MediaFrameReader
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IMediaFrameReader.all.TryAcquireLatestFrame (m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function StartAsync
   (
      this : in out MediaFrameReader
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReaderStartStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameReaderStartStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameReaderStartStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.MediaFrameReaderStartStatus;
      m_IID            : aliased WinRt.IID := (3683525914, 44486, 22355, (135, 132, 196, 75, 77, 124, 91, 7 )); -- Windows.Media.Capture.Frames.MediaFrameReaderStartStatus;
      m_HandlerIID     : aliased WinRt.IID := (2672407269, 12136, 23640, (141, 139, 18, 23, 111, 246, 234, 80 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameReaderStartStatus.Kind := new AsyncOperationCompletedHandler_MediaFrameReaderStartStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameReaderStartStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameReaderStartStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameReaderStartStatus.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameReaderStartStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaFrameReader.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure StopAsync
   (
      this : in out MediaFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaFrameReader.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out MediaFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_AcquisitionMode
   (
      this : in out MediaFrameReader;
      value : Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameReader_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameReader2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameReader.all);
      Hr := m_Interface.put_AcquisitionMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AcquisitionMode
   (
      this : in out MediaFrameReader
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameReader_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameReader2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameReader.all);
      Hr := m_Interface.get_AcquisitionMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameReference

   procedure Initialize (this : in out MediaFrameReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameReference, IMediaFrameReference_Ptr);
   begin
      if this.m_IMediaFrameReference /= null then
         if this.m_IMediaFrameReference.all /= null then
            RefCount := this.m_IMediaFrameReference.all.Release;
            Free (this.m_IMediaFrameReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameReference

   function get_SourceKind
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.MediaFrameSourceKind;
   begin
      Hr := this.m_IMediaFrameReference.all.get_SourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Format
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameFormat do
         Hr := this.m_IMediaFrameReference.all.get_Format (m_ComRetVal'Access);
         Retval.m_IMediaFrameFormat := new Windows.Media.Capture.Frames.IMediaFrameFormat;
         Retval.m_IMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function get_SystemRelativeTime
   (
      this : in out MediaFrameReference
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMediaFrameReference.all.get_SystemRelativeTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Duration
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaFrameReference.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out MediaFrameReference
   )
   return IMapView_Guid_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_IInspectable.Kind;
   begin
      Hr := this.m_IMediaFrameReference.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_Guid_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BufferMediaFrame
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Media.Capture.Frames.BufferMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IBufferMediaFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.BufferMediaFrame do
         Hr := this.m_IMediaFrameReference.all.get_BufferMediaFrame (m_ComRetVal'Access);
         Retval.m_IBufferMediaFrame := new Windows.Media.Capture.Frames.IBufferMediaFrame;
         Retval.m_IBufferMediaFrame.all := m_ComRetVal;
      end return;
   end;

   function get_VideoMediaFrame
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Media.Capture.Frames.VideoMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IVideoMediaFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.VideoMediaFrame do
         Hr := this.m_IMediaFrameReference.all.get_VideoMediaFrame (m_ComRetVal'Access);
         Retval.m_IVideoMediaFrame := new Windows.Media.Capture.Frames.IVideoMediaFrame;
         Retval.m_IVideoMediaFrame.all := m_ComRetVal;
      end return;
   end;

   function get_CoordinateSystem
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_IMediaFrameReference.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out MediaFrameReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameReference_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameReference.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_AudioMediaFrame
   (
      this : in out MediaFrameReference
   )
   return WinRt.Windows.Media.Capture.Frames.AudioMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameReference2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IAudioMediaFrame;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameReference_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameReference2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameReference2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.AudioMediaFrame do
         m_Interface := QInterface (this.m_IMediaFrameReference.all);
         Hr := m_Interface.get_AudioMediaFrame (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioMediaFrame := new Windows.Media.Capture.Frames.IAudioMediaFrame;
         Retval.m_IAudioMediaFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameSource

   procedure Initialize (this : in out MediaFrameSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameSource, IMediaFrameSource_Ptr);
   begin
      if this.m_IMediaFrameSource /= null then
         if this.m_IMediaFrameSource.all /= null then
            RefCount := this.m_IMediaFrameSource.all.Release;
            Free (this.m_IMediaFrameSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameSource

   function get_Info
   (
      this : in out MediaFrameSource
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameSourceInfo;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceInfo do
         Hr := this.m_IMediaFrameSource.all.get_Info (m_ComRetVal'Access);
         Retval.m_IMediaFrameSourceInfo := new Windows.Media.Capture.Frames.IMediaFrameSourceInfo;
         Retval.m_IMediaFrameSourceInfo.all := m_ComRetVal;
      end return;
   end;

   function get_Controller
   (
      this : in out MediaFrameSource
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameSourceController;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceController do
         Hr := this.m_IMediaFrameSource.all.get_Controller (m_ComRetVal'Access);
         Retval.m_IMediaFrameSourceController := new Windows.Media.Capture.Frames.IMediaFrameSourceController;
         Retval.m_IMediaFrameSourceController.all := m_ComRetVal;
      end return;
   end;

   function get_SupportedFormats
   (
      this : in out MediaFrameSource
   )
   return IVectorView_IMediaFrameFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaFrameFormat.Kind;
   begin
      Hr := this.m_IMediaFrameSource.all.get_SupportedFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaFrameFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CurrentFormat
   (
      this : in out MediaFrameSource
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameFormat do
         Hr := this.m_IMediaFrameSource.all.get_CurrentFormat (m_ComRetVal'Access);
         Retval.m_IMediaFrameFormat := new Windows.Media.Capture.Frames.IMediaFrameFormat;
         Retval.m_IMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   procedure SetFormatAsync
   (
      this : in out MediaFrameSource;
      format : Windows.Media.Capture.Frames.MediaFrameFormat'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaFrameSource.all.SetFormatAsync (format.m_IMediaFrameFormat.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_FormatChanged
   (
      this : in out MediaFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaFrameSource.all.add_FormatChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FormatChanged
   (
      this : in out MediaFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaFrameSource.all.remove_FormatChanged (token);
   end;

   function TryGetCameraIntrinsics
   (
      this : in out MediaFrameSource;
      format : Windows.Media.Capture.Frames.MediaFrameFormat'Class
   )
   return WinRt.Windows.Media.Devices.Core.CameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.ICameraIntrinsics;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.CameraIntrinsics do
         Hr := this.m_IMediaFrameSource.all.TryGetCameraIntrinsics (format.m_IMediaFrameFormat.all, m_ComRetVal'Access);
         Retval.m_ICameraIntrinsics := new Windows.Media.Devices.Core.ICameraIntrinsics;
         Retval.m_ICameraIntrinsics.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameSourceController

   procedure Initialize (this : in out MediaFrameSourceController) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameSourceController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameSourceController, IMediaFrameSourceController_Ptr);
   begin
      if this.m_IMediaFrameSourceController /= null then
         if this.m_IMediaFrameSourceController.all /= null then
            RefCount := this.m_IMediaFrameSourceController.all.Release;
            Free (this.m_IMediaFrameSourceController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameSourceController

   function GetPropertyAsync
   (
      this : in out MediaFrameSourceController;
      propertyId : WinRt.WString
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyId : WinRt.HString := To_HString (propertyId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameSourceGetPropertyResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameSourceGetPropertyResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult;
      m_IID            : aliased WinRt.IID := (2147498361, 18822, 21159, (178, 39, 174, 107, 228, 210, 181, 205 )); -- Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult;
      m_HandlerIID     : aliased WinRt.IID := (3495395085, 52806, 23623, (143, 124, 74, 229, 98, 108, 199, 109 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind := new AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameSourceGetPropertyResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult do
         Hr := this.m_IMediaFrameSourceController.all.GetPropertyAsync (HStr_propertyId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaFrameSourceGetPropertyResult := new Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult;
                  Retval.m_IMediaFrameSourceGetPropertyResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_propertyId);
      end return;
   end;

   function SetPropertyAsync
   (
      this : in out MediaFrameSourceController;
      propertyId : WinRt.WString;
      propertyValue : WinRt.IInspectable
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyId : WinRt.HString := To_HString (propertyId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameSourceSetPropertyStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameSourceSetPropertyStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus;
      m_IID            : aliased WinRt.IID := (2706406422, 24452, 22638, (140, 169, 34, 79, 55, 224, 224, 222 )); -- Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus;
      m_HandlerIID     : aliased WinRt.IID := (4128466490, 50821, 24000, (177, 51, 96, 217, 67, 3, 166, 227 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind := new AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameSourceSetPropertyStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaFrameSourceController.all.SetPropertyAsync (HStr_propertyId, propertyValue, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_propertyId);
      return m_RetVal;
   end;

   function get_VideoDeviceController
   (
      this : in out MediaFrameSourceController
   )
   return WinRt.Windows.Media.Devices.VideoDeviceController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IVideoDeviceController;
   begin
      return RetVal : WinRt.Windows.Media.Devices.VideoDeviceController do
         Hr := this.m_IMediaFrameSourceController.all.get_VideoDeviceController (m_ComRetVal'Access);
         Retval.m_IVideoDeviceController := new Windows.Media.Devices.IVideoDeviceController;
         Retval.m_IVideoDeviceController.all := m_ComRetVal;
      end return;
   end;

   function GetPropertyByExtendedIdAsync
   (
      this : in out MediaFrameSourceController;
      extendedPropertyId : WinRt.Byte_Array;
      maxPropertyValueSize : GenericObject
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameSourceGetPropertyResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameSourceGetPropertyResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult;
      m_IID            : aliased WinRt.IID := (2147498361, 18822, 21159, (178, 39, 174, 107, 228, 210, 181, 205 )); -- Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult;
      m_HandlerIID     : aliased WinRt.IID := (3495395085, 52806, 23623, (143, 124, 74, 229, 98, 108, 199, 109 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind := new AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameSourceGetPropertyResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameSourceGetPropertyResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameSourceController2'Unchecked_Access);
      function Convert_extendedPropertyId is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult do
         m_Interface := QInterface (this.m_IMediaFrameSourceController.all);
         Hr := m_Interface.GetPropertyByExtendedIdAsync (WinRt.UInt32(extendedPropertyId'Length), Convert_extendedPropertyId (extendedPropertyId (extendedPropertyId'First)'Address), maxPropertyValueSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaFrameSourceGetPropertyResult := new Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult;
                  Retval.m_IMediaFrameSourceGetPropertyResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SetPropertyByExtendedIdAsync
   (
      this : in out MediaFrameSourceController;
      extendedPropertyId : WinRt.Byte_Array;
      propertyValue : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameSourceSetPropertyStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameSourceSetPropertyStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus;
      m_IID            : aliased WinRt.IID := (2706406422, 24452, 22638, (140, 169, 34, 79, 55, 224, 224, 222 )); -- Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus;
      m_HandlerIID     : aliased WinRt.IID := (4128466490, 50821, 24000, (177, 51, 96, 217, 67, 3, 166, 227 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind := new AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameSourceSetPropertyStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameSourceSetPropertyStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameSourceController2'Unchecked_Access);
      function Convert_extendedPropertyId is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_propertyValue is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IMediaFrameSourceController.all);
      Hr := m_Interface.SetPropertyByExtendedIdAsync (WinRt.UInt32(extendedPropertyId'Length), Convert_extendedPropertyId (extendedPropertyId (extendedPropertyId'First)'Address), WinRt.UInt32(propertyValue'Length), Convert_propertyValue (propertyValue (propertyValue'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_AudioDeviceController
   (
      this : in out MediaFrameSourceController
   )
   return WinRt.Windows.Media.Devices.AudioDeviceController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IAudioDeviceController;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceController3, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameSourceController3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.AudioDeviceController do
         m_Interface := QInterface (this.m_IMediaFrameSourceController.all);
         Hr := m_Interface.get_AudioDeviceController (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioDeviceController := new Windows.Media.Devices.IAudioDeviceController;
         Retval.m_IAudioDeviceController.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameSourceGetPropertyResult

   procedure Initialize (this : in out MediaFrameSourceGetPropertyResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameSourceGetPropertyResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameSourceGetPropertyResult, IMediaFrameSourceGetPropertyResult_Ptr);
   begin
      if this.m_IMediaFrameSourceGetPropertyResult /= null then
         if this.m_IMediaFrameSourceGetPropertyResult.all /= null then
            RefCount := this.m_IMediaFrameSourceGetPropertyResult.all.Release;
            Free (this.m_IMediaFrameSourceGetPropertyResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameSourceGetPropertyResult

   function get_Status
   (
      this : in out MediaFrameSourceGetPropertyResult
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyStatus;
   begin
      Hr := this.m_IMediaFrameSourceGetPropertyResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out MediaFrameSourceGetPropertyResult
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IMediaFrameSourceGetPropertyResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameSourceGroup

   procedure Initialize (this : in out MediaFrameSourceGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameSourceGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameSourceGroup, IMediaFrameSourceGroup_Ptr);
   begin
      if this.m_IMediaFrameSourceGroup /= null then
         if this.m_IMediaFrameSourceGroup.all /= null then
            RefCount := this.m_IMediaFrameSourceGroup.all.Release;
            Free (this.m_IMediaFrameSourceGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaFrameSourceGroup

   function FindAllAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.Frames.MediaFrameSourceGroup");
      m_Factory        : access WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2811594911, 27977, 22151, (170, 190, 242, 252, 98, 55, 250, 26 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3489106532, 48452, 22072, (175, 47, 84, 12, 35, 179, 34, 231 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMediaFrameSourceGroupStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function FromIdAsync
   (
      id : WinRt.WString
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGroup is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.Frames.MediaFrameSourceGroup");
      m_Factory        : access WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameSourceGroup.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameSourceGroup.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
      m_IID            : aliased WinRt.IID := (4079315591, 45519, 22851, (182, 100, 159, 25, 54, 125, 39, 121 )); -- Windows.Media.Capture.Frames.MediaFrameSourceGroup;
      m_HandlerIID     : aliased WinRt.IID := (2918256363, 40901, 21819, (145, 100, 41, 66, 70, 153, 42, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameSourceGroup.Kind := new AsyncOperationCompletedHandler_MediaFrameSourceGroup.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameSourceGroup.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameSourceGroup.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameSourceGroup.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameSourceGroup.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaFrameSourceGroupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaFrameSourceGroup := new Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
                     Retval.m_IMediaFrameSourceGroup.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.Frames.MediaFrameSourceGroup");
      m_Factory        : access WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMediaFrameSourceGroupStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameSourceGroup

   function get_Id
   (
      this : in out MediaFrameSourceGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaFrameSourceGroup.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out MediaFrameSourceGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaFrameSourceGroup.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SourceInfos
   (
      this : in out MediaFrameSourceGroup
   )
   return IVectorView_IMediaFrameSourceInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaFrameSourceInfo.Kind;
   begin
      Hr := this.m_IMediaFrameSourceGroup.all.get_SourceInfos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaFrameSourceInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaFrameSourceInfo

   procedure Initialize (this : in out MediaFrameSourceInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaFrameSourceInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaFrameSourceInfo, IMediaFrameSourceInfo_Ptr);
   begin
      if this.m_IMediaFrameSourceInfo /= null then
         if this.m_IMediaFrameSourceInfo.all /= null then
            RefCount := this.m_IMediaFrameSourceInfo.all.Release;
            Free (this.m_IMediaFrameSourceInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaFrameSourceInfo

   function get_Id
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaFrameSourceInfo.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MediaStreamType
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.Windows.Media.Capture.MediaStreamType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaStreamType;
   begin
      Hr := this.m_IMediaFrameSourceInfo.all.get_MediaStreamType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SourceKind
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.MediaFrameSourceKind;
   begin
      Hr := this.m_IMediaFrameSourceInfo.all.get_SourceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SourceGroup
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGroup do
         Hr := this.m_IMediaFrameSourceInfo.all.get_SourceGroup (m_ComRetVal'Access);
         Retval.m_IMediaFrameSourceGroup := new Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
         Retval.m_IMediaFrameSourceGroup.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceInformation
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IMediaFrameSourceInfo.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out MediaFrameSourceInfo
   )
   return IMapView_Guid_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_IInspectable.Kind;
   begin
      Hr := this.m_IMediaFrameSourceInfo.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_Guid_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CoordinateSystem
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_IMediaFrameSourceInfo.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function get_ProfileId
   (
      this : in out MediaFrameSourceInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameSourceInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameSourceInfo.all);
      Hr := m_Interface.get_ProfileId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_VideoProfileMediaDescription
   (
      this : in out MediaFrameSourceInfo
   )
   return IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo2, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameSourceInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameSourceInfo.all);
      Hr := m_Interface.get_VideoProfileMediaDescription (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfileMediaDescription (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetRelativePanel
   (
      this : in out MediaFrameSourceInfo;
      displayRegion : Windows.UI.WindowManagement.DisplayRegion'Class
   )
   return WinRt.Windows.Devices.Enumeration.Panel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.Panel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo_Interface, WinRt.Windows.Media.Capture.Frames.IMediaFrameSourceInfo3, WinRt.Windows.Media.Capture.Frames.IID_IMediaFrameSourceInfo3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaFrameSourceInfo.all);
      Hr := m_Interface.GetRelativePanel (displayRegion.m_IDisplayRegion.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MultiSourceMediaFrameArrivedEventArgs

   procedure Initialize (this : in out MultiSourceMediaFrameArrivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MultiSourceMediaFrameArrivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMultiSourceMediaFrameArrivedEventArgs, IMultiSourceMediaFrameArrivedEventArgs_Ptr);
   begin
      if this.m_IMultiSourceMediaFrameArrivedEventArgs /= null then
         if this.m_IMultiSourceMediaFrameArrivedEventArgs.all /= null then
            RefCount := this.m_IMultiSourceMediaFrameArrivedEventArgs.all.Release;
            Free (this.m_IMultiSourceMediaFrameArrivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MultiSourceMediaFrameArrivedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MultiSourceMediaFrameReader

   procedure Initialize (this : in out MultiSourceMediaFrameReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out MultiSourceMediaFrameReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMultiSourceMediaFrameReader, IMultiSourceMediaFrameReader_Ptr);
   begin
      if this.m_IMultiSourceMediaFrameReader /= null then
         if this.m_IMultiSourceMediaFrameReader.all /= null then
            RefCount := this.m_IMultiSourceMediaFrameReader.all.Release;
            Free (this.m_IMultiSourceMediaFrameReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MultiSourceMediaFrameReader

   function add_FrameArrived
   (
      this : in out MultiSourceMediaFrameReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMultiSourceMediaFrameReader.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out MultiSourceMediaFrameReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMultiSourceMediaFrameReader.all.remove_FrameArrived (token);
   end;

   function TryAcquireLatestFrame
   (
      this : in out MultiSourceMediaFrameReader
   )
   return WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMultiSourceMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReference do
         Hr := this.m_IMultiSourceMediaFrameReader.all.TryAcquireLatestFrame (m_ComRetVal'Access);
         Retval.m_IMultiSourceMediaFrameReference := new Windows.Media.Capture.Frames.IMultiSourceMediaFrameReference;
         Retval.m_IMultiSourceMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function StartAsync
   (
      this : in out MultiSourceMediaFrameReader
   )
   return WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReaderStartStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MultiSourceMediaFrameReaderStartStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MultiSourceMediaFrameReaderStartStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReaderStartStatus;
      m_IID            : aliased WinRt.IID := (2722281810, 30378, 21733, (161, 59, 168, 112, 124, 16, 152, 225 )); -- Windows.Media.Capture.Frames.MultiSourceMediaFrameReaderStartStatus;
      m_HandlerIID     : aliased WinRt.IID := (418312778, 13106, 24558, (160, 240, 114, 206, 237, 51, 6, 69 ));
      m_Handler        : AsyncOperationCompletedHandler_MultiSourceMediaFrameReaderStartStatus.Kind := new AsyncOperationCompletedHandler_MultiSourceMediaFrameReaderStartStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MultiSourceMediaFrameReaderStartStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MultiSourceMediaFrameReaderStartStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MultiSourceMediaFrameReaderStartStatus.Kind_Delegate, AsyncOperationCompletedHandler_MultiSourceMediaFrameReaderStartStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMultiSourceMediaFrameReader.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure StopAsync
   (
      this : in out MultiSourceMediaFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMultiSourceMediaFrameReader.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out MultiSourceMediaFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMultiSourceMediaFrameReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_AcquisitionMode
   (
      this : in out MultiSourceMediaFrameReader;
      value : Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader_Interface, WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader2, WinRt.Windows.Media.Capture.Frames.IID_IMultiSourceMediaFrameReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMultiSourceMediaFrameReader.all);
      Hr := m_Interface.put_AcquisitionMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AcquisitionMode
   (
      this : in out MultiSourceMediaFrameReader
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader_Interface, WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader2, WinRt.Windows.Media.Capture.Frames.IID_IMultiSourceMediaFrameReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMultiSourceMediaFrameReader.all);
      Hr := m_Interface.get_AcquisitionMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MultiSourceMediaFrameReference

   procedure Initialize (this : in out MultiSourceMediaFrameReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out MultiSourceMediaFrameReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMultiSourceMediaFrameReference, IMultiSourceMediaFrameReference_Ptr);
   begin
      if this.m_IMultiSourceMediaFrameReference /= null then
         if this.m_IMultiSourceMediaFrameReference.all /= null then
            RefCount := this.m_IMultiSourceMediaFrameReference.all.Release;
            Free (this.m_IMultiSourceMediaFrameReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MultiSourceMediaFrameReference

   function TryGetFrameReferenceBySourceId
   (
      this : in out MultiSourceMediaFrameReference;
      sourceId : WinRt.WString
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
      HStr_sourceId : WinRt.HString := To_HString (sourceId);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IMultiSourceMediaFrameReference.all.TryGetFrameReferenceBySourceId (HStr_sourceId, m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_sourceId);
      end return;
   end;

   procedure Close
   (
      this : in out MultiSourceMediaFrameReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReference_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMultiSourceMediaFrameReference.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoMediaFrame

   procedure Initialize (this : in out VideoMediaFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoMediaFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoMediaFrame, IVideoMediaFrame_Ptr);
   begin
      if this.m_IVideoMediaFrame /= null then
         if this.m_IVideoMediaFrame.all /= null then
            RefCount := this.m_IVideoMediaFrame.all.Release;
            Free (this.m_IVideoMediaFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoMediaFrame

   function get_FrameReference
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameReference;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReference do
         Hr := this.m_IVideoMediaFrame.all.get_FrameReference (m_ComRetVal'Access);
         Retval.m_IMediaFrameReference := new Windows.Media.Capture.Frames.IMediaFrameReference;
         Retval.m_IMediaFrameReference.all := m_ComRetVal;
      end return;
   end;

   function get_VideoFormat
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.VideoMediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.VideoMediaFrameFormat do
         Hr := this.m_IVideoMediaFrame.all.get_VideoFormat (m_ComRetVal'Access);
         Retval.m_IVideoMediaFrameFormat := new Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
         Retval.m_IVideoMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function get_SoftwareBitmap
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := this.m_IVideoMediaFrame.all.get_SoftwareBitmap (m_ComRetVal'Access);
         Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
         Retval.m_ISoftwareBitmap.all := m_ComRetVal;
      end return;
   end;

   function get_Direct3DSurface
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
   begin
      Hr := this.m_IVideoMediaFrame.all.get_Direct3DSurface (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CameraIntrinsics
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Media.Devices.Core.CameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.ICameraIntrinsics;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.CameraIntrinsics do
         Hr := this.m_IVideoMediaFrame.all.get_CameraIntrinsics (m_ComRetVal'Access);
         Retval.m_ICameraIntrinsics := new Windows.Media.Devices.Core.ICameraIntrinsics;
         Retval.m_ICameraIntrinsics.all := m_ComRetVal;
      end return;
   end;

   function get_InfraredMediaFrame
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.InfraredMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IInfraredMediaFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.InfraredMediaFrame do
         Hr := this.m_IVideoMediaFrame.all.get_InfraredMediaFrame (m_ComRetVal'Access);
         Retval.m_IInfraredMediaFrame := new Windows.Media.Capture.Frames.IInfraredMediaFrame;
         Retval.m_IInfraredMediaFrame.all := m_ComRetVal;
      end return;
   end;

   function get_DepthMediaFrame
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Media.Capture.Frames.DepthMediaFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IDepthMediaFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.DepthMediaFrame do
         Hr := this.m_IVideoMediaFrame.all.get_DepthMediaFrame (m_ComRetVal'Access);
         Retval.m_IDepthMediaFrame := new Windows.Media.Capture.Frames.IDepthMediaFrame;
         Retval.m_IDepthMediaFrame.all := m_ComRetVal;
      end return;
   end;

   function GetVideoFrame
   (
      this : in out VideoMediaFrame
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IVideoMediaFrame.all.GetVideoFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoMediaFrameFormat

   procedure Initialize (this : in out VideoMediaFrameFormat) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoMediaFrameFormat) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoMediaFrameFormat, IVideoMediaFrameFormat_Ptr);
   begin
      if this.m_IVideoMediaFrameFormat /= null then
         if this.m_IVideoMediaFrameFormat.all /= null then
            RefCount := this.m_IVideoMediaFrameFormat.all.Release;
            Free (this.m_IVideoMediaFrameFormat);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoMediaFrameFormat

   function get_MediaFrameFormat
   (
      this : in out VideoMediaFrameFormat
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameFormat do
         Hr := this.m_IVideoMediaFrameFormat.all.get_MediaFrameFormat (m_ComRetVal'Access);
         Retval.m_IMediaFrameFormat := new Windows.Media.Capture.Frames.IMediaFrameFormat;
         Retval.m_IMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function get_DepthFormat
   (
      this : in out VideoMediaFrameFormat
   )
   return WinRt.Windows.Media.Capture.Frames.DepthMediaFrameFormat'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IDepthMediaFrameFormat;
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.DepthMediaFrameFormat do
         Hr := this.m_IVideoMediaFrameFormat.all.get_DepthFormat (m_ComRetVal'Access);
         Retval.m_IDepthMediaFrameFormat := new Windows.Media.Capture.Frames.IDepthMediaFrameFormat;
         Retval.m_IDepthMediaFrameFormat.all := m_ComRetVal;
      end return;
   end;

   function get_Width
   (
      this : in out VideoMediaFrameFormat
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVideoMediaFrameFormat.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out VideoMediaFrameFormat
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVideoMediaFrameFormat.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

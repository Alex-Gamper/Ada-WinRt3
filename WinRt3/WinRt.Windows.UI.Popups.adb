--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Popups is

   package IAsyncOperation_IUICommand is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Popups.IUICommand);
   package AsyncOperationCompletedHandler_IUICommand is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Popups.IUICommand);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MessageDialog

   procedure Initialize (this : in out MessageDialog) is
   begin
      null;
   end;

   procedure Finalize (this : in out MessageDialog) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMessageDialog, IMessageDialog_Ptr);
   begin
      if this.m_IMessageDialog /= null then
         if this.m_IMessageDialog.all /= null then
            RefCount := this.m_IMessageDialog.all.Release;
            Free (this.m_IMessageDialog);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MessageDialog

   function Constructor
   (
      content : WinRt.WString
   )
   return MessageDialog is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.MessageDialog");
      m_Factory    : access IMessageDialogFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Popups.IMessageDialog;
      HStr_content : WinRt.HString := To_HString (content);
   begin
      return RetVal : MessageDialog do
         Hr := RoGetActivationFactory (m_hString, IID_IMessageDialogFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_content, m_ComRetVal'Access);
            Retval.m_IMessageDialog := new Windows.UI.Popups.IMessageDialog;
            Retval.m_IMessageDialog.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_content);
      end return;
   end;

   function Constructor
   (
      content : WinRt.WString;
      title : WinRt.WString
   )
   return MessageDialog is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.MessageDialog");
      m_Factory    : access IMessageDialogFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Popups.IMessageDialog;
      HStr_content : WinRt.HString := To_HString (content);
      HStr_title : WinRt.HString := To_HString (title);
   begin
      return RetVal : MessageDialog do
         Hr := RoGetActivationFactory (m_hString, IID_IMessageDialogFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTitle (HStr_content, HStr_title, m_ComRetVal'Access);
            Retval.m_IMessageDialog := new Windows.UI.Popups.IMessageDialog;
            Retval.m_IMessageDialog.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_content);
         Hr := WindowsDeleteString (HStr_title);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MessageDialog

   function get_Title
   (
      this : in out MessageDialog
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMessageDialog.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out MessageDialog;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMessageDialog.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Commands
   (
      this : in out MessageDialog
   )
   return IVector_IUICommand.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUICommand.Kind;
   begin
      Hr := this.m_IMessageDialog.all.get_Commands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUICommand (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DefaultCommandIndex
   (
      this : in out MessageDialog
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMessageDialog.all.get_DefaultCommandIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DefaultCommandIndex
   (
      this : in out MessageDialog;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMessageDialog.all.put_DefaultCommandIndex (value);
   end;

   function get_CancelCommandIndex
   (
      this : in out MessageDialog
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMessageDialog.all.get_CancelCommandIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CancelCommandIndex
   (
      this : in out MessageDialog;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMessageDialog.all.put_CancelCommandIndex (value);
   end;

   function get_Content
   (
      this : in out MessageDialog
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMessageDialog.all.get_Content (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Content
   (
      this : in out MessageDialog;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMessageDialog.all.put_Content (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function ShowAsync
   (
      this : in out MessageDialog
   )
   return WinRt.Windows.UI.Popups.IUICommand is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IUICommand.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IUICommand.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Popups.IUICommand;
      m_IID            : aliased WinRt.IID := (3094807861, 27211, 21169, (181, 120, 243, 205, 197, 0, 122, 31 )); -- Windows.UI.Popups.IUICommand;
      m_HandlerIID     : aliased WinRt.IID := (3711171931, 41549, 23108, (145, 254, 221, 100, 65, 119, 1, 3 ));
      m_Handler        : AsyncOperationCompletedHandler_IUICommand.Kind := new AsyncOperationCompletedHandler_IUICommand.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IUICommand.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IUICommand.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IUICommand.Kind_Delegate, AsyncOperationCompletedHandler_IUICommand.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMessageDialog.all.ShowAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Options
   (
      this : in out MessageDialog
   )
   return WinRt.Windows.UI.Popups.MessageDialogOptions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Popups.MessageDialogOptions;
   begin
      Hr := this.m_IMessageDialog.all.get_Options (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Options
   (
      this : in out MessageDialog;
      value : Windows.UI.Popups.MessageDialogOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMessageDialog.all.put_Options (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PopupMenu

   procedure Initialize (this : in out PopupMenu) is
   begin
      null;
   end;

   procedure Finalize (this : in out PopupMenu) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPopupMenu, IPopupMenu_Ptr);
   begin
      if this.m_IPopupMenu /= null then
         if this.m_IPopupMenu.all /= null then
            RefCount := this.m_IPopupMenu.all.Release;
            Free (this.m_IPopupMenu);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PopupMenu

   function Constructor return PopupMenu is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.PopupMenu");
      m_ComRetVal  : aliased Windows.UI.Popups.IPopupMenu;
   begin
      return RetVal : PopupMenu do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPopupMenu := new Windows.UI.Popups.IPopupMenu;
            Retval.m_IPopupMenu.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PopupMenu

   function get_Commands
   (
      this : in out PopupMenu
   )
   return IVector_IUICommand.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUICommand.Kind;
   begin
      Hr := this.m_IPopupMenu.all.get_Commands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUICommand (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ShowAsync
   (
      this : in out PopupMenu;
      invocationPoint : Windows.Foundation.Point
   )
   return WinRt.Windows.UI.Popups.IUICommand is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IUICommand.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IUICommand.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Popups.IUICommand;
      m_IID            : aliased WinRt.IID := (3094807861, 27211, 21169, (181, 120, 243, 205, 197, 0, 122, 31 )); -- Windows.UI.Popups.IUICommand;
      m_HandlerIID     : aliased WinRt.IID := (3711171931, 41549, 23108, (145, 254, 221, 100, 65, 119, 1, 3 ));
      m_Handler        : AsyncOperationCompletedHandler_IUICommand.Kind := new AsyncOperationCompletedHandler_IUICommand.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IUICommand.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IUICommand.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IUICommand.Kind_Delegate, AsyncOperationCompletedHandler_IUICommand.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPopupMenu.all.ShowAsync (invocationPoint, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ShowForSelectionAsync
   (
      this : in out PopupMenu;
      selection : Windows.Foundation.Rect
   )
   return WinRt.Windows.UI.Popups.IUICommand is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IUICommand.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IUICommand.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Popups.IUICommand;
      m_IID            : aliased WinRt.IID := (3094807861, 27211, 21169, (181, 120, 243, 205, 197, 0, 122, 31 )); -- Windows.UI.Popups.IUICommand;
      m_HandlerIID     : aliased WinRt.IID := (3711171931, 41549, 23108, (145, 254, 221, 100, 65, 119, 1, 3 ));
      m_Handler        : AsyncOperationCompletedHandler_IUICommand.Kind := new AsyncOperationCompletedHandler_IUICommand.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IUICommand.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IUICommand.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IUICommand.Kind_Delegate, AsyncOperationCompletedHandler_IUICommand.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPopupMenu.all.ShowForSelectionAsync (selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ShowForSelectionAsync
   (
      this : in out PopupMenu;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   )
   return WinRt.Windows.UI.Popups.IUICommand is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IUICommand.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IUICommand.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Popups.IUICommand;
      m_IID            : aliased WinRt.IID := (3094807861, 27211, 21169, (181, 120, 243, 205, 197, 0, 122, 31 )); -- Windows.UI.Popups.IUICommand;
      m_HandlerIID     : aliased WinRt.IID := (3711171931, 41549, 23108, (145, 254, 221, 100, 65, 119, 1, 3 ));
      m_Handler        : AsyncOperationCompletedHandler_IUICommand.Kind := new AsyncOperationCompletedHandler_IUICommand.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IUICommand.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IUICommand.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IUICommand.Kind_Delegate, AsyncOperationCompletedHandler_IUICommand.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPopupMenu.all.ShowForSelectionAsync (selection, preferredPlacement, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UICommand

   procedure Initialize (this : in out UICommand) is
   begin
      null;
   end;

   procedure Finalize (this : in out UICommand) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUICommand, IUICommand_Ptr);
   begin
      if this.m_IUICommand /= null then
         if this.m_IUICommand.all /= null then
            RefCount := this.m_IUICommand.all.Release;
            Free (this.m_IUICommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UICommand

   function Constructor return UICommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.UICommand");
      m_ComRetVal  : aliased Windows.UI.Popups.IUICommand;
   begin
      return RetVal : UICommand do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      label : WinRt.WString
   )
   return UICommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.UICommand");
      m_Factory    : access IUICommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Popups.IUICommand;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : UICommand do
         Hr := RoGetActivationFactory (m_hString, IID_IUICommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_label, m_ComRetVal'Access);
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   function Constructor
   (
      label : WinRt.WString;
      action : Windows.UI.Popups.UICommandInvokedHandler
   )
   return UICommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.UICommand");
      m_Factory    : access IUICommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Popups.IUICommand;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : UICommand do
         Hr := RoGetActivationFactory (m_hString, IID_IUICommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithHandler (HStr_label, action, m_ComRetVal'Access);
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   function Constructor
   (
      label : WinRt.WString;
      action : Windows.UI.Popups.UICommandInvokedHandler;
      commandId : WinRt.IInspectable
   )
   return UICommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.UICommand");
      m_Factory    : access IUICommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Popups.IUICommand;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : UICommand do
         Hr := RoGetActivationFactory (m_hString, IID_IUICommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithHandlerAndId (HStr_label, action, commandId, m_ComRetVal'Access);
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UICommand

   function get_Label
   (
      this : in out UICommand
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUICommand.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out UICommand;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUICommand.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Invoked
   (
      this : in out UICommand
   )
   return WinRt.Windows.UI.Popups.UICommandInvokedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Popups.UICommandInvokedHandler;
   begin
      Hr := this.m_IUICommand.all.get_Invoked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Invoked
   (
      this : in out UICommand;
      value : Windows.UI.Popups.UICommandInvokedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUICommand.all.put_Invoked (value);
   end;

   function get_Id
   (
      this : in out UICommand
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IUICommand.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out UICommand;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUICommand.all.put_Id (value);
   end;

   -----------------------------------------------------------------------------
   -- Delegate UICommandInvokedHandler

   function Invoke
   (
      this : access UICommandInvokedHandler_Delegate;
      command : Windows.UI.Popups.IUICommand
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (command);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UICommandSeparator

   procedure Initialize (this : in out UICommandSeparator) is
   begin
      null;
   end;

   procedure Finalize (this : in out UICommandSeparator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUICommand, IUICommand_Ptr);
   begin
      if this.m_IUICommand /= null then
         if this.m_IUICommand.all /= null then
            RefCount := this.m_IUICommand.all.Release;
            Free (this.m_IUICommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UICommandSeparator

   function Constructor return UICommandSeparator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Popups.UICommandSeparator");
      m_ComRetVal  : aliased Windows.UI.Popups.IUICommand;
   begin
      return RetVal : UICommandSeparator do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UICommandSeparator

   function get_Label
   (
      this : in out UICommandSeparator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUICommand.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out UICommandSeparator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUICommand.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Invoked
   (
      this : in out UICommandSeparator
   )
   return WinRt.Windows.UI.Popups.UICommandInvokedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Popups.UICommandInvokedHandler;
   begin
      Hr := this.m_IUICommand.all.get_Invoked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Invoked
   (
      this : in out UICommandSeparator;
      value : Windows.UI.Popups.UICommandInvokedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUICommand.all.put_Invoked (value);
   end;

   function get_Id
   (
      this : in out UICommandSeparator
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IUICommand.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out UICommandSeparator;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUICommand.all.put_Id (value);
   end;

end;

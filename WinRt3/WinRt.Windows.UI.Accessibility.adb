--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Accessibility is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScreenReaderPositionChangedEventArgs

   procedure Initialize (this : in out ScreenReaderPositionChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScreenReaderPositionChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScreenReaderPositionChangedEventArgs, IScreenReaderPositionChangedEventArgs_Ptr);
   begin
      if this.m_IScreenReaderPositionChangedEventArgs /= null then
         if this.m_IScreenReaderPositionChangedEventArgs.all /= null then
            RefCount := this.m_IScreenReaderPositionChangedEventArgs.all.Release;
            Free (this.m_IScreenReaderPositionChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScreenReaderPositionChangedEventArgs

   function get_ScreenPositionInRawPixels
   (
      this : in out ScreenReaderPositionChangedEventArgs
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IScreenReaderPositionChangedEventArgs.all.get_ScreenPositionInRawPixels (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsReadingText
   (
      this : in out ScreenReaderPositionChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IScreenReaderPositionChangedEventArgs.all.get_IsReadingText (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScreenReaderService

   procedure Initialize (this : in out ScreenReaderService) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScreenReaderService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScreenReaderService, IScreenReaderService_Ptr);
   begin
      if this.m_IScreenReaderService /= null then
         if this.m_IScreenReaderService.all /= null then
            RefCount := this.m_IScreenReaderService.all.Release;
            Free (this.m_IScreenReaderService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScreenReaderService

   function Constructor return ScreenReaderService is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Accessibility.ScreenReaderService");
      m_ComRetVal  : aliased Windows.UI.Accessibility.IScreenReaderService;
   begin
      return RetVal : ScreenReaderService do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IScreenReaderService := new Windows.UI.Accessibility.IScreenReaderService;
            Retval.m_IScreenReaderService.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScreenReaderService

   function get_CurrentScreenReaderPosition
   (
      this : in out ScreenReaderService
   )
   return WinRt.Windows.UI.Accessibility.ScreenReaderPositionChangedEventArgs'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Accessibility.IScreenReaderPositionChangedEventArgs;
   begin
      return RetVal : WinRt.Windows.UI.Accessibility.ScreenReaderPositionChangedEventArgs do
         Hr := this.m_IScreenReaderService.all.get_CurrentScreenReaderPosition (m_ComRetVal'Access);
         Retval.m_IScreenReaderPositionChangedEventArgs := new Windows.UI.Accessibility.IScreenReaderPositionChangedEventArgs;
         Retval.m_IScreenReaderPositionChangedEventArgs.all := m_ComRetVal;
      end return;
   end;

   function add_ScreenReaderPositionChanged
   (
      this : in out ScreenReaderService;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IScreenReaderService.all.add_ScreenReaderPositionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ScreenReaderPositionChanged
   (
      this : in out ScreenReaderService;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScreenReaderService.all.remove_ScreenReaderPositionChanged (token);
   end;

end;

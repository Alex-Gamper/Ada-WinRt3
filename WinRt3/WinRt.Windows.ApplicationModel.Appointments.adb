--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with WinRt.Windows.UI;
with WinRt.Windows.UI.Popups;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Appointments is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_Appointment is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Appointments.IAppointment);
   package AsyncOperationCompletedHandler_Appointment is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Appointments.IAppointment);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_AppointmentStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore);
   package AsyncOperationCompletedHandler_AppointmentStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore);

   package IAsyncOperation_AppointmentCalendar is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar);
   package AsyncOperationCompletedHandler_AppointmentCalendar is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar);

   package IAsyncOperation_AppointmentConflictResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Appointments.IAppointmentConflictResult);
   package AsyncOperationCompletedHandler_AppointmentConflictResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Appointments.IAppointmentConflictResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Appointment

   procedure Initialize (this : in out Appointment) is
   begin
      null;
   end;

   procedure Finalize (this : in out Appointment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointment, IAppointment_Ptr);
   begin
      if this.m_IAppointment /= null then
         if this.m_IAppointment.all /= null then
            RefCount := this.m_IAppointment.all.Release;
            Free (this.m_IAppointment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Appointment

   function Constructor return Appointment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.Appointment");
      m_ComRetVal  : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : Appointment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
            Retval.m_IAppointment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Appointment

   function get_StartTime
   (
      this : in out Appointment
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointment.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartTime
   (
      this : in out Appointment;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_StartTime (value);
   end;

   function get_Duration
   (
      this : in out Appointment
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppointment.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out Appointment;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_Duration (value);
   end;

   function get_Location
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointment.all.get_Location (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Location
   (
      this : in out Appointment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppointment.all.put_Location (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subject
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointment.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subject
   (
      this : in out Appointment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppointment.all.put_Subject (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Details
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointment.all.get_Details (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Details
   (
      this : in out Appointment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppointment.all.put_Details (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Reminder
   (
      this : in out Appointment
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAppointment.all.get_Reminder (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Reminder
   (
      this : in out Appointment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_Reminder (value);
   end;

   function get_Organizer
   (
      this : in out Appointment
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentOrganizer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentParticipant;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentOrganizer do
         Hr := this.m_IAppointment.all.get_Organizer (m_ComRetVal'Access);
         Retval.m_IAppointmentParticipant := new Windows.ApplicationModel.Appointments.IAppointmentParticipant;
         Retval.m_IAppointmentParticipant.all := m_ComRetVal;
      end return;
   end;

   procedure put_Organizer
   (
      this : in out Appointment;
      value : Windows.ApplicationModel.Appointments.AppointmentOrganizer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_Organizer (value.m_IAppointmentParticipant.all);
   end;

   function get_Invitees
   (
      this : in out Appointment
   )
   return IVector_IAppointmentInvitee.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAppointmentInvitee.Kind;
   begin
      Hr := this.m_IAppointment.all.get_Invitees (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IAppointmentInvitee (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Recurrence
   (
      this : in out Appointment
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentRecurrence'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentRecurrence;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentRecurrence do
         Hr := this.m_IAppointment.all.get_Recurrence (m_ComRetVal'Access);
         Retval.m_IAppointmentRecurrence := new Windows.ApplicationModel.Appointments.IAppointmentRecurrence;
         Retval.m_IAppointmentRecurrence.all := m_ComRetVal;
      end return;
   end;

   procedure put_Recurrence
   (
      this : in out Appointment;
      value : Windows.ApplicationModel.Appointments.AppointmentRecurrence'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_Recurrence (value.m_IAppointmentRecurrence.all);
   end;

   function get_BusyStatus
   (
      this : in out Appointment
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentBusyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentBusyStatus;
   begin
      Hr := this.m_IAppointment.all.get_BusyStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BusyStatus
   (
      this : in out Appointment;
      value : Windows.ApplicationModel.Appointments.AppointmentBusyStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_BusyStatus (value);
   end;

   function get_AllDay
   (
      this : in out Appointment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppointment.all.get_AllDay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllDay
   (
      this : in out Appointment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_AllDay (value);
   end;

   function get_Sensitivity
   (
      this : in out Appointment
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentSensitivity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentSensitivity;
   begin
      Hr := this.m_IAppointment.all.get_Sensitivity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Sensitivity
   (
      this : in out Appointment;
      value : Windows.ApplicationModel.Appointments.AppointmentSensitivity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_Sensitivity (value);
   end;

   function get_Uri
   (
      this : in out Appointment
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAppointment.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out Appointment;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointment.all.put_Uri (value.m_IUriRuntimeClass.all);
   end;

   function get_LocalId
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_LocalId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CalendarId
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_CalendarId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RoamingId
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_RoamingId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RoamingId
   (
      this : in out Appointment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_RoamingId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_OriginalStartTime
   (
      this : in out Appointment
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_OriginalStartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsResponseRequested
   (
      this : in out Appointment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_IsResponseRequested (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsResponseRequested
   (
      this : in out Appointment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_IsResponseRequested (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AllowNewTimeProposal
   (
      this : in out Appointment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_AllowNewTimeProposal (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowNewTimeProposal
   (
      this : in out Appointment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_AllowNewTimeProposal (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OnlineMeetingLink
   (
      this : in out Appointment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_OnlineMeetingLink (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_OnlineMeetingLink
   (
      this : in out Appointment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_OnlineMeetingLink (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ReplyTime
   (
      this : in out Appointment
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_ReplyTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ReplyTime
   (
      this : in out Appointment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_ReplyTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_UserResponse
   (
      this : in out Appointment
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentParticipantResponse is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentParticipantResponse;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_UserResponse (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_UserResponse
   (
      this : in out Appointment;
      value : Windows.ApplicationModel.Appointments.AppointmentParticipantResponse
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_UserResponse (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_HasInvitees
   (
      this : in out Appointment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_HasInvitees (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCanceledMeeting
   (
      this : in out Appointment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_IsCanceledMeeting (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsCanceledMeeting
   (
      this : in out Appointment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_IsCanceledMeeting (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsOrganizedByUser
   (
      this : in out Appointment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_IsOrganizedByUser (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsOrganizedByUser
   (
      this : in out Appointment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_IsOrganizedByUser (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ChangeNumber
   (
      this : in out Appointment
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_ChangeNumber (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RemoteChangeNumber
   (
      this : in out Appointment
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_RemoteChangeNumber (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RemoteChangeNumber
   (
      this : in out Appointment;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_RemoteChangeNumber (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DetailsKind
   (
      this : in out Appointment
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentDetailsKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentDetailsKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.get_DetailsKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DetailsKind
   (
      this : in out Appointment;
      value : Windows.ApplicationModel.Appointments.AppointmentDetailsKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointment3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointment_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointment3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointment3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointment.all);
      Hr := m_Interface.put_DetailsKind (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendar

   procedure Initialize (this : in out AppointmentCalendar) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendar, IAppointmentCalendar_Ptr);
   begin
      if this.m_IAppointmentCalendar /= null then
         if this.m_IAppointmentCalendar.all /= null then
            RefCount := this.m_IAppointmentCalendar.all.Release;
            Free (this.m_IAppointmentCalendar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendar

   function get_DisplayColor
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_DisplayColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayName
   (
      this : in out AppointmentCalendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out AppointmentCalendar;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppointmentCalendar.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LocalId
   (
      this : in out AppointmentCalendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_LocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsHidden
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_IsHidden (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OtherAppReadAccess
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_OtherAppReadAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppReadAccess
   (
      this : in out AppointmentCalendar;
      value : Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentCalendar.all.put_OtherAppReadAccess (value);
   end;

   function get_OtherAppWriteAccess
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_OtherAppWriteAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppWriteAccess
   (
      this : in out AppointmentCalendar;
      value : Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentCalendar.all.put_OtherAppWriteAccess (value);
   end;

   function get_SourceDisplayName
   (
      this : in out AppointmentCalendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_SourceDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SummaryCardView
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentSummaryCardView is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentSummaryCardView;
   begin
      Hr := this.m_IAppointmentCalendar.all.get_SummaryCardView (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SummaryCardView
   (
      this : in out AppointmentCalendar;
      value : Windows.ApplicationModel.Appointments.AppointmentSummaryCardView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentCalendar.all.put_SummaryCardView (value);
   end;

   function FindAppointmentsAsync
   (
      this : in out AppointmentCalendar;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindAppointmentsAsync (rangeStart, rangeLength, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindAppointmentsAsync
   (
      this : in out AppointmentCalendar;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan;
      options : Windows.ApplicationModel.Appointments.FindAppointmentsOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindAppointmentsAsync (rangeStart, rangeLength, options.m_IFindAppointmentsOptions.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindExceptionsFromMasterAsync
   (
      this : in out AppointmentCalendar;
      masterLocalId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_masterLocalId : WinRt.HString := To_HString (masterLocalId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2279698860, 21502, 20714, (190, 179, 5, 137, 153, 58, 201, 132 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1625424444, 49833, 23868, (134, 177, 205, 34, 28, 48, 138, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindExceptionsFromMasterAsync (HStr_masterLocalId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_masterLocalId);
      return m_RetVal;
   end;

   function FindAllInstancesAsync
   (
      this : in out AppointmentCalendar;
      masterLocalId : WinRt.WString;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_masterLocalId : WinRt.HString := To_HString (masterLocalId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindAllInstancesAsync (HStr_masterLocalId, rangeStart, rangeLength, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_masterLocalId);
      return m_RetVal;
   end;

   function FindAllInstancesAsync
   (
      this : in out AppointmentCalendar;
      masterLocalId : WinRt.WString;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan;
      pOptions : Windows.ApplicationModel.Appointments.FindAppointmentsOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_masterLocalId : WinRt.HString := To_HString (masterLocalId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindAllInstancesAsync (HStr_masterLocalId, rangeStart, rangeLength, pOptions.m_IFindAppointmentsOptions.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_masterLocalId);
      return m_RetVal;
   end;

   function GetAppointmentAsync
   (
      this : in out AppointmentCalendar;
      localId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Appointment.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Appointment.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointment;
      m_IID            : aliased WinRt.IID := (207041272, 23481, 23475, (147, 229, 184, 126, 67, 224, 205, 106 )); -- Windows.ApplicationModel.Appointments.Appointment;
      m_HandlerIID     : aliased WinRt.IID := (3057708292, 37681, 23336, (146, 71, 1, 70, 188, 245, 183, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_Appointment.Kind := new AsyncOperationCompletedHandler_Appointment.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Appointment.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Appointment.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Appointment.Kind_Delegate, AsyncOperationCompletedHandler_Appointment.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentCalendar.all.GetAppointmentAsync (HStr_localId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
                  Retval.m_IAppointment.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_localId);
      end return;
   end;

   function GetAppointmentInstanceAsync
   (
      this : in out AppointmentCalendar;
      localId : WinRt.WString;
      instanceStartTime : Windows.Foundation.DateTime
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Appointment.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Appointment.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointment;
      m_IID            : aliased WinRt.IID := (207041272, 23481, 23475, (147, 229, 184, 126, 67, 224, 205, 106 )); -- Windows.ApplicationModel.Appointments.Appointment;
      m_HandlerIID     : aliased WinRt.IID := (3057708292, 37681, 23336, (146, 71, 1, 70, 188, 245, 183, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_Appointment.Kind := new AsyncOperationCompletedHandler_Appointment.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Appointment.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Appointment.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Appointment.Kind_Delegate, AsyncOperationCompletedHandler_Appointment.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentCalendar.all.GetAppointmentInstanceAsync (HStr_localId, instanceStartTime, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
                  Retval.m_IAppointment.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_localId);
      end return;
   end;

   function FindUnexpandedAppointmentsAsync
   (
      this : in out AppointmentCalendar
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindUnexpandedAppointmentsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindUnexpandedAppointmentsAsync
   (
      this : in out AppointmentCalendar;
      options : Windows.ApplicationModel.Appointments.FindAppointmentsOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendar.all.FindUnexpandedAppointmentsAsync (options.m_IFindAppointmentsOptions.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure DeleteAsync
   (
      this : in out AppointmentCalendar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendar.all.DeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SaveAsync
   (
      this : in out AppointmentCalendar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendar.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteAppointmentAsync
   (
      this : in out AppointmentCalendar;
      localId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendar.all.DeleteAppointmentAsync (HStr_localId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
   end;

   procedure DeleteAppointmentInstanceAsync
   (
      this : in out AppointmentCalendar;
      localId : WinRt.WString;
      instanceStartTime : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendar.all.DeleteAppointmentInstanceAsync (HStr_localId, instanceStartTime, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
   end;

   procedure SaveAppointmentAsync
   (
      this : in out AppointmentCalendar;
      pAppointment : Windows.ApplicationModel.Appointments.Appointment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendar.all.SaveAppointmentAsync (pAppointment.m_IAppointment.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_SyncManager
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager do
         m_Interface := QInterface (this.m_IAppointmentCalendar.all);
         Hr := m_Interface.get_SyncManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAppointmentCalendarSyncManager := new Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager;
         Retval.m_IAppointmentCalendarSyncManager.all := m_ComRetVal;
      end return;
   end;

   function get_RemoteId
   (
      this : in out AppointmentCalendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_RemoteId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out AppointmentCalendar;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_RemoteId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure put_DisplayColor
   (
      this : in out AppointmentCalendar;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_DisplayColor (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_IsHidden
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_IsHidden (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_UserDataAccountId
   (
      this : in out AppointmentCalendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_UserDataAccountId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CanCreateOrUpdateAppointments
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_CanCreateOrUpdateAppointments (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanCreateOrUpdateAppointments
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_CanCreateOrUpdateAppointments (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanCancelMeetings
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_CanCancelMeetings (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanCancelMeetings
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_CanCancelMeetings (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanForwardMeetings
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_CanForwardMeetings (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanForwardMeetings
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_CanForwardMeetings (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanProposeNewTimeForMeetings
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_CanProposeNewTimeForMeetings (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanProposeNewTimeForMeetings
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_CanProposeNewTimeForMeetings (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanUpdateMeetingResponses
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_CanUpdateMeetingResponses (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanUpdateMeetingResponses
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_CanUpdateMeetingResponses (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanNotifyInvitees
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_CanNotifyInvitees (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanNotifyInvitees
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_CanNotifyInvitees (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MustNofityInvitees
   (
      this : in out AppointmentCalendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.get_MustNofityInvitees (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MustNofityInvitees
   (
      this : in out AppointmentCalendar;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.put_MustNofityInvitees (value);
      m_RefCount := m_Interface.Release;
   end;

   function TryCreateOrUpdateAppointmentAsync
   (
      this : in out AppointmentCalendar;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      notifyInvitees : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.TryCreateOrUpdateAppointmentAsync (appointment_p.m_IAppointment.all, notifyInvitees, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryCancelMeetingAsync
   (
      this : in out AppointmentCalendar;
      meeting : Windows.ApplicationModel.Appointments.Appointment'Class;
      subject : WinRt.WString;
      comment : WinRt.WString;
      notifyInvitees : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subject : WinRt.HString := To_HString (subject);
      HStr_comment : WinRt.HString := To_HString (comment);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.TryCancelMeetingAsync (meeting.m_IAppointment.all, HStr_subject, HStr_comment, notifyInvitees, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subject);
      Hr := WindowsDeleteString (HStr_comment);
      return m_RetVal;
   end;

   function TryForwardMeetingAsync
   (
      this : in out AppointmentCalendar;
      meeting : Windows.ApplicationModel.Appointments.Appointment'Class;
      invitees : GenericObject;
      subject : WinRt.WString;
      forwardHeader : WinRt.WString;
      comment : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subject : WinRt.HString := To_HString (subject);
      HStr_forwardHeader : WinRt.HString := To_HString (forwardHeader);
      HStr_comment : WinRt.HString := To_HString (comment);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.TryForwardMeetingAsync (meeting.m_IAppointment.all, invitees, HStr_subject, HStr_forwardHeader, HStr_comment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subject);
      Hr := WindowsDeleteString (HStr_forwardHeader);
      Hr := WindowsDeleteString (HStr_comment);
      return m_RetVal;
   end;

   function TryProposeNewTimeForMeetingAsync
   (
      this : in out AppointmentCalendar;
      meeting : Windows.ApplicationModel.Appointments.Appointment'Class;
      newStartTime : Windows.Foundation.DateTime;
      newDuration : Windows.Foundation.TimeSpan;
      subject : WinRt.WString;
      comment : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subject : WinRt.HString := To_HString (subject);
      HStr_comment : WinRt.HString := To_HString (comment);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.TryProposeNewTimeForMeetingAsync (meeting.m_IAppointment.all, newStartTime, newDuration, HStr_subject, HStr_comment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subject);
      Hr := WindowsDeleteString (HStr_comment);
      return m_RetVal;
   end;

   function TryUpdateMeetingResponseAsync
   (
      this : in out AppointmentCalendar;
      meeting : Windows.ApplicationModel.Appointments.Appointment'Class;
      response : Windows.ApplicationModel.Appointments.AppointmentParticipantResponse;
      subject : WinRt.WString;
      comment : WinRt.WString;
      sendUpdate : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subject : WinRt.HString := To_HString (subject);
      HStr_comment : WinRt.HString := To_HString (comment);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.TryUpdateMeetingResponseAsync (meeting.m_IAppointment.all, response, HStr_subject, HStr_comment, sendUpdate, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subject);
      Hr := WindowsDeleteString (HStr_comment);
      return m_RetVal;
   end;

   procedure RegisterSyncManagerAsync
   (
      this : in out AppointmentCalendar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendar3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendar.all);
      Hr := m_Interface.RegisterSyncManagerAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarSyncManager

   procedure Initialize (this : in out AppointmentCalendarSyncManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarSyncManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarSyncManager, IAppointmentCalendarSyncManager_Ptr);
   begin
      if this.m_IAppointmentCalendarSyncManager /= null then
         if this.m_IAppointmentCalendarSyncManager.all /= null then
            RefCount := this.m_IAppointmentCalendarSyncManager.all.Release;
            Free (this.m_IAppointmentCalendarSyncManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarSyncManager

   function get_Status
   (
      this : in out AppointmentCalendarSyncManager
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus;
   begin
      Hr := this.m_IAppointmentCalendarSyncManager.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastSuccessfulSyncTime
   (
      this : in out AppointmentCalendarSyncManager
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointmentCalendarSyncManager.all.get_LastSuccessfulSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastAttemptedSyncTime
   (
      this : in out AppointmentCalendarSyncManager
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointmentCalendarSyncManager.all.get_LastAttemptedSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function SyncAsync
   (
      this : in out AppointmentCalendarSyncManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentCalendarSyncManager.all.SyncAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_SyncStatusChanged
   (
      this : in out AppointmentCalendarSyncManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentCalendarSyncManager.all.add_SyncStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SyncStatusChanged
   (
      this : in out AppointmentCalendarSyncManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentCalendarSyncManager.all.remove_SyncStatusChanged (token);
   end;

   procedure put_Status
   (
      this : in out AppointmentCalendarSyncManager;
      value : Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendarSyncManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendarSyncManager.all);
      Hr := m_Interface.put_Status (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_LastSuccessfulSyncTime
   (
      this : in out AppointmentCalendarSyncManager;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendarSyncManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendarSyncManager.all);
      Hr := m_Interface.put_LastSuccessfulSyncTime (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_LastAttemptedSyncTime
   (
      this : in out AppointmentCalendarSyncManager;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentCalendarSyncManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentCalendarSyncManager.all);
      Hr := m_Interface.put_LastAttemptedSyncTime (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentConflictResult

   procedure Initialize (this : in out AppointmentConflictResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentConflictResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentConflictResult, IAppointmentConflictResult_Ptr);
   begin
      if this.m_IAppointmentConflictResult /= null then
         if this.m_IAppointmentConflictResult.all /= null then
            RefCount := this.m_IAppointmentConflictResult.all.Release;
            Free (this.m_IAppointmentConflictResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentConflictResult

   function get_Type
   (
      this : in out AppointmentConflictResult
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentConflictType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentConflictType;
   begin
      Hr := this.m_IAppointmentConflictResult.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Date
   (
      this : in out AppointmentConflictResult
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointmentConflictResult.all.get_Date (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentException

   procedure Initialize (this : in out AppointmentException) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentException) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentException, IAppointmentException_Ptr);
   begin
      if this.m_IAppointmentException /= null then
         if this.m_IAppointmentException.all /= null then
            RefCount := this.m_IAppointmentException.all.Release;
            Free (this.m_IAppointmentException);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentException

   function get_Appointment
   (
      this : in out AppointmentException
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentException.all.get_Appointment (m_ComRetVal'Access);
         Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
         Retval.m_IAppointment.all := m_ComRetVal;
      end return;
   end;

   function get_ExceptionProperties
   (
      this : in out AppointmentException
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IAppointmentException.all.get_ExceptionProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsDeleted
   (
      this : in out AppointmentException
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppointmentException.all.get_IsDeleted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentInvitee

   procedure Initialize (this : in out AppointmentInvitee) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentInvitee) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentInvitee, IAppointmentInvitee_Ptr);
   begin
      if this.m_IAppointmentInvitee /= null then
         if this.m_IAppointmentInvitee.all /= null then
            RefCount := this.m_IAppointmentInvitee.all.Release;
            Free (this.m_IAppointmentInvitee);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppointmentInvitee

   function Constructor return AppointmentInvitee is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentInvitee");
      m_ComRetVal  : aliased Windows.ApplicationModel.Appointments.IAppointmentInvitee;
   begin
      return RetVal : AppointmentInvitee do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppointmentInvitee := new Windows.ApplicationModel.Appointments.IAppointmentInvitee;
            Retval.m_IAppointmentInvitee.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentInvitee

   function get_Role
   (
      this : in out AppointmentInvitee
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentParticipantRole is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentParticipantRole;
   begin
      Hr := this.m_IAppointmentInvitee.all.get_Role (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Role
   (
      this : in out AppointmentInvitee;
      value : Windows.ApplicationModel.Appointments.AppointmentParticipantRole
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentInvitee.all.put_Role (value);
   end;

   function get_Response
   (
      this : in out AppointmentInvitee
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentParticipantResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentParticipantResponse;
   begin
      Hr := this.m_IAppointmentInvitee.all.get_Response (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Response
   (
      this : in out AppointmentInvitee;
      value : Windows.ApplicationModel.Appointments.AppointmentParticipantResponse
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentInvitee.all.put_Response (value);
   end;

   function get_DisplayName
   (
      this : in out AppointmentInvitee
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentInvitee_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentParticipant'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentInvitee.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out AppointmentInvitee;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentInvitee_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentParticipant'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentInvitee.all);
      Hr := m_Interface.put_DisplayName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Address
   (
      this : in out AppointmentInvitee
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentInvitee_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentParticipant'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentInvitee.all);
      Hr := m_Interface.get_Address (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Address
   (
      this : in out AppointmentInvitee;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentInvitee_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentParticipant, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentParticipant'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentInvitee.all);
      Hr := m_Interface.put_Address (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppointmentManager is

      function ShowAddAppointmentAsync
      (
         appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
         selection : Windows.Foundation.Rect
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowAddAppointmentAsync (appointment_p.m_IAppointment.all, selection, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function ShowAddAppointmentAsync
      (
         appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowAddAppointmentAsync (appointment_p.m_IAppointment.all, selection, preferredPlacement, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function ShowReplaceAppointmentAsync
      (
         appointmentId : WinRt.WString;
         appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
         selection : Windows.Foundation.Rect
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowReplaceAppointmentAsync (HStr_appointmentId, appointment_p.m_IAppointment.all, selection, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function ShowReplaceAppointmentAsync
      (
         appointmentId : WinRt.WString;
         appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowReplaceAppointmentAsync (HStr_appointmentId, appointment_p.m_IAppointment.all, selection, preferredPlacement, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function ShowReplaceAppointmentAsync
      (
         appointmentId : WinRt.WString;
         appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement;
         instanceStartDate : Windows.Foundation.DateTime
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowReplaceAppointmentAsync (HStr_appointmentId, appointment_p.m_IAppointment.all, selection, preferredPlacement, instanceStartDate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function ShowRemoveAppointmentAsync
      (
         appointmentId : WinRt.WString;
         selection : Windows.Foundation.Rect
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowRemoveAppointmentAsync (HStr_appointmentId, selection, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
         return m_RetVal;
      end;

      function ShowRemoveAppointmentAsync
      (
         appointmentId : WinRt.WString;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowRemoveAppointmentAsync (HStr_appointmentId, selection, preferredPlacement, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
         return m_RetVal;
      end;

      function ShowRemoveAppointmentAsync
      (
         appointmentId : WinRt.WString;
         selection : Windows.Foundation.Rect;
         preferredPlacement : Windows.UI.Popups.Placement;
         instanceStartDate : Windows.Foundation.DateTime
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowRemoveAppointmentAsync (HStr_appointmentId, selection, preferredPlacement, instanceStartDate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
         return m_RetVal;
      end;

      procedure ShowTimeFrameAsync
      (
         timeToShow : Windows.Foundation.DateTime;
         duration : Windows.Foundation.TimeSpan
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowTimeFrameAsync (timeToShow, duration, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure ShowAppointmentDetailsAsync
      (
         appointmentId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowAppointmentDetailsAsync (HStr_appointmentId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
      end;

      procedure ShowAppointmentDetailsAsync
      (
         appointmentId : WinRt.WString;
         instanceStartDate : Windows.Foundation.DateTime
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowAppointmentDetailsAsync (HStr_appointmentId, instanceStartDate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appointmentId);
      end;

      function ShowEditNewAppointmentAsync
      (
         appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowEditNewAppointmentAsync (appointment_p.m_IAppointment.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function RequestStoreAsync
      (
         options : Windows.ApplicationModel.Appointments.AppointmentStoreAccessType
      )
      return WinRt.Windows.ApplicationModel.Appointments.AppointmentStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AppointmentStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AppointmentStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore;
         m_IID            : aliased WinRt.IID := (1668908053, 19743, 24519, (135, 41, 121, 162, 130, 188, 236, 164 )); -- Windows.ApplicationModel.Appointments.AppointmentStore;
         m_HandlerIID     : aliased WinRt.IID := (3167710506, 43890, 24355, (183, 213, 76, 44, 155, 212, 91, 121 ));
         m_Handler        : AsyncOperationCompletedHandler_AppointmentStore.Kind := new AsyncOperationCompletedHandler_AppointmentStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentStore.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentStore do
            Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (options, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IAppointmentStore := new Windows.ApplicationModel.Appointments.IAppointmentStore;
                        Retval.m_IAppointmentStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.ApplicationModel.Appointments.AppointmentManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentManagerForUser;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IAppointmentManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAppointmentManagerForUser := new Windows.ApplicationModel.Appointments.IAppointmentManagerForUser;
               Retval.m_IAppointmentManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end AppointmentManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentManagerForUser

   procedure Initialize (this : in out AppointmentManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentManagerForUser, IAppointmentManagerForUser_Ptr);
   begin
      if this.m_IAppointmentManagerForUser /= null then
         if this.m_IAppointmentManagerForUser.all /= null then
            RefCount := this.m_IAppointmentManagerForUser.all.Release;
            Free (this.m_IAppointmentManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentManagerForUser

   function ShowAddAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowAddAppointmentAsync (appointment_p.m_IAppointment.all, selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowAddAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowAddAppointmentAsync (appointment_p.m_IAppointment.all, selection, preferredPlacement, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowReplaceAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowReplaceAppointmentAsync (HStr_appointmentId, appointment_p.m_IAppointment.all, selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowReplaceAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowReplaceAppointmentAsync (HStr_appointmentId, appointment_p.m_IAppointment.all, selection, preferredPlacement, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowReplaceAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement;
      instanceStartDate : Windows.Foundation.DateTime
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowReplaceAppointmentAsync (HStr_appointmentId, appointment_p.m_IAppointment.all, selection, preferredPlacement, instanceStartDate, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowRemoveAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      selection : Windows.Foundation.Rect
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowRemoveAppointmentAsync (HStr_appointmentId, selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
      return m_RetVal;
   end;

   function ShowRemoveAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowRemoveAppointmentAsync (HStr_appointmentId, selection, preferredPlacement, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
      return m_RetVal;
   end;

   function ShowRemoveAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement;
      instanceStartDate : Windows.Foundation.DateTime
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowRemoveAppointmentAsync (HStr_appointmentId, selection, preferredPlacement, instanceStartDate, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
      return m_RetVal;
   end;

   procedure ShowTimeFrameAsync
   (
      this : in out AppointmentManagerForUser;
      timeToShow : Windows.Foundation.DateTime;
      duration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowTimeFrameAsync (timeToShow, duration, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ShowAppointmentDetailsAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowAppointmentDetailsAsync (HStr_appointmentId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
   end;

   procedure ShowAppointmentDetailsAsync
   (
      this : in out AppointmentManagerForUser;
      appointmentId : WinRt.WString;
      instanceStartDate : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appointmentId : WinRt.HString := To_HString (appointmentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowAppointmentDetailsAsync (HStr_appointmentId, instanceStartDate, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appointmentId);
   end;

   function ShowEditNewAppointmentAsync
   (
      this : in out AppointmentManagerForUser;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentManagerForUser.all.ShowEditNewAppointmentAsync (appointment_p.m_IAppointment.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function RequestStoreAsync
   (
      this : in out AppointmentManagerForUser;
      options : Windows.ApplicationModel.Appointments.AppointmentStoreAccessType
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentStore'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppointmentStore.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppointmentStore.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore;
      m_IID            : aliased WinRt.IID := (1668908053, 19743, 24519, (135, 41, 121, 162, 130, 188, 236, 164 )); -- Windows.ApplicationModel.Appointments.AppointmentStore;
      m_HandlerIID     : aliased WinRt.IID := (3167710506, 43890, 24355, (183, 213, 76, 44, 155, 212, 91, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_AppointmentStore.Kind := new AsyncOperationCompletedHandler_AppointmentStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentStore.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentStore.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentStore.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentStore.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentStore do
         Hr := this.m_IAppointmentManagerForUser.all.RequestStoreAsync (options, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointmentStore := new Windows.ApplicationModel.Appointments.IAppointmentStore;
                  Retval.m_IAppointmentStore.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_User
   (
      this : in out AppointmentManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IAppointmentManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentOrganizer

   procedure Initialize (this : in out AppointmentOrganizer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentOrganizer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentParticipant, IAppointmentParticipant_Ptr);
   begin
      if this.m_IAppointmentParticipant /= null then
         if this.m_IAppointmentParticipant.all /= null then
            RefCount := this.m_IAppointmentParticipant.all.Release;
            Free (this.m_IAppointmentParticipant);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppointmentOrganizer

   function Constructor return AppointmentOrganizer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentOrganizer");
      m_ComRetVal  : aliased Windows.ApplicationModel.Appointments.IAppointmentParticipant;
   begin
      return RetVal : AppointmentOrganizer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppointmentParticipant := new Windows.ApplicationModel.Appointments.IAppointmentParticipant;
            Retval.m_IAppointmentParticipant.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentOrganizer

   function get_DisplayName
   (
      this : in out AppointmentOrganizer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentParticipant.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out AppointmentOrganizer;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppointmentParticipant.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Address
   (
      this : in out AppointmentOrganizer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentParticipant.all.get_Address (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Address
   (
      this : in out AppointmentOrganizer;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppointmentParticipant.all.put_Address (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppointmentProperties is

      function get_ChangeNumber
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChangeNumber (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RemoteChangeNumber
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RemoteChangeNumber (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DetailsKind
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DetailsKind (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Subject
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Subject (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Location
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Location (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_StartTime
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StartTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Duration
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Duration (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Reminder
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Reminder (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BusyStatus
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BusyStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Sensitivity
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Sensitivity (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_OriginalStartTime
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OriginalStartTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IsResponseRequested
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsResponseRequested (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AllowNewTimeProposal
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowNewTimeProposal (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AllDay
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllDay (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Details
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Details (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_OnlineMeetingLink
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OnlineMeetingLink (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ReplyTime
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReplyTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Organizer
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Organizer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UserResponse
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UserResponse (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HasInvitees
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HasInvitees (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IsCanceledMeeting
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsCanceledMeeting (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IsOrganizedByUser
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsOrganizedByUser (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Recurrence
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Recurrence (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Uri
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Uri (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Invitees
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Invitees (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DefaultProperties
      return IVector_HString.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentProperties");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVector_HString.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DefaultProperties (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

   end AppointmentProperties;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentRecurrence

   procedure Initialize (this : in out AppointmentRecurrence) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentRecurrence) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentRecurrence, IAppointmentRecurrence_Ptr);
   begin
      if this.m_IAppointmentRecurrence /= null then
         if this.m_IAppointmentRecurrence.all /= null then
            RefCount := this.m_IAppointmentRecurrence.all.Release;
            Free (this.m_IAppointmentRecurrence);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppointmentRecurrence

   function Constructor return AppointmentRecurrence is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentRecurrence");
      m_ComRetVal  : aliased Windows.ApplicationModel.Appointments.IAppointmentRecurrence;
   begin
      return RetVal : AppointmentRecurrence do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppointmentRecurrence := new Windows.ApplicationModel.Appointments.IAppointmentRecurrence;
            Retval.m_IAppointmentRecurrence.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentRecurrence

   function get_Unit
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_Unit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Unit
   (
      this : in out AppointmentRecurrence;
      value : Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_Unit (value);
   end;

   function get_Occurrences
   (
      this : in out AppointmentRecurrence
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_Occurrences (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Occurrences
   (
      this : in out AppointmentRecurrence;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_Occurrences (value);
   end;

   function get_Until
   (
      this : in out AppointmentRecurrence
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_Until (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Until
   (
      this : in out AppointmentRecurrence;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_Until (value);
   end;

   function get_Interval
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_Interval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Interval
   (
      this : in out AppointmentRecurrence;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_Interval (value);
   end;

   function get_DaysOfWeek
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_DaysOfWeek (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DaysOfWeek
   (
      this : in out AppointmentRecurrence;
      value : Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_DaysOfWeek (value);
   end;

   function get_WeekOfMonth
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_WeekOfMonth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WeekOfMonth
   (
      this : in out AppointmentRecurrence;
      value : Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_WeekOfMonth (value);
   end;

   function get_Month
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_Month (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Month
   (
      this : in out AppointmentRecurrence;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_Month (value);
   end;

   function get_Day
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppointmentRecurrence.all.get_Day (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Day
   (
      this : in out AppointmentRecurrence;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentRecurrence.all.put_Day (value);
   end;

   function get_RecurrenceType
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.Windows.ApplicationModel.Appointments.RecurrenceType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.RecurrenceType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentRecurrence2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentRecurrence.all);
      Hr := m_Interface.get_RecurrenceType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_TimeZone
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentRecurrence2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentRecurrence.all);
      Hr := m_Interface.get_TimeZone (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TimeZone
   (
      this : in out AppointmentRecurrence;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentRecurrence2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentRecurrence.all);
      Hr := m_Interface.put_TimeZone (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CalendarIdentifier
   (
      this : in out AppointmentRecurrence
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentRecurrence3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentRecurrence3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentRecurrence.all);
      Hr := m_Interface.get_CalendarIdentifier (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStore

   procedure Initialize (this : in out AppointmentStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStore, IAppointmentStore_Ptr);
   begin
      if this.m_IAppointmentStore /= null then
         if this.m_IAppointmentStore.all /= null then
            RefCount := this.m_IAppointmentStore.all.Release;
            Free (this.m_IAppointmentStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStore

   function get_ChangeTracker
   (
      this : in out AppointmentStore
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker do
         Hr := this.m_IAppointmentStore.all.get_ChangeTracker (m_ComRetVal'Access);
         Retval.m_IAppointmentStoreChangeTracker := new Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker;
         Retval.m_IAppointmentStoreChangeTracker.all := m_ComRetVal;
      end return;
   end;

   function CreateAppointmentCalendarAsync
   (
      this : in out AppointmentStore;
      name : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppointmentCalendar.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppointmentCalendar.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar;
      m_IID            : aliased WinRt.IID := (1806793365, 37262, 23248, (187, 194, 188, 197, 250, 31, 249, 54 )); -- Windows.ApplicationModel.Appointments.AppointmentCalendar;
      m_HandlerIID     : aliased WinRt.IID := (1838986833, 23286, 20912, (156, 211, 69, 221, 81, 241, 121, 73 ));
      m_Handler        : AsyncOperationCompletedHandler_AppointmentCalendar.Kind := new AsyncOperationCompletedHandler_AppointmentCalendar.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentCalendar.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentCalendar.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentCalendar.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentCalendar.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar do
         Hr := this.m_IAppointmentStore.all.CreateAppointmentCalendarAsync (HStr_name, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointmentCalendar := new Windows.ApplicationModel.Appointments.IAppointmentCalendar;
                  Retval.m_IAppointmentCalendar.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetAppointmentCalendarAsync
   (
      this : in out AppointmentStore;
      calendarId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_calendarId : WinRt.HString := To_HString (calendarId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppointmentCalendar.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppointmentCalendar.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar;
      m_IID            : aliased WinRt.IID := (1806793365, 37262, 23248, (187, 194, 188, 197, 250, 31, 249, 54 )); -- Windows.ApplicationModel.Appointments.AppointmentCalendar;
      m_HandlerIID     : aliased WinRt.IID := (1838986833, 23286, 20912, (156, 211, 69, 221, 81, 241, 121, 73 ));
      m_Handler        : AsyncOperationCompletedHandler_AppointmentCalendar.Kind := new AsyncOperationCompletedHandler_AppointmentCalendar.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentCalendar.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentCalendar.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentCalendar.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentCalendar.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar do
         Hr := this.m_IAppointmentStore.all.GetAppointmentCalendarAsync (HStr_calendarId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointmentCalendar := new Windows.ApplicationModel.Appointments.IAppointmentCalendar;
                  Retval.m_IAppointmentCalendar.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_calendarId);
      end return;
   end;

   function GetAppointmentAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Appointment.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Appointment.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointment;
      m_IID            : aliased WinRt.IID := (207041272, 23481, 23475, (147, 229, 184, 126, 67, 224, 205, 106 )); -- Windows.ApplicationModel.Appointments.Appointment;
      m_HandlerIID     : aliased WinRt.IID := (3057708292, 37681, 23336, (146, 71, 1, 70, 188, 245, 183, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_Appointment.Kind := new AsyncOperationCompletedHandler_Appointment.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Appointment.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Appointment.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Appointment.Kind_Delegate, AsyncOperationCompletedHandler_Appointment.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentStore.all.GetAppointmentAsync (HStr_localId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
                  Retval.m_IAppointment.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_localId);
      end return;
   end;

   function GetAppointmentInstanceAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString;
      instanceStartTime : Windows.Foundation.DateTime
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Appointment.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Appointment.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointment;
      m_IID            : aliased WinRt.IID := (207041272, 23481, 23475, (147, 229, 184, 126, 67, 224, 205, 106 )); -- Windows.ApplicationModel.Appointments.Appointment;
      m_HandlerIID     : aliased WinRt.IID := (3057708292, 37681, 23336, (146, 71, 1, 70, 188, 245, 183, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_Appointment.Kind := new AsyncOperationCompletedHandler_Appointment.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Appointment.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Appointment.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Appointment.Kind_Delegate, AsyncOperationCompletedHandler_Appointment.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentStore.all.GetAppointmentInstanceAsync (HStr_localId, instanceStartTime, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
                  Retval.m_IAppointment.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_localId);
      end return;
   end;

   function FindAppointmentCalendarsAsync
   (
      this : in out AppointmentStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3529515436, 39348, 23616, (176, 210, 214, 131, 93, 46, 146, 2 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4101523099, 38775, 21821, (190, 171, 27, 181, 238, 225, 202, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.FindAppointmentCalendarsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindAppointmentCalendarsAsync
   (
      this : in out AppointmentStore;
      options : Windows.ApplicationModel.Appointments.FindAppointmentCalendarsOptions
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3529515436, 39348, 23616, (176, 210, 214, 131, 93, 46, 146, 2 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4101523099, 38775, 21821, (190, 171, 27, 181, 238, 225, 202, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.FindAppointmentCalendarsAsync (options, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindAppointmentsAsync
   (
      this : in out AppointmentStore;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.FindAppointmentsAsync (rangeStart, rangeLength, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindAppointmentsAsync
   (
      this : in out AppointmentStore;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan;
      options : Windows.ApplicationModel.Appointments.FindAppointmentsOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2797300066, 58049, 23970, (153, 56, 21, 239, 130, 203, 209, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4129698911, 31740, 21528, (159, 71, 241, 216, 99, 6, 224, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.FindAppointmentsAsync (rangeStart, rangeLength, options.m_IFindAppointmentsOptions.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindConflictAsync
   (
      this : in out AppointmentStore;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentConflictResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppointmentConflictResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppointmentConflictResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentConflictResult;
      m_IID            : aliased WinRt.IID := (3010856975, 58802, 23266, (153, 1, 134, 207, 119, 186, 93, 0 )); -- Windows.ApplicationModel.Appointments.AppointmentConflictResult;
      m_HandlerIID     : aliased WinRt.IID := (2197504254, 1457, 21052, (155, 83, 179, 221, 117, 156, 159, 117 ));
      m_Handler        : AsyncOperationCompletedHandler_AppointmentConflictResult.Kind := new AsyncOperationCompletedHandler_AppointmentConflictResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentConflictResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentConflictResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentConflictResult.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentConflictResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentConflictResult do
         Hr := this.m_IAppointmentStore.all.FindConflictAsync (appointment_p.m_IAppointment.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointmentConflictResult := new Windows.ApplicationModel.Appointments.IAppointmentConflictResult;
                  Retval.m_IAppointmentConflictResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function FindConflictAsync
   (
      this : in out AppointmentStore;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      instanceStartTime : Windows.Foundation.DateTime
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentConflictResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppointmentConflictResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppointmentConflictResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentConflictResult;
      m_IID            : aliased WinRt.IID := (3010856975, 58802, 23266, (153, 1, 134, 207, 119, 186, 93, 0 )); -- Windows.ApplicationModel.Appointments.AppointmentConflictResult;
      m_HandlerIID     : aliased WinRt.IID := (2197504254, 1457, 21052, (155, 83, 179, 221, 117, 156, 159, 117 ));
      m_Handler        : AsyncOperationCompletedHandler_AppointmentConflictResult.Kind := new AsyncOperationCompletedHandler_AppointmentConflictResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentConflictResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentConflictResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentConflictResult.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentConflictResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentConflictResult do
         Hr := this.m_IAppointmentStore.all.FindConflictAsync (appointment_p.m_IAppointment.all, instanceStartTime, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointmentConflictResult := new Windows.ApplicationModel.Appointments.IAppointmentConflictResult;
                  Retval.m_IAppointmentConflictResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure MoveAppointmentAsync
   (
      this : in out AppointmentStore;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      destinationCalendar : Windows.ApplicationModel.Appointments.AppointmentCalendar'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentStore.all.MoveAppointmentAsync (appointment_p.m_IAppointment.all, destinationCalendar.m_IAppointmentCalendar.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function ShowAddAppointmentAsync
   (
      this : in out AppointmentStore;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.ShowAddAppointmentAsync (appointment_p.m_IAppointment.all, selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowReplaceAppointmentAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.ShowReplaceAppointmentAsync (HStr_localId, appointment_p.m_IAppointment.all, selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowReplaceAppointmentAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement;
      instanceStartDate : Windows.Foundation.DateTime
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.ShowReplaceAppointmentAsync (HStr_localId, appointment_p.m_IAppointment.all, selection, preferredPlacement, instanceStartDate, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ShowRemoveAppointmentAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString;
      selection : Windows.Foundation.Rect
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.ShowRemoveAppointmentAsync (HStr_localId, selection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
      return m_RetVal;
   end;

   function ShowRemoveAppointmentAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement;
      instanceStartDate : Windows.Foundation.DateTime
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.ShowRemoveAppointmentAsync (HStr_localId, selection, preferredPlacement, instanceStartDate, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
      return m_RetVal;
   end;

   procedure ShowAppointmentDetailsAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentStore.all.ShowAppointmentDetailsAsync (HStr_localId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
   end;

   procedure ShowAppointmentDetailsAsync
   (
      this : in out AppointmentStore;
      localId : WinRt.WString;
      instanceStartDate : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localId : WinRt.HString := To_HString (localId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentStore.all.ShowAppointmentDetailsAsync (HStr_localId, instanceStartDate, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localId);
   end;

   function ShowEditNewAppointmentAsync
   (
      this : in out AppointmentStore;
      appointment_p : Windows.ApplicationModel.Appointments.Appointment'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.ShowEditNewAppointmentAsync (appointment_p.m_IAppointment.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function FindLocalIdsFromRoamingIdAsync
   (
      this : in out AppointmentStore;
      roamingId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_roamingId : WinRt.HString := To_HString (roamingId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (798143785, 4507, 22362, (164, 25, 57, 4, 180, 228, 26, 242 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2088278462, 24366, 23539, (173, 229, 173, 152, 183, 114, 199, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStore.all.FindLocalIdsFromRoamingIdAsync (HStr_roamingId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_roamingId);
      return m_RetVal;
   end;

   function add_StoreChanged
   (
      this : in out AppointmentStore;
      pHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentStore.all);
      Hr := m_Interface.add_StoreChanged (pHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_StoreChanged
   (
      this : in out AppointmentStore;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentStore.all);
      Hr := m_Interface.remove_StoreChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function CreateAppointmentCalendarAsync
   (
      this : in out AppointmentStore;
      name : WinRt.WString;
      userDataAccountId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_userDataAccountId : WinRt.HString := To_HString (userDataAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppointmentCalendar.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppointmentCalendar.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Appointments.IAppointmentCalendar;
      m_IID            : aliased WinRt.IID := (1806793365, 37262, 23248, (187, 194, 188, 197, 250, 31, 249, 54 )); -- Windows.ApplicationModel.Appointments.AppointmentCalendar;
      m_HandlerIID     : aliased WinRt.IID := (1838986833, 23286, 20912, (156, 211, 69, 221, 81, 241, 121, 73 ));
      m_Handler        : AsyncOperationCompletedHandler_AppointmentCalendar.Kind := new AsyncOperationCompletedHandler_AppointmentCalendar.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppointmentCalendar.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppointmentCalendar.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppointmentCalendar.Kind_Delegate, AsyncOperationCompletedHandler_AppointmentCalendar.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar do
         m_Interface := QInterface (this.m_IAppointmentStore.all);
         Hr := m_Interface.CreateAppointmentCalendarAsync (HStr_name, HStr_userDataAccountId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppointmentCalendar := new Windows.ApplicationModel.Appointments.IAppointmentCalendar;
                  Retval.m_IAppointmentCalendar.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_userDataAccountId);
      end return;
   end;

   function GetChangeTracker
   (
      this : in out AppointmentStore;
      identity : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker;
      HStr_identity : WinRt.HString := To_HString (identity);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentStore3, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentStore3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker do
         m_Interface := QInterface (this.m_IAppointmentStore.all);
         Hr := m_Interface.GetChangeTracker (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAppointmentStoreChangeTracker := new Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker;
         Retval.m_IAppointmentStoreChangeTracker.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_identity);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreChange

   procedure Initialize (this : in out AppointmentStoreChange) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreChange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreChange, IAppointmentStoreChange_Ptr);
   begin
      if this.m_IAppointmentStoreChange /= null then
         if this.m_IAppointmentStoreChange.all /= null then
            RefCount := this.m_IAppointmentStoreChange.all.Release;
            Free (this.m_IAppointmentStoreChange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreChange

   function get_Appointment
   (
      this : in out AppointmentStoreChange
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentStoreChange.all.get_Appointment (m_ComRetVal'Access);
         Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
         Retval.m_IAppointment.all := m_ComRetVal;
      end return;
   end;

   function get_ChangeType
   (
      this : in out AppointmentStoreChange
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentStoreChangeType;
   begin
      Hr := this.m_IAppointmentStoreChange.all.get_ChangeType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppointmentCalendar
   (
      this : in out AppointmentStoreChange
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentStoreChange2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentCalendar;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStoreChange_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentStoreChange2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentStoreChange2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentCalendar do
         m_Interface := QInterface (this.m_IAppointmentStoreChange.all);
         Hr := m_Interface.get_AppointmentCalendar (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAppointmentCalendar := new Windows.ApplicationModel.Appointments.IAppointmentCalendar;
         Retval.m_IAppointmentCalendar.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreChangeReader

   procedure Initialize (this : in out AppointmentStoreChangeReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreChangeReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreChangeReader, IAppointmentStoreChangeReader_Ptr);
   begin
      if this.m_IAppointmentStoreChangeReader /= null then
         if this.m_IAppointmentStoreChangeReader.all /= null then
            RefCount := this.m_IAppointmentStoreChangeReader.all.Release;
            Free (this.m_IAppointmentStoreChangeReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreChangeReader

   function ReadBatchAsync
   (
      this : in out AppointmentStoreChangeReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3578348729, 46894, 20668, (166, 74, 25, 57, 110, 13, 27, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1072189384, 55936, 24491, (139, 70, 55, 32, 247, 100, 99, 69 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppointmentStoreChangeReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure AcceptChanges
   (
      this : in out AppointmentStoreChangeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentStoreChangeReader.all.AcceptChanges;
   end;

   procedure AcceptChangesThrough
   (
      this : in out AppointmentStoreChangeReader;
      lastChangeToAccept : Windows.ApplicationModel.Appointments.AppointmentStoreChange'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentStoreChangeReader.all.AcceptChangesThrough (lastChangeToAccept.m_IAppointmentStoreChange.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreChangeTracker

   procedure Initialize (this : in out AppointmentStoreChangeTracker) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreChangeTracker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreChangeTracker, IAppointmentStoreChangeTracker_Ptr);
   begin
      if this.m_IAppointmentStoreChangeTracker /= null then
         if this.m_IAppointmentStoreChangeTracker.all /= null then
            RefCount := this.m_IAppointmentStoreChangeTracker.all.Release;
            Free (this.m_IAppointmentStoreChangeTracker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreChangeTracker

   function GetChangeReader
   (
      this : in out AppointmentStoreChangeTracker
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentStoreChangeReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader do
         Hr := this.m_IAppointmentStoreChangeTracker.all.GetChangeReader (m_ComRetVal'Access);
         Retval.m_IAppointmentStoreChangeReader := new Windows.ApplicationModel.Appointments.IAppointmentStoreChangeReader;
         Retval.m_IAppointmentStoreChangeReader.all := m_ComRetVal;
      end return;
   end;

   procedure Enable
   (
      this : in out AppointmentStoreChangeTracker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentStoreChangeTracker.all.Enable;
   end;

   procedure Reset
   (
      this : in out AppointmentStoreChangeTracker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentStoreChangeTracker.all.Reset;
   end;

   function get_IsTracking
   (
      this : in out AppointmentStoreChangeTracker
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker_Interface, WinRt.Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker2, WinRt.Windows.ApplicationModel.Appointments.IID_IAppointmentStoreChangeTracker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentStoreChangeTracker.all);
      Hr := m_Interface.get_IsTracking (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreChangedDeferral

   procedure Initialize (this : in out AppointmentStoreChangedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreChangedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreChangedDeferral, IAppointmentStoreChangedDeferral_Ptr);
   begin
      if this.m_IAppointmentStoreChangedDeferral /= null then
         if this.m_IAppointmentStoreChangedDeferral.all /= null then
            RefCount := this.m_IAppointmentStoreChangedDeferral.all.Release;
            Free (this.m_IAppointmentStoreChangedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreChangedDeferral

   procedure Complete
   (
      this : in out AppointmentStoreChangedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentStoreChangedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreChangedEventArgs

   procedure Initialize (this : in out AppointmentStoreChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreChangedEventArgs, IAppointmentStoreChangedEventArgs_Ptr);
   begin
      if this.m_IAppointmentStoreChangedEventArgs /= null then
         if this.m_IAppointmentStoreChangedEventArgs.all /= null then
            RefCount := this.m_IAppointmentStoreChangedEventArgs.all.Release;
            Free (this.m_IAppointmentStoreChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreChangedEventArgs

   function GetDeferral
   (
      this : in out AppointmentStoreChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointmentStoreChangedDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentStoreChangedDeferral do
         Hr := this.m_IAppointmentStoreChangedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IAppointmentStoreChangedDeferral := new Windows.ApplicationModel.Appointments.IAppointmentStoreChangedDeferral;
         Retval.m_IAppointmentStoreChangedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreNotificationTriggerDetails

   procedure Initialize (this : in out AppointmentStoreNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreNotificationTriggerDetails, IAppointmentStoreNotificationTriggerDetails_Ptr);
   begin
      if this.m_IAppointmentStoreNotificationTriggerDetails /= null then
         if this.m_IAppointmentStoreNotificationTriggerDetails.all /= null then
            RefCount := this.m_IAppointmentStoreNotificationTriggerDetails.all.Release;
            Free (this.m_IAppointmentStoreNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreNotificationTriggerDetails

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FindAppointmentsOptions

   procedure Initialize (this : in out FindAppointmentsOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out FindAppointmentsOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFindAppointmentsOptions, IFindAppointmentsOptions_Ptr);
   begin
      if this.m_IFindAppointmentsOptions /= null then
         if this.m_IFindAppointmentsOptions.all /= null then
            RefCount := this.m_IFindAppointmentsOptions.all.Release;
            Free (this.m_IFindAppointmentsOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FindAppointmentsOptions

   function Constructor return FindAppointmentsOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.FindAppointmentsOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Appointments.IFindAppointmentsOptions;
   begin
      return RetVal : FindAppointmentsOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFindAppointmentsOptions := new Windows.ApplicationModel.Appointments.IFindAppointmentsOptions;
            Retval.m_IFindAppointmentsOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FindAppointmentsOptions

   function get_CalendarIds
   (
      this : in out FindAppointmentsOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IFindAppointmentsOptions.all.get_CalendarIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FetchProperties
   (
      this : in out FindAppointmentsOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IFindAppointmentsOptions.all.get_FetchProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IncludeHidden
   (
      this : in out FindAppointmentsOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFindAppointmentsOptions.all.get_IncludeHidden (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncludeHidden
   (
      this : in out FindAppointmentsOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFindAppointmentsOptions.all.put_IncludeHidden (value);
   end;

   function get_MaxCount
   (
      this : in out FindAppointmentsOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFindAppointmentsOptions.all.get_MaxCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxCount
   (
      this : in out FindAppointmentsOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFindAppointmentsOptions.all.put_MaxCount (value);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Gaming.XboxLive.Storage is

   package IAsyncOperation_GameSaveBlobInfoGetResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoGetResult);
   package AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoGetResult);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt32);

   package IAsyncOperation_GameSaveOperationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult);
   package AsyncOperationCompletedHandler_GameSaveOperationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult);

   package IAsyncOperation_GameSaveBlobGetResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobGetResult);
   package AsyncOperationCompletedHandler_GameSaveBlobGetResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobGetResult);

   package IAsyncOperation_GameSaveContainerInfoGetResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoGetResult);
   package AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoGetResult);

   package IAsyncOperation_Int64 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Int64);
   package AsyncOperationCompletedHandler_Int64 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Int64);

   package IAsyncOperation_GameSaveProviderGetResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveProviderGetResult);
   package AsyncOperationCompletedHandler_GameSaveProviderGetResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveProviderGetResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveBlobGetResult

   procedure Initialize (this : in out GameSaveBlobGetResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveBlobGetResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveBlobGetResult, IGameSaveBlobGetResult_Ptr);
   begin
      if this.m_IGameSaveBlobGetResult /= null then
         if this.m_IGameSaveBlobGetResult.all /= null then
            RefCount := this.m_IGameSaveBlobGetResult.all.Release;
            Free (this.m_IGameSaveBlobGetResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveBlobGetResult

   function get_Status
   (
      this : in out GameSaveBlobGetResult
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus;
   begin
      Hr := this.m_IGameSaveBlobGetResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out GameSaveBlobGetResult
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IGameSaveBlobGetResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveBlobInfo

   procedure Initialize (this : in out GameSaveBlobInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveBlobInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveBlobInfo, IGameSaveBlobInfo_Ptr);
   begin
      if this.m_IGameSaveBlobInfo /= null then
         if this.m_IGameSaveBlobInfo.all /= null then
            RefCount := this.m_IGameSaveBlobInfo.all.Release;
            Free (this.m_IGameSaveBlobInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveBlobInfo

   function get_Name
   (
      this : in out GameSaveBlobInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameSaveBlobInfo.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out GameSaveBlobInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IGameSaveBlobInfo.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveBlobInfoGetResult

   procedure Initialize (this : in out GameSaveBlobInfoGetResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveBlobInfoGetResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveBlobInfoGetResult, IGameSaveBlobInfoGetResult_Ptr);
   begin
      if this.m_IGameSaveBlobInfoGetResult /= null then
         if this.m_IGameSaveBlobInfoGetResult.all /= null then
            RefCount := this.m_IGameSaveBlobInfoGetResult.all.Release;
            Free (this.m_IGameSaveBlobInfoGetResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveBlobInfoGetResult

   function get_Status
   (
      this : in out GameSaveBlobInfoGetResult
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus;
   begin
      Hr := this.m_IGameSaveBlobInfoGetResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out GameSaveBlobInfoGetResult
   )
   return IVectorView_IGameSaveBlobInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGameSaveBlobInfo.Kind;
   begin
      Hr := this.m_IGameSaveBlobInfoGetResult.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGameSaveBlobInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveBlobInfoQuery

   procedure Initialize (this : in out GameSaveBlobInfoQuery) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveBlobInfoQuery) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveBlobInfoQuery, IGameSaveBlobInfoQuery_Ptr);
   begin
      if this.m_IGameSaveBlobInfoQuery /= null then
         if this.m_IGameSaveBlobInfoQuery.all /= null then
            RefCount := this.m_IGameSaveBlobInfoQuery.all.Release;
            Free (this.m_IGameSaveBlobInfoQuery);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveBlobInfoQuery

   function GetBlobInfoAsync
   (
      this : in out GameSaveBlobInfoQuery
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveBlobInfoGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveBlobInfoGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoGetResult;
      m_IID            : aliased WinRt.IID := (3619156916, 24616, 21039, (132, 157, 166, 148, 149, 228, 220, 208 )); -- Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult;
      m_HandlerIID     : aliased WinRt.IID := (2469520698, 42004, 20967, (191, 188, 119, 132, 223, 131, 220, 142 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveBlobInfoGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult do
         Hr := this.m_IGameSaveBlobInfoQuery.all.GetBlobInfoAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveBlobInfoGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoGetResult;
                  Retval.m_IGameSaveBlobInfoGetResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetBlobInfoAsync
   (
      this : in out GameSaveBlobInfoQuery;
      startIndex : WinRt.UInt32;
      maxNumberOfItems : WinRt.UInt32
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveBlobInfoGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveBlobInfoGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoGetResult;
      m_IID            : aliased WinRt.IID := (3619156916, 24616, 21039, (132, 157, 166, 148, 149, 228, 220, 208 )); -- Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult;
      m_HandlerIID     : aliased WinRt.IID := (2469520698, 42004, 20967, (191, 188, 119, 132, 223, 131, 220, 142 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveBlobInfoGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveBlobInfoGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoGetResult do
         Hr := this.m_IGameSaveBlobInfoQuery.all.GetBlobInfoAsync (startIndex, maxNumberOfItems, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveBlobInfoGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoGetResult;
                  Retval.m_IGameSaveBlobInfoGetResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetItemCountAsync
   (
      this : in out GameSaveBlobInfoQuery
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGameSaveBlobInfoQuery.all.GetItemCountAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveContainer

   procedure Initialize (this : in out GameSaveContainer) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveContainer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveContainer, IGameSaveContainer_Ptr);
   begin
      if this.m_IGameSaveContainer /= null then
         if this.m_IGameSaveContainer.all /= null then
            RefCount := this.m_IGameSaveContainer.all.Release;
            Free (this.m_IGameSaveContainer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveContainer

   function get_Name
   (
      this : in out GameSaveContainer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameSaveContainer.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Provider
   (
      this : in out GameSaveContainer
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.IGameSaveProvider;
   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProvider do
         Hr := this.m_IGameSaveContainer.all.get_Provider (m_ComRetVal'Access);
         Retval.m_IGameSaveProvider := new Windows.Gaming.XboxLive.Storage.IGameSaveProvider;
         Retval.m_IGameSaveProvider.all := m_ComRetVal;
      end return;
   end;

   function SubmitUpdatesAsync
   (
      this : in out GameSaveContainer;
      blobsToWrite : GenericObject;
      blobsToDelete : GenericObject;
      displayName : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_displayName : WinRt.HString := To_HString (displayName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
      m_IID            : aliased WinRt.IID := (472382359, 7706, 20847, (171, 178, 18, 193, 142, 24, 33, 141 )); -- Windows.Gaming.XboxLive.Storage.GameSaveOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (3998475855, 21273, 22269, (162, 138, 44, 71, 79, 196, 46, 72 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveOperationResult.Kind := new AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult do
         Hr := this.m_IGameSaveContainer.all.SubmitUpdatesAsync (blobsToWrite, blobsToDelete, HStr_displayName, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveOperationResult := new Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
                  Retval.m_IGameSaveOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   function ReadAsync
   (
      this : in out GameSaveContainer;
      blobsToRead : GenericObject
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
      m_IID            : aliased WinRt.IID := (472382359, 7706, 20847, (171, 178, 18, 193, 142, 24, 33, 141 )); -- Windows.Gaming.XboxLive.Storage.GameSaveOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (3998475855, 21273, 22269, (162, 138, 44, 71, 79, 196, 46, 72 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveOperationResult.Kind := new AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult do
         Hr := this.m_IGameSaveContainer.all.ReadAsync (blobsToRead, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveOperationResult := new Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
                  Retval.m_IGameSaveOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAsync
   (
      this : in out GameSaveContainer;
      blobsToRead : GenericObject
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobGetResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveBlobGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveBlobGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveBlobGetResult;
      m_IID            : aliased WinRt.IID := (1881387043, 31469, 21100, (179, 188, 190, 18, 227, 92, 225, 207 )); -- Windows.Gaming.XboxLive.Storage.GameSaveBlobGetResult;
      m_HandlerIID     : aliased WinRt.IID := (2643863596, 46763, 23763, (153, 27, 163, 88, 197, 49, 188, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveBlobGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveBlobGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveBlobGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveBlobGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveBlobGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveBlobGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobGetResult do
         Hr := this.m_IGameSaveContainer.all.GetAsync (blobsToRead, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveBlobGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveBlobGetResult;
                  Retval.m_IGameSaveBlobGetResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SubmitPropertySetUpdatesAsync
   (
      this : in out GameSaveContainer;
      blobsToWrite : Windows.Foundation.Collections.IPropertySet;
      blobsToDelete : GenericObject;
      displayName : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_displayName : WinRt.HString := To_HString (displayName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
      m_IID            : aliased WinRt.IID := (472382359, 7706, 20847, (171, 178, 18, 193, 142, 24, 33, 141 )); -- Windows.Gaming.XboxLive.Storage.GameSaveOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (3998475855, 21273, 22269, (162, 138, 44, 71, 79, 196, 46, 72 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveOperationResult.Kind := new AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult do
         Hr := this.m_IGameSaveContainer.all.SubmitPropertySetUpdatesAsync (blobsToWrite, blobsToDelete, HStr_displayName, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveOperationResult := new Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
                  Retval.m_IGameSaveOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   function CreateBlobInfoQuery
   (
      this : in out GameSaveContainer;
      blobNamePrefix : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoQuery'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoQuery;
      HStr_blobNamePrefix : WinRt.HString := To_HString (blobNamePrefix);
   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveBlobInfoQuery do
         Hr := this.m_IGameSaveContainer.all.CreateBlobInfoQuery (HStr_blobNamePrefix, m_ComRetVal'Access);
         Retval.m_IGameSaveBlobInfoQuery := new Windows.Gaming.XboxLive.Storage.IGameSaveBlobInfoQuery;
         Retval.m_IGameSaveBlobInfoQuery.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_blobNamePrefix);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveContainerInfo

   procedure Initialize (this : in out GameSaveContainerInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveContainerInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveContainerInfo, IGameSaveContainerInfo_Ptr);
   begin
      if this.m_IGameSaveContainerInfo /= null then
         if this.m_IGameSaveContainerInfo.all /= null then
            RefCount := this.m_IGameSaveContainerInfo.all.Release;
            Free (this.m_IGameSaveContainerInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveContainerInfo

   function get_Name
   (
      this : in out GameSaveContainerInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameSaveContainerInfo.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TotalSize
   (
      this : in out GameSaveContainerInfo
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IGameSaveContainerInfo.all.get_TotalSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayName
   (
      this : in out GameSaveContainerInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameSaveContainerInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LastModifiedTime
   (
      this : in out GameSaveContainerInfo
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IGameSaveContainerInfo.all.get_LastModifiedTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NeedsSync
   (
      this : in out GameSaveContainerInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGameSaveContainerInfo.all.get_NeedsSync (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveContainerInfoGetResult

   procedure Initialize (this : in out GameSaveContainerInfoGetResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveContainerInfoGetResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveContainerInfoGetResult, IGameSaveContainerInfoGetResult_Ptr);
   begin
      if this.m_IGameSaveContainerInfoGetResult /= null then
         if this.m_IGameSaveContainerInfoGetResult.all /= null then
            RefCount := this.m_IGameSaveContainerInfoGetResult.all.Release;
            Free (this.m_IGameSaveContainerInfoGetResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveContainerInfoGetResult

   function get_Status
   (
      this : in out GameSaveContainerInfoGetResult
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus;
   begin
      Hr := this.m_IGameSaveContainerInfoGetResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out GameSaveContainerInfoGetResult
   )
   return IVectorView_IGameSaveContainerInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGameSaveContainerInfo.Kind;
   begin
      Hr := this.m_IGameSaveContainerInfoGetResult.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGameSaveContainerInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveContainerInfoQuery

   procedure Initialize (this : in out GameSaveContainerInfoQuery) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveContainerInfoQuery) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveContainerInfoQuery, IGameSaveContainerInfoQuery_Ptr);
   begin
      if this.m_IGameSaveContainerInfoQuery /= null then
         if this.m_IGameSaveContainerInfoQuery.all /= null then
            RefCount := this.m_IGameSaveContainerInfoQuery.all.Release;
            Free (this.m_IGameSaveContainerInfoQuery);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveContainerInfoQuery

   function GetContainerInfoAsync
   (
      this : in out GameSaveContainerInfoQuery
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveContainerInfoGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveContainerInfoGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoGetResult;
      m_IID            : aliased WinRt.IID := (3489181675, 23064, 24401, (182, 27, 148, 56, 135, 247, 41, 238 )); -- Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult;
      m_HandlerIID     : aliased WinRt.IID := (100166272, 48731, 24190, (185, 119, 130, 87, 197, 228, 138, 204 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveContainerInfoGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult do
         Hr := this.m_IGameSaveContainerInfoQuery.all.GetContainerInfoAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveContainerInfoGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoGetResult;
                  Retval.m_IGameSaveContainerInfoGetResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetContainerInfoAsync
   (
      this : in out GameSaveContainerInfoQuery;
      startIndex : WinRt.UInt32;
      maxNumberOfItems : WinRt.UInt32
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveContainerInfoGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveContainerInfoGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoGetResult;
      m_IID            : aliased WinRt.IID := (3489181675, 23064, 24401, (182, 27, 148, 56, 135, 247, 41, 238 )); -- Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult;
      m_HandlerIID     : aliased WinRt.IID := (100166272, 48731, 24190, (185, 119, 130, 87, 197, 228, 138, 204 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveContainerInfoGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveContainerInfoGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoGetResult do
         Hr := this.m_IGameSaveContainerInfoQuery.all.GetContainerInfoAsync (startIndex, maxNumberOfItems, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveContainerInfoGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoGetResult;
                  Retval.m_IGameSaveContainerInfoGetResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetItemCountAsync
   (
      this : in out GameSaveContainerInfoQuery
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGameSaveContainerInfoQuery.all.GetItemCountAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveOperationResult

   procedure Initialize (this : in out GameSaveOperationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveOperationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveOperationResult, IGameSaveOperationResult_Ptr);
   begin
      if this.m_IGameSaveOperationResult /= null then
         if this.m_IGameSaveOperationResult.all /= null then
            RefCount := this.m_IGameSaveOperationResult.all.Release;
            Free (this.m_IGameSaveOperationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveOperationResult

   function get_Status
   (
      this : in out GameSaveOperationResult
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus;
   begin
      Hr := this.m_IGameSaveOperationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveProvider

   procedure Initialize (this : in out GameSaveProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveProvider, IGameSaveProvider_Ptr);
   begin
      if this.m_IGameSaveProvider /= null then
         if this.m_IGameSaveProvider.all /= null then
            RefCount := this.m_IGameSaveProvider.all.Release;
            Free (this.m_IGameSaveProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GameSaveProvider

   function GetForUserAsync
   (
      user : Windows.System.User'Class;
      serviceConfigId : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Gaming.XboxLive.Storage.GameSaveProvider");
      m_Factory        : access WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveProviderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_serviceConfigId : WinRt.HString := To_HString (serviceConfigId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveProviderGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveProviderGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveProviderGetResult;
      m_IID            : aliased WinRt.IID := (1036214405, 24556, 21531, (150, 207, 98, 123, 42, 216, 13, 54 )); -- Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult;
      m_HandlerIID     : aliased WinRt.IID := (1981240461, 36448, 20683, (161, 30, 18, 15, 162, 8, 46, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveProviderGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult do
         Hr := RoGetActivationFactory (m_hString, IID_IGameSaveProviderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUserAsync (user.m_IUser.all, HStr_serviceConfigId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGameSaveProviderGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveProviderGetResult;
                     Retval.m_IGameSaveProviderGetResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_serviceConfigId);
      end return;
   end;

   function GetSyncOnDemandForUserAsync
   (
      user : Windows.System.User'Class;
      serviceConfigId : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Gaming.XboxLive.Storage.GameSaveProvider");
      m_Factory        : access WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveProviderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_serviceConfigId : WinRt.HString := To_HString (serviceConfigId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveProviderGetResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveProviderGetResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveProviderGetResult;
      m_IID            : aliased WinRt.IID := (1036214405, 24556, 21531, (150, 207, 98, 123, 42, 216, 13, 54 )); -- Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult;
      m_HandlerIID     : aliased WinRt.IID := (1981240461, 36448, 20683, (161, 30, 18, 15, 162, 8, 46, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind := new AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveProviderGetResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveProviderGetResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProviderGetResult do
         Hr := RoGetActivationFactory (m_hString, IID_IGameSaveProviderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetSyncOnDemandForUserAsync (user.m_IUser.all, HStr_serviceConfigId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGameSaveProviderGetResult := new Windows.Gaming.XboxLive.Storage.IGameSaveProviderGetResult;
                     Retval.m_IGameSaveProviderGetResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_serviceConfigId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveProvider

   function get_User
   (
      this : in out GameSaveProvider
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IGameSaveProvider.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function CreateContainer
   (
      this : in out GameSaveProvider;
      name : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.IGameSaveContainer;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainer do
         Hr := this.m_IGameSaveProvider.all.CreateContainer (HStr_name, m_ComRetVal'Access);
         Retval.m_IGameSaveContainer := new Windows.Gaming.XboxLive.Storage.IGameSaveContainer;
         Retval.m_IGameSaveContainer.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function DeleteContainerAsync
   (
      this : in out GameSaveProvider;
      name : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GameSaveOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GameSaveOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
      m_IID            : aliased WinRt.IID := (472382359, 7706, 20847, (171, 178, 18, 193, 142, 24, 33, 141 )); -- Windows.Gaming.XboxLive.Storage.GameSaveOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (3998475855, 21273, 22269, (162, 138, 44, 71, 79, 196, 46, 72 ));
      m_Handler        : AsyncOperationCompletedHandler_GameSaveOperationResult.Kind := new AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GameSaveOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GameSaveOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_GameSaveOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveOperationResult do
         Hr := this.m_IGameSaveProvider.all.DeleteContainerAsync (HStr_name, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGameSaveOperationResult := new Windows.Gaming.XboxLive.Storage.IGameSaveOperationResult;
                  Retval.m_IGameSaveOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function CreateContainerInfoQuery
   (
      this : in out GameSaveProvider
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoQuery;
   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery do
         Hr := this.m_IGameSaveProvider.all.CreateContainerInfoQuery (m_ComRetVal'Access);
         Retval.m_IGameSaveContainerInfoQuery := new Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoQuery;
         Retval.m_IGameSaveContainerInfoQuery.all := m_ComRetVal;
      end return;
   end;

   function CreateContainerInfoQuery
   (
      this : in out GameSaveProvider;
      containerNamePrefix : WinRt.WString
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoQuery;
      HStr_containerNamePrefix : WinRt.HString := To_HString (containerNamePrefix);
   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveContainerInfoQuery do
         Hr := this.m_IGameSaveProvider.all.CreateContainerInfoQuery (HStr_containerNamePrefix, m_ComRetVal'Access);
         Retval.m_IGameSaveContainerInfoQuery := new Windows.Gaming.XboxLive.Storage.IGameSaveContainerInfoQuery;
         Retval.m_IGameSaveContainerInfoQuery.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_containerNamePrefix);
      end return;
   end;

   function GetRemainingBytesInQuotaAsync
   (
      this : in out GameSaveProvider
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Int64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Int64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Int64;
      m_IID            : aliased WinRt.IID := (3427172485, 19439, 21892, (144, 124, 146, 35, 210, 103, 144, 25 )); -- Int64;
      m_HandlerIID     : aliased WinRt.IID := (3555678322, 32078, 22971, (149, 237, 121, 254, 15, 13, 190, 137 ));
      m_Handler        : AsyncOperationCompletedHandler_Int64.Kind := new AsyncOperationCompletedHandler_Int64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Int64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Int64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Int64.Kind_Delegate, AsyncOperationCompletedHandler_Int64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGameSaveProvider.all.GetRemainingBytesInQuotaAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_ContainersChangedSinceLastSync
   (
      this : in out GameSaveProvider
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IGameSaveProvider.all.get_ContainersChangedSinceLastSync (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameSaveProviderGetResult

   procedure Initialize (this : in out GameSaveProviderGetResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameSaveProviderGetResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameSaveProviderGetResult, IGameSaveProviderGetResult_Ptr);
   begin
      if this.m_IGameSaveProviderGetResult /= null then
         if this.m_IGameSaveProviderGetResult.all /= null then
            RefCount := this.m_IGameSaveProviderGetResult.all.Release;
            Free (this.m_IGameSaveProviderGetResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameSaveProviderGetResult

   function get_Status
   (
      this : in out GameSaveProviderGetResult
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.GameSaveErrorStatus;
   begin
      Hr := this.m_IGameSaveProviderGetResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out GameSaveProviderGetResult
   )
   return WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.XboxLive.Storage.IGameSaveProvider;
   begin
      return RetVal : WinRt.Windows.Gaming.XboxLive.Storage.GameSaveProvider do
         Hr := this.m_IGameSaveProviderGetResult.all.get_Value (m_ComRetVal'Access);
         Retval.m_IGameSaveProvider := new Windows.Gaming.XboxLive.Storage.IGameSaveProvider;
         Retval.m_IGameSaveProvider.all := m_ComRetVal;
      end return;
   end;

end;

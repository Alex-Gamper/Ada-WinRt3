--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Protection.PlayReady is

   package IAsyncOperation_INDStartResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Protection.PlayReady.INDStartResult);
   package AsyncOperationCompletedHandler_INDStartResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Protection.PlayReady.INDStartResult);

   package IAsyncOperation_INDLicenseFetchResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Protection.PlayReady.INDLicenseFetchResult);
   package AsyncOperationCompletedHandler_INDLicenseFetchResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Protection.PlayReady.INDLicenseFetchResult);

   package IAsyncOperation_INDSendResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Protection.PlayReady.INDSendResult);
   package AsyncOperationCompletedHandler_INDSendResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Protection.PlayReady.INDSendResult);

   package IIterable_IPlayReadyDomain is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomain);
   package IIterator_IPlayReadyDomain is new WinRt.Windows.Foundation.Collections.IIterator (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomain);
   package IIterable_IPlayReadyLicense is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense);
   package IIterator_IPlayReadyLicense is new WinRt.Windows.Foundation.Collections.IIterator (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense);
   package IIterable_IPlayReadySecureStopServiceRequest is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest);
   package IIterator_IPlayReadySecureStopServiceRequest is new WinRt.Windows.Foundation.Collections.IIterator (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDClient

   procedure Initialize (this : in out NDClient) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDClient) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDClient, INDClient_Ptr);
   begin
      if this.m_INDClient /= null then
         if this.m_INDClient.all /= null then
            RefCount := this.m_INDClient.all.Release;
            Free (this.m_INDClient);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDClient

   function Constructor
   (
      downloadEngine : Windows.Media.Protection.PlayReady.INDDownloadEngine;
      streamParser : Windows.Media.Protection.PlayReady.INDStreamParser;
      pMessenger : Windows.Media.Protection.PlayReady.INDMessenger
   )
   return NDClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDClient");
      m_Factory    : access INDClientFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDClient;
   begin
      return RetVal : NDClient do
         Hr := RoGetActivationFactory (m_hString, IID_INDClientFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (downloadEngine, streamParser, pMessenger, m_ComRetVal'Access);
            Retval.m_INDClient := new Windows.Media.Protection.PlayReady.INDClient;
            Retval.m_INDClient.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDClient

   function add_RegistrationCompleted
   (
      this : in out NDClient;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INDClient.all.add_RegistrationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RegistrationCompleted
   (
      this : in out NDClient;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDClient.all.remove_RegistrationCompleted (token);
   end;

   function add_ProximityDetectionCompleted
   (
      this : in out NDClient;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INDClient.all.add_ProximityDetectionCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ProximityDetectionCompleted
   (
      this : in out NDClient;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDClient.all.remove_ProximityDetectionCompleted (token);
   end;

   function add_LicenseFetchCompleted
   (
      this : in out NDClient;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INDClient.all.add_LicenseFetchCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LicenseFetchCompleted
   (
      this : in out NDClient;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDClient.all.remove_LicenseFetchCompleted (token);
   end;

   function add_ReRegistrationNeeded
   (
      this : in out NDClient;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INDClient.all.add_ReRegistrationNeeded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReRegistrationNeeded
   (
      this : in out NDClient;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDClient.all.remove_ReRegistrationNeeded (token);
   end;

   function add_ClosedCaptionDataReceived
   (
      this : in out NDClient;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INDClient.all.add_ClosedCaptionDataReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ClosedCaptionDataReceived
   (
      this : in out NDClient;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDClient.all.remove_ClosedCaptionDataReceived (token);
   end;

   function StartAsync
   (
      this : in out NDClient;
      contentUrl : Windows.Foundation.Uri'Class;
      startAsyncOptions : WinRt.UInt32;
      registrationCustomData : Windows.Media.Protection.PlayReady.INDCustomData;
      licenseFetchDescriptor : Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDStartResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_INDStartResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_INDStartResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.PlayReady.INDStartResult;
      m_IID            : aliased WinRt.IID := (33207870, 27307, 21666, (128, 247, 219, 237, 34, 245, 141, 86 )); -- Windows.Media.Protection.PlayReady.INDStartResult;
      m_HandlerIID     : aliased WinRt.IID := (508442464, 45611, 24330, (144, 88, 71, 90, 255, 49, 13, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_INDStartResult.Kind := new AsyncOperationCompletedHandler_INDStartResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_INDStartResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_INDStartResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_INDStartResult.Kind_Delegate, AsyncOperationCompletedHandler_INDStartResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_INDClient.all.StartAsync (contentUrl.m_IUriRuntimeClass.all, startAsyncOptions, registrationCustomData, licenseFetchDescriptor, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function LicenseFetchAsync
   (
      this : in out NDClient;
      licenseFetchDescriptor : Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDLicenseFetchResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_INDLicenseFetchResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_INDLicenseFetchResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.PlayReady.INDLicenseFetchResult;
      m_IID            : aliased WinRt.IID := (2610760808, 15058, 23297, (141, 199, 111, 127, 193, 238, 214, 246 )); -- Windows.Media.Protection.PlayReady.INDLicenseFetchResult;
      m_HandlerIID     : aliased WinRt.IID := (4147109767, 36949, 22744, (150, 171, 44, 192, 77, 6, 204, 215 ));
      m_Handler        : AsyncOperationCompletedHandler_INDLicenseFetchResult.Kind := new AsyncOperationCompletedHandler_INDLicenseFetchResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_INDLicenseFetchResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_INDLicenseFetchResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_INDLicenseFetchResult.Kind_Delegate, AsyncOperationCompletedHandler_INDLicenseFetchResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_INDClient.all.LicenseFetchAsync (licenseFetchDescriptor, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ReRegistrationAsync
   (
      this : in out NDClient;
      registrationCustomData : Windows.Media.Protection.PlayReady.INDCustomData
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_INDClient.all.ReRegistrationAsync (registrationCustomData, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out NDClient
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDClient.all.Close;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDCustomData

   procedure Initialize (this : in out NDCustomData) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDCustomData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDCustomData, INDCustomData_Ptr);
   begin
      if this.m_INDCustomData /= null then
         if this.m_INDCustomData.all /= null then
            RefCount := this.m_INDCustomData.all.Release;
            Free (this.m_INDCustomData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDCustomData

   function Constructor
   (
      customDataTypeIDBytes : WinRt.Byte_Array;
      customDataBytes : WinRt.Byte_Array
   )
   return NDCustomData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDCustomData");
      m_Factory    : access INDCustomDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDCustomData;
      function Convert_customDataTypeIDBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_customDataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : NDCustomData do
         Hr := RoGetActivationFactory (m_hString, IID_INDCustomDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (WinRt.UInt32(customDataTypeIDBytes'Length), Convert_customDataTypeIDBytes (customDataTypeIDBytes (customDataTypeIDBytes'First)'Address), WinRt.UInt32(customDataBytes'Length), Convert_customDataBytes (customDataBytes (customDataBytes'First)'Address), m_ComRetVal'Access);
            Retval.m_INDCustomData := new Windows.Media.Protection.PlayReady.INDCustomData;
            Retval.m_INDCustomData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDCustomData

   function get_CustomDataTypeID
   (
      this : in out NDCustomData
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDCustomData.all.get_CustomDataTypeID (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_CustomData
   (
      this : in out NDCustomData
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDCustomData.all.get_CustomData (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDDownloadEngineNotifier

   procedure Initialize (this : in out NDDownloadEngineNotifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDDownloadEngineNotifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDDownloadEngineNotifier, INDDownloadEngineNotifier_Ptr);
   begin
      if this.m_INDDownloadEngineNotifier /= null then
         if this.m_INDDownloadEngineNotifier.all /= null then
            RefCount := this.m_INDDownloadEngineNotifier.all.Release;
            Free (this.m_INDDownloadEngineNotifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDDownloadEngineNotifier

   function Constructor return NDDownloadEngineNotifier is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier;
   begin
      return RetVal : NDDownloadEngineNotifier do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INDDownloadEngineNotifier := new Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier;
            Retval.m_INDDownloadEngineNotifier.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDDownloadEngineNotifier

   procedure OnStreamOpened
   (
      this : in out NDDownloadEngineNotifier
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDDownloadEngineNotifier.all.OnStreamOpened;
   end;

   procedure OnPlayReadyObjectReceived
   (
      this : in out NDDownloadEngineNotifier;
      dataBytes : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_dataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDDownloadEngineNotifier.all.OnPlayReadyObjectReceived (WinRt.UInt32(dataBytes'Length), Convert_dataBytes (dataBytes (dataBytes'First)'Address));
   end;

   procedure OnContentIDReceived
   (
      this : in out NDDownloadEngineNotifier;
      licenseFetchDescriptor : Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDDownloadEngineNotifier.all.OnContentIDReceived (licenseFetchDescriptor);
   end;

   procedure OnDataReceived
   (
      this : in out NDDownloadEngineNotifier;
      dataBytes : WinRt.Byte_Array;
      bytesReceived : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_dataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDDownloadEngineNotifier.all.OnDataReceived (WinRt.UInt32(dataBytes'Length), Convert_dataBytes (dataBytes (dataBytes'First)'Address), bytesReceived);
   end;

   procedure OnEndOfStream
   (
      this : in out NDDownloadEngineNotifier
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDDownloadEngineNotifier.all.OnEndOfStream;
   end;

   procedure OnNetworkError
   (
      this : in out NDDownloadEngineNotifier
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDDownloadEngineNotifier.all.OnNetworkError;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDLicenseFetchDescriptor

   procedure Initialize (this : in out NDLicenseFetchDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDLicenseFetchDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDLicenseFetchDescriptor, INDLicenseFetchDescriptor_Ptr);
   begin
      if this.m_INDLicenseFetchDescriptor /= null then
         if this.m_INDLicenseFetchDescriptor.all /= null then
            RefCount := this.m_INDLicenseFetchDescriptor.all.Release;
            Free (this.m_INDLicenseFetchDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDLicenseFetchDescriptor

   function Constructor
   (
      contentIDType : Windows.Media.Protection.PlayReady.NDContentIDType;
      contentIDBytes : WinRt.Byte_Array;
      licenseFetchChallengeCustomData : Windows.Media.Protection.PlayReady.INDCustomData
   )
   return NDLicenseFetchDescriptor is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDLicenseFetchDescriptor");
      m_Factory    : access INDLicenseFetchDescriptorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor;
      function Convert_contentIDBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : NDLicenseFetchDescriptor do
         Hr := RoGetActivationFactory (m_hString, IID_INDLicenseFetchDescriptorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (contentIDType, WinRt.UInt32(contentIDBytes'Length), Convert_contentIDBytes (contentIDBytes (contentIDBytes'First)'Address), licenseFetchChallengeCustomData, m_ComRetVal'Access);
            Retval.m_INDLicenseFetchDescriptor := new Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor;
            Retval.m_INDLicenseFetchDescriptor.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDLicenseFetchDescriptor

   function get_ContentIDType
   (
      this : in out NDLicenseFetchDescriptor
   )
   return WinRt.Windows.Media.Protection.PlayReady.NDContentIDType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.NDContentIDType;
   begin
      Hr := this.m_INDLicenseFetchDescriptor.all.get_ContentIDType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContentID
   (
      this : in out NDLicenseFetchDescriptor
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDLicenseFetchDescriptor.all.get_ContentID (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_LicenseFetchChallengeCustomData
   (
      this : in out NDLicenseFetchDescriptor
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDCustomData is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.INDCustomData;
   begin
      Hr := this.m_INDLicenseFetchDescriptor.all.get_LicenseFetchChallengeCustomData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LicenseFetchChallengeCustomData
   (
      this : in out NDLicenseFetchDescriptor;
      licenseFetchChallengeCustomData : Windows.Media.Protection.PlayReady.INDCustomData
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDLicenseFetchDescriptor.all.put_LicenseFetchChallengeCustomData (licenseFetchChallengeCustomData);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDStorageFileHelper

   procedure Initialize (this : in out NDStorageFileHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDStorageFileHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDStorageFileHelper, INDStorageFileHelper_Ptr);
   begin
      if this.m_INDStorageFileHelper /= null then
         if this.m_INDStorageFileHelper.all /= null then
            RefCount := this.m_INDStorageFileHelper.all.Release;
            Free (this.m_INDStorageFileHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDStorageFileHelper

   function Constructor return NDStorageFileHelper is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDStorageFileHelper");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDStorageFileHelper;
   begin
      return RetVal : NDStorageFileHelper do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INDStorageFileHelper := new Windows.Media.Protection.PlayReady.INDStorageFileHelper;
            Retval.m_INDStorageFileHelper.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDStorageFileHelper

   function GetFileURLs
   (
      this : in out NDStorageFileHelper;
      file : Windows.Storage.IStorageFile
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_INDStorageFileHelper.all.GetFileURLs (file, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDStreamParserNotifier

   procedure Initialize (this : in out NDStreamParserNotifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDStreamParserNotifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDStreamParserNotifier, INDStreamParserNotifier_Ptr);
   begin
      if this.m_INDStreamParserNotifier /= null then
         if this.m_INDStreamParserNotifier.all /= null then
            RefCount := this.m_INDStreamParserNotifier.all.Release;
            Free (this.m_INDStreamParserNotifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDStreamParserNotifier

   function Constructor return NDStreamParserNotifier is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDStreamParserNotifier");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDStreamParserNotifier;
   begin
      return RetVal : NDStreamParserNotifier do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INDStreamParserNotifier := new Windows.Media.Protection.PlayReady.INDStreamParserNotifier;
            Retval.m_INDStreamParserNotifier.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDStreamParserNotifier

   procedure OnContentIDReceived
   (
      this : in out NDStreamParserNotifier;
      licenseFetchDescriptor : Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDStreamParserNotifier.all.OnContentIDReceived (licenseFetchDescriptor);
   end;

   procedure OnMediaStreamDescriptorCreated
   (
      this : in out NDStreamParserNotifier;
      audioStreamDescriptors : GenericObject;
      videoStreamDescriptors : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INDStreamParserNotifier.all.OnMediaStreamDescriptorCreated (audioStreamDescriptors, videoStreamDescriptors);
   end;

   procedure OnSampleParsed
   (
      this : in out NDStreamParserNotifier;
      streamID : WinRt.UInt32;
      streamType : Windows.Media.Protection.PlayReady.NDMediaStreamType;
      streamSample : Windows.Media.Core.MediaStreamSample'Class;
      pts : WinRt.Int64;
      ccFormat : Windows.Media.Protection.PlayReady.NDClosedCaptionFormat;
      ccDataBytes : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_ccDataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDStreamParserNotifier.all.OnSampleParsed (streamID, streamType, streamSample.m_IMediaStreamSample.all, pts, ccFormat, WinRt.UInt32(ccDataBytes'Length), Convert_ccDataBytes (ccDataBytes (ccDataBytes'First)'Address));
   end;

   procedure OnBeginSetupDecryptor
   (
      this : in out NDStreamParserNotifier;
      descriptor : Windows.Media.Core.IMediaStreamDescriptor;
      keyID : WinRt.Guid;
      proBytes : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_proBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDStreamParserNotifier.all.OnBeginSetupDecryptor (descriptor, keyID, WinRt.UInt32(proBytes'Length), Convert_proBytes (proBytes (proBytes'First)'Address));
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NDTCPMessenger

   procedure Initialize (this : in out NDTCPMessenger) is
   begin
      null;
   end;

   procedure Finalize (this : in out NDTCPMessenger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INDMessenger, INDMessenger_Ptr);
   begin
      if this.m_INDMessenger /= null then
         if this.m_INDMessenger.all /= null then
            RefCount := this.m_INDMessenger.all.Release;
            Free (this.m_INDMessenger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NDTCPMessenger

   function Constructor
   (
      remoteHostName : WinRt.WString;
      remoteHostPort : WinRt.UInt32
   )
   return NDTCPMessenger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.NDTCPMessenger");
      m_Factory    : access INDTCPMessengerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.INDMessenger;
      HStr_remoteHostName : WinRt.HString := To_HString (remoteHostName);
   begin
      return RetVal : NDTCPMessenger do
         Hr := RoGetActivationFactory (m_hString, IID_INDTCPMessengerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (HStr_remoteHostName, remoteHostPort, m_ComRetVal'Access);
            Retval.m_INDMessenger := new Windows.Media.Protection.PlayReady.INDMessenger;
            Retval.m_INDMessenger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_remoteHostName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NDTCPMessenger

   function SendRegistrationRequestAsync
   (
      this : in out NDTCPMessenger;
      sessionIDBytes : WinRt.Byte_Array;
      challengeDataBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDSendResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_INDSendResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_INDSendResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.PlayReady.INDSendResult;
      m_IID            : aliased WinRt.IID := (1815578792, 3693, 24105, (154, 209, 216, 138, 101, 235, 80, 11 )); -- Windows.Media.Protection.PlayReady.INDSendResult;
      m_HandlerIID     : aliased WinRt.IID := (3334768080, 64939, 20802, (176, 121, 151, 175, 5, 103, 240, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_INDSendResult.Kind := new AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_INDSendResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_INDSendResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate, AsyncOperationCompletedHandler_INDSendResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function Convert_sessionIDBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_challengeDataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDMessenger.all.SendRegistrationRequestAsync (WinRt.UInt32(sessionIDBytes'Length), Convert_sessionIDBytes (sessionIDBytes (sessionIDBytes'First)'Address), WinRt.UInt32(challengeDataBytes'Length), Convert_challengeDataBytes (challengeDataBytes (challengeDataBytes'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendProximityDetectionStartAsync
   (
      this : in out NDTCPMessenger;
      pdType : Windows.Media.Protection.PlayReady.NDProximityDetectionType;
      transmitterChannelBytes : WinRt.Byte_Array;
      sessionIDBytes : WinRt.Byte_Array;
      challengeDataBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDSendResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_INDSendResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_INDSendResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.PlayReady.INDSendResult;
      m_IID            : aliased WinRt.IID := (1815578792, 3693, 24105, (154, 209, 216, 138, 101, 235, 80, 11 )); -- Windows.Media.Protection.PlayReady.INDSendResult;
      m_HandlerIID     : aliased WinRt.IID := (3334768080, 64939, 20802, (176, 121, 151, 175, 5, 103, 240, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_INDSendResult.Kind := new AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_INDSendResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_INDSendResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate, AsyncOperationCompletedHandler_INDSendResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function Convert_transmitterChannelBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_sessionIDBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_challengeDataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDMessenger.all.SendProximityDetectionStartAsync (pdType, WinRt.UInt32(transmitterChannelBytes'Length), Convert_transmitterChannelBytes (transmitterChannelBytes (transmitterChannelBytes'First)'Address), WinRt.UInt32(sessionIDBytes'Length), Convert_sessionIDBytes (sessionIDBytes (sessionIDBytes'First)'Address), WinRt.UInt32(challengeDataBytes'Length), Convert_challengeDataBytes (challengeDataBytes (challengeDataBytes'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendProximityDetectionResponseAsync
   (
      this : in out NDTCPMessenger;
      pdType : Windows.Media.Protection.PlayReady.NDProximityDetectionType;
      transmitterChannelBytes : WinRt.Byte_Array;
      sessionIDBytes : WinRt.Byte_Array;
      responseDataBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDSendResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_INDSendResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_INDSendResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.PlayReady.INDSendResult;
      m_IID            : aliased WinRt.IID := (1815578792, 3693, 24105, (154, 209, 216, 138, 101, 235, 80, 11 )); -- Windows.Media.Protection.PlayReady.INDSendResult;
      m_HandlerIID     : aliased WinRt.IID := (3334768080, 64939, 20802, (176, 121, 151, 175, 5, 103, 240, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_INDSendResult.Kind := new AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_INDSendResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_INDSendResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate, AsyncOperationCompletedHandler_INDSendResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function Convert_transmitterChannelBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_sessionIDBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_responseDataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDMessenger.all.SendProximityDetectionResponseAsync (pdType, WinRt.UInt32(transmitterChannelBytes'Length), Convert_transmitterChannelBytes (transmitterChannelBytes (transmitterChannelBytes'First)'Address), WinRt.UInt32(sessionIDBytes'Length), Convert_sessionIDBytes (sessionIDBytes (sessionIDBytes'First)'Address), WinRt.UInt32(responseDataBytes'Length), Convert_responseDataBytes (responseDataBytes (responseDataBytes'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendLicenseFetchRequestAsync
   (
      this : in out NDTCPMessenger;
      sessionIDBytes : WinRt.Byte_Array;
      challengeDataBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.Protection.PlayReady.INDSendResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_INDSendResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_INDSendResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.PlayReady.INDSendResult;
      m_IID            : aliased WinRt.IID := (1815578792, 3693, 24105, (154, 209, 216, 138, 101, 235, 80, 11 )); -- Windows.Media.Protection.PlayReady.INDSendResult;
      m_HandlerIID     : aliased WinRt.IID := (3334768080, 64939, 20802, (176, 121, 151, 175, 5, 103, 240, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_INDSendResult.Kind := new AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_INDSendResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_INDSendResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_INDSendResult.Kind_Delegate, AsyncOperationCompletedHandler_INDSendResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function Convert_sessionIDBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_challengeDataBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_INDMessenger.all.SendLicenseFetchRequestAsync (WinRt.UInt32(sessionIDBytes'Length), Convert_sessionIDBytes (sessionIDBytes (sessionIDBytes'First)'Address), WinRt.UInt32(challengeDataBytes'Length), Convert_challengeDataBytes (challengeDataBytes (challengeDataBytes'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyContentHeader

   procedure Initialize (this : in out PlayReadyContentHeader) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyContentHeader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyContentHeader, IPlayReadyContentHeader_Ptr);
   begin
      if this.m_IPlayReadyContentHeader /= null then
         if this.m_IPlayReadyContentHeader.all /= null then
            RefCount := this.m_IPlayReadyContentHeader.all.Release;
            Free (this.m_IPlayReadyContentHeader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyContentHeader

   function Constructor
   (
      dwFlags : WinRt.UInt32;
      contentKeyIds : WinRt.Guid_Array;
      contentKeyIdStrings : WinRt.HString_Array;
      contentEncryptionAlgorithm : Windows.Media.Protection.PlayReady.PlayReadyEncryptionAlgorithm;
      licenseAcquisitionUrl : Windows.Foundation.Uri'Class;
      licenseAcquisitionUserInterfaceUrl : Windows.Foundation.Uri'Class;
      customAttributes : WinRt.WString;
      domainServiceId : WinRt.Guid
   )
   return PlayReadyContentHeader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyContentHeader");
      m_Factory    : access IPlayReadyContentHeaderFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
      HStr_customAttributes : WinRt.HString := To_HString (customAttributes);
      function Convert_contentKeyIds is new Ada.Unchecked_Conversion (Address, WinRt.Guid_Ptr);
      function Convert_contentKeyIdStrings is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
   begin
      return RetVal : PlayReadyContentHeader do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyContentHeaderFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceFromComponents2 (dwFlags, WinRt.UInt32(contentKeyIds'Length), Convert_contentKeyIds (contentKeyIds (contentKeyIds'First)'Address), WinRt.UInt32(contentKeyIdStrings'Length), Convert_contentKeyIdStrings (contentKeyIdStrings (contentKeyIdStrings'First)'Address), contentEncryptionAlgorithm, licenseAcquisitionUrl.m_IUriRuntimeClass.all, licenseAcquisitionUserInterfaceUrl.m_IUriRuntimeClass.all, HStr_customAttributes, domainServiceId, m_ComRetVal'Access);
            Retval.m_IPlayReadyContentHeader := new Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
            Retval.m_IPlayReadyContentHeader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_customAttributes);
      end return;
   end;

   function Constructor
   (
      headerBytes : WinRt.Byte_Array;
      licenseAcquisitionUrl : Windows.Foundation.Uri'Class;
      licenseAcquisitionUserInterfaceUrl : Windows.Foundation.Uri'Class;
      customAttributes : WinRt.WString;
      domainServiceId : WinRt.Guid
   )
   return PlayReadyContentHeader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyContentHeader");
      m_Factory    : access IPlayReadyContentHeaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
      HStr_customAttributes : WinRt.HString := To_HString (customAttributes);
      function Convert_headerBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : PlayReadyContentHeader do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyContentHeaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceFromWindowsMediaDrmHeader (WinRt.UInt32(headerBytes'Length), Convert_headerBytes (headerBytes (headerBytes'First)'Address), licenseAcquisitionUrl.m_IUriRuntimeClass.all, licenseAcquisitionUserInterfaceUrl.m_IUriRuntimeClass.all, HStr_customAttributes, domainServiceId, m_ComRetVal'Access);
            Retval.m_IPlayReadyContentHeader := new Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
            Retval.m_IPlayReadyContentHeader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_customAttributes);
      end return;
   end;

   function Constructor
   (
      contentKeyId : WinRt.Guid;
      contentKeyIdString : WinRt.WString;
      contentEncryptionAlgorithm : Windows.Media.Protection.PlayReady.PlayReadyEncryptionAlgorithm;
      licenseAcquisitionUrl : Windows.Foundation.Uri'Class;
      licenseAcquisitionUserInterfaceUrl : Windows.Foundation.Uri'Class;
      customAttributes : WinRt.WString;
      domainServiceId : WinRt.Guid
   )
   return PlayReadyContentHeader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyContentHeader");
      m_Factory    : access IPlayReadyContentHeaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
      HStr_contentKeyIdString : WinRt.HString := To_HString (contentKeyIdString);
      HStr_customAttributes : WinRt.HString := To_HString (customAttributes);
   begin
      return RetVal : PlayReadyContentHeader do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyContentHeaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceFromComponents (contentKeyId, HStr_contentKeyIdString, contentEncryptionAlgorithm, licenseAcquisitionUrl.m_IUriRuntimeClass.all, licenseAcquisitionUserInterfaceUrl.m_IUriRuntimeClass.all, HStr_customAttributes, domainServiceId, m_ComRetVal'Access);
            Retval.m_IPlayReadyContentHeader := new Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
            Retval.m_IPlayReadyContentHeader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentKeyIdString);
         Hr := WindowsDeleteString (HStr_customAttributes);
      end return;
   end;

   function Constructor
   (
      headerBytes : WinRt.Byte_Array
   )
   return PlayReadyContentHeader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyContentHeader");
      m_Factory    : access IPlayReadyContentHeaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
      function Convert_headerBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : PlayReadyContentHeader do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyContentHeaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceFromPlayReadyHeader (WinRt.UInt32(headerBytes'Length), Convert_headerBytes (headerBytes (headerBytes'First)'Address), m_ComRetVal'Access);
            Retval.m_IPlayReadyContentHeader := new Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
            Retval.m_IPlayReadyContentHeader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyContentHeader

   function get_KeyId
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.get_KeyId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KeyIdString
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.get_KeyIdString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LicenseAcquisitionUrl
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IPlayReadyContentHeader.all.get_LicenseAcquisitionUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_LicenseAcquisitionUserInterfaceUrl
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IPlayReadyContentHeader.all.get_LicenseAcquisitionUserInterfaceUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_DomainServiceId
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.get_DomainServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EncryptionType
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadyEncryptionAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.PlayReadyEncryptionAlgorithm;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.get_EncryptionType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CustomAttributes
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.get_CustomAttributes (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DecryptorSetup
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadyDecryptorSetup is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.PlayReadyDecryptorSetup;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.get_DecryptorSetup (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetSerializedHeader
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyContentHeader.all.GetSerializedHeader (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_HeaderWithEmbeddedUpdates
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadyContentHeader do
         Hr := this.m_IPlayReadyContentHeader.all.get_HeaderWithEmbeddedUpdates (m_ComRetVal'Access);
         Retval.m_IPlayReadyContentHeader := new Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
         Retval.m_IPlayReadyContentHeader.all := m_ComRetVal;
      end return;
   end;

   function get_KeyIds
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.Guid_Array is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentHeader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentHeader_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentHeader2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyContentHeader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyContentHeader.all);
      Hr := m_Interface.get_KeyIds (m_ComRetValSize'Access, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      declare
         ArrayRetVal : WinRt.Guid_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Guid is new To_Ada_Type (WinRt.Guid, WinRt.Guid_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Guid (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_KeyIdStrings
   (
      this : in out PlayReadyContentHeader
   )
   return WinRt.WString_Array is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentHeader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentHeader_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentHeader2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyContentHeader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyContentHeader.all);
      Hr := m_Interface.get_KeyIdStrings (m_ComRetValSize'Access, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      declare
         ArrayRetVal : WinRt.WString_Array (1..Integer(m_ComRetValSize));
         function To_Ada_HString is new To_Ada_Type (WinRt.HString, WinRt.HString_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada (To_Ada_HString (m_ComRetVal, i));
         end loop;
         Hr := WindowsDeleteString (m_ComRetVal.all);
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlayReadyContentResolver is

      function ServiceRequest
      (
         contentHeader : Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class
      )
      return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyContentResolver");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyContentResolver_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyContentResolver'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ServiceRequest (contentHeader.m_IPlayReadyContentHeader.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end PlayReadyContentResolver;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyDomain

   procedure Initialize (this : in out PlayReadyDomain) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyDomain) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyDomain, IPlayReadyDomain_Ptr);
   begin
      if this.m_IPlayReadyDomain /= null then
         if this.m_IPlayReadyDomain.all /= null then
            RefCount := this.m_IPlayReadyDomain.all.Release;
            Free (this.m_IPlayReadyDomain);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyDomain

   function get_AccountId
   (
      this : in out PlayReadyDomain
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyDomain.all.get_AccountId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceId
   (
      this : in out PlayReadyDomain
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyDomain.all.get_ServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Revision
   (
      this : in out PlayReadyDomain
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPlayReadyDomain.all.get_Revision (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FriendlyName
   (
      this : in out PlayReadyDomain
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayReadyDomain.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DomainJoinUrl
   (
      this : in out PlayReadyDomain
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IPlayReadyDomain.all.get_DomainJoinUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyDomainIterable

   procedure Initialize (this : in out PlayReadyDomainIterable) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyDomainIterable) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyDomainIterable

   function Constructor
   (
      domainAccountId : WinRt.Guid
   )
   return PlayReadyDomainIterable is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyDomainIterable");
      m_Factory    : access IPlayReadyDomainIterableFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : PlayReadyDomainIterable do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyDomainIterableFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (domainAccountId, m_ComRetVal'Access);
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyDomainIterable

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Protection.PlayReady.IPlayReadyDomain>
   function First
   (
      this : in out PlayReadyDomainIterable
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IPlayReadyDomain.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2229899142, 19438, 24385, (147, 161, 37, 88, 135, 18, 45, 159 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IPlayReadyDomain.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyDomainIterator

   procedure Initialize (this : in out PlayReadyDomainIterator) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyDomainIterator) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyDomainIterator

   -- Generic Interface Windows.Foundation.Collections.IIterator`1<Windows.Media.Protection.PlayReady.IPlayReadyDomain>
   function get_Current
   (
      this : in out PlayReadyDomainIterator
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomain is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyDomain.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyDomain;
      m_GenericIID     : aliased WinRt.IID := (1547036837, 19159, 24176, (190, 223, 145, 245, 213, 136, 141, 53 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyDomain.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Current (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HasCurrent
   (
      this : in out PlayReadyDomainIterator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyDomain.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1547036837, 19159, 24176, (190, 223, 145, 245, 213, 136, 141, 53 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyDomain.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_HasCurrent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function MoveNext
   (
      this : in out PlayReadyDomainIterator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyDomain.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1547036837, 19159, 24176, (190, 223, 145, 245, 213, 136, 141, 53 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyDomain.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.MoveNext (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out PlayReadyDomainIterator;
      items : Windows.Media.Protection.PlayReady.IPlayReadyDomain_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyDomain.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1547036837, 19159, 24176, (190, 223, 145, 245, 213, 136, 141, 53 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyDomain.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyDomainJoinServiceRequest

   procedure Initialize (this : in out PlayReadyDomainJoinServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyDomainJoinServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyDomainJoinServiceRequest, IPlayReadyDomainJoinServiceRequest_Ptr);
   begin
      if this.m_IPlayReadyDomainJoinServiceRequest /= null then
         if this.m_IPlayReadyDomainJoinServiceRequest.all /= null then
            RefCount := this.m_IPlayReadyDomainJoinServiceRequest.all.Release;
            Free (this.m_IPlayReadyDomainJoinServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyDomainJoinServiceRequest

   function Constructor return PlayReadyDomainJoinServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest;
   begin
      return RetVal : PlayReadyDomainJoinServiceRequest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyDomainJoinServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest;
            Retval.m_IPlayReadyDomainJoinServiceRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyDomainJoinServiceRequest

   function get_DomainAccountId
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyDomainJoinServiceRequest.all.get_DomainAccountId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DomainAccountId
   (
      this : in out PlayReadyDomainJoinServiceRequest;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyDomainJoinServiceRequest.all.put_DomainAccountId (value);
   end;

   function get_DomainFriendlyName
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayReadyDomainJoinServiceRequest.all.get_DomainFriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DomainFriendlyName
   (
      this : in out PlayReadyDomainJoinServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPlayReadyDomainJoinServiceRequest.all.put_DomainFriendlyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DomainServiceId
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyDomainJoinServiceRequest.all.get_DomainServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DomainServiceId
   (
      this : in out PlayReadyDomainJoinServiceRequest;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyDomainJoinServiceRequest.all.put_DomainServiceId (value);
   end;

   function get_Uri
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadyDomainJoinServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadyDomainJoinServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadyDomainJoinServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadyDomainJoinServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadyDomainJoinServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainJoinServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainJoinServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyDomainLeaveServiceRequest

   procedure Initialize (this : in out PlayReadyDomainLeaveServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyDomainLeaveServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyDomainLeaveServiceRequest, IPlayReadyDomainLeaveServiceRequest_Ptr);
   begin
      if this.m_IPlayReadyDomainLeaveServiceRequest /= null then
         if this.m_IPlayReadyDomainLeaveServiceRequest.all /= null then
            RefCount := this.m_IPlayReadyDomainLeaveServiceRequest.all.Release;
            Free (this.m_IPlayReadyDomainLeaveServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyDomainLeaveServiceRequest

   function Constructor return PlayReadyDomainLeaveServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest;
   begin
      return RetVal : PlayReadyDomainLeaveServiceRequest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyDomainLeaveServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest;
            Retval.m_IPlayReadyDomainLeaveServiceRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyDomainLeaveServiceRequest

   function get_DomainAccountId
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyDomainLeaveServiceRequest.all.get_DomainAccountId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DomainAccountId
   (
      this : in out PlayReadyDomainLeaveServiceRequest;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyDomainLeaveServiceRequest.all.put_DomainAccountId (value);
   end;

   function get_DomainServiceId
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyDomainLeaveServiceRequest.all.get_DomainServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DomainServiceId
   (
      this : in out PlayReadyDomainLeaveServiceRequest;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyDomainLeaveServiceRequest.all.put_DomainServiceId (value);
   end;

   function get_Uri
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadyDomainLeaveServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadyDomainLeaveServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadyDomainLeaveServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadyDomainLeaveServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyDomainLeaveServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyDomainLeaveServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyITADataGenerator

   procedure Initialize (this : in out PlayReadyITADataGenerator) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyITADataGenerator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyITADataGenerator, IPlayReadyITADataGenerator_Ptr);
   begin
      if this.m_IPlayReadyITADataGenerator /= null then
         if this.m_IPlayReadyITADataGenerator.all /= null then
            RefCount := this.m_IPlayReadyITADataGenerator.all.Release;
            Free (this.m_IPlayReadyITADataGenerator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyITADataGenerator

   function Constructor return PlayReadyITADataGenerator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyITADataGenerator");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyITADataGenerator;
   begin
      return RetVal : PlayReadyITADataGenerator do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyITADataGenerator := new Windows.Media.Protection.PlayReady.IPlayReadyITADataGenerator;
            Retval.m_IPlayReadyITADataGenerator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyITADataGenerator

   function GenerateData
   (
      this : in out PlayReadyITADataGenerator;
      guidCPSystemId : WinRt.Guid;
      countOfStreams : WinRt.UInt32;
      configuration : Windows.Foundation.Collections.IPropertySet;
      format : Windows.Media.Protection.PlayReady.PlayReadyITADataFormat
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyITADataGenerator.all.GenerateData (guidCPSystemId, countOfStreams, configuration, format, m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyIndividualizationServiceRequest

   procedure Initialize (this : in out PlayReadyIndividualizationServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyIndividualizationServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyIndividualizationServiceRequest, IPlayReadyIndividualizationServiceRequest_Ptr);
   begin
      if this.m_IPlayReadyIndividualizationServiceRequest /= null then
         if this.m_IPlayReadyIndividualizationServiceRequest.all /= null then
            RefCount := this.m_IPlayReadyIndividualizationServiceRequest.all.Release;
            Free (this.m_IPlayReadyIndividualizationServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyIndividualizationServiceRequest

   function Constructor return PlayReadyIndividualizationServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest;
   begin
      return RetVal : PlayReadyIndividualizationServiceRequest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyIndividualizationServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest;
            Retval.m_IPlayReadyIndividualizationServiceRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyIndividualizationServiceRequest

   function get_Uri
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadyIndividualizationServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadyIndividualizationServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadyIndividualizationServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadyIndividualizationServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadyIndividualizationServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyIndividualizationServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyIndividualizationServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyLicense

   procedure Initialize (this : in out PlayReadyLicense) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyLicense) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyLicense, IPlayReadyLicense_Ptr);
   begin
      if this.m_IPlayReadyLicense /= null then
         if this.m_IPlayReadyLicense.all /= null then
            RefCount := this.m_IPlayReadyLicense.all.Release;
            Free (this.m_IPlayReadyLicense);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyLicense

   function get_FullyEvaluated
   (
      this : in out PlayReadyLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayReadyLicense.all.get_FullyEvaluated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsableForPlay
   (
      this : in out PlayReadyLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayReadyLicense.all.get_UsableForPlay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpirationDate
   (
      this : in out PlayReadyLicense
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IPlayReadyLicense.all.get_ExpirationDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExpireAfterFirstPlay
   (
      this : in out PlayReadyLicense
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPlayReadyLicense.all.get_ExpireAfterFirstPlay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DomainAccountID
   (
      this : in out PlayReadyLicense
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyLicense.all.get_DomainAccountID (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ChainDepth
   (
      this : in out PlayReadyLicense
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPlayReadyLicense.all.get_ChainDepth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetKIDAtChainDepth
   (
      this : in out PlayReadyLicense;
      chainDepth : WinRt.UInt32
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyLicense.all.GetKIDAtChainDepth (chainDepth, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SecureStopId
   (
      this : in out PlayReadyLicense
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicense2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicense.all);
      Hr := m_Interface.get_SecureStopId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SecurityLevel
   (
      this : in out PlayReadyLicense
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicense2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicense.all);
      Hr := m_Interface.get_SecurityLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_InMemoryOnly
   (
      this : in out PlayReadyLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicense2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicense.all);
      Hr := m_Interface.get_InMemoryOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ExpiresInRealTime
   (
      this : in out PlayReadyLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicense2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicense.all);
      Hr := m_Interface.get_ExpiresInRealTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyLicenseAcquisitionServiceRequest

   procedure Initialize (this : in out PlayReadyLicenseAcquisitionServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyLicenseAcquisitionServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyLicenseAcquisitionServiceRequest, IPlayReadyLicenseAcquisitionServiceRequest_Ptr);
   begin
      if this.m_IPlayReadyLicenseAcquisitionServiceRequest /= null then
         if this.m_IPlayReadyLicenseAcquisitionServiceRequest.all /= null then
            RefCount := this.m_IPlayReadyLicenseAcquisitionServiceRequest.all.Release;
            Free (this.m_IPlayReadyLicenseAcquisitionServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyLicenseAcquisitionServiceRequest

   function Constructor return PlayReadyLicenseAcquisitionServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest;
   begin
      return RetVal : PlayReadyLicenseAcquisitionServiceRequest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyLicenseAcquisitionServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest;
            Retval.m_IPlayReadyLicenseAcquisitionServiceRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyLicenseAcquisitionServiceRequest

   function get_ContentHeader
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadyContentHeader do
         Hr := this.m_IPlayReadyLicenseAcquisitionServiceRequest.all.get_ContentHeader (m_ComRetVal'Access);
         Retval.m_IPlayReadyContentHeader := new Windows.Media.Protection.PlayReady.IPlayReadyContentHeader;
         Retval.m_IPlayReadyContentHeader.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentHeader
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest;
      value : Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyLicenseAcquisitionServiceRequest.all.put_ContentHeader (value.m_IPlayReadyContentHeader.all);
   end;

   function get_DomainServiceId
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadyLicenseAcquisitionServiceRequest.all.get_DomainServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DomainServiceId
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyLicenseAcquisitionServiceRequest.all.put_DomainServiceId (value);
   end;

   function get_Uri
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SessionId
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicenseAcquisitionServiceRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
      Hr := m_Interface.get_SessionId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateLicenseIterable
   (
      this : in out PlayReadyLicenseAcquisitionServiceRequest;
      contentHeader : Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class;
      fullyEvaluated : WinRt.Boolean
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest3, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicenseAcquisitionServiceRequest3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable do
         m_Interface := QInterface (this.m_IPlayReadyLicenseAcquisitionServiceRequest.all);
         Hr := m_Interface.CreateLicenseIterable (contentHeader.m_IPlayReadyContentHeader.all, fullyEvaluated, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyLicenseIterable

   procedure Initialize (this : in out PlayReadyLicenseIterable) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyLicenseIterable) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyLicenseIterable

   function Constructor return PlayReadyLicenseIterable is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : PlayReadyLicenseIterable do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      contentHeader : Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class;
      fullyEvaluated : WinRt.Boolean
   )
   return PlayReadyLicenseIterable is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable");
      m_Factory    : access IPlayReadyLicenseIterableFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : PlayReadyLicenseIterable do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyLicenseIterableFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (contentHeader.m_IPlayReadyContentHeader.all, fullyEvaluated, m_ComRetVal'Access);
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyLicenseIterable

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Protection.PlayReady.IPlayReadyLicense>
   function First
   (
      this : in out PlayReadyLicenseIterable
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IPlayReadyLicense.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2670261943, 46570, 20595, (186, 61, 140, 178, 240, 114, 145, 161 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IPlayReadyLicense.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyLicenseIterator

   procedure Initialize (this : in out PlayReadyLicenseIterator) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyLicenseIterator) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyLicenseIterator

   -- Generic Interface Windows.Foundation.Collections.IIterator`1<Windows.Media.Protection.PlayReady.IPlayReadyLicense>
   function get_Current
   (
      this : in out PlayReadyLicenseIterator
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicense is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyLicense.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyLicense;
      m_GenericIID     : aliased WinRt.IID := (1785528330, 52774, 21531, (161, 88, 132, 87, 64, 155, 38, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyLicense.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Current (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HasCurrent
   (
      this : in out PlayReadyLicenseIterator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyLicense.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1785528330, 52774, 21531, (161, 88, 132, 87, 64, 155, 38, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyLicense.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_HasCurrent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function MoveNext
   (
      this : in out PlayReadyLicenseIterator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyLicense.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1785528330, 52774, 21531, (161, 88, 132, 87, 64, 155, 38, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyLicense.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.MoveNext (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out PlayReadyLicenseIterator;
      items : Windows.Media.Protection.PlayReady.IPlayReadyLicense_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadyLicense.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1785528330, 52774, 21531, (161, 88, 132, 87, 64, 155, 38, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadyLicense.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlayReadyLicenseManagement is

      procedure DeleteLicenses
      (
         contentHeader : Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyLicenseManagement");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseManagement_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyLicenseManagement'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeleteLicenses (contentHeader.m_IPlayReadyContentHeader.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end PlayReadyLicenseManagement;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyLicenseSession

   procedure Initialize (this : in out PlayReadyLicenseSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyLicenseSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyLicenseSession, IPlayReadyLicenseSession_Ptr);
   begin
      if this.m_IPlayReadyLicenseSession /= null then
         if this.m_IPlayReadyLicenseSession.all /= null then
            RefCount := this.m_IPlayReadyLicenseSession.all.Release;
            Free (this.m_IPlayReadyLicenseSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyLicenseSession

   function Constructor
   (
      configuration : Windows.Foundation.Collections.IPropertySet
   )
   return PlayReadyLicenseSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyLicenseSession");
      m_Factory    : access IPlayReadyLicenseSessionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession;
   begin
      return RetVal : PlayReadyLicenseSession do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyLicenseSessionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (configuration, m_ComRetVal'Access);
            Retval.m_IPlayReadyLicenseSession := new Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession;
            Retval.m_IPlayReadyLicenseSession.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyLicenseSession

   function CreateLAServiceRequest
   (
      this : in out PlayReadyLicenseSession
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest;
   begin
      Hr := this.m_IPlayReadyLicenseSession.all.CreateLAServiceRequest (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ConfigureMediaProtectionManager
   (
      this : in out PlayReadyLicenseSession;
      mpm : Windows.Media.Protection.MediaProtectionManager'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyLicenseSession.all.ConfigureMediaProtectionManager (mpm.m_IMediaProtectionManager.all);
   end;

   function CreateLicenseIterable
   (
      this : in out PlayReadyLicenseSession;
      contentHeader : Windows.Media.Protection.PlayReady.PlayReadyContentHeader'Class;
      fullyEvaluated : WinRt.Boolean
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession2, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyLicenseSession2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable do
         m_Interface := QInterface (this.m_IPlayReadyLicenseSession.all);
         Hr := m_Interface.CreateLicenseIterable (contentHeader.m_IPlayReadyContentHeader.all, fullyEvaluated, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyMeteringReportServiceRequest

   procedure Initialize (this : in out PlayReadyMeteringReportServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyMeteringReportServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyMeteringReportServiceRequest, IPlayReadyMeteringReportServiceRequest_Ptr);
   begin
      if this.m_IPlayReadyMeteringReportServiceRequest /= null then
         if this.m_IPlayReadyMeteringReportServiceRequest.all /= null then
            RefCount := this.m_IPlayReadyMeteringReportServiceRequest.all.Release;
            Free (this.m_IPlayReadyMeteringReportServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyMeteringReportServiceRequest

   function Constructor return PlayReadyMeteringReportServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest;
   begin
      return RetVal : PlayReadyMeteringReportServiceRequest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyMeteringReportServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest;
            Retval.m_IPlayReadyMeteringReportServiceRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyMeteringReportServiceRequest

   function get_MeteringCertificate
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadyMeteringReportServiceRequest.all.get_MeteringCertificate (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   procedure put_MeteringCertificate
   (
      this : in out PlayReadyMeteringReportServiceRequest;
      meteringCertBytes : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_meteringCertBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IPlayReadyMeteringReportServiceRequest.all.put_MeteringCertificate (WinRt.UInt32(meteringCertBytes'Length), Convert_meteringCertBytes (meteringCertBytes (meteringCertBytes'First)'Address));
   end;

   function get_Uri
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadyMeteringReportServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadyMeteringReportServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadyMeteringReportServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadyMeteringReportServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadyMeteringReportServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyMeteringReportServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyMeteringReportServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadyRevocationServiceRequest

   procedure Initialize (this : in out PlayReadyRevocationServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadyRevocationServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadyRevocationServiceRequest, IPlayReadyRevocationServiceRequest_Ptr);
   begin
      if this.m_IPlayReadyRevocationServiceRequest /= null then
         if this.m_IPlayReadyRevocationServiceRequest.all /= null then
            RefCount := this.m_IPlayReadyRevocationServiceRequest.all.Release;
            Free (this.m_IPlayReadyRevocationServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadyRevocationServiceRequest

   function Constructor return PlayReadyRevocationServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest");
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest;
   begin
      return RetVal : PlayReadyRevocationServiceRequest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayReadyRevocationServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest;
            Retval.m_IPlayReadyRevocationServiceRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadyRevocationServiceRequest

   function get_Uri
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadyRevocationServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadyRevocationServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadyRevocationServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadyRevocationServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadyRevocationServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadyRevocationServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadyRevocationServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadySecureStopIterable

   procedure Initialize (this : in out PlayReadySecureStopIterable) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadySecureStopIterable) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadySecureStopIterable

   function Constructor
   (
      publisherCertBytes : WinRt.Byte_Array
   )
   return PlayReadySecureStopIterable is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadySecureStopIterable");
      m_Factory    : access IPlayReadySecureStopIterableFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased GenericObject;
      function Convert_publisherCertBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : PlayReadySecureStopIterable do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadySecureStopIterableFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (WinRt.UInt32(publisherCertBytes'Length), Convert_publisherCertBytes (publisherCertBytes (publisherCertBytes'First)'Address), m_ComRetVal'Access);
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadySecureStopIterable

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest>
   function First
   (
      this : in out PlayReadySecureStopIterable
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IPlayReadySecureStopServiceRequest.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2374681209, 45181, 21256, (156, 120, 28, 92, 153, 108, 160, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IPlayReadySecureStopServiceRequest.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadySecureStopIterator

   procedure Initialize (this : in out PlayReadySecureStopIterator) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadySecureStopIterator) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadySecureStopIterator

   -- Generic Interface Windows.Foundation.Collections.IIterator`1<Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest>
   function get_Current
   (
      this : in out PlayReadySecureStopIterator
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadySecureStopServiceRequest.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest;
      m_GenericIID     : aliased WinRt.IID := (2008039835, 16203, 24313, (174, 11, 136, 17, 67, 177, 114, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadySecureStopServiceRequest.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Current (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HasCurrent
   (
      this : in out PlayReadySecureStopIterator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadySecureStopServiceRequest.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2008039835, 16203, 24313, (174, 11, 136, 17, 67, 177, 114, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadySecureStopServiceRequest.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_HasCurrent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function MoveNext
   (
      this : in out PlayReadySecureStopIterator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadySecureStopServiceRequest.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2008039835, 16203, 24313, (174, 11, 136, 17, 67, 177, 114, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadySecureStopServiceRequest.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.MoveNext (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out PlayReadySecureStopIterator;
      items : Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterator_IPlayReadySecureStopServiceRequest.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2008039835, 16203, 24313, (174, 11, 136, 17, 67, 177, 114, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterator_IPlayReadySecureStopServiceRequest.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadySecureStopServiceRequest

   procedure Initialize (this : in out PlayReadySecureStopServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadySecureStopServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadySecureStopServiceRequest, IPlayReadySecureStopServiceRequest_Ptr);
   begin
      if this.m_IPlayReadySecureStopServiceRequest /= null then
         if this.m_IPlayReadySecureStopServiceRequest.all /= null then
            RefCount := this.m_IPlayReadySecureStopServiceRequest.all.Release;
            Free (this.m_IPlayReadySecureStopServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayReadySecureStopServiceRequest

   function Constructor
   (
      publisherCertBytes : WinRt.Byte_Array
   )
   return PlayReadySecureStopServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest");
      m_Factory    : access IPlayReadySecureStopServiceRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest;
      function Convert_publisherCertBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : PlayReadySecureStopServiceRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadySecureStopServiceRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (WinRt.UInt32(publisherCertBytes'Length), Convert_publisherCertBytes (publisherCertBytes (publisherCertBytes'First)'Address), m_ComRetVal'Access);
            Retval.m_IPlayReadySecureStopServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest;
            Retval.m_IPlayReadySecureStopServiceRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      sessionID : WinRt.Guid;
      publisherCertBytes : WinRt.Byte_Array
   )
   return PlayReadySecureStopServiceRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest");
      m_Factory    : access IPlayReadySecureStopServiceRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest;
      function Convert_publisherCertBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : PlayReadySecureStopServiceRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadySecureStopServiceRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceFromSessionID (sessionID, WinRt.UInt32(publisherCertBytes'Length), Convert_publisherCertBytes (publisherCertBytes (publisherCertBytes'First)'Address), m_ComRetVal'Access);
            Retval.m_IPlayReadySecureStopServiceRequest := new Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest;
            Retval.m_IPlayReadySecureStopServiceRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadySecureStopServiceRequest

   function get_SessionID
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlayReadySecureStopServiceRequest.all.get_SessionID (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StartTime
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPlayReadySecureStopServiceRequest.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateTime
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPlayReadySecureStopServiceRequest.all.get_UpdateTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Stopped
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayReadySecureStopServiceRequest.all.get_Stopped (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PublisherCertificate
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadySecureStopServiceRequest.all.get_PublisherCertificate (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_Uri
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out PlayReadySecureStopServiceRequest;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.put_Uri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ResponseCustomData
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.get_ResponseCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChallengeCustomData
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.get_ChallengeCustomData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ChallengeCustomData
   (
      this : in out PlayReadySecureStopServiceRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.put_ChallengeCustomData (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure BeginServiceRequest
   (
      this : in out PlayReadySecureStopServiceRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.BeginServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function NextServiceRequest
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.NextServiceRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GenerateManualEnablingChallenge
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.PlayReady.PlayReadySoapMessage do
         m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
         Hr := m_Interface.GenerateManualEnablingChallenge (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPlayReadySoapMessage := new Windows.Media.Protection.PlayReady.IPlayReadySoapMessage;
         Retval.m_IPlayReadySoapMessage.all := m_ComRetVal;
      end return;
   end;

   function ProcessManualEnablingResponse
   (
      this : in out PlayReadySecureStopServiceRequest;
      responseBytes : WinRt.Byte_Array
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest, WinRt.Windows.Media.Protection.PlayReady.IID_IPlayReadyServiceRequest'Unchecked_Access);
      function Convert_responseBytes is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.ProcessManualEnablingResponse (WinRt.UInt32(responseBytes'Length), Convert_responseBytes (responseBytes (responseBytes'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ProtectionSystem
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.get_ProtectionSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PlayReadySecureStopServiceRequest
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest_Interface, WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest, WinRt.Windows.Media.Protection.IID_IMediaProtectionServiceRequest'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayReadySecureStopServiceRequest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayReadySoapMessage

   procedure Initialize (this : in out PlayReadySoapMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayReadySoapMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayReadySoapMessage, IPlayReadySoapMessage_Ptr);
   begin
      if this.m_IPlayReadySoapMessage /= null then
         if this.m_IPlayReadySoapMessage.all /= null then
            RefCount := this.m_IPlayReadySoapMessage.all.Release;
            Free (this.m_IPlayReadySoapMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayReadySoapMessage

   function GetMessageBody
   (
      this : in out PlayReadySoapMessage
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayReadySoapMessage.all.GetMessageBody (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_MessageHeaders
   (
      this : in out PlayReadySoapMessage
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IPlayReadySoapMessage.all.get_MessageHeaders (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Uri
   (
      this : in out PlayReadySoapMessage
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IPlayReadySoapMessage.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlayReadyStatics is

      function get_SecureStopServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SecureStopServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function CheckSupportedHardware
      (
         hwdrmFeature : Windows.Media.Protection.PlayReady.PlayReadyHardwareDRMFeatures
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CheckSupportedHardware (hwdrmFeature, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DomainJoinServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DomainJoinServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DomainLeaveServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DomainLeaveServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IndividualizationServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IndividualizationServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LicenseAcquirerServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LicenseAcquirerServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MeteringReportServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MeteringReportServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RevocationServiceRequestType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RevocationServiceRequestType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MediaProtectionSystemId
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MediaProtectionSystemId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PlayReadySecurityVersion
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PlayReadySecurityVersion (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PlayReadyCertificateSecurityLevel
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PlayReadyCertificateSecurityLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InputTrustAuthorityToCreate
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InputTrustAuthorityToCreate (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ProtectionSystemId
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProtectionSystemId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HardwareDRMDisabledAtTime
      return IReference_DateTime.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IReference_DateTime.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HardwareDRMDisabledAtTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_HardwareDRMDisabledUntilTime
      return IReference_DateTime.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IReference_DateTime.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HardwareDRMDisabledUntilTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      procedure ResetHardwareDRMDisabled is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.PlayReady.PlayReadyStatics");
         m_Factory        : access WinRt.Windows.Media.Protection.PlayReady.IPlayReadyStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlayReadyStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ResetHardwareDRMDisabled;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end PlayReadyStatics;

end;

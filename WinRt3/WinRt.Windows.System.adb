--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Search;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System.Diagnostics;
with WinRt.Windows.System.RemoteSystems;
with WinRt.Windows.UI.Popups;
with WinRt.Windows.UI.ViewManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System is

   package IAsyncOperation_AppActivationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.IAppActivationResult);
   package AsyncOperationCompletedHandler_AppActivationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.IAppActivationResult);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_DiagnosticAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.DiagnosticAccessStatus);
   package AsyncOperationCompletedHandler_DiagnosticAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.DiagnosticAccessStatus);

   package IAsyncOperation_AppExecutionStateChangeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.IAppExecutionStateChangeResult);
   package AsyncOperationCompletedHandler_AppExecutionStateChangeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.IAppExecutionStateChangeResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_LaunchUriResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.ILaunchUriResult);
   package AsyncOperationCompletedHandler_LaunchUriResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.ILaunchUriResult);

   package IAsyncOperation_LaunchQuerySupportStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.LaunchQuerySupportStatus);
   package AsyncOperationCompletedHandler_LaunchQuerySupportStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.LaunchQuerySupportStatus);

   package IAsyncOperation_LaunchUriStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.LaunchUriStatus);
   package AsyncOperationCompletedHandler_LaunchUriStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.LaunchUriStatus);

   package IAsyncOperation_ProcessLauncherResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.IProcessLauncherResult);
   package AsyncOperationCompletedHandler_ProcessLauncherResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.IProcessLauncherResult);

   package IAsyncOperation_RemoteLaunchUriStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.RemoteLaunchUriStatus);
   package AsyncOperationCompletedHandler_RemoteLaunchUriStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.RemoteLaunchUriStatus);

   package IAsyncOperation_AutoUpdateTimeZoneStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.AutoUpdateTimeZoneStatus);
   package AsyncOperationCompletedHandler_AutoUpdateTimeZoneStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.AutoUpdateTimeZoneStatus);

   package IAsyncOperation_IInspectable is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.IInspectable);
   package AsyncOperationCompletedHandler_IInspectable is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.IInspectable);

   package IAsyncOperation_IPropertySet is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Foundation.Collections.IPropertySet);
   package AsyncOperationCompletedHandler_IPropertySet is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Foundation.Collections.IPropertySet);

   package IAsyncOperation_IRandomAccessStreamReference is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);
   package AsyncOperationCompletedHandler_IRandomAccessStreamReference is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);

   package IAsyncOperation_User is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.IUser);
   package AsyncOperationCompletedHandler_User is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.IUser);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppActivationResult

   procedure Initialize (this : in out AppActivationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppActivationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppActivationResult, IAppActivationResult_Ptr);
   begin
      if this.m_IAppActivationResult /= null then
         if this.m_IAppActivationResult.all /= null then
            RefCount := this.m_IAppActivationResult.all.Release;
            Free (this.m_IAppActivationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppActivationResult

   function get_ExtendedError
   (
      this : in out AppActivationResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IAppActivationResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppResourceGroupInfo
   (
      this : in out AppActivationResult
   )
   return WinRt.Windows.System.AppResourceGroupInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppResourceGroupInfo;
   begin
      return RetVal : WinRt.Windows.System.AppResourceGroupInfo do
         Hr := this.m_IAppActivationResult.all.get_AppResourceGroupInfo (m_ComRetVal'Access);
         Retval.m_IAppResourceGroupInfo := new Windows.System.IAppResourceGroupInfo;
         Retval.m_IAppResourceGroupInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppDiagnosticInfo

   procedure Initialize (this : in out AppDiagnosticInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppDiagnosticInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppDiagnosticInfo, IAppDiagnosticInfo_Ptr);
   begin
      if this.m_IAppDiagnosticInfo /= null then
         if this.m_IAppDiagnosticInfo.all /= null then
            RefCount := this.m_IAppDiagnosticInfo.all.Release;
            Free (this.m_IAppDiagnosticInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppDiagnosticInfo

   function RequestInfoAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.IAppDiagnosticInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3601454009, 63036, 22974, (160, 150, 62, 149, 87, 196, 17, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3426705278, 16736, 22143, (160, 246, 170, 154, 235, 24, 122, 243 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppDiagnosticInfoStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestInfoAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function CreateWatcher
   return WinRt.Windows.System.AppDiagnosticInfoWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.IAppDiagnosticInfoStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppDiagnosticInfoWatcher;
   begin
      return RetVal : WinRt.Windows.System.AppDiagnosticInfoWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IAppDiagnosticInfoStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppDiagnosticInfoWatcher := new Windows.System.IAppDiagnosticInfoWatcher;
            Retval.m_IAppDiagnosticInfoWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function RequestAccessAsync
   return WinRt.Windows.System.DiagnosticAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.IAppDiagnosticInfoStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DiagnosticAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DiagnosticAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.DiagnosticAccessStatus;
      m_IID            : aliased WinRt.IID := (1640045502, 9752, 22666, (167, 202, 246, 6, 145, 39, 35, 36 )); -- Windows.System.DiagnosticAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1561526999, 21655, 23186, (191, 67, 235, 139, 80, 103, 154, 171 ));
      m_Handler        : AsyncOperationCompletedHandler_DiagnosticAccessStatus.Kind := new AsyncOperationCompletedHandler_DiagnosticAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DiagnosticAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DiagnosticAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DiagnosticAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_DiagnosticAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppDiagnosticInfoStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function RequestInfoForPackageAsync
   (
      packageFamilyName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.IAppDiagnosticInfoStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3601454009, 63036, 22974, (160, 150, 62, 149, 87, 196, 17, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3426705278, 16736, 22143, (160, 246, 170, 154, 235, 24, 122, 243 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppDiagnosticInfoStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestInfoForPackageAsync (HStr_packageFamilyName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_packageFamilyName);
      return m_RetVal;
   end;

   function RequestInfoForAppAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.IAppDiagnosticInfoStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3601454009, 63036, 22974, (160, 150, 62, 149, 87, 196, 17, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3426705278, 16736, 22143, (160, 246, 170, 154, 235, 24, 122, 243 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppDiagnosticInfoStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestInfoForAppAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function RequestInfoForAppAsync
   (
      appUserModelId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.IAppDiagnosticInfoStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appUserModelId : WinRt.HString := To_HString (appUserModelId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3601454009, 63036, 22974, (160, 150, 62, 149, 87, 196, 17, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3426705278, 16736, 22143, (160, 246, 170, 154, 235, 24, 122, 243 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppDiagnosticInfoStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestInfoForAppAsync (HStr_appUserModelId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_appUserModelId);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppDiagnosticInfo

   function get_AppInfo
   (
      this : in out AppDiagnosticInfo
   )
   return WinRt.Windows.ApplicationModel.AppInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInfo do
         Hr := this.m_IAppDiagnosticInfo.all.get_AppInfo (m_ComRetVal'Access);
         Retval.m_IAppInfo := new Windows.ApplicationModel.IAppInfo;
         Retval.m_IAppInfo.all := m_ComRetVal;
      end return;
   end;

   function GetResourceGroups
   (
      this : in out AppDiagnosticInfo
   )
   return IVector_IAppResourceGroupInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppDiagnosticInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAppResourceGroupInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppDiagnosticInfo_Interface, WinRt.Windows.System.IAppDiagnosticInfo2, WinRt.Windows.System.IID_IAppDiagnosticInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppDiagnosticInfo.all);
      Hr := m_Interface.GetResourceGroups (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IAppResourceGroupInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function CreateResourceGroupWatcher
   (
      this : in out AppDiagnosticInfo
   )
   return WinRt.Windows.System.AppResourceGroupInfoWatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppDiagnosticInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppResourceGroupInfoWatcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppDiagnosticInfo_Interface, WinRt.Windows.System.IAppDiagnosticInfo2, WinRt.Windows.System.IID_IAppDiagnosticInfo2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.AppResourceGroupInfoWatcher do
         m_Interface := QInterface (this.m_IAppDiagnosticInfo.all);
         Hr := m_Interface.CreateResourceGroupWatcher (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAppResourceGroupInfoWatcher := new Windows.System.IAppResourceGroupInfoWatcher;
         Retval.m_IAppResourceGroupInfoWatcher.all := m_ComRetVal;
      end return;
   end;

   function LaunchAsync
   (
      this : in out AppDiagnosticInfo
   )
   return WinRt.Windows.System.AppActivationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppDiagnosticInfo3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppActivationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppActivationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.IAppActivationResult;
      m_IID            : aliased WinRt.IID := (3069408184, 48461, 20671, (130, 180, 91, 29, 69, 42, 95, 131 )); -- Windows.System.AppActivationResult;
      m_HandlerIID     : aliased WinRt.IID := (2523800327, 54569, 20714, (152, 114, 141, 251, 53, 207, 239, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_AppActivationResult.Kind := new AsyncOperationCompletedHandler_AppActivationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppActivationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppActivationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppActivationResult.Kind_Delegate, AsyncOperationCompletedHandler_AppActivationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppDiagnosticInfo_Interface, WinRt.Windows.System.IAppDiagnosticInfo3, WinRt.Windows.System.IID_IAppDiagnosticInfo3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.AppActivationResult do
         m_Interface := QInterface (this.m_IAppDiagnosticInfo.all);
         Hr := m_Interface.LaunchAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppActivationResult := new Windows.System.IAppActivationResult;
                  Retval.m_IAppActivationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppDiagnosticInfoWatcher

   procedure Initialize (this : in out AppDiagnosticInfoWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppDiagnosticInfoWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppDiagnosticInfoWatcher, IAppDiagnosticInfoWatcher_Ptr);
   begin
      if this.m_IAppDiagnosticInfoWatcher /= null then
         if this.m_IAppDiagnosticInfoWatcher.all /= null then
            RefCount := this.m_IAppDiagnosticInfoWatcher.all.Release;
            Free (this.m_IAppDiagnosticInfoWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppDiagnosticInfoWatcher

   function add_Added
   (
      this : in out AppDiagnosticInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out AppDiagnosticInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.remove_Added (token);
   end;

   function add_Removed
   (
      this : in out AppDiagnosticInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out AppDiagnosticInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.remove_Removed (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out AppDiagnosticInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out AppDiagnosticInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out AppDiagnosticInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out AppDiagnosticInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.remove_Stopped (token);
   end;

   function get_Status
   (
      this : in out AppDiagnosticInfoWatcher
   )
   return WinRt.Windows.System.AppDiagnosticInfoWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.AppDiagnosticInfoWatcherStatus;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out AppDiagnosticInfoWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out AppDiagnosticInfoWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppDiagnosticInfoWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppDiagnosticInfoWatcherEventArgs

   procedure Initialize (this : in out AppDiagnosticInfoWatcherEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppDiagnosticInfoWatcherEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppDiagnosticInfoWatcherEventArgs, IAppDiagnosticInfoWatcherEventArgs_Ptr);
   begin
      if this.m_IAppDiagnosticInfoWatcherEventArgs /= null then
         if this.m_IAppDiagnosticInfoWatcherEventArgs.all /= null then
            RefCount := this.m_IAppDiagnosticInfoWatcherEventArgs.all.Release;
            Free (this.m_IAppDiagnosticInfoWatcherEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppDiagnosticInfoWatcherEventArgs

   function get_AppDiagnosticInfo
   (
      this : in out AppDiagnosticInfoWatcherEventArgs
   )
   return WinRt.Windows.System.AppDiagnosticInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppDiagnosticInfo;
   begin
      return RetVal : WinRt.Windows.System.AppDiagnosticInfo do
         Hr := this.m_IAppDiagnosticInfoWatcherEventArgs.all.get_AppDiagnosticInfo (m_ComRetVal'Access);
         Retval.m_IAppDiagnosticInfo := new Windows.System.IAppDiagnosticInfo;
         Retval.m_IAppDiagnosticInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExecutionStateChangeResult

   procedure Initialize (this : in out AppExecutionStateChangeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExecutionStateChangeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExecutionStateChangeResult, IAppExecutionStateChangeResult_Ptr);
   begin
      if this.m_IAppExecutionStateChangeResult /= null then
         if this.m_IAppExecutionStateChangeResult.all /= null then
            RefCount := this.m_IAppExecutionStateChangeResult.all.Release;
            Free (this.m_IAppExecutionStateChangeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExecutionStateChangeResult

   function get_ExtendedError
   (
      this : in out AppExecutionStateChangeResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IAppExecutionStateChangeResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppMemoryReport

   procedure Initialize (this : in out AppMemoryReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppMemoryReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppMemoryReport, IAppMemoryReport_Ptr);
   begin
      if this.m_IAppMemoryReport /= null then
         if this.m_IAppMemoryReport.all /= null then
            RefCount := this.m_IAppMemoryReport.all.Release;
            Free (this.m_IAppMemoryReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppMemoryReport

   function get_PrivateCommitUsage
   (
      this : in out AppMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppMemoryReport.all.get_PrivateCommitUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeakPrivateCommitUsage
   (
      this : in out AppMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppMemoryReport.all.get_PeakPrivateCommitUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalCommitUsage
   (
      this : in out AppMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppMemoryReport.all.get_TotalCommitUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalCommitLimit
   (
      this : in out AppMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppMemoryReport.all.get_TotalCommitLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpectedTotalCommitLimit
   (
      this : in out AppMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppMemoryReport2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppMemoryReport_Interface, WinRt.Windows.System.IAppMemoryReport2, WinRt.Windows.System.IID_IAppMemoryReport2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppMemoryReport.all);
      Hr := m_Interface.get_ExpectedTotalCommitLimit (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppMemoryUsageLimitChangingEventArgs

   procedure Initialize (this : in out AppMemoryUsageLimitChangingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppMemoryUsageLimitChangingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppMemoryUsageLimitChangingEventArgs, IAppMemoryUsageLimitChangingEventArgs_Ptr);
   begin
      if this.m_IAppMemoryUsageLimitChangingEventArgs /= null then
         if this.m_IAppMemoryUsageLimitChangingEventArgs.all /= null then
            RefCount := this.m_IAppMemoryUsageLimitChangingEventArgs.all.Release;
            Free (this.m_IAppMemoryUsageLimitChangingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppMemoryUsageLimitChangingEventArgs

   function get_OldLimit
   (
      this : in out AppMemoryUsageLimitChangingEventArgs
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppMemoryUsageLimitChangingEventArgs.all.get_OldLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewLimit
   (
      this : in out AppMemoryUsageLimitChangingEventArgs
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppMemoryUsageLimitChangingEventArgs.all.get_NewLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupBackgroundTaskReport

   procedure Initialize (this : in out AppResourceGroupBackgroundTaskReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupBackgroundTaskReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupBackgroundTaskReport, IAppResourceGroupBackgroundTaskReport_Ptr);
   begin
      if this.m_IAppResourceGroupBackgroundTaskReport /= null then
         if this.m_IAppResourceGroupBackgroundTaskReport.all /= null then
            RefCount := this.m_IAppResourceGroupBackgroundTaskReport.all.Release;
            Free (this.m_IAppResourceGroupBackgroundTaskReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupBackgroundTaskReport

   function get_TaskId
   (
      this : in out AppResourceGroupBackgroundTaskReport
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IAppResourceGroupBackgroundTaskReport.all.get_TaskId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out AppResourceGroupBackgroundTaskReport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppResourceGroupBackgroundTaskReport.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Trigger
   (
      this : in out AppResourceGroupBackgroundTaskReport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppResourceGroupBackgroundTaskReport.all.get_Trigger (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EntryPoint
   (
      this : in out AppResourceGroupBackgroundTaskReport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppResourceGroupBackgroundTaskReport.all.get_EntryPoint (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupInfo

   procedure Initialize (this : in out AppResourceGroupInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupInfo, IAppResourceGroupInfo_Ptr);
   begin
      if this.m_IAppResourceGroupInfo /= null then
         if this.m_IAppResourceGroupInfo.all /= null then
            RefCount := this.m_IAppResourceGroupInfo.all.Release;
            Free (this.m_IAppResourceGroupInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupInfo

   function get_InstanceId
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IAppResourceGroupInfo.all.get_InstanceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsShared
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppResourceGroupInfo.all.get_IsShared (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetBackgroundTaskReports
   (
      this : in out AppResourceGroupInfo
   )
   return IVector_IAppResourceGroupBackgroundTaskReport.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAppResourceGroupBackgroundTaskReport.Kind;
   begin
      Hr := this.m_IAppResourceGroupInfo.all.GetBackgroundTaskReports (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IAppResourceGroupBackgroundTaskReport (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetMemoryReport
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Windows.System.AppResourceGroupMemoryReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppResourceGroupMemoryReport;
   begin
      return RetVal : WinRt.Windows.System.AppResourceGroupMemoryReport do
         Hr := this.m_IAppResourceGroupInfo.all.GetMemoryReport (m_ComRetVal'Access);
         Retval.m_IAppResourceGroupMemoryReport := new Windows.System.IAppResourceGroupMemoryReport;
         Retval.m_IAppResourceGroupMemoryReport.all := m_ComRetVal;
      end return;
   end;

   function GetProcessDiagnosticInfos
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IAppResourceGroupInfo.all.GetProcessDiagnosticInfos (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetStateReport
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Windows.System.AppResourceGroupStateReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppResourceGroupStateReport;
   begin
      return RetVal : WinRt.Windows.System.AppResourceGroupStateReport do
         Hr := this.m_IAppResourceGroupInfo.all.GetStateReport (m_ComRetVal'Access);
         Retval.m_IAppResourceGroupStateReport := new Windows.System.IAppResourceGroupStateReport;
         Retval.m_IAppResourceGroupStateReport.all := m_ComRetVal;
      end return;
   end;

   function StartSuspendAsync
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Windows.System.AppExecutionStateChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppResourceGroupInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppExecutionStateChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppExecutionStateChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.IAppExecutionStateChangeResult;
      m_IID            : aliased WinRt.IID := (3260140578, 43945, 22968, (191, 135, 32, 103, 127, 196, 146, 78 )); -- Windows.System.AppExecutionStateChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (3244471706, 48594, 24141, (163, 9, 180, 118, 235, 151, 184, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind := new AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppExecutionStateChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppResourceGroupInfo_Interface, WinRt.Windows.System.IAppResourceGroupInfo2, WinRt.Windows.System.IID_IAppResourceGroupInfo2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.AppExecutionStateChangeResult do
         m_Interface := QInterface (this.m_IAppResourceGroupInfo.all);
         Hr := m_Interface.StartSuspendAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppExecutionStateChangeResult := new Windows.System.IAppExecutionStateChangeResult;
                  Retval.m_IAppExecutionStateChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StartResumeAsync
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Windows.System.AppExecutionStateChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppResourceGroupInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppExecutionStateChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppExecutionStateChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.IAppExecutionStateChangeResult;
      m_IID            : aliased WinRt.IID := (3260140578, 43945, 22968, (191, 135, 32, 103, 127, 196, 146, 78 )); -- Windows.System.AppExecutionStateChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (3244471706, 48594, 24141, (163, 9, 180, 118, 235, 151, 184, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind := new AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppExecutionStateChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppResourceGroupInfo_Interface, WinRt.Windows.System.IAppResourceGroupInfo2, WinRt.Windows.System.IID_IAppResourceGroupInfo2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.AppExecutionStateChangeResult do
         m_Interface := QInterface (this.m_IAppResourceGroupInfo.all);
         Hr := m_Interface.StartResumeAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppExecutionStateChangeResult := new Windows.System.IAppExecutionStateChangeResult;
                  Retval.m_IAppExecutionStateChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StartTerminateAsync
   (
      this : in out AppResourceGroupInfo
   )
   return WinRt.Windows.System.AppExecutionStateChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IAppResourceGroupInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppExecutionStateChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppExecutionStateChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.IAppExecutionStateChangeResult;
      m_IID            : aliased WinRt.IID := (3260140578, 43945, 22968, (191, 135, 32, 103, 127, 196, 146, 78 )); -- Windows.System.AppExecutionStateChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (3244471706, 48594, 24141, (163, 9, 180, 118, 235, 151, 184, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind := new AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppExecutionStateChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_AppExecutionStateChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IAppResourceGroupInfo_Interface, WinRt.Windows.System.IAppResourceGroupInfo2, WinRt.Windows.System.IID_IAppResourceGroupInfo2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.AppExecutionStateChangeResult do
         m_Interface := QInterface (this.m_IAppResourceGroupInfo.all);
         Hr := m_Interface.StartTerminateAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppExecutionStateChangeResult := new Windows.System.IAppExecutionStateChangeResult;
                  Retval.m_IAppExecutionStateChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupInfoWatcher

   procedure Initialize (this : in out AppResourceGroupInfoWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupInfoWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupInfoWatcher, IAppResourceGroupInfoWatcher_Ptr);
   begin
      if this.m_IAppResourceGroupInfoWatcher /= null then
         if this.m_IAppResourceGroupInfoWatcher.all /= null then
            RefCount := this.m_IAppResourceGroupInfoWatcher.all.Release;
            Free (this.m_IAppResourceGroupInfoWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupInfoWatcher

   function add_Added
   (
      this : in out AppResourceGroupInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out AppResourceGroupInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.remove_Added (token);
   end;

   function add_Removed
   (
      this : in out AppResourceGroupInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out AppResourceGroupInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.remove_Removed (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out AppResourceGroupInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out AppResourceGroupInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out AppResourceGroupInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out AppResourceGroupInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.remove_Stopped (token);
   end;

   function add_ExecutionStateChanged
   (
      this : in out AppResourceGroupInfoWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.add_ExecutionStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ExecutionStateChanged
   (
      this : in out AppResourceGroupInfoWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.remove_ExecutionStateChanged (token);
   end;

   function get_Status
   (
      this : in out AppResourceGroupInfoWatcher
   )
   return WinRt.Windows.System.AppResourceGroupInfoWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.AppResourceGroupInfoWatcherStatus;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out AppResourceGroupInfoWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out AppResourceGroupInfoWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupInfoWatcherEventArgs

   procedure Initialize (this : in out AppResourceGroupInfoWatcherEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupInfoWatcherEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupInfoWatcherEventArgs, IAppResourceGroupInfoWatcherEventArgs_Ptr);
   begin
      if this.m_IAppResourceGroupInfoWatcherEventArgs /= null then
         if this.m_IAppResourceGroupInfoWatcherEventArgs.all /= null then
            RefCount := this.m_IAppResourceGroupInfoWatcherEventArgs.all.Release;
            Free (this.m_IAppResourceGroupInfoWatcherEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupInfoWatcherEventArgs

   function get_AppDiagnosticInfos
   (
      this : in out AppResourceGroupInfoWatcherEventArgs
   )
   return IVectorView_IAppDiagnosticInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppDiagnosticInfo.Kind;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcherEventArgs.all.get_AppDiagnosticInfos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppDiagnosticInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AppResourceGroupInfo
   (
      this : in out AppResourceGroupInfoWatcherEventArgs
   )
   return WinRt.Windows.System.AppResourceGroupInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppResourceGroupInfo;
   begin
      return RetVal : WinRt.Windows.System.AppResourceGroupInfo do
         Hr := this.m_IAppResourceGroupInfoWatcherEventArgs.all.get_AppResourceGroupInfo (m_ComRetVal'Access);
         Retval.m_IAppResourceGroupInfo := new Windows.System.IAppResourceGroupInfo;
         Retval.m_IAppResourceGroupInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupInfoWatcherExecutionStateChangedEventArgs

   procedure Initialize (this : in out AppResourceGroupInfoWatcherExecutionStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupInfoWatcherExecutionStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs, IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs /= null then
         if this.m_IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs.all.Release;
            Free (this.m_IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupInfoWatcherExecutionStateChangedEventArgs

   function get_AppDiagnosticInfos
   (
      this : in out AppResourceGroupInfoWatcherExecutionStateChangedEventArgs
   )
   return IVectorView_IAppDiagnosticInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppDiagnosticInfo.Kind;
   begin
      Hr := this.m_IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs.all.get_AppDiagnosticInfos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppDiagnosticInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AppResourceGroupInfo
   (
      this : in out AppResourceGroupInfoWatcherExecutionStateChangedEventArgs
   )
   return WinRt.Windows.System.AppResourceGroupInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppResourceGroupInfo;
   begin
      return RetVal : WinRt.Windows.System.AppResourceGroupInfo do
         Hr := this.m_IAppResourceGroupInfoWatcherExecutionStateChangedEventArgs.all.get_AppResourceGroupInfo (m_ComRetVal'Access);
         Retval.m_IAppResourceGroupInfo := new Windows.System.IAppResourceGroupInfo;
         Retval.m_IAppResourceGroupInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupMemoryReport

   procedure Initialize (this : in out AppResourceGroupMemoryReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupMemoryReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupMemoryReport, IAppResourceGroupMemoryReport_Ptr);
   begin
      if this.m_IAppResourceGroupMemoryReport /= null then
         if this.m_IAppResourceGroupMemoryReport.all /= null then
            RefCount := this.m_IAppResourceGroupMemoryReport.all.Release;
            Free (this.m_IAppResourceGroupMemoryReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupMemoryReport

   function get_CommitUsageLimit
   (
      this : in out AppResourceGroupMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppResourceGroupMemoryReport.all.get_CommitUsageLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CommitUsageLevel
   (
      this : in out AppResourceGroupMemoryReport
   )
   return WinRt.Windows.System.AppMemoryUsageLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.AppMemoryUsageLevel;
   begin
      Hr := this.m_IAppResourceGroupMemoryReport.all.get_CommitUsageLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrivateCommitUsage
   (
      this : in out AppResourceGroupMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppResourceGroupMemoryReport.all.get_PrivateCommitUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalCommitUsage
   (
      this : in out AppResourceGroupMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppResourceGroupMemoryReport.all.get_TotalCommitUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppResourceGroupStateReport

   procedure Initialize (this : in out AppResourceGroupStateReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppResourceGroupStateReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppResourceGroupStateReport, IAppResourceGroupStateReport_Ptr);
   begin
      if this.m_IAppResourceGroupStateReport /= null then
         if this.m_IAppResourceGroupStateReport.all /= null then
            RefCount := this.m_IAppResourceGroupStateReport.all.Release;
            Free (this.m_IAppResourceGroupStateReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppResourceGroupStateReport

   function get_ExecutionState
   (
      this : in out AppResourceGroupStateReport
   )
   return WinRt.Windows.System.AppResourceGroupExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.AppResourceGroupExecutionState;
   begin
      Hr := this.m_IAppResourceGroupStateReport.all.get_ExecutionState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EnergyQuotaState
   (
      this : in out AppResourceGroupStateReport
   )
   return WinRt.Windows.System.AppResourceGroupEnergyQuotaState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.AppResourceGroupEnergyQuotaState;
   begin
      Hr := this.m_IAppResourceGroupStateReport.all.get_EnergyQuotaState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppUriHandlerHost

   procedure Initialize (this : in out AppUriHandlerHost) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppUriHandlerHost) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppUriHandlerHost, IAppUriHandlerHost_Ptr);
   begin
      if this.m_IAppUriHandlerHost /= null then
         if this.m_IAppUriHandlerHost.all /= null then
            RefCount := this.m_IAppUriHandlerHost.all.Release;
            Free (this.m_IAppUriHandlerHost);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppUriHandlerHost

   function Constructor return AppUriHandlerHost is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.AppUriHandlerHost");
      m_ComRetVal  : aliased Windows.System.IAppUriHandlerHost;
   begin
      return RetVal : AppUriHandlerHost do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppUriHandlerHost := new Windows.System.IAppUriHandlerHost;
            Retval.m_IAppUriHandlerHost.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString
   )
   return AppUriHandlerHost is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.AppUriHandlerHost");
      m_Factory    : access IAppUriHandlerHostFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.IAppUriHandlerHost;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : AppUriHandlerHost do
         Hr := RoGetActivationFactory (m_hString, IID_IAppUriHandlerHostFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (HStr_name, m_ComRetVal'Access);
            Retval.m_IAppUriHandlerHost := new Windows.System.IAppUriHandlerHost;
            Retval.m_IAppUriHandlerHost.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppUriHandlerHost

   function get_Name
   (
      this : in out AppUriHandlerHost
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppUriHandlerHost.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out AppUriHandlerHost;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppUriHandlerHost.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppUriHandlerRegistration

   procedure Initialize (this : in out AppUriHandlerRegistration) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppUriHandlerRegistration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppUriHandlerRegistration, IAppUriHandlerRegistration_Ptr);
   begin
      if this.m_IAppUriHandlerRegistration /= null then
         if this.m_IAppUriHandlerRegistration.all /= null then
            RefCount := this.m_IAppUriHandlerRegistration.all.Release;
            Free (this.m_IAppUriHandlerRegistration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppUriHandlerRegistration

   function get_Name
   (
      this : in out AppUriHandlerRegistration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppUriHandlerRegistration.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_User
   (
      this : in out AppUriHandlerRegistration
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IAppUriHandlerRegistration.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function GetAppAddedHostsAsync
   (
      this : in out AppUriHandlerRegistration
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2826848375, 63120, 22659, (178, 189, 158, 60, 42, 182, 100, 19 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3609535116, 7629, 22344, (168, 74, 229, 176, 60, 65, 227, 151 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppUriHandlerRegistration.all.GetAppAddedHostsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure SetAppAddedHostsAsync
   (
      this : in out AppUriHandlerRegistration;
      hosts : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppUriHandlerRegistration.all.SetAppAddedHostsAsync (hosts, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppUriHandlerRegistrationManager

   procedure Initialize (this : in out AppUriHandlerRegistrationManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppUriHandlerRegistrationManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppUriHandlerRegistrationManager, IAppUriHandlerRegistrationManager_Ptr);
   begin
      if this.m_IAppUriHandlerRegistrationManager /= null then
         if this.m_IAppUriHandlerRegistrationManager.all /= null then
            RefCount := this.m_IAppUriHandlerRegistrationManager.all.Release;
            Free (this.m_IAppUriHandlerRegistrationManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppUriHandlerRegistrationManager

   function GetDefault
   return WinRt.Windows.System.AppUriHandlerRegistrationManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppUriHandlerRegistrationManager");
      m_Factory        : access WinRt.Windows.System.IAppUriHandlerRegistrationManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppUriHandlerRegistrationManager;
   begin
      return RetVal : WinRt.Windows.System.AppUriHandlerRegistrationManager do
         Hr := RoGetActivationFactory (m_hString, IID_IAppUriHandlerRegistrationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppUriHandlerRegistrationManager := new Windows.System.IAppUriHandlerRegistrationManager;
            Retval.m_IAppUriHandlerRegistrationManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user_p : Windows.System.User'Class
   )
   return WinRt.Windows.System.AppUriHandlerRegistrationManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.AppUriHandlerRegistrationManager");
      m_Factory        : access WinRt.Windows.System.IAppUriHandlerRegistrationManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppUriHandlerRegistrationManager;
   begin
      return RetVal : WinRt.Windows.System.AppUriHandlerRegistrationManager do
         Hr := RoGetActivationFactory (m_hString, IID_IAppUriHandlerRegistrationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user_p.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppUriHandlerRegistrationManager := new Windows.System.IAppUriHandlerRegistrationManager;
            Retval.m_IAppUriHandlerRegistrationManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppUriHandlerRegistrationManager

   function get_User
   (
      this : in out AppUriHandlerRegistrationManager
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IAppUriHandlerRegistrationManager.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function TryGetRegistration
   (
      this : in out AppUriHandlerRegistrationManager;
      name : WinRt.WString
   )
   return WinRt.Windows.System.AppUriHandlerRegistration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IAppUriHandlerRegistration;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.System.AppUriHandlerRegistration do
         Hr := this.m_IAppUriHandlerRegistrationManager.all.TryGetRegistration (HStr_name, m_ComRetVal'Access);
         Retval.m_IAppUriHandlerRegistration := new Windows.System.IAppUriHandlerRegistration;
         Retval.m_IAppUriHandlerRegistration.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body DateTimeSettings is

      procedure SetSystemDateTime
      (
         utcDateTime : Windows.Foundation.DateTime
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.DateTimeSettings");
         m_Factory        : access WinRt.Windows.System.IDateTimeSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDateTimeSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetSystemDateTime (utcDateTime);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end DateTimeSettings;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DispatcherQueue

   procedure Initialize (this : in out DispatcherQueue) is
   begin
      null;
   end;

   procedure Finalize (this : in out DispatcherQueue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDispatcherQueue, IDispatcherQueue_Ptr);
   begin
      if this.m_IDispatcherQueue /= null then
         if this.m_IDispatcherQueue.all /= null then
            RefCount := this.m_IDispatcherQueue.all.Release;
            Free (this.m_IDispatcherQueue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DispatcherQueue

   function GetForCurrentThread
   return WinRt.Windows.System.DispatcherQueue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.DispatcherQueue");
      m_Factory        : access WinRt.Windows.System.IDispatcherQueueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueue;
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueue do
         Hr := RoGetActivationFactory (m_hString, IID_IDispatcherQueueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentThread (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDispatcherQueue := new Windows.System.IDispatcherQueue;
            Retval.m_IDispatcherQueue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DispatcherQueue

   function CreateTimer
   (
      this : in out DispatcherQueue
   )
   return WinRt.Windows.System.DispatcherQueueTimer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueueTimer;
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueueTimer do
         Hr := this.m_IDispatcherQueue.all.CreateTimer (m_ComRetVal'Access);
         Retval.m_IDispatcherQueueTimer := new Windows.System.IDispatcherQueueTimer;
         Retval.m_IDispatcherQueueTimer.all := m_ComRetVal;
      end return;
   end;

   function TryEnqueue
   (
      this : in out DispatcherQueue;
      callback : Windows.System.DispatcherQueueHandler
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDispatcherQueue.all.TryEnqueue (callback, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryEnqueue
   (
      this : in out DispatcherQueue;
      priority : Windows.System.DispatcherQueuePriority;
      callback : Windows.System.DispatcherQueueHandler
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDispatcherQueue.all.TryEnqueue (priority, callback, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ShutdownStarting
   (
      this : in out DispatcherQueue;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDispatcherQueue.all.add_ShutdownStarting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ShutdownStarting
   (
      this : in out DispatcherQueue;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueue.all.remove_ShutdownStarting (token);
   end;

   function add_ShutdownCompleted
   (
      this : in out DispatcherQueue;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDispatcherQueue.all.add_ShutdownCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ShutdownCompleted
   (
      this : in out DispatcherQueue;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueue.all.remove_ShutdownCompleted (token);
   end;

   function get_HasThreadAccess
   (
      this : in out DispatcherQueue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IDispatcherQueue2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IDispatcherQueue_Interface, WinRt.Windows.System.IDispatcherQueue2, WinRt.Windows.System.IID_IDispatcherQueue2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDispatcherQueue.all);
      Hr := m_Interface.get_HasThreadAccess (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DispatcherQueueController

   procedure Initialize (this : in out DispatcherQueueController) is
   begin
      null;
   end;

   procedure Finalize (this : in out DispatcherQueueController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDispatcherQueueController, IDispatcherQueueController_Ptr);
   begin
      if this.m_IDispatcherQueueController /= null then
         if this.m_IDispatcherQueueController.all /= null then
            RefCount := this.m_IDispatcherQueueController.all.Release;
            Free (this.m_IDispatcherQueueController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DispatcherQueueController

   function CreateOnDedicatedThread
   return WinRt.Windows.System.DispatcherQueueController is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.DispatcherQueueController");
      m_Factory        : access WinRt.Windows.System.IDispatcherQueueControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueueController;
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueueController do
         Hr := RoGetActivationFactory (m_hString, IID_IDispatcherQueueControllerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateOnDedicatedThread (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDispatcherQueueController := new Windows.System.IDispatcherQueueController;
            Retval.m_IDispatcherQueueController.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DispatcherQueueController

   function get_DispatcherQueue
   (
      this : in out DispatcherQueueController
   )
   return WinRt.Windows.System.DispatcherQueue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueue;
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueue do
         Hr := this.m_IDispatcherQueueController.all.get_DispatcherQueue (m_ComRetVal'Access);
         Retval.m_IDispatcherQueue := new Windows.System.IDispatcherQueue;
         Retval.m_IDispatcherQueue.all := m_ComRetVal;
      end return;
   end;

   procedure ShutdownQueueAsync
   (
      this : in out DispatcherQueueController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDispatcherQueueController.all.ShutdownQueueAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DispatcherQueueHandler

   function Invoke
   (
      this : access DispatcherQueueHandler_Delegate
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback.all;
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DispatcherQueueShutdownStartingEventArgs

   procedure Initialize (this : in out DispatcherQueueShutdownStartingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DispatcherQueueShutdownStartingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDispatcherQueueShutdownStartingEventArgs, IDispatcherQueueShutdownStartingEventArgs_Ptr);
   begin
      if this.m_IDispatcherQueueShutdownStartingEventArgs /= null then
         if this.m_IDispatcherQueueShutdownStartingEventArgs.all /= null then
            RefCount := this.m_IDispatcherQueueShutdownStartingEventArgs.all.Release;
            Free (this.m_IDispatcherQueueShutdownStartingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DispatcherQueueShutdownStartingEventArgs

   function GetDeferral
   (
      this : in out DispatcherQueueShutdownStartingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IDispatcherQueueShutdownStartingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DispatcherQueueTimer

   procedure Initialize (this : in out DispatcherQueueTimer) is
   begin
      null;
   end;

   procedure Finalize (this : in out DispatcherQueueTimer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDispatcherQueueTimer, IDispatcherQueueTimer_Ptr);
   begin
      if this.m_IDispatcherQueueTimer /= null then
         if this.m_IDispatcherQueueTimer.all /= null then
            RefCount := this.m_IDispatcherQueueTimer.all.Release;
            Free (this.m_IDispatcherQueueTimer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DispatcherQueueTimer

   function get_Interval
   (
      this : in out DispatcherQueueTimer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.get_Interval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Interval
   (
      this : in out DispatcherQueueTimer;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.put_Interval (value);
   end;

   function get_IsRunning
   (
      this : in out DispatcherQueueTimer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.get_IsRunning (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsRepeating
   (
      this : in out DispatcherQueueTimer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.get_IsRepeating (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsRepeating
   (
      this : in out DispatcherQueueTimer;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.put_IsRepeating (value);
   end;

   procedure Start
   (
      this : in out DispatcherQueueTimer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.Start;
   end;

   procedure Stop
   (
      this : in out DispatcherQueueTimer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.Stop;
   end;

   function add_Tick
   (
      this : in out DispatcherQueueTimer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.add_Tick (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Tick
   (
      this : in out DispatcherQueueTimer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDispatcherQueueTimer.all.remove_Tick (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FolderLauncherOptions

   procedure Initialize (this : in out FolderLauncherOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out FolderLauncherOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFolderLauncherOptions, IFolderLauncherOptions_Ptr);
   begin
      if this.m_IFolderLauncherOptions /= null then
         if this.m_IFolderLauncherOptions.all /= null then
            RefCount := this.m_IFolderLauncherOptions.all.Release;
            Free (this.m_IFolderLauncherOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FolderLauncherOptions

   function Constructor return FolderLauncherOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.FolderLauncherOptions");
      m_ComRetVal  : aliased Windows.System.IFolderLauncherOptions;
   begin
      return RetVal : FolderLauncherOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFolderLauncherOptions := new Windows.System.IFolderLauncherOptions;
            Retval.m_IFolderLauncherOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FolderLauncherOptions

   function get_ItemsToSelect
   (
      this : in out FolderLauncherOptions
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFolderLauncherOptions.all.get_ItemsToSelect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DesiredRemainingView
   (
      this : in out FolderLauncherOptions
   )
   return WinRt.Windows.UI.ViewManagement.ViewSizePreference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherViewOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ViewSizePreference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IFolderLauncherOptions_Interface, WinRt.Windows.System.ILauncherViewOptions, WinRt.Windows.System.IID_ILauncherViewOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderLauncherOptions.all);
      Hr := m_Interface.get_DesiredRemainingView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredRemainingView
   (
      this : in out FolderLauncherOptions;
      value : Windows.UI.ViewManagement.ViewSizePreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherViewOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IFolderLauncherOptions_Interface, WinRt.Windows.System.ILauncherViewOptions, WinRt.Windows.System.IID_ILauncherViewOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderLauncherOptions.all);
      Hr := m_Interface.put_DesiredRemainingView (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownUserProperties is

      function get_DisplayName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisplayName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FirstName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FirstName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LastName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LastName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ProviderName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProviderName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AccountName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AccountName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GuestHost
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GuestHost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PrincipalName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PrincipalName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DomainName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DomainName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SessionInitiationProtocolUri
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.KnownUserProperties");
         m_Factory        : access WinRt.Windows.System.IKnownUserPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUserPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SessionInitiationProtocolUri (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownUserProperties;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LaunchUriResult

   procedure Initialize (this : in out LaunchUriResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out LaunchUriResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILaunchUriResult, ILaunchUriResult_Ptr);
   begin
      if this.m_ILaunchUriResult /= null then
         if this.m_ILaunchUriResult.all /= null then
            RefCount := this.m_ILaunchUriResult.all.Release;
            Free (this.m_ILaunchUriResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LaunchUriResult

   function get_Status
   (
      this : in out LaunchUriResult
   )
   return WinRt.Windows.System.LaunchUriStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.LaunchUriStatus;
   begin
      Hr := this.m_ILaunchUriResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Result
   (
      this : in out LaunchUriResult
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_ILaunchUriResult.all.get_Result (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body Launcher is

      function LaunchFolderPathAsync
      (
         path : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_path : WinRt.HString := To_HString (path);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFolderPathAsync (HStr_path, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_path);
         return m_RetVal;
      end;

      function LaunchFolderPathAsync
      (
         path : WinRt.WString;
         options : Windows.System.FolderLauncherOptions'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_path : WinRt.HString := To_HString (path);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFolderPathAsync (HStr_path, options.m_IFolderLauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_path);
         return m_RetVal;
      end;

      function LaunchFolderPathForUserAsync
      (
         user_p : Windows.System.User'Class;
         path : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_path : WinRt.HString := To_HString (path);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFolderPathForUserAsync (user_p.m_IUser.all, HStr_path, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_path);
         return m_RetVal;
      end;

      function LaunchFolderPathForUserAsync
      (
         user_p : Windows.System.User'Class;
         path : WinRt.WString;
         options : Windows.System.FolderLauncherOptions'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_path : WinRt.HString := To_HString (path);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFolderPathForUserAsync (user_p.m_IUser.all, HStr_path, options.m_IFolderLauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_path);
         return m_RetVal;
      end;

      function LaunchUriForResultsAsync
      (
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class
      )
      return WinRt.Windows.System.LaunchUriResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.ILaunchUriResult;
         m_IID            : aliased WinRt.IID := (2140666901, 7382, 21687, (162, 144, 172, 182, 13, 186, 129, 161 )); -- Windows.System.LaunchUriResult;
         m_HandlerIID     : aliased WinRt.IID := (1890155512, 57509, 22971, (145, 116, 129, 42, 19, 29, 133, 160 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriResult.Kind := new AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.System.LaunchUriResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LaunchUriForResultsAsync (uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILaunchUriResult := new Windows.System.ILaunchUriResult;
                        Retval.m_ILaunchUriResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function LaunchUriForResultsAsync
      (
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class;
         inputData : Windows.Foundation.Collections.ValueSet'Class
      )
      return WinRt.Windows.System.LaunchUriResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.ILaunchUriResult;
         m_IID            : aliased WinRt.IID := (2140666901, 7382, 21687, (162, 144, 172, 182, 13, 186, 129, 161 )); -- Windows.System.LaunchUriResult;
         m_HandlerIID     : aliased WinRt.IID := (1890155512, 57509, 22971, (145, 116, 129, 42, 19, 29, 133, 160 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriResult.Kind := new AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.System.LaunchUriResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LaunchUriForResultsAsync (uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, inputData.m_IPropertySet.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILaunchUriResult := new Windows.System.ILaunchUriResult;
                        Retval.m_ILaunchUriResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function LaunchUriAsync
      (
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class;
         inputData : Windows.Foundation.Collections.ValueSet'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriAsync (uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, inputData.m_IPropertySet.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function QueryUriSupportAsync
      (
         uri : Windows.Foundation.Uri'Class;
         launchQuerySupportType : Windows.System.LaunchQuerySupportType
      )
      return WinRt.Windows.System.LaunchQuerySupportStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchQuerySupportStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchQuerySupportStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchQuerySupportStatus;
         m_IID            : aliased WinRt.IID := (3881015698, 8736, 23853, (130, 196, 61, 68, 248, 117, 13, 145 )); -- Windows.System.LaunchQuerySupportStatus;
         m_HandlerIID     : aliased WinRt.IID := (428649554, 43981, 21801, (147, 63, 7, 28, 201, 63, 214, 53 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind := new AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchQuerySupportStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.QueryUriSupportAsync (uri.m_IUriRuntimeClass.all, launchQuerySupportType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function QueryUriSupportAsync
      (
         uri : Windows.Foundation.Uri'Class;
         launchQuerySupportType : Windows.System.LaunchQuerySupportType;
         packageFamilyName : WinRt.WString
      )
      return WinRt.Windows.System.LaunchQuerySupportStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchQuerySupportStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchQuerySupportStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchQuerySupportStatus;
         m_IID            : aliased WinRt.IID := (3881015698, 8736, 23853, (130, 196, 61, 68, 248, 117, 13, 145 )); -- Windows.System.LaunchQuerySupportStatus;
         m_HandlerIID     : aliased WinRt.IID := (428649554, 43981, 21801, (147, 63, 7, 28, 201, 63, 214, 53 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind := new AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchQuerySupportStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.QueryUriSupportAsync (uri.m_IUriRuntimeClass.all, launchQuerySupportType, HStr_packageFamilyName, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_packageFamilyName);
         return m_RetVal;
      end;

      function QueryFileSupportAsync
      (
         file : Windows.Storage.StorageFile'Class
      )
      return WinRt.Windows.System.LaunchQuerySupportStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchQuerySupportStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchQuerySupportStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchQuerySupportStatus;
         m_IID            : aliased WinRt.IID := (3881015698, 8736, 23853, (130, 196, 61, 68, 248, 117, 13, 145 )); -- Windows.System.LaunchQuerySupportStatus;
         m_HandlerIID     : aliased WinRt.IID := (428649554, 43981, 21801, (147, 63, 7, 28, 201, 63, 214, 53 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind := new AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchQuerySupportStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.QueryFileSupportAsync (file.m_IStorageFile.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function QueryFileSupportAsync
      (
         file : Windows.Storage.StorageFile'Class;
         packageFamilyName : WinRt.WString
      )
      return WinRt.Windows.System.LaunchQuerySupportStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchQuerySupportStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchQuerySupportStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchQuerySupportStatus;
         m_IID            : aliased WinRt.IID := (3881015698, 8736, 23853, (130, 196, 61, 68, 248, 117, 13, 145 )); -- Windows.System.LaunchQuerySupportStatus;
         m_HandlerIID     : aliased WinRt.IID := (428649554, 43981, 21801, (147, 63, 7, 28, 201, 63, 214, 53 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind := new AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchQuerySupportStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.QueryFileSupportAsync (file.m_IStorageFile.all, HStr_packageFamilyName, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_packageFamilyName);
         return m_RetVal;
      end;

      function FindUriSchemeHandlersAsync
      (
         scheme : WinRt.WString
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_scheme : WinRt.HString := To_HString (scheme);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (122961297, 34320, 20818, (176, 228, 67, 214, 228, 205, 208, 203 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (133323631, 61524, 22089, (165, 206, 179, 72, 221, 198, 24, 182 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindUriSchemeHandlersAsync (HStr_scheme, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scheme);
         return m_RetVal;
      end;

      function FindUriSchemeHandlersAsync
      (
         scheme : WinRt.WString;
         launchQuerySupportType : Windows.System.LaunchQuerySupportType
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_scheme : WinRt.HString := To_HString (scheme);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (122961297, 34320, 20818, (176, 228, 67, 214, 228, 205, 208, 203 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (133323631, 61524, 22089, (165, 206, 179, 72, 221, 198, 24, 182 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindUriSchemeHandlersAsync (HStr_scheme, launchQuerySupportType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scheme);
         return m_RetVal;
      end;

      function FindFileHandlersAsync
      (
         extension : WinRt.WString
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_extension : WinRt.HString := To_HString (extension);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (122961297, 34320, 20818, (176, 228, 67, 214, 228, 205, 208, 203 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (133323631, 61524, 22089, (165, 206, 179, 72, 221, 198, 24, 182 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindFileHandlersAsync (HStr_extension, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_extension);
         return m_RetVal;
      end;

      function QueryAppUriSupportAsync
      (
         uri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.System.LaunchQuerySupportStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchQuerySupportStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchQuerySupportStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchQuerySupportStatus;
         m_IID            : aliased WinRt.IID := (3881015698, 8736, 23853, (130, 196, 61, 68, 248, 117, 13, 145 )); -- Windows.System.LaunchQuerySupportStatus;
         m_HandlerIID     : aliased WinRt.IID := (428649554, 43981, 21801, (147, 63, 7, 28, 201, 63, 214, 53 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind := new AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchQuerySupportStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.QueryAppUriSupportAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function QueryAppUriSupportAsync
      (
         uri : Windows.Foundation.Uri'Class;
         packageFamilyName : WinRt.WString
      )
      return WinRt.Windows.System.LaunchQuerySupportStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchQuerySupportStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchQuerySupportStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchQuerySupportStatus;
         m_IID            : aliased WinRt.IID := (3881015698, 8736, 23853, (130, 196, 61, 68, 248, 117, 13, 145 )); -- Windows.System.LaunchQuerySupportStatus;
         m_HandlerIID     : aliased WinRt.IID := (428649554, 43981, 21801, (147, 63, 7, 28, 201, 63, 214, 53 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind := new AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchQuerySupportStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchQuerySupportStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.QueryAppUriSupportAsync (uri.m_IUriRuntimeClass.all, HStr_packageFamilyName, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_packageFamilyName);
         return m_RetVal;
      end;

      function FindAppUriHandlersAsync
      (
         uri : Windows.Foundation.Uri'Class
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (122961297, 34320, 20818, (176, 228, 67, 214, 228, 205, 208, 203 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (133323631, 61524, 22089, (165, 206, 179, 72, 221, 198, 24, 182 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAppUriHandlersAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriForUserAsync
      (
         user_p : Windows.System.User'Class;
         uri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.System.LaunchUriStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchUriStatus;
         m_IID            : aliased WinRt.IID := (2872930843, 42227, 22625, (176, 52, 3, 11, 21, 35, 60, 82 )); -- Windows.System.LaunchUriStatus;
         m_HandlerIID     : aliased WinRt.IID := (1376429454, 16598, 23127, (166, 220, 203, 95, 174, 165, 204, 165 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriStatus.Kind := new AsyncOperationCompletedHandler_LaunchUriStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriForUserAsync (user_p.m_IUser.all, uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriForUserAsync
      (
         user_p : Windows.System.User'Class;
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class
      )
      return WinRt.Windows.System.LaunchUriStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchUriStatus;
         m_IID            : aliased WinRt.IID := (2872930843, 42227, 22625, (176, 52, 3, 11, 21, 35, 60, 82 )); -- Windows.System.LaunchUriStatus;
         m_HandlerIID     : aliased WinRt.IID := (1376429454, 16598, 23127, (166, 220, 203, 95, 174, 165, 204, 165 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriStatus.Kind := new AsyncOperationCompletedHandler_LaunchUriStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriForUserAsync (user_p.m_IUser.all, uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriForUserAsync
      (
         user_p : Windows.System.User'Class;
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class;
         inputData : Windows.Foundation.Collections.ValueSet'Class
      )
      return WinRt.Windows.System.LaunchUriStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.LaunchUriStatus;
         m_IID            : aliased WinRt.IID := (2872930843, 42227, 22625, (176, 52, 3, 11, 21, 35, 60, 82 )); -- Windows.System.LaunchUriStatus;
         m_HandlerIID     : aliased WinRt.IID := (1376429454, 16598, 23127, (166, 220, 203, 95, 174, 165, 204, 165 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriStatus.Kind := new AsyncOperationCompletedHandler_LaunchUriStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriStatus.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriForUserAsync (user_p.m_IUser.all, uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, inputData.m_IPropertySet.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriForResultsForUserAsync
      (
         user_p : Windows.System.User'Class;
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class
      )
      return WinRt.Windows.System.LaunchUriResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.ILaunchUriResult;
         m_IID            : aliased WinRt.IID := (2140666901, 7382, 21687, (162, 144, 172, 182, 13, 186, 129, 161 )); -- Windows.System.LaunchUriResult;
         m_HandlerIID     : aliased WinRt.IID := (1890155512, 57509, 22971, (145, 116, 129, 42, 19, 29, 133, 160 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriResult.Kind := new AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.System.LaunchUriResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LaunchUriForResultsForUserAsync (user_p.m_IUser.all, uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILaunchUriResult := new Windows.System.ILaunchUriResult;
                        Retval.m_ILaunchUriResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function LaunchUriForResultsForUserAsync
      (
         user_p : Windows.System.User'Class;
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class;
         inputData : Windows.Foundation.Collections.ValueSet'Class
      )
      return WinRt.Windows.System.LaunchUriResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LaunchUriResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LaunchUriResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.ILaunchUriResult;
         m_IID            : aliased WinRt.IID := (2140666901, 7382, 21687, (162, 144, 172, 182, 13, 186, 129, 161 )); -- Windows.System.LaunchUriResult;
         m_HandlerIID     : aliased WinRt.IID := (1890155512, 57509, 22971, (145, 116, 129, 42, 19, 29, 133, 160 ));
         m_Handler        : AsyncOperationCompletedHandler_LaunchUriResult.Kind := new AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LaunchUriResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LaunchUriResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LaunchUriResult.Kind_Delegate, AsyncOperationCompletedHandler_LaunchUriResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.System.LaunchUriResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LaunchUriForResultsForUserAsync (user_p.m_IUser.all, uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, inputData.m_IPropertySet.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILaunchUriResult := new Windows.System.ILaunchUriResult;
                        Retval.m_ILaunchUriResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function LaunchFileAsync
      (
         file : Windows.Storage.IStorageFile
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFileAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchFileAsync
      (
         file : Windows.Storage.IStorageFile;
         options : Windows.System.LauncherOptions'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFileAsync (file, options.m_ILauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriAsync
      (
         uri : Windows.Foundation.Uri'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriAsync
      (
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.LauncherOptions'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriAsync (uri.m_IUriRuntimeClass.all, options.m_ILauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchFolderAsync
      (
         folder : Windows.Storage.IStorageFolder
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFolderAsync (folder, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchFolderAsync
      (
         folder : Windows.Storage.IStorageFolder;
         options : Windows.System.FolderLauncherOptions'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Launcher");
         m_Factory        : access WinRt.Windows.System.ILauncherStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILauncherStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFolderAsync (folder, options.m_IFolderLauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end Launcher;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LauncherOptions

   procedure Initialize (this : in out LauncherOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out LauncherOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILauncherOptions, ILauncherOptions_Ptr);
   begin
      if this.m_ILauncherOptions /= null then
         if this.m_ILauncherOptions.all /= null then
            RefCount := this.m_ILauncherOptions.all.Release;
            Free (this.m_ILauncherOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LauncherOptions

   function Constructor return LauncherOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.LauncherOptions");
      m_ComRetVal  : aliased Windows.System.ILauncherOptions;
   begin
      return RetVal : LauncherOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILauncherOptions := new Windows.System.ILauncherOptions;
            Retval.m_ILauncherOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LauncherOptions

   function get_TargetApplicationPackageFamilyName
   (
      this : in out LauncherOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions2, WinRt.Windows.System.IID_ILauncherOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.get_TargetApplicationPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TargetApplicationPackageFamilyName
   (
      this : in out LauncherOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions2, WinRt.Windows.System.IID_ILauncherOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.put_TargetApplicationPackageFamilyName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NeighboringFilesQuery
   (
      this : in out LauncherOptions
   )
   return WinRt.Windows.Storage.Search.StorageFileQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFileQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions2, WinRt.Windows.System.IID_ILauncherOptions2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFileQueryResult do
         m_Interface := QInterface (this.m_ILauncherOptions.all);
         Hr := m_Interface.get_NeighboringFilesQuery (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFileQueryResult := new Windows.Storage.Search.IStorageFileQueryResult;
         Retval.m_IStorageFileQueryResult.all := m_ComRetVal;
      end return;
   end;

   procedure put_NeighboringFilesQuery
   (
      this : in out LauncherOptions;
      value : Windows.Storage.Search.StorageFileQueryResult'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions2, WinRt.Windows.System.IID_ILauncherOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.put_NeighboringFilesQuery (value.m_IStorageFileQueryResult.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_TreatAsUntrusted
   (
      this : in out LauncherOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILauncherOptions.all.get_TreatAsUntrusted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TreatAsUntrusted
   (
      this : in out LauncherOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILauncherOptions.all.put_TreatAsUntrusted (value);
   end;

   function get_DisplayApplicationPicker
   (
      this : in out LauncherOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILauncherOptions.all.get_DisplayApplicationPicker (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisplayApplicationPicker
   (
      this : in out LauncherOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILauncherOptions.all.put_DisplayApplicationPicker (value);
   end;

   function get_UI
   (
      this : in out LauncherOptions
   )
   return WinRt.Windows.System.LauncherUIOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.ILauncherUIOptions;
   begin
      return RetVal : WinRt.Windows.System.LauncherUIOptions do
         Hr := this.m_ILauncherOptions.all.get_UI (m_ComRetVal'Access);
         Retval.m_ILauncherUIOptions := new Windows.System.ILauncherUIOptions;
         Retval.m_ILauncherUIOptions.all := m_ComRetVal;
      end return;
   end;

   function get_PreferredApplicationPackageFamilyName
   (
      this : in out LauncherOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILauncherOptions.all.get_PreferredApplicationPackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PreferredApplicationPackageFamilyName
   (
      this : in out LauncherOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILauncherOptions.all.put_PreferredApplicationPackageFamilyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PreferredApplicationDisplayName
   (
      this : in out LauncherOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILauncherOptions.all.get_PreferredApplicationDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PreferredApplicationDisplayName
   (
      this : in out LauncherOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILauncherOptions.all.put_PreferredApplicationDisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FallbackUri
   (
      this : in out LauncherOptions
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ILauncherOptions.all.get_FallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_FallbackUri
   (
      this : in out LauncherOptions;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILauncherOptions.all.put_FallbackUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ContentType
   (
      this : in out LauncherOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILauncherOptions.all.get_ContentType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContentType
   (
      this : in out LauncherOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILauncherOptions.all.put_ContentType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IgnoreAppUriHandlers
   (
      this : in out LauncherOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions3, WinRt.Windows.System.IID_ILauncherOptions3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.get_IgnoreAppUriHandlers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IgnoreAppUriHandlers
   (
      this : in out LauncherOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions3, WinRt.Windows.System.IID_ILauncherOptions3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.put_IgnoreAppUriHandlers (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LimitPickerToCurrentAppAndAppUriHandlers
   (
      this : in out LauncherOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions4, WinRt.Windows.System.IID_ILauncherOptions4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.get_LimitPickerToCurrentAppAndAppUriHandlers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LimitPickerToCurrentAppAndAppUriHandlers
   (
      this : in out LauncherOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherOptions4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherOptions4, WinRt.Windows.System.IID_ILauncherOptions4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.put_LimitPickerToCurrentAppAndAppUriHandlers (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DesiredRemainingView
   (
      this : in out LauncherOptions
   )
   return WinRt.Windows.UI.ViewManagement.ViewSizePreference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherViewOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ViewSizePreference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherViewOptions, WinRt.Windows.System.IID_ILauncherViewOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.get_DesiredRemainingView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredRemainingView
   (
      this : in out LauncherOptions;
      value : Windows.UI.ViewManagement.ViewSizePreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.ILauncherViewOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.ILauncherOptions_Interface, WinRt.Windows.System.ILauncherViewOptions, WinRt.Windows.System.IID_ILauncherViewOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILauncherOptions.all);
      Hr := m_Interface.put_DesiredRemainingView (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LauncherUIOptions

   procedure Initialize (this : in out LauncherUIOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out LauncherUIOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILauncherUIOptions, ILauncherUIOptions_Ptr);
   begin
      if this.m_ILauncherUIOptions /= null then
         if this.m_ILauncherUIOptions.all /= null then
            RefCount := this.m_ILauncherUIOptions.all.Release;
            Free (this.m_ILauncherUIOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LauncherUIOptions

   function get_InvocationPoint
   (
      this : in out LauncherUIOptions
   )
   return IReference_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Point.Kind;
   begin
      Hr := this.m_ILauncherUIOptions.all.get_InvocationPoint (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InvocationPoint
   (
      this : in out LauncherUIOptions;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILauncherUIOptions.all.put_InvocationPoint (value);
   end;

   function get_SelectionRect
   (
      this : in out LauncherUIOptions
   )
   return IReference_Rect.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Rect.Kind;
   begin
      Hr := this.m_ILauncherUIOptions.all.get_SelectionRect (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Rect (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SelectionRect
   (
      this : in out LauncherUIOptions;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILauncherUIOptions.all.put_SelectionRect (value);
   end;

   function get_PreferredPlacement
   (
      this : in out LauncherUIOptions
   )
   return WinRt.Windows.UI.Popups.Placement is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Popups.Placement;
   begin
      Hr := this.m_ILauncherUIOptions.all.get_PreferredPlacement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PreferredPlacement
   (
      this : in out LauncherUIOptions;
      value : Windows.UI.Popups.Placement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILauncherUIOptions.all.put_PreferredPlacement (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MemoryManager is

      function GetAppMemoryReport
      return WinRt.Windows.System.AppMemoryReport is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.IAppMemoryReport;
      begin
         return RetVal : WinRt.Windows.System.AppMemoryReport do
            Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetAppMemoryReport (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAppMemoryReport := new Windows.System.IAppMemoryReport;
               Retval.m_IAppMemoryReport.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetProcessMemoryReport
      return WinRt.Windows.System.ProcessMemoryReport is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.IProcessMemoryReport;
      begin
         return RetVal : WinRt.Windows.System.ProcessMemoryReport do
            Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetProcessMemoryReport (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IProcessMemoryReport := new Windows.System.IProcessMemoryReport;
               Retval.m_IProcessMemoryReport.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_AppMemoryUsage
      return WinRt.UInt64 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt64;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AppMemoryUsage (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AppMemoryUsageLimit
      return WinRt.UInt64 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt64;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AppMemoryUsageLimit (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AppMemoryUsageLevel
      return WinRt.Windows.System.AppMemoryUsageLevel is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.AppMemoryUsageLevel;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AppMemoryUsageLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_AppMemoryUsageIncreased
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_AppMemoryUsageIncreased (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_AppMemoryUsageIncreased
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_AppMemoryUsageIncreased (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_AppMemoryUsageDecreased
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_AppMemoryUsageDecreased (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_AppMemoryUsageDecreased
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_AppMemoryUsageDecreased (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_AppMemoryUsageLimitChanging
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_AppMemoryUsageLimitChanging (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_AppMemoryUsageLimitChanging
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_AppMemoryUsageLimitChanging (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function TrySetAppMemoryUsageLimit
      (
         value : WinRt.UInt64
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TrySetAppMemoryUsageLimit (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ExpectedAppMemoryUsageLimit
      return WinRt.UInt64 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.MemoryManager");
         m_Factory        : access WinRt.Windows.System.IMemoryManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt64;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMemoryManagerStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExpectedAppMemoryUsageLimit (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end MemoryManager;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ProcessLauncher is

      function RunToCompletionAsync
      (
         fileName : WinRt.WString;
         args : WinRt.WString
      )
      return WinRt.Windows.System.ProcessLauncherResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ProcessLauncher");
         m_Factory        : access WinRt.Windows.System.IProcessLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_fileName : WinRt.HString := To_HString (fileName);
         HStr_args : WinRt.HString := To_HString (args);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProcessLauncherResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProcessLauncherResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.IProcessLauncherResult;
         m_IID            : aliased WinRt.IID := (3867308608, 31373, 20926, (141, 33, 224, 147, 38, 140, 204, 21 )); -- Windows.System.ProcessLauncherResult;
         m_HandlerIID     : aliased WinRt.IID := (2373484262, 2020, 24014, (143, 229, 181, 3, 161, 246, 54, 140 ));
         m_Handler        : AsyncOperationCompletedHandler_ProcessLauncherResult.Kind := new AsyncOperationCompletedHandler_ProcessLauncherResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProcessLauncherResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProcessLauncherResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProcessLauncherResult.Kind_Delegate, AsyncOperationCompletedHandler_ProcessLauncherResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.System.ProcessLauncherResult do
            Hr := RoGetActivationFactory (m_hString, IID_IProcessLauncherStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RunToCompletionAsync (HStr_fileName, HStr_args, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProcessLauncherResult := new Windows.System.IProcessLauncherResult;
                        Retval.m_IProcessLauncherResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_fileName);
            Hr := WindowsDeleteString (HStr_args);
         end return;
      end;

      function RunToCompletionAsync
      (
         fileName : WinRt.WString;
         args : WinRt.WString;
         options : Windows.System.ProcessLauncherOptions'Class
      )
      return WinRt.Windows.System.ProcessLauncherResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ProcessLauncher");
         m_Factory        : access WinRt.Windows.System.IProcessLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_fileName : WinRt.HString := To_HString (fileName);
         HStr_args : WinRt.HString := To_HString (args);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProcessLauncherResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProcessLauncherResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.IProcessLauncherResult;
         m_IID            : aliased WinRt.IID := (3867308608, 31373, 20926, (141, 33, 224, 147, 38, 140, 204, 21 )); -- Windows.System.ProcessLauncherResult;
         m_HandlerIID     : aliased WinRt.IID := (2373484262, 2020, 24014, (143, 229, 181, 3, 161, 246, 54, 140 ));
         m_Handler        : AsyncOperationCompletedHandler_ProcessLauncherResult.Kind := new AsyncOperationCompletedHandler_ProcessLauncherResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProcessLauncherResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProcessLauncherResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProcessLauncherResult.Kind_Delegate, AsyncOperationCompletedHandler_ProcessLauncherResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.System.ProcessLauncherResult do
            Hr := RoGetActivationFactory (m_hString, IID_IProcessLauncherStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RunToCompletionAsync (HStr_fileName, HStr_args, options.m_IProcessLauncherOptions.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProcessLauncherResult := new Windows.System.IProcessLauncherResult;
                        Retval.m_IProcessLauncherResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_fileName);
            Hr := WindowsDeleteString (HStr_args);
         end return;
      end;

   end ProcessLauncher;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessLauncherOptions

   procedure Initialize (this : in out ProcessLauncherOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessLauncherOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessLauncherOptions, IProcessLauncherOptions_Ptr);
   begin
      if this.m_IProcessLauncherOptions /= null then
         if this.m_IProcessLauncherOptions.all /= null then
            RefCount := this.m_IProcessLauncherOptions.all.Release;
            Free (this.m_IProcessLauncherOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProcessLauncherOptions

   function Constructor return ProcessLauncherOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.ProcessLauncherOptions");
      m_ComRetVal  : aliased Windows.System.IProcessLauncherOptions;
   begin
      return RetVal : ProcessLauncherOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IProcessLauncherOptions := new Windows.System.IProcessLauncherOptions;
            Retval.m_IProcessLauncherOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessLauncherOptions

   function get_StandardInput
   (
      this : in out ProcessLauncherOptions
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IProcessLauncherOptions.all.get_StandardInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StandardInput
   (
      this : in out ProcessLauncherOptions;
      value : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProcessLauncherOptions.all.put_StandardInput (value);
   end;

   function get_StandardOutput
   (
      this : in out ProcessLauncherOptions
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IProcessLauncherOptions.all.get_StandardOutput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StandardOutput
   (
      this : in out ProcessLauncherOptions;
      value : Windows.Storage.Streams.IOutputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProcessLauncherOptions.all.put_StandardOutput (value);
   end;

   function get_StandardError
   (
      this : in out ProcessLauncherOptions
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IProcessLauncherOptions.all.get_StandardError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StandardError
   (
      this : in out ProcessLauncherOptions;
      value : Windows.Storage.Streams.IOutputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProcessLauncherOptions.all.put_StandardError (value);
   end;

   function get_WorkingDirectory
   (
      this : in out ProcessLauncherOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProcessLauncherOptions.all.get_WorkingDirectory (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_WorkingDirectory
   (
      this : in out ProcessLauncherOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IProcessLauncherOptions.all.put_WorkingDirectory (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessLauncherResult

   procedure Initialize (this : in out ProcessLauncherResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessLauncherResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessLauncherResult, IProcessLauncherResult_Ptr);
   begin
      if this.m_IProcessLauncherResult /= null then
         if this.m_IProcessLauncherResult.all /= null then
            RefCount := this.m_IProcessLauncherResult.all.Release;
            Free (this.m_IProcessLauncherResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessLauncherResult

   function get_ExitCode
   (
      this : in out ProcessLauncherResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IProcessLauncherResult.all.get_ExitCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessMemoryReport

   procedure Initialize (this : in out ProcessMemoryReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessMemoryReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessMemoryReport, IProcessMemoryReport_Ptr);
   begin
      if this.m_IProcessMemoryReport /= null then
         if this.m_IProcessMemoryReport.all /= null then
            RefCount := this.m_IProcessMemoryReport.all.Release;
            Free (this.m_IProcessMemoryReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessMemoryReport

   function get_PrivateWorkingSetUsage
   (
      this : in out ProcessMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryReport.all.get_PrivateWorkingSetUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalWorkingSetUsage
   (
      this : in out ProcessMemoryReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryReport.all.get_TotalWorkingSetUsage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtocolForResultsOperation

   procedure Initialize (this : in out ProtocolForResultsOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtocolForResultsOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtocolForResultsOperation, IProtocolForResultsOperation_Ptr);
   begin
      if this.m_IProtocolForResultsOperation /= null then
         if this.m_IProtocolForResultsOperation.all /= null then
            RefCount := this.m_IProtocolForResultsOperation.all.Release;
            Free (this.m_IProtocolForResultsOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtocolForResultsOperation

   procedure ReportCompleted
   (
      this : in out ProtocolForResultsOperation;
      data : Windows.Foundation.Collections.ValueSet'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProtocolForResultsOperation.all.ReportCompleted (data.m_IPropertySet.all);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body RemoteLauncher is

      function LaunchUriAsync
      (
         remoteSystemConnectionRequest : Windows.System.RemoteSystems.RemoteSystemConnectionRequest'Class;
         uri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.System.RemoteLaunchUriStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteLauncher");
         m_Factory        : access WinRt.Windows.System.IRemoteLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RemoteLaunchUriStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RemoteLaunchUriStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.RemoteLaunchUriStatus;
         m_IID            : aliased WinRt.IID := (3144738253, 25282, 24440, (172, 141, 244, 185, 115, 152, 29, 164 )); -- Windows.System.RemoteLaunchUriStatus;
         m_HandlerIID     : aliased WinRt.IID := (1066355483, 52564, 21564, (129, 127, 38, 48, 72, 127, 24, 120 ));
         m_Handler        : AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind := new AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteLaunchUriStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind_Delegate, AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriAsync (remoteSystemConnectionRequest.m_IRemoteSystemConnectionRequest.all, uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriAsync
      (
         remoteSystemConnectionRequest : Windows.System.RemoteSystems.RemoteSystemConnectionRequest'Class;
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.RemoteLauncherOptions'Class
      )
      return WinRt.Windows.System.RemoteLaunchUriStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteLauncher");
         m_Factory        : access WinRt.Windows.System.IRemoteLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RemoteLaunchUriStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RemoteLaunchUriStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.RemoteLaunchUriStatus;
         m_IID            : aliased WinRt.IID := (3144738253, 25282, 24440, (172, 141, 244, 185, 115, 152, 29, 164 )); -- Windows.System.RemoteLaunchUriStatus;
         m_HandlerIID     : aliased WinRt.IID := (1066355483, 52564, 21564, (129, 127, 38, 48, 72, 127, 24, 120 ));
         m_Handler        : AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind := new AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteLaunchUriStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind_Delegate, AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriAsync (remoteSystemConnectionRequest.m_IRemoteSystemConnectionRequest.all, uri.m_IUriRuntimeClass.all, options.m_IRemoteLauncherOptions.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LaunchUriAsync
      (
         remoteSystemConnectionRequest : Windows.System.RemoteSystems.RemoteSystemConnectionRequest'Class;
         uri : Windows.Foundation.Uri'Class;
         options : Windows.System.RemoteLauncherOptions'Class;
         inputData : Windows.Foundation.Collections.ValueSet'Class
      )
      return WinRt.Windows.System.RemoteLaunchUriStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteLauncher");
         m_Factory        : access WinRt.Windows.System.IRemoteLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RemoteLaunchUriStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RemoteLaunchUriStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.RemoteLaunchUriStatus;
         m_IID            : aliased WinRt.IID := (3144738253, 25282, 24440, (172, 141, 244, 185, 115, 152, 29, 164 )); -- Windows.System.RemoteLaunchUriStatus;
         m_HandlerIID     : aliased WinRt.IID := (1066355483, 52564, 21564, (129, 127, 38, 48, 72, 127, 24, 120 ));
         m_Handler        : AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind := new AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteLaunchUriStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind_Delegate, AsyncOperationCompletedHandler_RemoteLaunchUriStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchUriAsync (remoteSystemConnectionRequest.m_IRemoteSystemConnectionRequest.all, uri.m_IUriRuntimeClass.all, options.m_IRemoteLauncherOptions.all, inputData.m_IPropertySet.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end RemoteLauncher;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteLauncherOptions

   procedure Initialize (this : in out RemoteLauncherOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteLauncherOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteLauncherOptions, IRemoteLauncherOptions_Ptr);
   begin
      if this.m_IRemoteLauncherOptions /= null then
         if this.m_IRemoteLauncherOptions.all /= null then
            RefCount := this.m_IRemoteLauncherOptions.all.Release;
            Free (this.m_IRemoteLauncherOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteLauncherOptions

   function Constructor return RemoteLauncherOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteLauncherOptions");
      m_ComRetVal  : aliased Windows.System.IRemoteLauncherOptions;
   begin
      return RetVal : RemoteLauncherOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRemoteLauncherOptions := new Windows.System.IRemoteLauncherOptions;
            Retval.m_IRemoteLauncherOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteLauncherOptions

   function get_FallbackUri
   (
      this : in out RemoteLauncherOptions
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IRemoteLauncherOptions.all.get_FallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_FallbackUri
   (
      this : in out RemoteLauncherOptions;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteLauncherOptions.all.put_FallbackUri (value.m_IUriRuntimeClass.all);
   end;

   function get_PreferredAppIds
   (
      this : in out RemoteLauncherOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IRemoteLauncherOptions.all.get_PreferredAppIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ShutdownManager is

      function IsPowerStateSupported
      (
         powerState : Windows.System.PowerState
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ShutdownManager");
         m_Factory        : access WinRt.Windows.System.IShutdownManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IShutdownManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsPowerStateSupported (powerState, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure EnterPowerState
      (
         powerState : Windows.System.PowerState
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ShutdownManager");
         m_Factory        : access WinRt.Windows.System.IShutdownManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IShutdownManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnterPowerState (powerState);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure EnterPowerState
      (
         powerState : Windows.System.PowerState;
         wakeUpAfter : Windows.Foundation.TimeSpan
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ShutdownManager");
         m_Factory        : access WinRt.Windows.System.IShutdownManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IShutdownManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnterPowerState (powerState, wakeUpAfter);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure BeginShutdown
      (
         shutdownKind : Windows.System.ShutdownKind;
         timeout : Windows.Foundation.TimeSpan
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ShutdownManager");
         m_Factory        : access WinRt.Windows.System.IShutdownManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IShutdownManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.BeginShutdown (shutdownKind, timeout);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure CancelShutdown is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.ShutdownManager");
         m_Factory        : access WinRt.Windows.System.IShutdownManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IShutdownManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CancelShutdown;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end ShutdownManager;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body TimeZoneSettings is

      function AutoUpdateTimeZoneAsync
      (
         timeout : Windows.Foundation.TimeSpan
      )
      return WinRt.Windows.System.AutoUpdateTimeZoneStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.TimeZoneSettings");
         m_Factory        : access WinRt.Windows.System.ITimeZoneSettingsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AutoUpdateTimeZoneStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AutoUpdateTimeZoneStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.System.AutoUpdateTimeZoneStatus;
         m_IID            : aliased WinRt.IID := (3063182764, 42452, 21463, (165, 58, 187, 1, 182, 150, 32, 250 )); -- Windows.System.AutoUpdateTimeZoneStatus;
         m_HandlerIID     : aliased WinRt.IID := (3266798156, 40757, 20596, (128, 33, 6, 51, 24, 72, 153, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_AutoUpdateTimeZoneStatus.Kind := new AsyncOperationCompletedHandler_AutoUpdateTimeZoneStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AutoUpdateTimeZoneStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AutoUpdateTimeZoneStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AutoUpdateTimeZoneStatus.Kind_Delegate, AsyncOperationCompletedHandler_AutoUpdateTimeZoneStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITimeZoneSettingsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AutoUpdateTimeZoneAsync (timeout, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function get_CurrentTimeZoneDisplayName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.TimeZoneSettings");
         m_Factory        : access WinRt.Windows.System.ITimeZoneSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITimeZoneSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CurrentTimeZoneDisplayName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SupportedTimeZoneDisplayNames
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.TimeZoneSettings");
         m_Factory        : access WinRt.Windows.System.ITimeZoneSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITimeZoneSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SupportedTimeZoneDisplayNames (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CanChangeTimeZone
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.TimeZoneSettings");
         m_Factory        : access WinRt.Windows.System.ITimeZoneSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITimeZoneSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CanChangeTimeZone (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ChangeTimeZoneByDisplayName
      (
         timeZoneDisplayName : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.TimeZoneSettings");
         m_Factory        : access WinRt.Windows.System.ITimeZoneSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_timeZoneDisplayName : WinRt.HString := To_HString (timeZoneDisplayName);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITimeZoneSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ChangeTimeZoneByDisplayName (HStr_timeZoneDisplayName);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_timeZoneDisplayName);
      end;

   end TimeZoneSettings;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for User

   procedure Initialize (this : in out User) is
   begin
      null;
   end;

   procedure Finalize (this : in out User) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUser, IUser_Ptr);
   begin
      if this.m_IUser /= null then
         if this.m_IUser.all /= null then
            RefCount := this.m_IUser.all.Release;
            Free (this.m_IUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for User

   function CreateWatcher
   return WinRt.Windows.System.UserWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.User");
      m_Factory        : access WinRt.Windows.System.IUserStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUserWatcher;
   begin
      return RetVal : WinRt.Windows.System.UserWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IUserStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserWatcher := new Windows.System.IUserWatcher;
            Retval.m_IUserWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.User");
      m_Factory        : access WinRt.Windows.System.IUserStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3830358495, 48005, 23180, (189, 220, 200, 233, 96, 195, 85, 201 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (159843635, 63435, 22172, (183, 151, 220, 180, 141, 235, 215, 9 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function FindAllAsync
   (
      type_x : Windows.System.UserType
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.User");
      m_Factory        : access WinRt.Windows.System.IUserStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3830358495, 48005, 23180, (189, 220, 200, 233, 96, 195, 85, 201 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (159843635, 63435, 22172, (183, 151, 220, 180, 141, 235, 215, 9 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (type_x, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function FindAllAsync
   (
      type_x : Windows.System.UserType;
      status : Windows.System.UserAuthenticationStatus
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.User");
      m_Factory        : access WinRt.Windows.System.IUserStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3830358495, 48005, 23180, (189, 220, 200, 233, 96, 195, 85, 201 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (159843635, 63435, 22172, (183, 151, 220, 180, 141, 235, 215, 9 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (type_x, status, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetFromId
   (
      nonRoamableId : WinRt.WString
   )
   return WinRt.Windows.System.User is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.User");
      m_Factory        : access WinRt.Windows.System.IUserStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      HStr_nonRoamableId : WinRt.HString := To_HString (nonRoamableId);
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := RoGetActivationFactory (m_hString, IID_IUserStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFromId (HStr_nonRoamableId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUser := new Windows.System.IUser;
            Retval.m_IUser.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_nonRoamableId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for User

   function get_NonRoamableId
   (
      this : in out User
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUser.all.get_NonRoamableId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AuthenticationStatus
   (
      this : in out User
   )
   return WinRt.Windows.System.UserAuthenticationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.UserAuthenticationStatus;
   begin
      Hr := this.m_IUser.all.get_AuthenticationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out User
   )
   return WinRt.Windows.System.UserType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.UserType;
   begin
      Hr := this.m_IUser.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetPropertyAsync
   (
      this : in out User;
      value : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInspectable.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInspectable.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.IInspectable;
      m_IID            : aliased WinRt.IID := (2884975703, 61008, 21314, (181, 42, 38, 227, 184, 204, 2, 79 )); -- IInspectable;
      m_HandlerIID     : aliased WinRt.IID := (1057498670, 41697, 20788, (146, 151, 233, 33, 31, 72, 26, 45 ));
      m_Handler        : AsyncOperationCompletedHandler_IInspectable.Kind := new AsyncOperationCompletedHandler_IInspectable.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInspectable.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInspectable.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInspectable.Kind_Delegate, AsyncOperationCompletedHandler_IInspectable.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUser.all.GetPropertyAsync (HStr_value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_value);
      return m_RetVal;
   end;

   function GetPropertiesAsync
   (
      this : in out User;
      values : GenericObject
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IPropertySet.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IPropertySet.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Foundation.Collections.IPropertySet;
      m_IID            : aliased WinRt.IID := (1225459334, 45015, 20535, (150, 71, 216, 254, 36, 143, 24, 44 )); -- Windows.Foundation.Collections.IPropertySet;
      m_HandlerIID     : aliased WinRt.IID := (1349887327, 26810, 22258, (151, 230, 155, 28, 191, 162, 197, 242 ));
      m_Handler        : AsyncOperationCompletedHandler_IPropertySet.Kind := new AsyncOperationCompletedHandler_IPropertySet.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IPropertySet.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IPropertySet.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IPropertySet.Kind_Delegate, AsyncOperationCompletedHandler_IPropertySet.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUser.all.GetPropertiesAsync (values, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetPictureAsync
   (
      this : in out User;
      desiredSize : Windows.System.UserPictureSize
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamReference.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamReference.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
      m_IID            : aliased WinRt.IID := (1696042320, 59042, 23830, (178, 68, 101, 233, 114, 94, 90, 12 )); -- Windows.Storage.Streams.IRandomAccessStreamReference;
      m_HandlerIID     : aliased WinRt.IID := (1619292809, 59915, 24054, (137, 223, 242, 198, 44, 186, 150, 147 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUser.all.GetPictureAsync (desiredSize, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserAuthenticationStatusChangeDeferral

   procedure Initialize (this : in out UserAuthenticationStatusChangeDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserAuthenticationStatusChangeDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserAuthenticationStatusChangeDeferral, IUserAuthenticationStatusChangeDeferral_Ptr);
   begin
      if this.m_IUserAuthenticationStatusChangeDeferral /= null then
         if this.m_IUserAuthenticationStatusChangeDeferral.all /= null then
            RefCount := this.m_IUserAuthenticationStatusChangeDeferral.all.Release;
            Free (this.m_IUserAuthenticationStatusChangeDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserAuthenticationStatusChangeDeferral

   procedure Complete
   (
      this : in out UserAuthenticationStatusChangeDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserAuthenticationStatusChangeDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserAuthenticationStatusChangingEventArgs

   procedure Initialize (this : in out UserAuthenticationStatusChangingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserAuthenticationStatusChangingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserAuthenticationStatusChangingEventArgs, IUserAuthenticationStatusChangingEventArgs_Ptr);
   begin
      if this.m_IUserAuthenticationStatusChangingEventArgs /= null then
         if this.m_IUserAuthenticationStatusChangingEventArgs.all /= null then
            RefCount := this.m_IUserAuthenticationStatusChangingEventArgs.all.Release;
            Free (this.m_IUserAuthenticationStatusChangingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserAuthenticationStatusChangingEventArgs

   function GetDeferral
   (
      this : in out UserAuthenticationStatusChangingEventArgs
   )
   return WinRt.Windows.System.UserAuthenticationStatusChangeDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUserAuthenticationStatusChangeDeferral;
   begin
      return RetVal : WinRt.Windows.System.UserAuthenticationStatusChangeDeferral do
         Hr := this.m_IUserAuthenticationStatusChangingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IUserAuthenticationStatusChangeDeferral := new Windows.System.IUserAuthenticationStatusChangeDeferral;
         Retval.m_IUserAuthenticationStatusChangeDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out UserAuthenticationStatusChangingEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserAuthenticationStatusChangingEventArgs.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_NewStatus
   (
      this : in out UserAuthenticationStatusChangingEventArgs
   )
   return WinRt.Windows.System.UserAuthenticationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.UserAuthenticationStatus;
   begin
      Hr := this.m_IUserAuthenticationStatusChangingEventArgs.all.get_NewStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrentStatus
   (
      this : in out UserAuthenticationStatusChangingEventArgs
   )
   return WinRt.Windows.System.UserAuthenticationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.UserAuthenticationStatus;
   begin
      Hr := this.m_IUserAuthenticationStatusChangingEventArgs.all.get_CurrentStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserChangedEventArgs

   procedure Initialize (this : in out UserChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserChangedEventArgs, IUserChangedEventArgs_Ptr);
   begin
      if this.m_IUserChangedEventArgs /= null then
         if this.m_IUserChangedEventArgs.all /= null then
            RefCount := this.m_IUserChangedEventArgs.all.Release;
            Free (this.m_IUserChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserChangedEventArgs

   function get_User
   (
      this : in out UserChangedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserChangedEventArgs.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_ChangedPropertyKinds
   (
      this : in out UserChangedEventArgs
   )
   return IVectorView_UserWatcherUpdateKind.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.IUserChangedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UserWatcherUpdateKind.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.IUserChangedEventArgs_Interface, WinRt.Windows.System.IUserChangedEventArgs2, WinRt.Windows.System.IID_IUserChangedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserChangedEventArgs.all);
      Hr := m_Interface.get_ChangedPropertyKinds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UserWatcherUpdateKind (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body UserDeviceAssociation is

      function FindUserFromDeviceId
      (
         deviceId : WinRt.WString
      )
      return WinRt.Windows.System.User is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.UserDeviceAssociation");
         m_Factory        : access WinRt.Windows.System.IUserDeviceAssociationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.IUser;
         HStr_deviceId : WinRt.HString := To_HString (deviceId);
      begin
         return RetVal : WinRt.Windows.System.User do
            Hr := RoGetActivationFactory (m_hString, IID_IUserDeviceAssociationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindUserFromDeviceId (HStr_deviceId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IUser := new Windows.System.IUser;
               Retval.m_IUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_deviceId);
         end return;
      end;

      function add_UserDeviceAssociationChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.UserDeviceAssociation");
         m_Factory        : access WinRt.Windows.System.IUserDeviceAssociationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserDeviceAssociationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_UserDeviceAssociationChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_UserDeviceAssociationChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.UserDeviceAssociation");
         m_Factory        : access WinRt.Windows.System.IUserDeviceAssociationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserDeviceAssociationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_UserDeviceAssociationChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end UserDeviceAssociation;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDeviceAssociationChangedEventArgs

   procedure Initialize (this : in out UserDeviceAssociationChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDeviceAssociationChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDeviceAssociationChangedEventArgs, IUserDeviceAssociationChangedEventArgs_Ptr);
   begin
      if this.m_IUserDeviceAssociationChangedEventArgs /= null then
         if this.m_IUserDeviceAssociationChangedEventArgs.all /= null then
            RefCount := this.m_IUserDeviceAssociationChangedEventArgs.all.Release;
            Free (this.m_IUserDeviceAssociationChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDeviceAssociationChangedEventArgs

   function get_DeviceId
   (
      this : in out UserDeviceAssociationChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDeviceAssociationChangedEventArgs.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NewUser
   (
      this : in out UserDeviceAssociationChangedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserDeviceAssociationChangedEventArgs.all.get_NewUser (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_OldUser
   (
      this : in out UserDeviceAssociationChangedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserDeviceAssociationChangedEventArgs.all.get_OldUser (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserPicker

   procedure Initialize (this : in out UserPicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserPicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserPicker, IUserPicker_Ptr);
   begin
      if this.m_IUserPicker /= null then
         if this.m_IUserPicker.all /= null then
            RefCount := this.m_IUserPicker.all.Release;
            Free (this.m_IUserPicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserPicker

   function Constructor return UserPicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.UserPicker");
      m_ComRetVal  : aliased Windows.System.IUserPicker;
   begin
      return RetVal : UserPicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUserPicker := new Windows.System.IUserPicker;
            Retval.m_IUserPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UserPicker

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.UserPicker");
      m_Factory        : access WinRt.Windows.System.IUserPickerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserPickerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserPicker

   function get_AllowGuestAccounts
   (
      this : in out UserPicker
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUserPicker.all.get_AllowGuestAccounts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowGuestAccounts
   (
      this : in out UserPicker;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserPicker.all.put_AllowGuestAccounts (value);
   end;

   function get_SuggestedSelectedUser
   (
      this : in out UserPicker
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserPicker.all.get_SuggestedSelectedUser (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   procedure put_SuggestedSelectedUser
   (
      this : in out UserPicker;
      value : Windows.System.User'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserPicker.all.put_SuggestedSelectedUser (value.m_IUser.all);
   end;

   function PickSingleUserAsync
   (
      this : in out UserPicker
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_User.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_User.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.IUser;
      m_IID            : aliased WinRt.IID := (2828391161, 9113, 20740, (165, 50, 91, 164, 74, 180, 177, 101 )); -- Windows.System.User;
      m_HandlerIID     : aliased WinRt.IID := (4178830242, 53701, 21256, (190, 207, 76, 45, 129, 103, 130, 74 ));
      m_Handler        : AsyncOperationCompletedHandler_User.Kind := new AsyncOperationCompletedHandler_User.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_User.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_User.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_User.Kind_Delegate, AsyncOperationCompletedHandler_User.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserPicker.all.PickSingleUserAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUser := new Windows.System.IUser;
                  Retval.m_IUser.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserWatcher

   procedure Initialize (this : in out UserWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserWatcher, IUserWatcher_Ptr);
   begin
      if this.m_IUserWatcher /= null then
         if this.m_IUserWatcher.all /= null then
            RefCount := this.m_IUserWatcher.all.Release;
            Free (this.m_IUserWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserWatcher

   function get_Status
   (
      this : in out UserWatcher
   )
   return WinRt.Windows.System.UserWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.UserWatcherStatus;
   begin
      Hr := this.m_IUserWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out UserWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out UserWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.Stop;
   end;

   function add_Added
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_Added (token);
   end;

   function add_Removed
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_Removed (token);
   end;

   function add_Updated
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_Updated (token);
   end;

   function add_AuthenticationStatusChanged
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_AuthenticationStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AuthenticationStatusChanged
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_AuthenticationStatusChanged (token);
   end;

   function add_AuthenticationStatusChanging
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_AuthenticationStatusChanging (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AuthenticationStatusChanging
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_AuthenticationStatusChanging (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out UserWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out UserWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserWatcher.all.remove_Stopped (token);
   end;

end;

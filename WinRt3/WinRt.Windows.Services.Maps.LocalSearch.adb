--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Geolocation;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Services.Maps.LocalSearch is

   package IAsyncOperation_LocalLocationFinderResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Maps.LocalSearch.ILocalLocationFinderResult);
   package AsyncOperationCompletedHandler_LocalLocationFinderResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Maps.LocalSearch.ILocalLocationFinderResult);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body LocalCategories is

      function get_BankAndCreditUnions
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BankAndCreditUnions (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_EatDrink
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EatDrink (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Hospitals
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Hospitals (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HotelsAndMotels
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HotelsAndMotels (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_All
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_All (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Parking
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Parking (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SeeDo
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SeeDo (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Shop
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalCategories");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILocalCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Shop (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end LocalCategories;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LocalLocation

   procedure Initialize (this : in out LocalLocation) is
   begin
      null;
   end;

   procedure Finalize (this : in out LocalLocation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILocalLocation, ILocalLocation_Ptr);
   begin
      if this.m_ILocalLocation /= null then
         if this.m_ILocalLocation.all /= null then
            RefCount := this.m_ILocalLocation.all.Release;
            Free (this.m_ILocalLocation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LocalLocation

   function get_Address
   (
      this : in out LocalLocation
   )
   return WinRt.Windows.Services.Maps.MapAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Maps.IMapAddress;
   begin
      return RetVal : WinRt.Windows.Services.Maps.MapAddress do
         Hr := this.m_ILocalLocation.all.get_Address (m_ComRetVal'Access);
         Retval.m_IMapAddress := new Windows.Services.Maps.IMapAddress;
         Retval.m_IMapAddress.all := m_ComRetVal;
      end return;
   end;

   function get_Identifier
   (
      this : in out LocalLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalLocation.all.get_Identifier (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out LocalLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalLocation.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out LocalLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalLocation.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Point
   (
      this : in out LocalLocation
   )
   return WinRt.Windows.Devices.Geolocation.Geopoint'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.IGeopoint;
   begin
      return RetVal : WinRt.Windows.Devices.Geolocation.Geopoint do
         Hr := this.m_ILocalLocation.all.get_Point (m_ComRetVal'Access);
         Retval.m_IGeopoint := new Windows.Devices.Geolocation.IGeopoint;
         Retval.m_IGeopoint.all := m_ComRetVal;
      end return;
   end;

   function get_PhoneNumber
   (
      this : in out LocalLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalLocation.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DataAttribution
   (
      this : in out LocalLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalLocation.all.get_DataAttribution (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Category
   (
      this : in out LocalLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation_Interface, WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation2, WinRt.Windows.Services.Maps.LocalSearch.IID_ILocalLocation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILocalLocation.all);
      Hr := m_Interface.get_Category (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RatingInfo
   (
      this : in out LocalLocation
   )
   return WinRt.Windows.Services.Maps.LocalSearch.LocalLocationRatingInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Maps.LocalSearch.ILocalLocationRatingInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation_Interface, WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation2, WinRt.Windows.Services.Maps.LocalSearch.IID_ILocalLocation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Maps.LocalSearch.LocalLocationRatingInfo do
         m_Interface := QInterface (this.m_ILocalLocation.all);
         Hr := m_Interface.get_RatingInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILocalLocationRatingInfo := new Windows.Services.Maps.LocalSearch.ILocalLocationRatingInfo;
         Retval.m_ILocalLocationRatingInfo.all := m_ComRetVal;
      end return;
   end;

   function get_HoursOfOperation
   (
      this : in out LocalLocation
   )
   return IVectorView_ILocalLocationHoursOfOperationItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ILocalLocationHoursOfOperationItem.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation_Interface, WinRt.Windows.Services.Maps.LocalSearch.ILocalLocation2, WinRt.Windows.Services.Maps.LocalSearch.IID_ILocalLocation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILocalLocation.all);
      Hr := m_Interface.get_HoursOfOperation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_ILocalLocationHoursOfOperationItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body LocalLocationFinder is

      function FindLocalLocationsAsync
      (
         searchTerm : WinRt.WString;
         searchArea : Windows.Devices.Geolocation.Geocircle'Class;
         localCategory : WinRt.WString;
         maxResults : WinRt.UInt32
      )
      return WinRt.Windows.Services.Maps.LocalSearch.LocalLocationFinderResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.LocalLocationFinder");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.ILocalLocationFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_searchTerm : WinRt.HString := To_HString (searchTerm);
         HStr_localCategory : WinRt.HString := To_HString (localCategory);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LocalLocationFinderResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LocalLocationFinderResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Services.Maps.LocalSearch.ILocalLocationFinderResult;
         m_IID            : aliased WinRt.IID := (149330738, 62496, 21120, (167, 33, 7, 91, 79, 208, 61, 148 )); -- Windows.Services.Maps.LocalSearch.LocalLocationFinderResult;
         m_HandlerIID     : aliased WinRt.IID := (2068454291, 10563, 24144, (160, 16, 238, 154, 236, 27, 191, 231 ));
         m_Handler        : AsyncOperationCompletedHandler_LocalLocationFinderResult.Kind := new AsyncOperationCompletedHandler_LocalLocationFinderResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LocalLocationFinderResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LocalLocationFinderResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LocalLocationFinderResult.Kind_Delegate, AsyncOperationCompletedHandler_LocalLocationFinderResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Services.Maps.LocalSearch.LocalLocationFinderResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILocalLocationFinderStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindLocalLocationsAsync (HStr_searchTerm, searchArea.m_IGeocircle.all, HStr_localCategory, maxResults, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILocalLocationFinderResult := new Windows.Services.Maps.LocalSearch.ILocalLocationFinderResult;
                        Retval.m_ILocalLocationFinderResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_searchTerm);
            Hr := WindowsDeleteString (HStr_localCategory);
         end return;
      end;

   end LocalLocationFinder;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LocalLocationFinderResult

   procedure Initialize (this : in out LocalLocationFinderResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out LocalLocationFinderResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILocalLocationFinderResult, ILocalLocationFinderResult_Ptr);
   begin
      if this.m_ILocalLocationFinderResult /= null then
         if this.m_ILocalLocationFinderResult.all /= null then
            RefCount := this.m_ILocalLocationFinderResult.all.Release;
            Free (this.m_ILocalLocationFinderResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LocalLocationFinderResult

   function get_LocalLocations
   (
      this : in out LocalLocationFinderResult
   )
   return IVectorView_ILocalLocation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ILocalLocation.Kind;
   begin
      Hr := this.m_ILocalLocationFinderResult.all.get_LocalLocations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ILocalLocation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Status
   (
      this : in out LocalLocationFinderResult
   )
   return WinRt.Windows.Services.Maps.LocalSearch.LocalLocationFinderStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Maps.LocalSearch.LocalLocationFinderStatus;
   begin
      Hr := this.m_ILocalLocationFinderResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LocalLocationHoursOfOperationItem

   procedure Initialize (this : in out LocalLocationHoursOfOperationItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out LocalLocationHoursOfOperationItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILocalLocationHoursOfOperationItem, ILocalLocationHoursOfOperationItem_Ptr);
   begin
      if this.m_ILocalLocationHoursOfOperationItem /= null then
         if this.m_ILocalLocationHoursOfOperationItem.all /= null then
            RefCount := this.m_ILocalLocationHoursOfOperationItem.all.Release;
            Free (this.m_ILocalLocationHoursOfOperationItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LocalLocationHoursOfOperationItem

   function get_Day
   (
      this : in out LocalLocationHoursOfOperationItem
   )
   return WinRt.Windows.Globalization.DayOfWeek is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.DayOfWeek;
   begin
      Hr := this.m_ILocalLocationHoursOfOperationItem.all.get_Day (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Start
   (
      this : in out LocalLocationHoursOfOperationItem
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILocalLocationHoursOfOperationItem.all.get_Start (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Span
   (
      this : in out LocalLocationHoursOfOperationItem
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILocalLocationHoursOfOperationItem.all.get_Span (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LocalLocationRatingInfo

   procedure Initialize (this : in out LocalLocationRatingInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out LocalLocationRatingInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILocalLocationRatingInfo, ILocalLocationRatingInfo_Ptr);
   begin
      if this.m_ILocalLocationRatingInfo /= null then
         if this.m_ILocalLocationRatingInfo.all /= null then
            RefCount := this.m_ILocalLocationRatingInfo.all.Release;
            Free (this.m_ILocalLocationRatingInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LocalLocationRatingInfo

   function get_AggregateRating
   (
      this : in out LocalLocationRatingInfo
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_ILocalLocationRatingInfo.all.get_AggregateRating (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RatingCount
   (
      this : in out LocalLocationRatingInfo
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_ILocalLocationRatingInfo.all.get_RatingCount (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProviderIdentifier
   (
      this : in out LocalLocationRatingInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalLocationRatingInfo.all.get_ProviderIdentifier (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlaceInfoHelper is

      function CreateFromLocalLocation
      (
         location : Windows.Services.Maps.LocalSearch.LocalLocation'Class
      )
      return WinRt.Windows.Services.Maps.PlaceInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.LocalSearch.PlaceInfoHelper");
         m_Factory        : access WinRt.Windows.Services.Maps.LocalSearch.IPlaceInfoHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Services.Maps.IPlaceInfo;
      begin
         return RetVal : WinRt.Windows.Services.Maps.PlaceInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IPlaceInfoHelperStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateFromLocalLocation (location.m_ILocalLocation.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPlaceInfo := new Windows.Services.Maps.IPlaceInfo;
               Retval.m_IPlaceInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end PlaceInfoHelper;

end;

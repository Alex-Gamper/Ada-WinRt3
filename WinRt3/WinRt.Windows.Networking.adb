--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Networking.Connectivity;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EndpointPair

   procedure Initialize (this : in out EndpointPair) is
   begin
      null;
   end;

   procedure Finalize (this : in out EndpointPair) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEndpointPair, IEndpointPair_Ptr);
   begin
      if this.m_IEndpointPair /= null then
         if this.m_IEndpointPair.all /= null then
            RefCount := this.m_IEndpointPair.all.Release;
            Free (this.m_IEndpointPair);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EndpointPair

   function Constructor
   (
      localHostName : Windows.Networking.HostName'Class;
      localServiceName : WinRt.WString;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   )
   return EndpointPair is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.EndpointPair");
      m_Factory    : access IEndpointPairFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.IEndpointPair;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
   begin
      return RetVal : EndpointPair do
         Hr := RoGetActivationFactory (m_hString, IID_IEndpointPairFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateEndpointPair (localHostName.m_IHostName.all, HStr_localServiceName, remoteHostName.m_IHostName.all, HStr_remoteServiceName, m_ComRetVal'Access);
            Retval.m_IEndpointPair := new Windows.Networking.IEndpointPair;
            Retval.m_IEndpointPair.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_localServiceName);
         Hr := WindowsDeleteString (HStr_remoteServiceName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EndpointPair

   function get_LocalHostName
   (
      this : in out EndpointPair
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IEndpointPair.all.get_LocalHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_LocalHostName
   (
      this : in out EndpointPair;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEndpointPair.all.put_LocalHostName (value.m_IHostName.all);
   end;

   function get_LocalServiceName
   (
      this : in out EndpointPair
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEndpointPair.all.get_LocalServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LocalServiceName
   (
      this : in out EndpointPair;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IEndpointPair.all.put_LocalServiceName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RemoteHostName
   (
      this : in out EndpointPair
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IEndpointPair.all.get_RemoteHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_RemoteHostName
   (
      this : in out EndpointPair;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEndpointPair.all.put_RemoteHostName (value.m_IHostName.all);
   end;

   function get_RemoteServiceName
   (
      this : in out EndpointPair
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEndpointPair.all.get_RemoteServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteServiceName
   (
      this : in out EndpointPair;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IEndpointPair.all.put_RemoteServiceName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HostName

   procedure Initialize (this : in out HostName) is
   begin
      null;
   end;

   procedure Finalize (this : in out HostName) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHostName, IHostName_Ptr);
   begin
      if this.m_IHostName /= null then
         if this.m_IHostName.all /= null then
            RefCount := this.m_IHostName.all.Release;
            Free (this.m_IHostName);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HostName

   function Constructor
   (
      hostName_p : WinRt.WString
   )
   return HostName is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.HostName");
      m_Factory    : access IHostNameFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.IHostName;
      HStr_hostName_p : WinRt.HString := To_HString (hostName_p);
   begin
      return RetVal : HostName do
         Hr := RoGetActivationFactory (m_hString, IID_IHostNameFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateHostName (HStr_hostName_p, m_ComRetVal'Access);
            Retval.m_IHostName := new Windows.Networking.IHostName;
            Retval.m_IHostName.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_hostName_p);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HostName

   function Compare
   (
      value1 : WinRt.WString;
      value2 : WinRt.WString
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.HostName");
      m_Factory        : access WinRt.Windows.Networking.IHostNameStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      HStr_value1 : WinRt.HString := To_HString (value1);
      HStr_value2 : WinRt.HString := To_HString (value2);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHostNameStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Compare (HStr_value1, HStr_value2, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_value1);
      Hr := WindowsDeleteString (HStr_value2);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HostName

   function get_IPInformation
   (
      this : in out HostName
   )
   return WinRt.Windows.Networking.Connectivity.IPInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.IIPInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.IPInformation do
         Hr := this.m_IHostName.all.get_IPInformation (m_ComRetVal'Access);
         Retval.m_IIPInformation := new Windows.Networking.Connectivity.IIPInformation;
         Retval.m_IIPInformation.all := m_ComRetVal;
      end return;
   end;

   function get_RawName
   (
      this : in out HostName
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHostName.all.get_RawName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out HostName
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHostName.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CanonicalName
   (
      this : in out HostName
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHostName.all.get_CanonicalName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Type
   (
      this : in out HostName
   )
   return WinRt.Windows.Networking.HostNameType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.HostNameType;
   begin
      Hr := this.m_IHostName.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsEqual
   (
      this : in out HostName;
      hostName_p : Windows.Networking.HostName'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHostName.all.IsEqual (hostName_p.m_IHostName.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HostName
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.IHostName_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHostName.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Perception.Provider is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionFrameKind is

      function get_Color
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.KnownPerceptionFrameKind");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IKnownPerceptionFrameKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Color (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Depth
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.KnownPerceptionFrameKind");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IKnownPerceptionFrameKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Depth (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Infrared
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.KnownPerceptionFrameKind");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IKnownPerceptionFrameKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Infrared (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionFrameKind;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionControlGroup

   procedure Initialize (this : in out PerceptionControlGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionControlGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionControlGroup, IPerceptionControlGroup_Ptr);
   begin
      if this.m_IPerceptionControlGroup /= null then
         if this.m_IPerceptionControlGroup.all /= null then
            RefCount := this.m_IPerceptionControlGroup.all.Release;
            Free (this.m_IPerceptionControlGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerceptionControlGroup

   function Constructor
   (
      ids : GenericObject
   )
   return PerceptionControlGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionControlGroup");
      m_Factory    : access IPerceptionControlGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Perception.Provider.IPerceptionControlGroup;
   begin
      return RetVal : PerceptionControlGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionControlGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (ids, m_ComRetVal'Access);
            Retval.m_IPerceptionControlGroup := new Windows.Devices.Perception.Provider.IPerceptionControlGroup;
            Retval.m_IPerceptionControlGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionControlGroup

   function get_FrameProviderIds
   (
      this : in out PerceptionControlGroup
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPerceptionControlGroup.all.get_FrameProviderIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionCorrelation

   procedure Initialize (this : in out PerceptionCorrelation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionCorrelation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionCorrelation, IPerceptionCorrelation_Ptr);
   begin
      if this.m_IPerceptionCorrelation /= null then
         if this.m_IPerceptionCorrelation.all /= null then
            RefCount := this.m_IPerceptionCorrelation.all.Release;
            Free (this.m_IPerceptionCorrelation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerceptionCorrelation

   function Constructor
   (
      targetId : WinRt.WString;
      position : Windows.Foundation.Numerics.Vector3;
      orientation : Windows.Foundation.Numerics.Quaternion
   )
   return PerceptionCorrelation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionCorrelation");
      m_Factory    : access IPerceptionCorrelationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Perception.Provider.IPerceptionCorrelation;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      return RetVal : PerceptionCorrelation do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionCorrelationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_targetId, position, orientation, m_ComRetVal'Access);
            Retval.m_IPerceptionCorrelation := new Windows.Devices.Perception.Provider.IPerceptionCorrelation;
            Retval.m_IPerceptionCorrelation.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_targetId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionCorrelation

   function get_TargetId
   (
      this : in out PerceptionCorrelation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionCorrelation.all.get_TargetId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Position
   (
      this : in out PerceptionCorrelation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IPerceptionCorrelation.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Orientation
   (
      this : in out PerceptionCorrelation
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_IPerceptionCorrelation.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionCorrelationGroup

   procedure Initialize (this : in out PerceptionCorrelationGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionCorrelationGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionCorrelationGroup, IPerceptionCorrelationGroup_Ptr);
   begin
      if this.m_IPerceptionCorrelationGroup /= null then
         if this.m_IPerceptionCorrelationGroup.all /= null then
            RefCount := this.m_IPerceptionCorrelationGroup.all.Release;
            Free (this.m_IPerceptionCorrelationGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerceptionCorrelationGroup

   function Constructor
   (
      relativeLocations : GenericObject
   )
   return PerceptionCorrelationGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionCorrelationGroup");
      m_Factory    : access IPerceptionCorrelationGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Perception.Provider.IPerceptionCorrelationGroup;
   begin
      return RetVal : PerceptionCorrelationGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionCorrelationGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (relativeLocations, m_ComRetVal'Access);
            Retval.m_IPerceptionCorrelationGroup := new Windows.Devices.Perception.Provider.IPerceptionCorrelationGroup;
            Retval.m_IPerceptionCorrelationGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionCorrelationGroup

   function get_RelativeLocations
   (
      this : in out PerceptionCorrelationGroup
   )
   return IVectorView_IPerceptionCorrelation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionCorrelation.Kind;
   begin
      Hr := this.m_IPerceptionCorrelationGroup.all.get_RelativeLocations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionCorrelation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionFaceAuthenticationGroup

   procedure Initialize (this : in out PerceptionFaceAuthenticationGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionFaceAuthenticationGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionFaceAuthenticationGroup, IPerceptionFaceAuthenticationGroup_Ptr);
   begin
      if this.m_IPerceptionFaceAuthenticationGroup /= null then
         if this.m_IPerceptionFaceAuthenticationGroup.all /= null then
            RefCount := this.m_IPerceptionFaceAuthenticationGroup.all.Release;
            Free (this.m_IPerceptionFaceAuthenticationGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerceptionFaceAuthenticationGroup

   function Constructor
   (
      ids : GenericObject;
      startHandler : Windows.Devices.Perception.Provider.PerceptionStartFaceAuthenticationHandler;
      stopHandler : Windows.Devices.Perception.Provider.PerceptionStopFaceAuthenticationHandler
   )
   return PerceptionFaceAuthenticationGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFaceAuthenticationGroup");
      m_Factory    : access IPerceptionFaceAuthenticationGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Perception.Provider.IPerceptionFaceAuthenticationGroup;
   begin
      return RetVal : PerceptionFaceAuthenticationGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFaceAuthenticationGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (ids, startHandler, stopHandler, m_ComRetVal'Access);
            Retval.m_IPerceptionFaceAuthenticationGroup := new Windows.Devices.Perception.Provider.IPerceptionFaceAuthenticationGroup;
            Retval.m_IPerceptionFaceAuthenticationGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionFaceAuthenticationGroup

   function get_FrameProviderIds
   (
      this : in out PerceptionFaceAuthenticationGroup
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPerceptionFaceAuthenticationGroup.all.get_FrameProviderIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionFrame

   procedure Initialize (this : in out PerceptionFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionFrame, IPerceptionFrame_Ptr);
   begin
      if this.m_IPerceptionFrame /= null then
         if this.m_IPerceptionFrame.all /= null then
            RefCount := this.m_IPerceptionFrame.all.Release;
            Free (this.m_IPerceptionFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionFrame

   function get_RelativeTime
   (
      this : in out PerceptionFrame
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPerceptionFrame.all.get_RelativeTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RelativeTime
   (
      this : in out PerceptionFrame;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionFrame.all.put_RelativeTime (value);
   end;

   function get_Properties
   (
      this : in out PerceptionFrame
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IPerceptionFrame.all.get_Properties (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_FrameData
   (
      this : in out PerceptionFrame
   )
   return WinRt.Windows.Foundation.IMemoryBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBuffer;
   begin
      Hr := this.m_IPerceptionFrame.all.get_FrameData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionFrameProviderInfo

   procedure Initialize (this : in out PerceptionFrameProviderInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionFrameProviderInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionFrameProviderInfo, IPerceptionFrameProviderInfo_Ptr);
   begin
      if this.m_IPerceptionFrameProviderInfo /= null then
         if this.m_IPerceptionFrameProviderInfo.all /= null then
            RefCount := this.m_IPerceptionFrameProviderInfo.all.Release;
            Free (this.m_IPerceptionFrameProviderInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerceptionFrameProviderInfo

   function Constructor return PerceptionFrameProviderInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderInfo");
      m_ComRetVal  : aliased Windows.Devices.Perception.Provider.IPerceptionFrameProviderInfo;
   begin
      return RetVal : PerceptionFrameProviderInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPerceptionFrameProviderInfo := new Windows.Devices.Perception.Provider.IPerceptionFrameProviderInfo;
            Retval.m_IPerceptionFrameProviderInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionFrameProviderInfo

   function get_Id
   (
      this : in out PerceptionFrameProviderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out PerceptionFrameProviderInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out PerceptionFrameProviderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out PerceptionFrameProviderInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DeviceKind
   (
      this : in out PerceptionFrameProviderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.get_DeviceKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DeviceKind
   (
      this : in out PerceptionFrameProviderInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.put_DeviceKind (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FrameKind
   (
      this : in out PerceptionFrameProviderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.get_FrameKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FrameKind
   (
      this : in out PerceptionFrameProviderInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.put_FrameKind (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Hidden
   (
      this : in out PerceptionFrameProviderInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.get_Hidden (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Hidden
   (
      this : in out PerceptionFrameProviderInfo;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionFrameProviderInfo.all.put_Hidden (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PerceptionFrameProviderManagerService is

      procedure RegisterFrameProviderInfo
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         frameProviderInfo : Windows.Devices.Perception.Provider.PerceptionFrameProviderInfo'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterFrameProviderInfo (manager, frameProviderInfo.m_IPerceptionFrameProviderInfo.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure UnregisterFrameProviderInfo
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         frameProviderInfo : Windows.Devices.Perception.Provider.PerceptionFrameProviderInfo'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UnregisterFrameProviderInfo (manager, frameProviderInfo.m_IPerceptionFrameProviderInfo.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RegisterFaceAuthenticationGroup
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         faceAuthenticationGroup : Windows.Devices.Perception.Provider.PerceptionFaceAuthenticationGroup'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterFaceAuthenticationGroup (manager, faceAuthenticationGroup.m_IPerceptionFaceAuthenticationGroup.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure UnregisterFaceAuthenticationGroup
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         faceAuthenticationGroup : Windows.Devices.Perception.Provider.PerceptionFaceAuthenticationGroup'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UnregisterFaceAuthenticationGroup (manager, faceAuthenticationGroup.m_IPerceptionFaceAuthenticationGroup.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RegisterControlGroup
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         controlGroup : Windows.Devices.Perception.Provider.PerceptionControlGroup'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterControlGroup (manager, controlGroup.m_IPerceptionControlGroup.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure UnregisterControlGroup
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         controlGroup : Windows.Devices.Perception.Provider.PerceptionControlGroup'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UnregisterControlGroup (manager, controlGroup.m_IPerceptionControlGroup.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RegisterCorrelationGroup
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         correlationGroup : Windows.Devices.Perception.Provider.PerceptionCorrelationGroup'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterCorrelationGroup (manager, correlationGroup.m_IPerceptionCorrelationGroup.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure UnregisterCorrelationGroup
      (
         manager : Windows.Devices.Perception.Provider.IPerceptionFrameProviderManager;
         correlationGroup : Windows.Devices.Perception.Provider.PerceptionCorrelationGroup'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UnregisterCorrelationGroup (manager, correlationGroup.m_IPerceptionCorrelationGroup.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure UpdateAvailabilityForProvider
      (
         provider : Windows.Devices.Perception.Provider.IPerceptionFrameProvider;
         available : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UpdateAvailabilityForProvider (provider, available);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure PublishFrameForProvider
      (
         provider : Windows.Devices.Perception.Provider.IPerceptionFrameProvider;
         frame : Windows.Devices.Perception.Provider.PerceptionFrame'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionFrameProviderManagerService");
         m_Factory        : access WinRt.Windows.Devices.Perception.Provider.IPerceptionFrameProviderManagerServiceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionFrameProviderManagerServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PublishFrameForProvider (provider, frame.m_IPerceptionFrame.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end PerceptionFrameProviderManagerService;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionPropertyChangeRequest

   procedure Initialize (this : in out PerceptionPropertyChangeRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionPropertyChangeRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionPropertyChangeRequest, IPerceptionPropertyChangeRequest_Ptr);
   begin
      if this.m_IPerceptionPropertyChangeRequest /= null then
         if this.m_IPerceptionPropertyChangeRequest.all /= null then
            RefCount := this.m_IPerceptionPropertyChangeRequest.all.Release;
            Free (this.m_IPerceptionPropertyChangeRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionPropertyChangeRequest

   function get_Name
   (
      this : in out PerceptionPropertyChangeRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionPropertyChangeRequest.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out PerceptionPropertyChangeRequest
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IPerceptionPropertyChangeRequest.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out PerceptionPropertyChangeRequest
   )
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeStatus;
   begin
      Hr := this.m_IPerceptionPropertyChangeRequest.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Status
   (
      this : in out PerceptionPropertyChangeRequest;
      value : Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionPropertyChangeRequest.all.put_Status (value);
   end;

   function GetDeferral
   (
      this : in out PerceptionPropertyChangeRequest
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IPerceptionPropertyChangeRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate PerceptionStartFaceAuthenticationHandler

   function Invoke
   (
      this : access PerceptionStartFaceAuthenticationHandler_Delegate;
      sender : Windows.Devices.Perception.Provider.IPerceptionFaceAuthenticationGroup
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate PerceptionStopFaceAuthenticationHandler

   function Invoke
   (
      this : access PerceptionStopFaceAuthenticationHandler_Delegate;
      sender : Windows.Devices.Perception.Provider.IPerceptionFaceAuthenticationGroup
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionVideoFrameAllocator

   procedure Initialize (this : in out PerceptionVideoFrameAllocator) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionVideoFrameAllocator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionVideoFrameAllocator, IPerceptionVideoFrameAllocator_Ptr);
   begin
      if this.m_IPerceptionVideoFrameAllocator /= null then
         if this.m_IPerceptionVideoFrameAllocator.all /= null then
            RefCount := this.m_IPerceptionVideoFrameAllocator.all.Release;
            Free (this.m_IPerceptionVideoFrameAllocator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerceptionVideoFrameAllocator

   function Constructor
   (
      maxOutstandingFrameCountForWrite : WinRt.UInt32;
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      resolution : Windows.Foundation.Size;
      alpha : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return PerceptionVideoFrameAllocator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Perception.Provider.PerceptionVideoFrameAllocator");
      m_Factory    : access IPerceptionVideoFrameAllocatorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Perception.Provider.IPerceptionVideoFrameAllocator;
   begin
      return RetVal : PerceptionVideoFrameAllocator do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionVideoFrameAllocatorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (maxOutstandingFrameCountForWrite, format, resolution, alpha, m_ComRetVal'Access);
            Retval.m_IPerceptionVideoFrameAllocator := new Windows.Devices.Perception.Provider.IPerceptionVideoFrameAllocator;
            Retval.m_IPerceptionVideoFrameAllocator.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionVideoFrameAllocator

   function AllocateFrame
   (
      this : in out PerceptionVideoFrameAllocator
   )
   return WinRt.Windows.Devices.Perception.Provider.PerceptionFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.Provider.IPerceptionFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.Provider.PerceptionFrame do
         Hr := this.m_IPerceptionVideoFrameAllocator.all.AllocateFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionFrame := new Windows.Devices.Perception.Provider.IPerceptionFrame;
         Retval.m_IPerceptionFrame.all := m_ComRetVal;
      end return;
   end;

   function CopyFromVideoFrame
   (
      this : in out PerceptionVideoFrameAllocator;
      frame : Windows.Media.VideoFrame'Class
   )
   return WinRt.Windows.Devices.Perception.Provider.PerceptionFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.Provider.IPerceptionFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.Provider.PerceptionFrame do
         Hr := this.m_IPerceptionVideoFrameAllocator.all.CopyFromVideoFrame (frame.m_IVideoFrame.all, m_ComRetVal'Access);
         Retval.m_IPerceptionFrame := new Windows.Devices.Perception.Provider.IPerceptionFrame;
         Retval.m_IPerceptionFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionVideoFrameAllocator
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.Provider.IPerceptionVideoFrameAllocator_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionVideoFrameAllocator.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

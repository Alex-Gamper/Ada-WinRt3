--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile;
with WinRt.Windows.Devices.Bluetooth.Rfcomm;
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Devices.Radios;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Bluetooth is

   package IAsyncOperation_Radio is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Radios.IRadio);
   package AsyncOperationCompletedHandler_Radio is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Radios.IRadio);

   package IAsyncOperation_BluetoothAdapter is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter);
   package AsyncOperationCompletedHandler_BluetoothAdapter is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter);

   package IAsyncOperation_DeviceAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);
   package AsyncOperationCompletedHandler_DeviceAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);

   package IAsyncOperation_RfcommDeviceServicesResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult);
   package AsyncOperationCompletedHandler_RfcommDeviceServicesResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult);

   package IAsyncOperation_BluetoothDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice);
   package AsyncOperationCompletedHandler_BluetoothDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice);

   package IAsyncOperation_GattDeviceServicesResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult);
   package AsyncOperationCompletedHandler_GattDeviceServicesResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult);

   package IAsyncOperation_BluetoothLEDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice);
   package AsyncOperationCompletedHandler_BluetoothLEDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothAdapter

   procedure Initialize (this : in out BluetoothAdapter) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothAdapter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothAdapter, IBluetoothAdapter_Ptr);
   begin
      if this.m_IBluetoothAdapter /= null then
         if this.m_IBluetoothAdapter.all /= null then
            RefCount := this.m_IBluetoothAdapter.all.Release;
            Free (this.m_IBluetoothAdapter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BluetoothAdapter

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothAdapter");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothAdapterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothAdapter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothAdapter");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothAdapter.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothAdapter.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter;
      m_IID            : aliased WinRt.IID := (1190979340, 27655, 23098, (183, 117, 38, 249, 148, 2, 85, 63 )); -- Windows.Devices.Bluetooth.BluetoothAdapter;
      m_HandlerIID     : aliased WinRt.IID := (278989448, 37088, 20762, (154, 8, 215, 95, 235, 82, 161, 159 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothAdapter.Kind := new AsyncOperationCompletedHandler_BluetoothAdapter.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothAdapter.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothAdapter.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothAdapter.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothAdapter.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothAdapter do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothAdapterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothAdapter := new Windows.Devices.Bluetooth.IBluetoothAdapter;
                     Retval.m_IBluetoothAdapter.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.Bluetooth.BluetoothAdapter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothAdapter");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothAdapter.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothAdapter.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter;
      m_IID            : aliased WinRt.IID := (1190979340, 27655, 23098, (183, 117, 38, 249, 148, 2, 85, 63 )); -- Windows.Devices.Bluetooth.BluetoothAdapter;
      m_HandlerIID     : aliased WinRt.IID := (278989448, 37088, 20762, (154, 8, 215, 95, 235, 82, 161, 159 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothAdapter.Kind := new AsyncOperationCompletedHandler_BluetoothAdapter.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothAdapter.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothAdapter.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothAdapter.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothAdapter.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothAdapter do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothAdapterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothAdapter := new Windows.Devices.Bluetooth.IBluetoothAdapter;
                     Retval.m_IBluetoothAdapter.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothAdapter

   function get_DeviceId
   (
      this : in out BluetoothAdapter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_BluetoothAddress
   (
      this : in out BluetoothAdapter
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_BluetoothAddress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsClassicSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_IsClassicSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsLowEnergySupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_IsLowEnergySupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPeripheralRoleSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_IsPeripheralRoleSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCentralRoleSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_IsCentralRoleSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAdvertisementOffloadSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothAdapter.all.get_IsAdvertisementOffloadSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetRadioAsync
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Windows.Devices.Radios.Radio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Radio.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Radio.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Radios.IRadio;
      m_IID            : aliased WinRt.IID := (3938856000, 36284, 22612, (139, 160, 183, 185, 148, 14, 115, 137 )); -- Windows.Devices.Radios.Radio;
      m_HandlerIID     : aliased WinRt.IID := (2321317434, 32994, 22619, (134, 48, 122, 142, 119, 127, 3, 84 ));
      m_Handler        : AsyncOperationCompletedHandler_Radio.Kind := new AsyncOperationCompletedHandler_Radio.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Radio.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Radio.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Radio.Kind_Delegate, AsyncOperationCompletedHandler_Radio.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Radios.Radio do
         Hr := this.m_IBluetoothAdapter.all.GetRadioAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRadio := new Windows.Devices.Radios.IRadio;
                  Retval.m_IRadio.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_AreClassicSecureConnectionsSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter2, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothAdapter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothAdapter.all);
      Hr := m_Interface.get_AreClassicSecureConnectionsSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AreLowEnergySecureConnectionsSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter2, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothAdapter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothAdapter.all);
      Hr := m_Interface.get_AreLowEnergySecureConnectionsSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsExtendedAdvertisingSupported
   (
      this : in out BluetoothAdapter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothAdapter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothAdapter.all);
      Hr := m_Interface.get_IsExtendedAdvertisingSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxAdvertisementDataLength
   (
      this : in out BluetoothAdapter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothAdapter3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothAdapter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothAdapter.all);
      Hr := m_Interface.get_MaxAdvertisementDataLength (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothClassOfDevice

   procedure Initialize (this : in out BluetoothClassOfDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothClassOfDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothClassOfDevice, IBluetoothClassOfDevice_Ptr);
   begin
      if this.m_IBluetoothClassOfDevice /= null then
         if this.m_IBluetoothClassOfDevice.all /= null then
            RefCount := this.m_IBluetoothClassOfDevice.all.Release;
            Free (this.m_IBluetoothClassOfDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BluetoothClassOfDevice

   function FromRawValue
   (
      rawValue : WinRt.UInt32
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothClassOfDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothClassOfDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothClassOfDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothClassOfDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothClassOfDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothClassOfDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromRawValue (rawValue, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBluetoothClassOfDevice := new Windows.Devices.Bluetooth.IBluetoothClassOfDevice;
            Retval.m_IBluetoothClassOfDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromParts
   (
      majorClass : Windows.Devices.Bluetooth.BluetoothMajorClass;
      minorClass : Windows.Devices.Bluetooth.BluetoothMinorClass;
      serviceCapabilities : Windows.Devices.Bluetooth.BluetoothServiceCapabilities
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothClassOfDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothClassOfDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothClassOfDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothClassOfDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothClassOfDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothClassOfDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromParts (majorClass, minorClass, serviceCapabilities, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBluetoothClassOfDevice := new Windows.Devices.Bluetooth.IBluetoothClassOfDevice;
            Retval.m_IBluetoothClassOfDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothClassOfDevice

   function get_RawValue
   (
      this : in out BluetoothClassOfDevice
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBluetoothClassOfDevice.all.get_RawValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MajorClass
   (
      this : in out BluetoothClassOfDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothMajorClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothMajorClass;
   begin
      Hr := this.m_IBluetoothClassOfDevice.all.get_MajorClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinorClass
   (
      this : in out BluetoothClassOfDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothMinorClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothMinorClass;
   begin
      Hr := this.m_IBluetoothClassOfDevice.all.get_MinorClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceCapabilities
   (
      this : in out BluetoothClassOfDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothServiceCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothServiceCapabilities;
   begin
      Hr := this.m_IBluetoothClassOfDevice.all.get_ServiceCapabilities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothDevice

   procedure Initialize (this : in out BluetoothDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothDevice, IBluetoothDevice_Ptr);
   begin
      if this.m_IBluetoothDevice /= null then
         if this.m_IBluetoothDevice.all /= null then
            RefCount := this.m_IBluetoothDevice.all.Release;
            Free (this.m_IBluetoothDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BluetoothDevice

   function FromIdAsync_BluetoothDevice
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothDevice;
      m_IID            : aliased WinRt.IID := (3045952793, 17597, 23232, (160, 214, 27, 80, 128, 15, 49, 129 )); -- Windows.Devices.Bluetooth.BluetoothDevice;
      m_HandlerIID     : aliased WinRt.IID := (3001601489, 26282, 22674, (133, 163, 143, 11, 22, 94, 67, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothDevice.Kind := new AsyncOperationCompletedHandler_BluetoothDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothDevice.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothDevice := new Windows.Devices.Bluetooth.IBluetoothDevice;
                     Retval.m_IBluetoothDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function FromHostNameAsync
   (
      hostName : Windows.Networking.HostName'Class
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothDevice;
      m_IID            : aliased WinRt.IID := (3045952793, 17597, 23232, (160, 214, 27, 80, 128, 15, 49, 129 )); -- Windows.Devices.Bluetooth.BluetoothDevice;
      m_HandlerIID     : aliased WinRt.IID := (3001601489, 26282, 22674, (133, 163, 143, 11, 22, 94, 67, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothDevice.Kind := new AsyncOperationCompletedHandler_BluetoothDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothDevice.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromHostNameAsync (hostName.m_IHostName.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothDevice := new Windows.Devices.Bluetooth.IBluetoothDevice;
                     Retval.m_IBluetoothDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromBluetoothAddressAsync
   (
      address_x : WinRt.UInt64
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothDevice;
      m_IID            : aliased WinRt.IID := (3045952793, 17597, 23232, (160, 214, 27, 80, 128, 15, 49, 129 )); -- Windows.Devices.Bluetooth.BluetoothDevice;
      m_HandlerIID     : aliased WinRt.IID := (3001601489, 26282, 22674, (133, 163, 143, 11, 22, 94, 67, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothDevice.Kind := new AsyncOperationCompletedHandler_BluetoothDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothDevice.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBluetoothAddressAsync (address_x, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothDevice := new Windows.Devices.Bluetooth.IBluetoothDevice;
                     Retval.m_IBluetoothDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetDeviceSelector_BluetoothDevice
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromPairingState
   (
      pairingState : WinRt.Boolean
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromPairingState (pairingState, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromConnectionStatus
   (
      connectionStatus : Windows.Devices.Bluetooth.BluetoothConnectionStatus
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromConnectionStatus (connectionStatus, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromDeviceName
   (
      deviceName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_deviceName : WinRt.HString := To_HString (deviceName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromDeviceName (HStr_deviceName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromBluetoothAddress
   (
      bluetoothAddress : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromBluetoothAddress (bluetoothAddress, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromClassOfDevice
   (
      classOfDevice : Windows.Devices.Bluetooth.BluetoothClassOfDevice'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromClassOfDevice (classOfDevice.m_IBluetoothClassOfDevice.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothDevice

   function get_DeviceId
   (
      this : in out BluetoothDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothDevice.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HostName
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IBluetoothDevice.all.get_HostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_Name
   (
      this : in out BluetoothDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothDevice.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ClassOfDevice
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothClassOfDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothClassOfDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothClassOfDevice do
         Hr := this.m_IBluetoothDevice.all.get_ClassOfDevice (m_ComRetVal'Access);
         Retval.m_IBluetoothClassOfDevice := new Windows.Devices.Bluetooth.IBluetoothClassOfDevice;
         Retval.m_IBluetoothClassOfDevice.all := m_ComRetVal;
      end return;
   end;

   function get_SdpRecords
   (
      this : in out BluetoothDevice
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IBluetoothDevice.all.get_SdpRecords (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RfcommServices
   (
      this : in out BluetoothDevice
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IBluetoothDevice.all.get_RfcommServices (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConnectionStatus
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothConnectionStatus;
   begin
      Hr := this.m_IBluetoothDevice.all.get_ConnectionStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BluetoothAddress
   (
      this : in out BluetoothDevice
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IBluetoothDevice.all.get_BluetoothAddress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_NameChanged
   (
      this : in out BluetoothDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothDevice.all.add_NameChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NameChanged
   (
      this : in out BluetoothDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothDevice.all.remove_NameChanged (token);
   end;

   function add_SdpRecordsChanged
   (
      this : in out BluetoothDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothDevice.all.add_SdpRecordsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SdpRecordsChanged
   (
      this : in out BluetoothDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothDevice.all.remove_SdpRecordsChanged (token);
   end;

   function add_ConnectionStatusChanged
   (
      this : in out BluetoothDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothDevice.all.add_ConnectionStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConnectionStatusChanged
   (
      this : in out BluetoothDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothDevice.all.remove_ConnectionStatusChanged (token);
   end;

   procedure Close
   (
      this : in out BluetoothDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothDevice.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_DeviceInformation
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice2, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.get_DeviceInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceAccessInformation
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.get_DeviceAccessInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
         Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
      end return;
   end;

   function RequestAccessAsync
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.DeviceAccessStatus;
      m_IID            : aliased WinRt.IID := (3221996274, 43000, 24383, (128, 209, 40, 8, 239, 107, 202, 16 )); -- Windows.Devices.Enumeration.DeviceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (3994373507, 32859, 21480, (132, 105, 144, 113, 80, 54, 208, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceAccessStatus.Kind := new AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_DeviceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothDevice.all);
      Hr := m_Interface.RequestAccessAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetRfcommServicesAsync
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RfcommDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RfcommDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3086153549, 49052, 22305, (191, 110, 3, 241, 180, 64, 149, 136 )); -- Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1378624977, 34411, 24036, (189, 142, 31, 235, 90, 230, 13, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RfcommDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.GetRfcommServicesAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRfcommDeviceServicesResult := new Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
                  Retval.m_IRfcommDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetRfcommServicesAsync
   (
      this : in out BluetoothDevice;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RfcommDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RfcommDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3086153549, 49052, 22305, (191, 110, 3, 241, 180, 64, 149, 136 )); -- Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1378624977, 34411, 24036, (189, 142, 31, 235, 90, 230, 13, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RfcommDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.GetRfcommServicesAsync (cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRfcommDeviceServicesResult := new Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
                  Retval.m_IRfcommDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetRfcommServicesForIdAsync
   (
      this : in out BluetoothDevice;
      serviceId : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RfcommDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RfcommDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3086153549, 49052, 22305, (191, 110, 3, 241, 180, 64, 149, 136 )); -- Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1378624977, 34411, 24036, (189, 142, 31, 235, 90, 230, 13, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RfcommDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.GetRfcommServicesForIdAsync (serviceId.m_IRfcommServiceId.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRfcommDeviceServicesResult := new Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
                  Retval.m_IRfcommDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetRfcommServicesForIdAsync
   (
      this : in out BluetoothDevice;
      serviceId : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RfcommDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RfcommDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3086153549, 49052, 22305, (191, 110, 3, 241, 180, 64, 149, 136 )); -- Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1378624977, 34411, 24036, (189, 142, 31, 235, 90, 230, 13, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RfcommDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_RfcommDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.GetRfcommServicesForIdAsync (serviceId.m_IRfcommServiceId.all, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRfcommDeviceServicesResult := new Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult;
                  Retval.m_IRfcommDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_BluetoothDeviceId
   (
      this : in out BluetoothDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothDeviceId;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice4, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId do
         m_Interface := QInterface (this.m_IBluetoothDevice.all);
         Hr := m_Interface.get_BluetoothDeviceId (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBluetoothDeviceId := new Windows.Devices.Bluetooth.IBluetoothDeviceId;
         Retval.m_IBluetoothDeviceId.all := m_ComRetVal;
      end return;
   end;

   function get_WasSecureConnectionUsedForPairing
   (
      this : in out BluetoothDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothDevice5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothDevice5, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothDevice5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothDevice.all);
      Hr := m_Interface.get_WasSecureConnectionUsedForPairing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothDeviceId

   procedure Initialize (this : in out BluetoothDeviceId) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothDeviceId) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothDeviceId, IBluetoothDeviceId_Ptr);
   begin
      if this.m_IBluetoothDeviceId /= null then
         if this.m_IBluetoothDeviceId.all /= null then
            RefCount := this.m_IBluetoothDeviceId.all.Release;
            Free (this.m_IBluetoothDeviceId);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BluetoothDeviceId

   function FromId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothDeviceId");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothDeviceIdStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothDeviceId;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothDeviceIdStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBluetoothDeviceId := new Windows.Devices.Bluetooth.IBluetoothDeviceId;
            Retval.m_IBluetoothDeviceId.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothDeviceId

   function get_Id
   (
      this : in out BluetoothDeviceId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothDeviceId.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsClassicDevice
   (
      this : in out BluetoothDeviceId
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothDeviceId.all.get_IsClassicDevice (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsLowEnergyDevice
   (
      this : in out BluetoothDeviceId
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBluetoothDeviceId.all.get_IsLowEnergyDevice (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAppearance

   procedure Initialize (this : in out BluetoothLEAppearance) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAppearance) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAppearance, IBluetoothLEAppearance_Ptr);
   begin
      if this.m_IBluetoothLEAppearance /= null then
         if this.m_IBluetoothLEAppearance.all /= null then
            RefCount := this.m_IBluetoothLEAppearance.all.Release;
            Free (this.m_IBluetoothLEAppearance);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BluetoothLEAppearance

   function FromRawValue
   (
      rawValue : WinRt.UInt16
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEAppearance is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearance");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothLEAppearance;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEAppearance do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromRawValue (rawValue, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBluetoothLEAppearance := new Windows.Devices.Bluetooth.IBluetoothLEAppearance;
            Retval.m_IBluetoothLEAppearance.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromParts
   (
      appearanceCategory : WinRt.UInt16;
      appearanceSubCategory : WinRt.UInt16
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEAppearance is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearance");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothLEAppearance;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEAppearance do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromParts (appearanceCategory, appearanceSubCategory, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBluetoothLEAppearance := new Windows.Devices.Bluetooth.IBluetoothLEAppearance;
            Retval.m_IBluetoothLEAppearance.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAppearance

   function get_RawValue
   (
      this : in out BluetoothLEAppearance
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IBluetoothLEAppearance.all.get_RawValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Category
   (
      this : in out BluetoothLEAppearance
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IBluetoothLEAppearance.all.get_Category (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SubCategory
   (
      this : in out BluetoothLEAppearance
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IBluetoothLEAppearance.all.get_SubCategory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BluetoothLEAppearanceCategories is

      function get_Uncategorized
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Uncategorized (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Phone
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Phone (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Computer
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Computer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Watch
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Watch (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Clock
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Clock (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Display
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Display (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RemoteControl
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RemoteControl (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_EyeGlasses
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EyeGlasses (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Tag
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Tag (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Keyring
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Keyring (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MediaPlayer
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MediaPlayer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BarcodeScanner
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BarcodeScanner (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Thermometer
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Thermometer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HeartRate
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeartRate (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BloodPressure
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BloodPressure (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HumanInterfaceDevice
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HumanInterfaceDevice (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GlucoseMeter
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlucoseMeter (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RunningWalking
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RunningWalking (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Cycling
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Cycling (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PulseOximeter
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PulseOximeter (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_WeightScale
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_WeightScale (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OutdoorSportActivity
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceCategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OutdoorSportActivity (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BluetoothLEAppearanceCategories;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BluetoothLEAppearanceSubcategories is

      function get_Generic
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Generic (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SportsWatch
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SportsWatch (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ThermometerEar
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ThermometerEar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HeartRateBelt
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeartRateBelt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BloodPressureArm
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BloodPressureArm (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BloodPressureWrist
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BloodPressureWrist (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Keyboard
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Keyboard (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Mouse
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mouse (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Joystick
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Joystick (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Gamepad
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gamepad (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DigitizerTablet
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DigitizerTablet (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CardReader
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CardReader (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DigitalPen
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DigitalPen (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BarcodeScanner_BluetoothLEAppearanceSubcategories
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BarcodeScanner (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RunningWalkingInShoe
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RunningWalkingInShoe (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RunningWalkingOnShoe
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RunningWalkingOnShoe (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RunningWalkingOnHip
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RunningWalkingOnHip (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingComputer
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingComputer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingSpeedSensor
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingSpeedSensor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingCadenceSensor
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingCadenceSensor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingPowerSensor
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingPowerSensor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingSpeedCadenceSensor
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingSpeedCadenceSensor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OximeterFingertip
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OximeterFingertip (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OximeterWristWorn
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OximeterWristWorn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocationDisplay
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocationDisplay (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocationNavigationDisplay
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocationNavigationDisplay (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocationPod
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocationPod (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocationNavigationPod
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEAppearanceSubcategoriesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocationNavigationPod (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BluetoothLEAppearanceSubcategories;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEDevice

   procedure Initialize (this : in out BluetoothLEDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEDevice, IBluetoothLEDevice_Ptr);
   begin
      if this.m_IBluetoothLEDevice /= null then
         if this.m_IBluetoothLEDevice.all /= null then
            RefCount := this.m_IBluetoothLEDevice.all.Release;
            Free (this.m_IBluetoothLEDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BluetoothLEDevice

   function GetDeviceSelectorFromPairingState_BluetoothLEDevice
   (
      pairingState : WinRt.Boolean
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromPairingState (pairingState, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromConnectionStatus_BluetoothLEDevice
   (
      connectionStatus : Windows.Devices.Bluetooth.BluetoothConnectionStatus
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromConnectionStatus (connectionStatus, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromDeviceName_BluetoothLEDevice
   (
      deviceName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_deviceName : WinRt.HString := To_HString (deviceName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromDeviceName (HStr_deviceName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromBluetoothAddress_BluetoothLEDevice
   (
      bluetoothAddress : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromBluetoothAddress (bluetoothAddress, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromBluetoothAddress
   (
      bluetoothAddress : WinRt.UInt64;
      bluetoothAddressType : Windows.Devices.Bluetooth.BluetoothAddressType
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromBluetoothAddress (bluetoothAddress, bluetoothAddressType, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromAppearance
   (
      appearance : Windows.Devices.Bluetooth.BluetoothLEAppearance'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromAppearance (appearance.m_IBluetoothLEAppearance.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromBluetoothAddressAsync
   (
      bluetoothAddress : WinRt.UInt64;
      bluetoothAddressType : Windows.Devices.Bluetooth.BluetoothAddressType
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothLEDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothLEDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice;
      m_IID            : aliased WinRt.IID := (929013095, 29858, 24465, (161, 29, 22, 144, 147, 113, 141, 65 )); -- Windows.Devices.Bluetooth.BluetoothLEDevice;
      m_HandlerIID     : aliased WinRt.IID := (2438379423, 50506, 21111, (143, 139, 210, 204, 67, 199, 224, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothLEDevice.Kind := new AsyncOperationCompletedHandler_BluetoothLEDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothLEDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothLEDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothLEDevice.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothLEDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBluetoothAddressAsync (bluetoothAddress, bluetoothAddressType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothLEDevice := new Windows.Devices.Bluetooth.IBluetoothLEDevice;
                     Retval.m_IBluetoothLEDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromIdAsync_BluetoothLEDevice
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothLEDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothLEDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice;
      m_IID            : aliased WinRt.IID := (929013095, 29858, 24465, (161, 29, 22, 144, 147, 113, 141, 65 )); -- Windows.Devices.Bluetooth.BluetoothLEDevice;
      m_HandlerIID     : aliased WinRt.IID := (2438379423, 50506, 21111, (143, 139, 210, 204, 67, 199, 224, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothLEDevice.Kind := new AsyncOperationCompletedHandler_BluetoothLEDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothLEDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothLEDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothLEDevice.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothLEDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothLEDevice := new Windows.Devices.Bluetooth.IBluetoothLEDevice;
                     Retval.m_IBluetoothLEDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function FromBluetoothAddressAsync_BluetoothLEDevice
   (
      bluetoothAddress : WinRt.UInt64
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BluetoothLEDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BluetoothLEDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice;
      m_IID            : aliased WinRt.IID := (929013095, 29858, 24465, (161, 29, 22, 144, 147, 113, 141, 65 )); -- Windows.Devices.Bluetooth.BluetoothLEDevice;
      m_HandlerIID     : aliased WinRt.IID := (2438379423, 50506, 21111, (143, 139, 210, 204, 67, 199, 224, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_BluetoothLEDevice.Kind := new AsyncOperationCompletedHandler_BluetoothLEDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BluetoothLEDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BluetoothLEDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BluetoothLEDevice.Kind_Delegate, AsyncOperationCompletedHandler_BluetoothLEDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBluetoothAddressAsync (bluetoothAddress, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBluetoothLEDevice := new Windows.Devices.Bluetooth.IBluetoothLEDevice;
                     Retval.m_IBluetoothLEDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetDeviceSelector_BluetoothLEDevice
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothLEDevice");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBluetoothLEDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEDevice

   function get_DeviceId
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothLEDevice.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBluetoothLEDevice.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_GattServices
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IBluetoothLEDevice.all.get_GattServices (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConnectionStatus
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothConnectionStatus;
   begin
      Hr := this.m_IBluetoothLEDevice.all.get_ConnectionStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BluetoothAddress
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IBluetoothLEDevice.all.get_BluetoothAddress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetGattService
   (
      this : in out BluetoothLEDevice;
      serviceUuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService do
         Hr := this.m_IBluetoothLEDevice.all.GetGattService (serviceUuid, m_ComRetVal'Access);
         Retval.m_IGattDeviceService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
         Retval.m_IGattDeviceService.all := m_ComRetVal;
      end return;
   end;

   function add_NameChanged
   (
      this : in out BluetoothLEDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothLEDevice.all.add_NameChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NameChanged
   (
      this : in out BluetoothLEDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEDevice.all.remove_NameChanged (token);
   end;

   function add_GattServicesChanged
   (
      this : in out BluetoothLEDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothLEDevice.all.add_GattServicesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GattServicesChanged
   (
      this : in out BluetoothLEDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEDevice.all.remove_GattServicesChanged (token);
   end;

   function add_ConnectionStatusChanged
   (
      this : in out BluetoothLEDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBluetoothLEDevice.all.add_ConnectionStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConnectionStatusChanged
   (
      this : in out BluetoothLEDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEDevice.all.remove_ConnectionStatusChanged (token);
   end;

   procedure Close
   (
      this : in out BluetoothLEDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_DeviceInformation
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice2, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.get_DeviceInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Appearance
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEAppearance'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothLEAppearance;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice2, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEAppearance do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.get_Appearance (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBluetoothLEAppearance := new Windows.Devices.Bluetooth.IBluetoothLEAppearance;
         Retval.m_IBluetoothLEAppearance.all := m_ComRetVal;
      end return;
   end;

   function get_BluetoothAddressType
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothAddressType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothAddressType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice2, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
      Hr := m_Interface.get_BluetoothAddressType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeviceAccessInformation
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.get_DeviceAccessInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
         Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
      end return;
   end;

   function RequestAccessAsync
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.DeviceAccessStatus;
      m_IID            : aliased WinRt.IID := (3221996274, 43000, 24383, (128, 209, 40, 8, 239, 107, 202, 16 )); -- Windows.Devices.Enumeration.DeviceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (3994373507, 32859, 21480, (132, 105, 144, 113, 80, 54, 208, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceAccessStatus.Kind := new AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_DeviceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
      Hr := m_Interface.RequestAccessAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetGattServicesAsync
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.GetGattServicesAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetGattServicesAsync
   (
      this : in out BluetoothLEDevice;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.GetGattServicesAsync (cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetGattServicesForUuidAsync
   (
      this : in out BluetoothLEDevice;
      serviceUuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.GetGattServicesForUuidAsync (serviceUuid, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetGattServicesForUuidAsync
   (
      this : in out BluetoothLEDevice;
      serviceUuid : WinRt.Guid;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice3, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.GetGattServicesForUuidAsync (serviceUuid, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_BluetoothDeviceId
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothDeviceId;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice4, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId do
         m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
         Hr := m_Interface.get_BluetoothDeviceId (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBluetoothDeviceId := new Windows.Devices.Bluetooth.IBluetoothDeviceId;
         Retval.m_IBluetoothDeviceId.all := m_ComRetVal;
      end return;
   end;

   function get_WasSecureConnectionUsedForPairing
   (
      this : in out BluetoothLEDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice_Interface, WinRt.Windows.Devices.Bluetooth.IBluetoothLEDevice5, WinRt.Windows.Devices.Bluetooth.IID_IBluetoothLEDevice5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEDevice.all);
      Hr := m_Interface.get_WasSecureConnectionUsedForPairing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothSignalStrengthFilter

   procedure Initialize (this : in out BluetoothSignalStrengthFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothSignalStrengthFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothSignalStrengthFilter, IBluetoothSignalStrengthFilter_Ptr);
   begin
      if this.m_IBluetoothSignalStrengthFilter /= null then
         if this.m_IBluetoothSignalStrengthFilter.all /= null then
            RefCount := this.m_IBluetoothSignalStrengthFilter.all.Release;
            Free (this.m_IBluetoothSignalStrengthFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothSignalStrengthFilter

   function Constructor return BluetoothSignalStrengthFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
   begin
      return RetVal : BluetoothSignalStrengthFilter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothSignalStrengthFilter := new Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
            Retval.m_IBluetoothSignalStrengthFilter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothSignalStrengthFilter

   function get_InRangeThresholdInDBm
   (
      this : in out BluetoothSignalStrengthFilter
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.get_InRangeThresholdInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InRangeThresholdInDBm
   (
      this : in out BluetoothSignalStrengthFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.put_InRangeThresholdInDBm (value);
   end;

   function get_OutOfRangeThresholdInDBm
   (
      this : in out BluetoothSignalStrengthFilter
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.get_OutOfRangeThresholdInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_OutOfRangeThresholdInDBm
   (
      this : in out BluetoothSignalStrengthFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.put_OutOfRangeThresholdInDBm (value);
   end;

   function get_OutOfRangeTimeout
   (
      this : in out BluetoothSignalStrengthFilter
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.get_OutOfRangeTimeout (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_OutOfRangeTimeout
   (
      this : in out BluetoothSignalStrengthFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.put_OutOfRangeTimeout (value);
   end;

   function get_SamplingInterval
   (
      this : in out BluetoothSignalStrengthFilter
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.get_SamplingInterval (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SamplingInterval
   (
      this : in out BluetoothSignalStrengthFilter;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothSignalStrengthFilter.all.put_SamplingInterval (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BluetoothUuidHelper is

      function FromShortId
      (
         shortId : WinRt.UInt32
      )
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothUuidHelper");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothUuidHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothUuidHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromShortId (shortId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function TryGetShortId
      (
         uuid : WinRt.Guid
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.BluetoothUuidHelper");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.IBluetoothUuidHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBluetoothUuidHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryGetShortId (uuid, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BluetoothUuidHelper;

end;

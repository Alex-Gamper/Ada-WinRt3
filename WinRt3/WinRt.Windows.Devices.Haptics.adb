--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Haptics is

   package IAsyncOperation_VibrationAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Haptics.VibrationAccessStatus);
   package AsyncOperationCompletedHandler_VibrationAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Haptics.VibrationAccessStatus);

   package IAsyncOperation_VibrationDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Haptics.IVibrationDevice);
   package AsyncOperationCompletedHandler_VibrationDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Haptics.IVibrationDevice);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownSimpleHapticsControllerWaveforms is

      function get_Click
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms");
         m_Factory        : access WinRt.Windows.Devices.Haptics.IKnownSimpleHapticsControllerWaveformsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimpleHapticsControllerWaveformsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Click (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BuzzContinuous
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms");
         m_Factory        : access WinRt.Windows.Devices.Haptics.IKnownSimpleHapticsControllerWaveformsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimpleHapticsControllerWaveformsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BuzzContinuous (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RumbleContinuous
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms");
         m_Factory        : access WinRt.Windows.Devices.Haptics.IKnownSimpleHapticsControllerWaveformsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimpleHapticsControllerWaveformsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RumbleContinuous (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Press
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms");
         m_Factory        : access WinRt.Windows.Devices.Haptics.IKnownSimpleHapticsControllerWaveformsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimpleHapticsControllerWaveformsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Press (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Release
      return WinRt.UInt16 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms");
         m_Factory        : access WinRt.Windows.Devices.Haptics.IKnownSimpleHapticsControllerWaveformsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt16;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimpleHapticsControllerWaveformsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Release (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end KnownSimpleHapticsControllerWaveforms;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SimpleHapticsController

   procedure Initialize (this : in out SimpleHapticsController) is
   begin
      null;
   end;

   procedure Finalize (this : in out SimpleHapticsController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISimpleHapticsController, ISimpleHapticsController_Ptr);
   begin
      if this.m_ISimpleHapticsController /= null then
         if this.m_ISimpleHapticsController.all /= null then
            RefCount := this.m_ISimpleHapticsController.all.Release;
            Free (this.m_ISimpleHapticsController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SimpleHapticsController

   function get_Id
   (
      this : in out SimpleHapticsController
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISimpleHapticsController.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportedFeedback
   (
      this : in out SimpleHapticsController
   )
   return IVectorView_ISimpleHapticsControllerFeedback.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISimpleHapticsControllerFeedback.Kind;
   begin
      Hr := this.m_ISimpleHapticsController.all.get_SupportedFeedback (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISimpleHapticsControllerFeedback (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsIntensitySupported
   (
      this : in out SimpleHapticsController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISimpleHapticsController.all.get_IsIntensitySupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPlayCountSupported
   (
      this : in out SimpleHapticsController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISimpleHapticsController.all.get_IsPlayCountSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPlayDurationSupported
   (
      this : in out SimpleHapticsController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISimpleHapticsController.all.get_IsPlayDurationSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsReplayPauseIntervalSupported
   (
      this : in out SimpleHapticsController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISimpleHapticsController.all.get_IsReplayPauseIntervalSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StopFeedback
   (
      this : in out SimpleHapticsController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISimpleHapticsController.all.StopFeedback;
   end;

   procedure SendHapticFeedback
   (
      this : in out SimpleHapticsController;
      feedback : Windows.Devices.Haptics.SimpleHapticsControllerFeedback'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISimpleHapticsController.all.SendHapticFeedback (feedback.m_ISimpleHapticsControllerFeedback.all);
   end;

   procedure SendHapticFeedback
   (
      this : in out SimpleHapticsController;
      feedback : Windows.Devices.Haptics.SimpleHapticsControllerFeedback'Class;
      intensity : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISimpleHapticsController.all.SendHapticFeedback (feedback.m_ISimpleHapticsControllerFeedback.all, intensity);
   end;

   procedure SendHapticFeedbackForDuration
   (
      this : in out SimpleHapticsController;
      feedback : Windows.Devices.Haptics.SimpleHapticsControllerFeedback'Class;
      intensity : WinRt.Double;
      playDuration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISimpleHapticsController.all.SendHapticFeedbackForDuration (feedback.m_ISimpleHapticsControllerFeedback.all, intensity, playDuration);
   end;

   procedure SendHapticFeedbackForPlayCount
   (
      this : in out SimpleHapticsController;
      feedback : Windows.Devices.Haptics.SimpleHapticsControllerFeedback'Class;
      intensity : WinRt.Double;
      playCount : WinRt.Int32;
      replayPauseInterval : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISimpleHapticsController.all.SendHapticFeedbackForPlayCount (feedback.m_ISimpleHapticsControllerFeedback.all, intensity, playCount, replayPauseInterval);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SimpleHapticsControllerFeedback

   procedure Initialize (this : in out SimpleHapticsControllerFeedback) is
   begin
      null;
   end;

   procedure Finalize (this : in out SimpleHapticsControllerFeedback) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISimpleHapticsControllerFeedback, ISimpleHapticsControllerFeedback_Ptr);
   begin
      if this.m_ISimpleHapticsControllerFeedback /= null then
         if this.m_ISimpleHapticsControllerFeedback.all /= null then
            RefCount := this.m_ISimpleHapticsControllerFeedback.all.Release;
            Free (this.m_ISimpleHapticsControllerFeedback);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SimpleHapticsControllerFeedback

   function get_Waveform
   (
      this : in out SimpleHapticsControllerFeedback
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISimpleHapticsControllerFeedback.all.get_Waveform (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out SimpleHapticsControllerFeedback
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISimpleHapticsControllerFeedback.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VibrationDevice

   procedure Initialize (this : in out VibrationDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out VibrationDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVibrationDevice, IVibrationDevice_Ptr);
   begin
      if this.m_IVibrationDevice /= null then
         if this.m_IVibrationDevice.all /= null then
            RefCount := this.m_IVibrationDevice.all.Release;
            Free (this.m_IVibrationDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VibrationDevice

   function RequestAccessAsync
   return WinRt.Windows.Devices.Haptics.VibrationAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.VibrationDevice");
      m_Factory        : access WinRt.Windows.Devices.Haptics.IVibrationDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VibrationAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VibrationAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Haptics.VibrationAccessStatus;
      m_IID            : aliased WinRt.IID := (124462609, 22036, 21925, (156, 88, 249, 209, 122, 143, 11, 121 )); -- Windows.Devices.Haptics.VibrationAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (2743818715, 20209, 23506, (137, 239, 241, 217, 241, 250, 202, 150 ));
      m_Handler        : AsyncOperationCompletedHandler_VibrationAccessStatus.Kind := new AsyncOperationCompletedHandler_VibrationAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VibrationAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VibrationAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VibrationAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_VibrationAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVibrationDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.VibrationDevice");
      m_Factory        : access WinRt.Windows.Devices.Haptics.IVibrationDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVibrationDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Haptics.VibrationDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.VibrationDevice");
      m_Factory        : access WinRt.Windows.Devices.Haptics.IVibrationDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VibrationDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VibrationDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Haptics.IVibrationDevice;
      m_IID            : aliased WinRt.IID := (1142502548, 58161, 20682, (187, 97, 106, 113, 189, 155, 1, 196 )); -- Windows.Devices.Haptics.VibrationDevice;
      m_HandlerIID     : aliased WinRt.IID := (1310892341, 62874, 21613, (159, 207, 130, 222, 184, 51, 217, 104 ));
      m_Handler        : AsyncOperationCompletedHandler_VibrationDevice.Kind := new AsyncOperationCompletedHandler_VibrationDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VibrationDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VibrationDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VibrationDevice.Kind_Delegate, AsyncOperationCompletedHandler_VibrationDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Haptics.VibrationDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IVibrationDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IVibrationDevice := new Windows.Devices.Haptics.IVibrationDevice;
                     Retval.m_IVibrationDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.Haptics.VibrationDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.VibrationDevice");
      m_Factory        : access WinRt.Windows.Devices.Haptics.IVibrationDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VibrationDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VibrationDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Haptics.IVibrationDevice;
      m_IID            : aliased WinRt.IID := (1142502548, 58161, 20682, (187, 97, 106, 113, 189, 155, 1, 196 )); -- Windows.Devices.Haptics.VibrationDevice;
      m_HandlerIID     : aliased WinRt.IID := (1310892341, 62874, 21613, (159, 207, 130, 222, 184, 51, 217, 104 ));
      m_Handler        : AsyncOperationCompletedHandler_VibrationDevice.Kind := new AsyncOperationCompletedHandler_VibrationDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VibrationDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VibrationDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VibrationDevice.Kind_Delegate, AsyncOperationCompletedHandler_VibrationDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Haptics.VibrationDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IVibrationDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IVibrationDevice := new Windows.Devices.Haptics.IVibrationDevice;
                     Retval.m_IVibrationDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Haptics.VibrationDevice");
      m_Factory        : access WinRt.Windows.Devices.Haptics.IVibrationDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3181949240, 30818, 23027, (191, 217, 95, 28, 176, 99, 223, 2 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (158294921, 26455, 22239, (175, 18, 207, 225, 216, 242, 63, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVibrationDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VibrationDevice

   function get_Id
   (
      this : in out VibrationDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVibrationDevice.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SimpleHapticsController
   (
      this : in out VibrationDevice
   )
   return WinRt.Windows.Devices.Haptics.SimpleHapticsController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Haptics.ISimpleHapticsController;
   begin
      return RetVal : WinRt.Windows.Devices.Haptics.SimpleHapticsController do
         Hr := this.m_IVibrationDevice.all.get_SimpleHapticsController (m_ComRetVal'Access);
         Retval.m_ISimpleHapticsController := new Windows.Devices.Haptics.ISimpleHapticsController;
         Retval.m_ISimpleHapticsController.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Interop is

   -----------------------------------------------------------------------------
   -- Delegate BindableVectorChangedEventHandler

   function Invoke
   (
      this : access BindableVectorChangedEventHandler_Delegate;
      vector : Windows.UI.Xaml.Interop.IBindableObservableVector;
      e : WinRt.IInspectable
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (vector, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotifyCollectionChangedEventArgs

   procedure Initialize (this : in out NotifyCollectionChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotifyCollectionChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotifyCollectionChangedEventArgs, INotifyCollectionChangedEventArgs_Ptr);
   begin
      if this.m_INotifyCollectionChangedEventArgs /= null then
         if this.m_INotifyCollectionChangedEventArgs.all /= null then
            RefCount := this.m_INotifyCollectionChangedEventArgs.all.Release;
            Free (this.m_INotifyCollectionChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NotifyCollectionChangedEventArgs

   function Constructor
   (
      action : Windows.UI.Xaml.Interop.NotifyCollectionChangedAction;
      newItems : Windows.UI.Xaml.Interop.IBindableVector;
      oldItems : Windows.UI.Xaml.Interop.IBindableVector;
      newIndex : WinRt.Int32;
      oldIndex : WinRt.Int32;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return NotifyCollectionChangedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs");
      m_Factory    : access INotifyCollectionChangedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Interop.INotifyCollectionChangedEventArgs;
   begin
      return RetVal : NotifyCollectionChangedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_INotifyCollectionChangedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithAllParameters (action, newItems, oldItems, newIndex, oldIndex, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_INotifyCollectionChangedEventArgs := new Windows.UI.Xaml.Interop.INotifyCollectionChangedEventArgs;
            Retval.m_INotifyCollectionChangedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotifyCollectionChangedEventArgs

   function get_Action
   (
      this : in out NotifyCollectionChangedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Interop.NotifyCollectionChangedAction is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Interop.NotifyCollectionChangedAction;
   begin
      Hr := this.m_INotifyCollectionChangedEventArgs.all.get_Action (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewItems
   (
      this : in out NotifyCollectionChangedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Interop.IBindableVector is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Interop.IBindableVector;
   begin
      Hr := this.m_INotifyCollectionChangedEventArgs.all.get_NewItems (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OldItems
   (
      this : in out NotifyCollectionChangedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Interop.IBindableVector is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Interop.IBindableVector;
   begin
      Hr := this.m_INotifyCollectionChangedEventArgs.all.get_OldItems (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewStartingIndex
   (
      this : in out NotifyCollectionChangedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INotifyCollectionChangedEventArgs.all.get_NewStartingIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OldStartingIndex
   (
      this : in out NotifyCollectionChangedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INotifyCollectionChangedEventArgs.all.get_OldStartingIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate NotifyCollectionChangedEventHandler

   function Invoke
   (
      this : access NotifyCollectionChangedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Interop.INotifyCollectionChangedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

end;

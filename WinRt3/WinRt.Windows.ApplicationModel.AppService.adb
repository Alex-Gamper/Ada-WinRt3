--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with WinRt.Windows.System.RemoteSystems;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.AppService is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_AppServiceConnectionStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.AppService.AppServiceConnectionStatus);
   package AsyncOperationCompletedHandler_AppServiceConnectionStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.AppService.AppServiceConnectionStatus);

   package IAsyncOperation_AppServiceResponse is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.AppService.IAppServiceResponse);
   package AsyncOperationCompletedHandler_AppServiceResponse is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.AppService.IAppServiceResponse);

   package IAsyncOperation_StatelessAppServiceResponse is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.AppService.IStatelessAppServiceResponse);
   package AsyncOperationCompletedHandler_StatelessAppServiceResponse is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.AppService.IStatelessAppServiceResponse);

   package IAsyncOperation_AppServiceResponseStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.AppService.AppServiceResponseStatus);
   package AsyncOperationCompletedHandler_AppServiceResponseStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.AppService.AppServiceResponseStatus);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppServiceCatalog is

      function FindAppServiceProvidersAsync
      (
         appServiceName : WinRt.WString
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppService.AppServiceCatalog");
         m_Factory        : access WinRt.Windows.ApplicationModel.AppService.IAppServiceCatalogStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appServiceName : WinRt.HString := To_HString (appServiceName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (122961297, 34320, 20818, (176, 228, 67, 214, 228, 205, 208, 203 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (133323631, 61524, 22089, (165, 206, 179, 72, 221, 198, 24, 182 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppServiceCatalogStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAppServiceProvidersAsync (HStr_appServiceName, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appServiceName);
         return m_RetVal;
      end;

   end AppServiceCatalog;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceClosedEventArgs

   procedure Initialize (this : in out AppServiceClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceClosedEventArgs, IAppServiceClosedEventArgs_Ptr);
   begin
      if this.m_IAppServiceClosedEventArgs /= null then
         if this.m_IAppServiceClosedEventArgs.all /= null then
            RefCount := this.m_IAppServiceClosedEventArgs.all.Release;
            Free (this.m_IAppServiceClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceClosedEventArgs

   function get_Status
   (
      this : in out AppServiceClosedEventArgs
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceClosedStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppService.AppServiceClosedStatus;
   begin
      Hr := this.m_IAppServiceClosedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceConnection

   procedure Initialize (this : in out AppServiceConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceConnection, IAppServiceConnection_Ptr);
   begin
      if this.m_IAppServiceConnection /= null then
         if this.m_IAppServiceConnection.all /= null then
            RefCount := this.m_IAppServiceConnection.all.Release;
            Free (this.m_IAppServiceConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppServiceConnection

   function Constructor return AppServiceConnection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.AppService.AppServiceConnection");
      m_ComRetVal  : aliased Windows.ApplicationModel.AppService.IAppServiceConnection;
   begin
      return RetVal : AppServiceConnection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppServiceConnection := new Windows.ApplicationModel.AppService.IAppServiceConnection;
            Retval.m_IAppServiceConnection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppServiceConnection

   function SendStatelessMessageAsync
   (
      connection : Windows.ApplicationModel.AppService.AppServiceConnection'Class;
      connectionRequest : Windows.System.RemoteSystems.RemoteSystemConnectionRequest'Class;
      message : Windows.Foundation.Collections.ValueSet'Class
   )
   return WinRt.Windows.ApplicationModel.AppService.StatelessAppServiceResponse is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppService.AppServiceConnection");
      m_Factory        : access WinRt.Windows.ApplicationModel.AppService.IAppServiceConnectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StatelessAppServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StatelessAppServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.AppService.IStatelessAppServiceResponse;
      m_IID            : aliased WinRt.IID := (2996916814, 48811, 23531, (170, 233, 180, 53, 1, 195, 164, 136 )); -- Windows.ApplicationModel.AppService.StatelessAppServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (1293870317, 19833, 21498, (169, 215, 201, 201, 53, 78, 79, 85 ));
      m_Handler        : AsyncOperationCompletedHandler_StatelessAppServiceResponse.Kind := new AsyncOperationCompletedHandler_StatelessAppServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StatelessAppServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StatelessAppServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StatelessAppServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_StatelessAppServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppService.StatelessAppServiceResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IAppServiceConnectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SendStatelessMessageAsync (connection.m_IAppServiceConnection.all, connectionRequest.m_IRemoteSystemConnectionRequest.all, message.m_IPropertySet.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStatelessAppServiceResponse := new Windows.ApplicationModel.AppService.IStatelessAppServiceResponse;
                     Retval.m_IStatelessAppServiceResponse.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceConnection

   function get_AppServiceName
   (
      this : in out AppServiceConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppServiceConnection.all.get_AppServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AppServiceName
   (
      this : in out AppServiceConnection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppServiceConnection.all.put_AppServiceName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PackageFamilyName
   (
      this : in out AppServiceConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppServiceConnection.all.get_PackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PackageFamilyName
   (
      this : in out AppServiceConnection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppServiceConnection.all.put_PackageFamilyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function OpenAsync
   (
      this : in out AppServiceConnection
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppServiceConnectionStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppServiceConnectionStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.AppService.AppServiceConnectionStatus;
      m_IID            : aliased WinRt.IID := (219047523, 9785, 23194, (156, 188, 48, 215, 212, 206, 83, 59 )); -- Windows.ApplicationModel.AppService.AppServiceConnectionStatus;
      m_HandlerIID     : aliased WinRt.IID := (3066477554, 29386, 22425, (166, 81, 209, 153, 6, 112, 9, 123 ));
      m_Handler        : AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind := new AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppServiceConnectionStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind_Delegate, AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppServiceConnection.all.OpenAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendMessageAsync
   (
      this : in out AppServiceConnection;
      message : Windows.Foundation.Collections.ValueSet'Class
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceResponse'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppServiceResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppServiceResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.AppService.IAppServiceResponse;
      m_IID            : aliased WinRt.IID := (1215650428, 51343, 24304, (155, 76, 135, 111, 204, 38, 16, 180 )); -- Windows.ApplicationModel.AppService.AppServiceResponse;
      m_HandlerIID     : aliased WinRt.IID := (2124929004, 57700, 21187, (142, 50, 187, 167, 18, 109, 144, 40 ));
      m_Handler        : AsyncOperationCompletedHandler_AppServiceResponse.Kind := new AsyncOperationCompletedHandler_AppServiceResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppServiceResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppServiceResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppServiceResponse.Kind_Delegate, AsyncOperationCompletedHandler_AppServiceResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppService.AppServiceResponse do
         Hr := this.m_IAppServiceConnection.all.SendMessageAsync (message.m_IPropertySet.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppServiceResponse := new Windows.ApplicationModel.AppService.IAppServiceResponse;
                  Retval.m_IAppServiceResponse.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_RequestReceived
   (
      this : in out AppServiceConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppServiceConnection.all.add_RequestReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RequestReceived
   (
      this : in out AppServiceConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppServiceConnection.all.remove_RequestReceived (token);
   end;

   function add_ServiceClosed
   (
      this : in out AppServiceConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppServiceConnection.all.add_ServiceClosed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ServiceClosed
   (
      this : in out AppServiceConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppServiceConnection.all.remove_ServiceClosed (token);
   end;

   function OpenRemoteAsync
   (
      this : in out AppServiceConnection;
      remoteSystemConnectionRequest : Windows.System.RemoteSystems.RemoteSystemConnectionRequest'Class
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppServiceConnectionStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppServiceConnectionStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.AppService.AppServiceConnectionStatus;
      m_IID            : aliased WinRt.IID := (219047523, 9785, 23194, (156, 188, 48, 215, 212, 206, 83, 59 )); -- Windows.ApplicationModel.AppService.AppServiceConnectionStatus;
      m_HandlerIID     : aliased WinRt.IID := (3066477554, 29386, 22425, (166, 81, 209, 153, 6, 112, 9, 123 ));
      m_Handler        : AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind := new AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppServiceConnectionStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind_Delegate, AsyncOperationCompletedHandler_AppServiceConnectionStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection_Interface, WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection2, WinRt.Windows.ApplicationModel.AppService.IID_IAppServiceConnection2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppServiceConnection.all);
      Hr := m_Interface.OpenRemoteAsync (remoteSystemConnectionRequest.m_IRemoteSystemConnectionRequest.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_User
   (
      this : in out AppServiceConnection
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection_Interface, WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection2, WinRt.Windows.ApplicationModel.AppService.IID_IAppServiceConnection2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppServiceConnection.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   procedure put_User
   (
      this : in out AppServiceConnection;
      value : Windows.System.User'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection_Interface, WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection2, WinRt.Windows.ApplicationModel.AppService.IID_IAppServiceConnection2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppServiceConnection.all);
      Hr := m_Interface.put_User (value.m_IUser.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AppServiceConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceConnection_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppServiceConnection.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceDeferral

   procedure Initialize (this : in out AppServiceDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceDeferral, IAppServiceDeferral_Ptr);
   begin
      if this.m_IAppServiceDeferral /= null then
         if this.m_IAppServiceDeferral.all /= null then
            RefCount := this.m_IAppServiceDeferral.all.Release;
            Free (this.m_IAppServiceDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceDeferral

   procedure Complete
   (
      this : in out AppServiceDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppServiceDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceRequest

   procedure Initialize (this : in out AppServiceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceRequest, IAppServiceRequest_Ptr);
   begin
      if this.m_IAppServiceRequest /= null then
         if this.m_IAppServiceRequest.all /= null then
            RefCount := this.m_IAppServiceRequest.all.Release;
            Free (this.m_IAppServiceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceRequest

   function get_Message
   (
      this : in out AppServiceRequest
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IAppServiceRequest.all.get_Message (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function SendResponseAsync
   (
      this : in out AppServiceRequest;
      message : Windows.Foundation.Collections.ValueSet'Class
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceResponseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppServiceResponseStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppServiceResponseStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.AppService.AppServiceResponseStatus;
      m_IID            : aliased WinRt.IID := (2566764610, 23051, 21402, (163, 92, 85, 172, 95, 34, 134, 18 )); -- Windows.ApplicationModel.AppService.AppServiceResponseStatus;
      m_HandlerIID     : aliased WinRt.IID := (3089381437, 13024, 21881, (134, 112, 160, 106, 97, 69, 127, 32 ));
      m_Handler        : AsyncOperationCompletedHandler_AppServiceResponseStatus.Kind := new AsyncOperationCompletedHandler_AppServiceResponseStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppServiceResponseStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppServiceResponseStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppServiceResponseStatus.Kind_Delegate, AsyncOperationCompletedHandler_AppServiceResponseStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppServiceRequest.all.SendResponseAsync (message.m_IPropertySet.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceRequestReceivedEventArgs

   procedure Initialize (this : in out AppServiceRequestReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceRequestReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceRequestReceivedEventArgs, IAppServiceRequestReceivedEventArgs_Ptr);
   begin
      if this.m_IAppServiceRequestReceivedEventArgs /= null then
         if this.m_IAppServiceRequestReceivedEventArgs.all /= null then
            RefCount := this.m_IAppServiceRequestReceivedEventArgs.all.Release;
            Free (this.m_IAppServiceRequestReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceRequestReceivedEventArgs

   function get_Request
   (
      this : in out AppServiceRequestReceivedEventArgs
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppService.IAppServiceRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppService.AppServiceRequest do
         Hr := this.m_IAppServiceRequestReceivedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppServiceRequest := new Windows.ApplicationModel.AppService.IAppServiceRequest;
         Retval.m_IAppServiceRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppServiceRequestReceivedEventArgs
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppService.IAppServiceDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppService.AppServiceDeferral do
         Hr := this.m_IAppServiceRequestReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IAppServiceDeferral := new Windows.ApplicationModel.AppService.IAppServiceDeferral;
         Retval.m_IAppServiceDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceResponse

   procedure Initialize (this : in out AppServiceResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceResponse, IAppServiceResponse_Ptr);
   begin
      if this.m_IAppServiceResponse /= null then
         if this.m_IAppServiceResponse.all /= null then
            RefCount := this.m_IAppServiceResponse.all.Release;
            Free (this.m_IAppServiceResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceResponse

   function get_Message
   (
      this : in out AppServiceResponse
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IAppServiceResponse.all.get_Message (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out AppServiceResponse
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceResponseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppService.AppServiceResponseStatus;
   begin
      Hr := this.m_IAppServiceResponse.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppServiceTriggerDetails

   procedure Initialize (this : in out AppServiceTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppServiceTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppServiceTriggerDetails, IAppServiceTriggerDetails_Ptr);
   begin
      if this.m_IAppServiceTriggerDetails /= null then
         if this.m_IAppServiceTriggerDetails.all /= null then
            RefCount := this.m_IAppServiceTriggerDetails.all.Release;
            Free (this.m_IAppServiceTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppServiceTriggerDetails

   function get_Name
   (
      this : in out AppServiceTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppServiceTriggerDetails.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out AppServiceTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppServiceTriggerDetails.all.get_CallerPackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppServiceConnection
   (
      this : in out AppServiceTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.AppService.AppServiceConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppService.IAppServiceConnection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppService.AppServiceConnection do
         Hr := this.m_IAppServiceTriggerDetails.all.get_AppServiceConnection (m_ComRetVal'Access);
         Retval.m_IAppServiceConnection := new Windows.ApplicationModel.AppService.IAppServiceConnection;
         Retval.m_IAppServiceConnection.all := m_ComRetVal;
      end return;
   end;

   function get_IsRemoteSystemConnection
   (
      this : in out AppServiceTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails_Interface, WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails2, WinRt.Windows.ApplicationModel.AppService.IID_IAppServiceTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppServiceTriggerDetails.all);
      Hr := m_Interface.get_IsRemoteSystemConnection (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CheckCallerForCapabilityAsync
   (
      this : in out AppServiceTriggerDetails;
      capabilityName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_capabilityName : WinRt.HString := To_HString (capabilityName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails_Interface, WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails3, WinRt.Windows.ApplicationModel.AppService.IID_IAppServiceTriggerDetails3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppServiceTriggerDetails.all);
      Hr := m_Interface.CheckCallerForCapabilityAsync (HStr_capabilityName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_capabilityName);
      return m_RetVal;
   end;

   function get_CallerRemoteConnectionToken
   (
      this : in out AppServiceTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails_Interface, WinRt.Windows.ApplicationModel.AppService.IAppServiceTriggerDetails4, WinRt.Windows.ApplicationModel.AppService.IID_IAppServiceTriggerDetails4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppServiceTriggerDetails.all);
      Hr := m_Interface.get_CallerRemoteConnectionToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StatelessAppServiceResponse

   procedure Initialize (this : in out StatelessAppServiceResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out StatelessAppServiceResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStatelessAppServiceResponse, IStatelessAppServiceResponse_Ptr);
   begin
      if this.m_IStatelessAppServiceResponse /= null then
         if this.m_IStatelessAppServiceResponse.all /= null then
            RefCount := this.m_IStatelessAppServiceResponse.all.Release;
            Free (this.m_IStatelessAppServiceResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StatelessAppServiceResponse

   function get_Message
   (
      this : in out StatelessAppServiceResponse
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IStatelessAppServiceResponse.all.get_Message (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out StatelessAppServiceResponse
   )
   return WinRt.Windows.ApplicationModel.AppService.StatelessAppServiceResponseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppService.StatelessAppServiceResponseStatus;
   begin
      Hr := this.m_IStatelessAppServiceResponse.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.PointOfService is

   package IAsyncOperation_ClaimedBarcodeScanner is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner);
   package AsyncOperationCompletedHandler_ClaimedBarcodeScanner is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IBuffer);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer);

   package IAsyncOperation_BarcodeScanner is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IBarcodeScanner);
   package AsyncOperationCompletedHandler_BarcodeScanner is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IBarcodeScanner);

   package IAsyncOperation_ClaimedCashDrawer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer);
   package AsyncOperationCompletedHandler_ClaimedCashDrawer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer);

   package IAsyncOperation_CashDrawer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.ICashDrawer);
   package AsyncOperationCompletedHandler_CashDrawer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.ICashDrawer);

   package IAsyncOperation_BarcodeSymbologyAttributes is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IBarcodeSymbologyAttributes);
   package AsyncOperationCompletedHandler_BarcodeSymbologyAttributes is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IBarcodeSymbologyAttributes);

   package IAsyncOperation_LineDisplayPowerStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus);
   package AsyncOperationCompletedHandler_LineDisplayPowerStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus);

   package IAsyncOperation_LineDisplayWindow is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow);
   package AsyncOperationCompletedHandler_LineDisplayWindow is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow);

   package IAsyncOperation_LineDisplayStoredBitmap is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.ILineDisplayStoredBitmap);
   package AsyncOperationCompletedHandler_LineDisplayStoredBitmap is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.ILineDisplayStoredBitmap);

   package IAsyncOperation_ClaimedLineDisplay is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay);
   package AsyncOperationCompletedHandler_ClaimedLineDisplay is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay);

   package IAsyncOperation_LineDisplay is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.ILineDisplay);
   package AsyncOperationCompletedHandler_LineDisplay is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.ILineDisplay);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt32);

   package IAsyncOperation_ClaimedMagneticStripeReader is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader);
   package AsyncOperationCompletedHandler_ClaimedMagneticStripeReader is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader);

   package IAsyncOperation_MagneticStripeReader is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IMagneticStripeReader);
   package AsyncOperationCompletedHandler_MagneticStripeReader is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IMagneticStripeReader);

   package IAsyncOperation_ClaimedPosPrinter is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter);
   package AsyncOperationCompletedHandler_ClaimedPosPrinter is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter);

   package IAsyncOperation_PosPrinter is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.IPosPrinter);
   package AsyncOperationCompletedHandler_PosPrinter is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.IPosPrinter);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScanner

   procedure Initialize (this : in out BarcodeScanner) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScanner) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScanner, IBarcodeScanner_Ptr);
   begin
      if this.m_IBarcodeScanner /= null then
         if this.m_IBarcodeScanner.all /= null then
            RefCount := this.m_IBarcodeScanner.all.Release;
            Free (this.m_IBarcodeScanner);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BarcodeScanner

   function GetDeviceSelector
   (
      connectionTypes : Windows.Devices.PointOfService.PosConnectionTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeScanner");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeScannerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBarcodeScannerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (connectionTypes, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.PointOfService.BarcodeScanner is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeScanner");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeScannerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeScanner.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeScanner.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IBarcodeScanner;
      m_IID            : aliased WinRt.IID := (1633981661, 12450, 21055, (177, 162, 154, 17, 116, 222, 59, 23 )); -- Windows.Devices.PointOfService.BarcodeScanner;
      m_HandlerIID     : aliased WinRt.IID := (2374680377, 39389, 20644, (170, 124, 47, 115, 1, 181, 202, 156 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeScanner.Kind := new AsyncOperationCompletedHandler_BarcodeScanner.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeScanner.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeScanner.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeScanner.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeScanner.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeScanner do
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeScannerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBarcodeScanner := new Windows.Devices.PointOfService.IBarcodeScanner;
                     Retval.m_IBarcodeScanner.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeScanner is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeScanner");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeScannerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeScanner.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeScanner.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IBarcodeScanner;
      m_IID            : aliased WinRt.IID := (1633981661, 12450, 21055, (177, 162, 154, 17, 116, 222, 59, 23 )); -- Windows.Devices.PointOfService.BarcodeScanner;
      m_HandlerIID     : aliased WinRt.IID := (2374680377, 39389, 20644, (170, 124, 47, 115, 1, 181, 202, 156 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeScanner.Kind := new AsyncOperationCompletedHandler_BarcodeScanner.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeScanner.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeScanner.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeScanner.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeScanner.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeScanner do
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeScannerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBarcodeScanner := new Windows.Devices.PointOfService.IBarcodeScanner;
                     Retval.m_IBarcodeScanner.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeScanner");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeScannerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBarcodeScannerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScanner

   function get_DeviceId
   (
      this : in out BarcodeScanner
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScanner.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Capabilities
   (
      this : in out BarcodeScanner
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeScannerCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IBarcodeScannerCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeScannerCapabilities do
         Hr := this.m_IBarcodeScanner.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerCapabilities := new Windows.Devices.PointOfService.IBarcodeScannerCapabilities;
         Retval.m_IBarcodeScannerCapabilities.all := m_ComRetVal;
      end return;
   end;

   function ClaimScannerAsync
   (
      this : in out BarcodeScanner
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedBarcodeScanner'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ClaimedBarcodeScanner.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ClaimedBarcodeScanner.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner;
      m_IID            : aliased WinRt.IID := (3379578889, 41186, 24093, (135, 207, 117, 161, 212, 157, 123, 219 )); -- Windows.Devices.PointOfService.ClaimedBarcodeScanner;
      m_HandlerIID     : aliased WinRt.IID := (4285708845, 62404, 23230, (187, 206, 83, 21, 4, 73, 182, 55 ));
      m_Handler        : AsyncOperationCompletedHandler_ClaimedBarcodeScanner.Kind := new AsyncOperationCompletedHandler_ClaimedBarcodeScanner.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClaimedBarcodeScanner.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClaimedBarcodeScanner.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClaimedBarcodeScanner.Kind_Delegate, AsyncOperationCompletedHandler_ClaimedBarcodeScanner.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedBarcodeScanner do
         Hr := this.m_IBarcodeScanner.all.ClaimScannerAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IClaimedBarcodeScanner := new Windows.Devices.PointOfService.IClaimedBarcodeScanner;
                  Retval.m_IClaimedBarcodeScanner.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CheckHealthAsync
   (
      this : in out BarcodeScanner;
      level : Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IBarcodeScanner.all.CheckHealthAsync (level, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetSupportedSymbologiesAsync
   (
      this : in out BarcodeScanner
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1388670780, 28986, 20834, (158, 98, 54, 44, 231, 237, 83, 190 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1433874217, 55908, 23687, (135, 28, 7, 67, 55, 168, 69, 115 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IBarcodeScanner.all.GetSupportedSymbologiesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function IsSymbologySupportedAsync
   (
      this : in out BarcodeScanner;
      barcodeSymbology : WinRt.UInt32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IBarcodeScanner.all.IsSymbologySupportedAsync (barcodeSymbology, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RetrieveStatisticsAsync
   (
      this : in out BarcodeScanner;
      statisticsCategories : GenericObject
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IBarcodeScanner.all.RetrieveStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetSupportedProfiles
   (
      this : in out BarcodeScanner
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IBarcodeScanner.all.GetSupportedProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function IsProfileSupported
   (
      this : in out BarcodeScanner;
      profile : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_profile : WinRt.HString := To_HString (profile);
   begin
      Hr := this.m_IBarcodeScanner.all.IsProfileSupported (HStr_profile, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_profile);
      return m_ComRetVal;
   end;

   function add_StatusUpdated
   (
      this : in out BarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScanner.all.add_StatusUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusUpdated
   (
      this : in out BarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScanner.all.remove_StatusUpdated (token);
   end;

   function get_VideoDeviceId
   (
      this : in out BarcodeScanner
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IBarcodeScanner2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IBarcodeScanner2, WinRt.Windows.Devices.PointOfService.IID_IBarcodeScanner2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScanner.all);
      Hr := m_Interface.get_VideoDeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out BarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IBarcodeScanner_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScanner.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerCapabilities

   procedure Initialize (this : in out BarcodeScannerCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerCapabilities, IBarcodeScannerCapabilities_Ptr);
   begin
      if this.m_IBarcodeScannerCapabilities /= null then
         if this.m_IBarcodeScannerCapabilities.all /= null then
            RefCount := this.m_IBarcodeScannerCapabilities.all.Release;
            Free (this.m_IBarcodeScannerCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerCapabilities

   function get_PowerReportingType
   (
      this : in out BarcodeScannerCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosPowerReportingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosPowerReportingType;
   begin
      Hr := this.m_IBarcodeScannerCapabilities.all.get_PowerReportingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsReportingSupported
   (
      this : in out BarcodeScannerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeScannerCapabilities.all.get_IsStatisticsReportingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsUpdatingSupported
   (
      this : in out BarcodeScannerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeScannerCapabilities.all.get_IsStatisticsUpdatingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsImagePreviewSupported
   (
      this : in out BarcodeScannerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeScannerCapabilities.all.get_IsImagePreviewSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsSoftwareTriggerSupported
   (
      this : in out BarcodeScannerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IBarcodeScannerCapabilities1 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IBarcodeScannerCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IBarcodeScannerCapabilities1, WinRt.Windows.Devices.PointOfService.IID_IBarcodeScannerCapabilities1'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerCapabilities.all);
      Hr := m_Interface.get_IsSoftwareTriggerSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsVideoPreviewSupported
   (
      this : in out BarcodeScannerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IBarcodeScannerCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IBarcodeScannerCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IBarcodeScannerCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IBarcodeScannerCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerCapabilities.all);
      Hr := m_Interface.get_IsVideoPreviewSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerDataReceivedEventArgs

   procedure Initialize (this : in out BarcodeScannerDataReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerDataReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerDataReceivedEventArgs, IBarcodeScannerDataReceivedEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerDataReceivedEventArgs /= null then
         if this.m_IBarcodeScannerDataReceivedEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerDataReceivedEventArgs.all.Release;
            Free (this.m_IBarcodeScannerDataReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerDataReceivedEventArgs

   function get_Report
   (
      this : in out BarcodeScannerDataReceivedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeScannerReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IBarcodeScannerReport;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeScannerReport do
         Hr := this.m_IBarcodeScannerDataReceivedEventArgs.all.get_Report (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerReport := new Windows.Devices.PointOfService.IBarcodeScannerReport;
         Retval.m_IBarcodeScannerReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerErrorOccurredEventArgs

   procedure Initialize (this : in out BarcodeScannerErrorOccurredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerErrorOccurredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerErrorOccurredEventArgs, IBarcodeScannerErrorOccurredEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerErrorOccurredEventArgs /= null then
         if this.m_IBarcodeScannerErrorOccurredEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerErrorOccurredEventArgs.all.Release;
            Free (this.m_IBarcodeScannerErrorOccurredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerErrorOccurredEventArgs

   function get_PartialInputData
   (
      this : in out BarcodeScannerErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeScannerReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IBarcodeScannerReport;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeScannerReport do
         Hr := this.m_IBarcodeScannerErrorOccurredEventArgs.all.get_PartialInputData (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerReport := new Windows.Devices.PointOfService.IBarcodeScannerReport;
         Retval.m_IBarcodeScannerReport.all := m_ComRetVal;
      end return;
   end;

   function get_IsRetriable
   (
      this : in out BarcodeScannerErrorOccurredEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeScannerErrorOccurredEventArgs.all.get_IsRetriable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorData
   (
      this : in out BarcodeScannerErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosErrorData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IUnifiedPosErrorData;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.UnifiedPosErrorData do
         Hr := this.m_IBarcodeScannerErrorOccurredEventArgs.all.get_ErrorData (m_ComRetVal'Access);
         Retval.m_IUnifiedPosErrorData := new Windows.Devices.PointOfService.IUnifiedPosErrorData;
         Retval.m_IUnifiedPosErrorData.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerImagePreviewReceivedEventArgs

   procedure Initialize (this : in out BarcodeScannerImagePreviewReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerImagePreviewReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerImagePreviewReceivedEventArgs, IBarcodeScannerImagePreviewReceivedEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerImagePreviewReceivedEventArgs /= null then
         if this.m_IBarcodeScannerImagePreviewReceivedEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerImagePreviewReceivedEventArgs.all.Release;
            Free (this.m_IBarcodeScannerImagePreviewReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerImagePreviewReceivedEventArgs

   function get_Preview
   (
      this : in out BarcodeScannerImagePreviewReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      Hr := this.m_IBarcodeScannerImagePreviewReceivedEventArgs.all.get_Preview (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerReport

   procedure Initialize (this : in out BarcodeScannerReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerReport, IBarcodeScannerReport_Ptr);
   begin
      if this.m_IBarcodeScannerReport /= null then
         if this.m_IBarcodeScannerReport.all /= null then
            RefCount := this.m_IBarcodeScannerReport.all.Release;
            Free (this.m_IBarcodeScannerReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BarcodeScannerReport

   function Constructor
   (
      scanDataType : WinRt.UInt32;
      scanData : Windows.Storage.Streams.IBuffer;
      scanDataLabel : Windows.Storage.Streams.IBuffer
   )
   return BarcodeScannerReport is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeScannerReport");
      m_Factory    : access IBarcodeScannerReportFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.PointOfService.IBarcodeScannerReport;
   begin
      return RetVal : BarcodeScannerReport do
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeScannerReportFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (scanDataType, scanData, scanDataLabel, m_ComRetVal'Access);
            Retval.m_IBarcodeScannerReport := new Windows.Devices.PointOfService.IBarcodeScannerReport;
            Retval.m_IBarcodeScannerReport.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerReport

   function get_ScanDataType
   (
      this : in out BarcodeScannerReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeScannerReport.all.get_ScanDataType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScanData
   (
      this : in out BarcodeScannerReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBarcodeScannerReport.all.get_ScanData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScanDataLabel
   (
      this : in out BarcodeScannerReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBarcodeScannerReport.all.get_ScanDataLabel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerStatusUpdatedEventArgs

   procedure Initialize (this : in out BarcodeScannerStatusUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerStatusUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerStatusUpdatedEventArgs, IBarcodeScannerStatusUpdatedEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerStatusUpdatedEventArgs /= null then
         if this.m_IBarcodeScannerStatusUpdatedEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerStatusUpdatedEventArgs.all.Release;
            Free (this.m_IBarcodeScannerStatusUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerStatusUpdatedEventArgs

   function get_Status
   (
      this : in out BarcodeScannerStatusUpdatedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeScannerStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.BarcodeScannerStatus;
   begin
      Hr := this.m_IBarcodeScannerStatusUpdatedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedStatus
   (
      this : in out BarcodeScannerStatusUpdatedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeScannerStatusUpdatedEventArgs.all.get_ExtendedStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BarcodeSymbologies is

      function get_Unknown
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Unknown (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean8
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean8Add2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean8Add2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean8Add5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean8Add5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Eanv
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Eanv (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_EanvAdd2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EanvAdd2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_EanvAdd5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EanvAdd5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean13
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean13 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean13Add2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean13Add2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean13Add5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean13Add5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Isbn
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Isbn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsbnAdd5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsbnAdd5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ismn
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ismn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsmnAdd2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsmnAdd2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsmnAdd5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsmnAdd5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Issn
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Issn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IssnAdd2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IssnAdd2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IssnAdd5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IssnAdd5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean99
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean99 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean99Add2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean99Add2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ean99Add5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ean99Add5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Upca
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Upca (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UpcaAdd2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UpcaAdd2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UpcaAdd5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UpcaAdd5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Upce
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Upce (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UpceAdd2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UpceAdd2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UpceAdd5
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UpceAdd5 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UpcCoupon
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UpcCoupon (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TfStd
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TfStd (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TfDis
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TfDis (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TfInt
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TfInt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TfInd
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TfInd (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TfMat
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TfMat (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TfIata
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TfIata (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Gs1DatabarType1
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gs1DatabarType1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Gs1DatabarType2
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gs1DatabarType2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Gs1DatabarType3
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gs1DatabarType3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code39
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code39 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code39Ex
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code39Ex (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Trioptic39
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Trioptic39 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code32
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code32 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Pzn
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Pzn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code93
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code93 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code93Ex
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code93Ex (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code128
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code128 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Gs1128
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gs1128 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Gs1128Coupon
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gs1128Coupon (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UccEan128
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UccEan128 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Sisac
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Sisac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Isbt
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Isbt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Codabar
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Codabar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code11
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code11 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Msi
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Msi (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Plessey
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Plessey (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Telepen
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Telepen (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code16k
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code16k (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CodablockA
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CodablockA (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CodablockF
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CodablockF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Codablock128
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Codablock128 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Code49
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Code49 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Aztec
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Aztec (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DataCode
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DataCode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DataMatrix
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DataMatrix (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HanXin
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HanXin (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Maxicode
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Maxicode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MicroPdf417
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MicroPdf417 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MicroQr
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MicroQr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Pdf417
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Pdf417 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Qr
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Qr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MsTag
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MsTag (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ccab
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ccab (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ccc
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ccc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Tlc39
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Tlc39 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AusPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AusPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CanPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CanPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ChinaPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChinaPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DutchKix
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DutchKix (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InfoMail
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InfoMail (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ItalianPost25
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItalianPost25 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ItalianPost39
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItalianPost39 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_JapanPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_JapanPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_KoreanPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KoreanPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SwedenPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SwedenPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UkPost
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UkPost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UsIntelligent
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UsIntelligent (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UsIntelligentPkg
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UsIntelligentPkg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UsPlanet
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UsPlanet (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UsPostNet
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UsPostNet (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Us4StateFics
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Us4StateFics (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OcrA
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OcrA (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_OcrB
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OcrB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Micr
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Micr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ExtendedBase
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExtendedBase (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetName
      (
         scanDataType : WinRt.UInt32
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetName (scanDataType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Gs1DWCode
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.BarcodeSymbologies");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IBarcodeSymbologiesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBarcodeSymbologiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gs1DWCode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BarcodeSymbologies;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeSymbologyAttributes

   procedure Initialize (this : in out BarcodeSymbologyAttributes) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeSymbologyAttributes) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeSymbologyAttributes, IBarcodeSymbologyAttributes_Ptr);
   begin
      if this.m_IBarcodeSymbologyAttributes /= null then
         if this.m_IBarcodeSymbologyAttributes.all /= null then
            RefCount := this.m_IBarcodeSymbologyAttributes.all.Release;
            Free (this.m_IBarcodeSymbologyAttributes);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeSymbologyAttributes

   function get_IsCheckDigitValidationEnabled
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_IsCheckDigitValidationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCheckDigitValidationEnabled
   (
      this : in out BarcodeSymbologyAttributes;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.put_IsCheckDigitValidationEnabled (value);
   end;

   function get_IsCheckDigitValidationSupported
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_IsCheckDigitValidationSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCheckDigitTransmissionEnabled
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_IsCheckDigitTransmissionEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCheckDigitTransmissionEnabled
   (
      this : in out BarcodeSymbologyAttributes;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.put_IsCheckDigitTransmissionEnabled (value);
   end;

   function get_IsCheckDigitTransmissionSupported
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_IsCheckDigitTransmissionSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DecodeLength1
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_DecodeLength1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DecodeLength1
   (
      this : in out BarcodeSymbologyAttributes;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.put_DecodeLength1 (value);
   end;

   function get_DecodeLength2
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_DecodeLength2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DecodeLength2
   (
      this : in out BarcodeSymbologyAttributes;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.put_DecodeLength2 (value);
   end;

   function get_DecodeLengthKind
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeSymbologyDecodeLengthKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.BarcodeSymbologyDecodeLengthKind;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_DecodeLengthKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DecodeLengthKind
   (
      this : in out BarcodeSymbologyAttributes;
      value : Windows.Devices.PointOfService.BarcodeSymbologyDecodeLengthKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.put_DecodeLengthKind (value);
   end;

   function get_IsDecodeLengthSupported
   (
      this : in out BarcodeSymbologyAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributes.all.get_IsDecodeLengthSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawer

   procedure Initialize (this : in out CashDrawer) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawer, ICashDrawer_Ptr);
   begin
      if this.m_ICashDrawer /= null then
         if this.m_ICashDrawer.all /= null then
            RefCount := this.m_ICashDrawer.all.Release;
            Free (this.m_ICashDrawer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CashDrawer

   function GetDefaultAsync_CashDrawer
   return WinRt.Windows.Devices.PointOfService.CashDrawer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.CashDrawer");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ICashDrawerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CashDrawer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CashDrawer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ICashDrawer;
      m_IID            : aliased WinRt.IID := (1157657703, 37618, 23551, (177, 145, 170, 80, 0, 254, 221, 158 )); -- Windows.Devices.PointOfService.CashDrawer;
      m_HandlerIID     : aliased WinRt.IID := (1468229392, 61830, 22070, (137, 29, 248, 197, 57, 142, 166, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_CashDrawer.Kind := new AsyncOperationCompletedHandler_CashDrawer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CashDrawer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CashDrawer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CashDrawer.Kind_Delegate, AsyncOperationCompletedHandler_CashDrawer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawer do
         Hr := RoGetActivationFactory (m_hString, IID_ICashDrawerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ICashDrawer := new Windows.Devices.PointOfService.ICashDrawer;
                     Retval.m_ICashDrawer.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromIdAsync_CashDrawer
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.CashDrawer");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ICashDrawerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CashDrawer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CashDrawer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ICashDrawer;
      m_IID            : aliased WinRt.IID := (1157657703, 37618, 23551, (177, 145, 170, 80, 0, 254, 221, 158 )); -- Windows.Devices.PointOfService.CashDrawer;
      m_HandlerIID     : aliased WinRt.IID := (1468229392, 61830, 22070, (137, 29, 248, 197, 57, 142, 166, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_CashDrawer.Kind := new AsyncOperationCompletedHandler_CashDrawer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CashDrawer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CashDrawer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CashDrawer.Kind_Delegate, AsyncOperationCompletedHandler_CashDrawer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawer do
         Hr := RoGetActivationFactory (m_hString, IID_ICashDrawerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ICashDrawer := new Windows.Devices.PointOfService.ICashDrawer;
                     Retval.m_ICashDrawer.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector_CashDrawer
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.CashDrawer");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ICashDrawerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICashDrawerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector_CashDrawer
   (
      connectionTypes : Windows.Devices.PointOfService.PosConnectionTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.CashDrawer");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ICashDrawerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICashDrawerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (connectionTypes, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawer

   function get_DeviceId
   (
      this : in out CashDrawer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICashDrawer.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Capabilities
   (
      this : in out CashDrawer
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawerCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawerCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawerCapabilities do
         Hr := this.m_ICashDrawer.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_ICashDrawerCapabilities := new Windows.Devices.PointOfService.ICashDrawerCapabilities;
         Retval.m_ICashDrawerCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out CashDrawer
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawerStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawerStatus;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawerStatus do
         Hr := this.m_ICashDrawer.all.get_Status (m_ComRetVal'Access);
         Retval.m_ICashDrawerStatus := new Windows.Devices.PointOfService.ICashDrawerStatus;
         Retval.m_ICashDrawerStatus.all := m_ComRetVal;
      end return;
   end;

   function get_IsDrawerOpen
   (
      this : in out CashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICashDrawer.all.get_IsDrawerOpen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DrawerEventSource
   (
      this : in out CashDrawer
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawerEventSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawerEventSource;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawerEventSource do
         Hr := this.m_ICashDrawer.all.get_DrawerEventSource (m_ComRetVal'Access);
         Retval.m_ICashDrawerEventSource := new Windows.Devices.PointOfService.ICashDrawerEventSource;
         Retval.m_ICashDrawerEventSource.all := m_ComRetVal;
      end return;
   end;

   function ClaimDrawerAsync
   (
      this : in out CashDrawer
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedCashDrawer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ClaimedCashDrawer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ClaimedCashDrawer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer;
      m_IID            : aliased WinRt.IID := (2452678570, 8352, 22354, (156, 32, 75, 244, 73, 52, 168, 126 )); -- Windows.Devices.PointOfService.ClaimedCashDrawer;
      m_HandlerIID     : aliased WinRt.IID := (3867948854, 64999, 23803, (178, 47, 146, 17, 151, 35, 231, 41 ));
      m_Handler        : AsyncOperationCompletedHandler_ClaimedCashDrawer.Kind := new AsyncOperationCompletedHandler_ClaimedCashDrawer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClaimedCashDrawer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClaimedCashDrawer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClaimedCashDrawer.Kind_Delegate, AsyncOperationCompletedHandler_ClaimedCashDrawer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedCashDrawer do
         Hr := this.m_ICashDrawer.all.ClaimDrawerAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IClaimedCashDrawer := new Windows.Devices.PointOfService.IClaimedCashDrawer;
                  Retval.m_IClaimedCashDrawer.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CheckHealthAsync
   (
      this : in out CashDrawer;
      level : Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICashDrawer.all.CheckHealthAsync (level, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetStatisticsAsync
   (
      this : in out CashDrawer;
      statisticsCategories : GenericObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICashDrawer.all.GetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function add_StatusUpdated
   (
      this : in out CashDrawer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICashDrawer.all.add_StatusUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusUpdated
   (
      this : in out CashDrawer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawer.all.remove_StatusUpdated (token);
   end;

   procedure Close
   (
      this : in out CashDrawer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ICashDrawer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICashDrawer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerCapabilities

   procedure Initialize (this : in out CashDrawerCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerCapabilities, ICashDrawerCapabilities_Ptr);
   begin
      if this.m_ICashDrawerCapabilities /= null then
         if this.m_ICashDrawerCapabilities.all /= null then
            RefCount := this.m_ICashDrawerCapabilities.all.Release;
            Free (this.m_ICashDrawerCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerCapabilities

   function get_PowerReportingType
   (
      this : in out CashDrawerCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosPowerReportingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosPowerReportingType;
   begin
      Hr := this.m_ICashDrawerCapabilities.all.get_PowerReportingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsReportingSupported
   (
      this : in out CashDrawerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICashDrawerCapabilities.all.get_IsStatisticsReportingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsUpdatingSupported
   (
      this : in out CashDrawerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICashDrawerCapabilities.all.get_IsStatisticsUpdatingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatusReportingSupported
   (
      this : in out CashDrawerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICashDrawerCapabilities.all.get_IsStatusReportingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatusMultiDrawerDetectSupported
   (
      this : in out CashDrawerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICashDrawerCapabilities.all.get_IsStatusMultiDrawerDetectSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDrawerOpenSensorAvailable
   (
      this : in out CashDrawerCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICashDrawerCapabilities.all.get_IsDrawerOpenSensorAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerCloseAlarm

   procedure Initialize (this : in out CashDrawerCloseAlarm) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerCloseAlarm) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerCloseAlarm, ICashDrawerCloseAlarm_Ptr);
   begin
      if this.m_ICashDrawerCloseAlarm /= null then
         if this.m_ICashDrawerCloseAlarm.all /= null then
            RefCount := this.m_ICashDrawerCloseAlarm.all.Release;
            Free (this.m_ICashDrawerCloseAlarm);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerCloseAlarm

   procedure put_AlarmTimeout
   (
      this : in out CashDrawerCloseAlarm;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.put_AlarmTimeout (value);
   end;

   function get_AlarmTimeout
   (
      this : in out CashDrawerCloseAlarm
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.get_AlarmTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BeepFrequency
   (
      this : in out CashDrawerCloseAlarm;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.put_BeepFrequency (value);
   end;

   function get_BeepFrequency
   (
      this : in out CashDrawerCloseAlarm
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.get_BeepFrequency (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BeepDuration
   (
      this : in out CashDrawerCloseAlarm;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.put_BeepDuration (value);
   end;

   function get_BeepDuration
   (
      this : in out CashDrawerCloseAlarm
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.get_BeepDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BeepDelay
   (
      this : in out CashDrawerCloseAlarm;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.put_BeepDelay (value);
   end;

   function get_BeepDelay
   (
      this : in out CashDrawerCloseAlarm
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.get_BeepDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_AlarmTimeoutExpired
   (
      this : in out CashDrawerCloseAlarm;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.add_AlarmTimeoutExpired (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AlarmTimeoutExpired
   (
      this : in out CashDrawerCloseAlarm;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.remove_AlarmTimeoutExpired (token);
   end;

   function StartAsync
   (
      this : in out CashDrawerCloseAlarm
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICashDrawerCloseAlarm.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerClosedEventArgs

   procedure Initialize (this : in out CashDrawerClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerEventSourceEventArgs, ICashDrawerEventSourceEventArgs_Ptr);
   begin
      if this.m_ICashDrawerEventSourceEventArgs /= null then
         if this.m_ICashDrawerEventSourceEventArgs.all /= null then
            RefCount := this.m_ICashDrawerEventSourceEventArgs.all.Release;
            Free (this.m_ICashDrawerEventSourceEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerClosedEventArgs

   function get_CashDrawer
   (
      this : in out CashDrawerClosedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawer;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawer do
         Hr := this.m_ICashDrawerEventSourceEventArgs.all.get_CashDrawer (m_ComRetVal'Access);
         Retval.m_ICashDrawer := new Windows.Devices.PointOfService.ICashDrawer;
         Retval.m_ICashDrawer.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerEventSource

   procedure Initialize (this : in out CashDrawerEventSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerEventSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerEventSource, ICashDrawerEventSource_Ptr);
   begin
      if this.m_ICashDrawerEventSource /= null then
         if this.m_ICashDrawerEventSource.all /= null then
            RefCount := this.m_ICashDrawerEventSource.all.Release;
            Free (this.m_ICashDrawerEventSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerEventSource

   function add_DrawerClosed
   (
      this : in out CashDrawerEventSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICashDrawerEventSource.all.add_DrawerClosed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DrawerClosed
   (
      this : in out CashDrawerEventSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerEventSource.all.remove_DrawerClosed (token);
   end;

   function add_DrawerOpened
   (
      this : in out CashDrawerEventSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICashDrawerEventSource.all.add_DrawerOpened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DrawerOpened
   (
      this : in out CashDrawerEventSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICashDrawerEventSource.all.remove_DrawerOpened (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerOpenedEventArgs

   procedure Initialize (this : in out CashDrawerOpenedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerOpenedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerEventSourceEventArgs, ICashDrawerEventSourceEventArgs_Ptr);
   begin
      if this.m_ICashDrawerEventSourceEventArgs /= null then
         if this.m_ICashDrawerEventSourceEventArgs.all /= null then
            RefCount := this.m_ICashDrawerEventSourceEventArgs.all.Release;
            Free (this.m_ICashDrawerEventSourceEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerOpenedEventArgs

   function get_CashDrawer
   (
      this : in out CashDrawerOpenedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawer;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawer do
         Hr := this.m_ICashDrawerEventSourceEventArgs.all.get_CashDrawer (m_ComRetVal'Access);
         Retval.m_ICashDrawer := new Windows.Devices.PointOfService.ICashDrawer;
         Retval.m_ICashDrawer.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerStatus

   procedure Initialize (this : in out CashDrawerStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerStatus, ICashDrawerStatus_Ptr);
   begin
      if this.m_ICashDrawerStatus /= null then
         if this.m_ICashDrawerStatus.all /= null then
            RefCount := this.m_ICashDrawerStatus.all.Release;
            Free (this.m_ICashDrawerStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerStatus

   function get_StatusKind
   (
      this : in out CashDrawerStatus
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawerStatusKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.CashDrawerStatusKind;
   begin
      Hr := this.m_ICashDrawerStatus.all.get_StatusKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedStatus
   (
      this : in out CashDrawerStatus
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICashDrawerStatus.all.get_ExtendedStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CashDrawerStatusUpdatedEventArgs

   procedure Initialize (this : in out CashDrawerStatusUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CashDrawerStatusUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICashDrawerStatusUpdatedEventArgs, ICashDrawerStatusUpdatedEventArgs_Ptr);
   begin
      if this.m_ICashDrawerStatusUpdatedEventArgs /= null then
         if this.m_ICashDrawerStatusUpdatedEventArgs.all /= null then
            RefCount := this.m_ICashDrawerStatusUpdatedEventArgs.all.Release;
            Free (this.m_ICashDrawerStatusUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CashDrawerStatusUpdatedEventArgs

   function get_Status
   (
      this : in out CashDrawerStatusUpdatedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawerStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawerStatus;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawerStatus do
         Hr := this.m_ICashDrawerStatusUpdatedEventArgs.all.get_Status (m_ComRetVal'Access);
         Retval.m_ICashDrawerStatus := new Windows.Devices.PointOfService.ICashDrawerStatus;
         Retval.m_ICashDrawerStatus.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedBarcodeScanner

   procedure Initialize (this : in out ClaimedBarcodeScanner) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedBarcodeScanner) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedBarcodeScanner, IClaimedBarcodeScanner_Ptr);
   begin
      if this.m_IClaimedBarcodeScanner /= null then
         if this.m_IClaimedBarcodeScanner.all /= null then
            RefCount := this.m_IClaimedBarcodeScanner.all.Release;
            Free (this.m_IClaimedBarcodeScanner);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedBarcodeScanner

   function get_DeviceId
   (
      this : in out ClaimedBarcodeScanner
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out ClaimedBarcodeScanner
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDisabledOnDataReceived
   (
      this : in out ClaimedBarcodeScanner;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.put_IsDisabledOnDataReceived (value);
   end;

   function get_IsDisabledOnDataReceived
   (
      this : in out ClaimedBarcodeScanner
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.get_IsDisabledOnDataReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDecodeDataEnabled
   (
      this : in out ClaimedBarcodeScanner;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.put_IsDecodeDataEnabled (value);
   end;

   function get_IsDecodeDataEnabled
   (
      this : in out ClaimedBarcodeScanner
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.get_IsDecodeDataEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure EnableAsync
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedBarcodeScanner.all.EnableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DisableAsync
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedBarcodeScanner.all.DisableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RetainDevice
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.RetainDevice;
   end;

   procedure SetActiveSymbologiesAsync
   (
      this : in out ClaimedBarcodeScanner;
      symbologies : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedBarcodeScanner.all.SetActiveSymbologiesAsync (symbologies, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ResetStatisticsAsync
   (
      this : in out ClaimedBarcodeScanner;
      statisticsCategories : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedBarcodeScanner.all.ResetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UpdateStatisticsAsync
   (
      this : in out ClaimedBarcodeScanner;
      statistics : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedBarcodeScanner.all.UpdateStatisticsAsync (statistics, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetActiveProfileAsync
   (
      this : in out ClaimedBarcodeScanner;
      profile : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_profile : WinRt.HString := To_HString (profile);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedBarcodeScanner.all.SetActiveProfileAsync (HStr_profile, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_profile);
   end;

   function add_DataReceived
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.add_DataReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DataReceived
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.remove_DataReceived (token);
   end;

   function add_TriggerPressed
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.add_TriggerPressed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TriggerPressed
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.remove_TriggerPressed (token);
   end;

   function add_TriggerReleased
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.add_TriggerReleased (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TriggerReleased
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.remove_TriggerReleased (token);
   end;

   function add_ReleaseDeviceRequested
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.add_ReleaseDeviceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReleaseDeviceRequested
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.remove_ReleaseDeviceRequested (token);
   end;

   function add_ImagePreviewReceived
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.add_ImagePreviewReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ImagePreviewReceived
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.remove_ImagePreviewReceived (token);
   end;

   function add_ErrorOccurred
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.add_ErrorOccurred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ErrorOccurred
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedBarcodeScanner.all.remove_ErrorOccurred (token);
   end;

   procedure StartSoftwareTriggerAsync
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner1 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner1, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner1'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.StartSoftwareTriggerAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StopSoftwareTriggerAsync
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner1 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner1, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner1'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.StopSoftwareTriggerAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetSymbologyAttributesAsync
   (
      this : in out ClaimedBarcodeScanner;
      barcodeSymbology : WinRt.UInt32
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeSymbologyAttributes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeSymbologyAttributes.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeSymbologyAttributes.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IBarcodeSymbologyAttributes;
      m_IID            : aliased WinRt.IID := (1175802058, 31667, 23262, (166, 66, 97, 184, 254, 242, 227, 92 )); -- Windows.Devices.PointOfService.BarcodeSymbologyAttributes;
      m_HandlerIID     : aliased WinRt.IID := (4177287762, 12101, 24134, (168, 46, 61, 160, 9, 87, 59, 92 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeSymbologyAttributes.Kind := new AsyncOperationCompletedHandler_BarcodeSymbologyAttributes.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeSymbologyAttributes.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeSymbologyAttributes.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeSymbologyAttributes.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeSymbologyAttributes.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner2, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeSymbologyAttributes do
         m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
         Hr := m_Interface.GetSymbologyAttributesAsync (barcodeSymbology, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBarcodeSymbologyAttributes := new Windows.Devices.PointOfService.IBarcodeSymbologyAttributes;
                  Retval.m_IBarcodeSymbologyAttributes.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SetSymbologyAttributesAsync
   (
      this : in out ClaimedBarcodeScanner;
      barcodeSymbology : WinRt.UInt32;
      attributes : Windows.Devices.PointOfService.BarcodeSymbologyAttributes'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner2, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.SetSymbologyAttributesAsync (barcodeSymbology, attributes.m_IBarcodeSymbologyAttributes.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ShowVideoPreviewAsync
   (
      this : in out ClaimedBarcodeScanner
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.ShowVideoPreviewAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure HideVideoPreview
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.HideVideoPreview;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_IsVideoPreviewShownOnEnable
   (
      this : in out ClaimedBarcodeScanner;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.put_IsVideoPreviewShownOnEnable (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsVideoPreviewShownOnEnable
   (
      this : in out ClaimedBarcodeScanner
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner3, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.get_IsVideoPreviewShownOnEnable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_Closed
   (
      this : in out ClaimedBarcodeScanner;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner4, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.add_Closed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ClaimedBarcodeScanner;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner4, WinRt.Windows.Devices.PointOfService.IID_IClaimedBarcodeScanner4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.remove_Closed (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out ClaimedBarcodeScanner
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedBarcodeScanner_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedBarcodeScanner.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedBarcodeScannerClosedEventArgs

   procedure Initialize (this : in out ClaimedBarcodeScannerClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedBarcodeScannerClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedBarcodeScannerClosedEventArgs, IClaimedBarcodeScannerClosedEventArgs_Ptr);
   begin
      if this.m_IClaimedBarcodeScannerClosedEventArgs /= null then
         if this.m_IClaimedBarcodeScannerClosedEventArgs.all /= null then
            RefCount := this.m_IClaimedBarcodeScannerClosedEventArgs.all.Release;
            Free (this.m_IClaimedBarcodeScannerClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedBarcodeScannerClosedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedCashDrawer

   procedure Initialize (this : in out ClaimedCashDrawer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedCashDrawer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedCashDrawer, IClaimedCashDrawer_Ptr);
   begin
      if this.m_IClaimedCashDrawer /= null then
         if this.m_IClaimedCashDrawer.all /= null then
            RefCount := this.m_IClaimedCashDrawer.all.Release;
            Free (this.m_IClaimedCashDrawer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedCashDrawer

   function get_DeviceId
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedCashDrawer.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedCashDrawer.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDrawerOpen
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedCashDrawer.all.get_IsDrawerOpen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CloseAlarm
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Windows.Devices.PointOfService.CashDrawerCloseAlarm'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ICashDrawerCloseAlarm;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.CashDrawerCloseAlarm do
         Hr := this.m_IClaimedCashDrawer.all.get_CloseAlarm (m_ComRetVal'Access);
         Retval.m_ICashDrawerCloseAlarm := new Windows.Devices.PointOfService.ICashDrawerCloseAlarm;
         Retval.m_ICashDrawerCloseAlarm.all := m_ComRetVal;
      end return;
   end;

   function OpenDrawerAsync
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedCashDrawer.all.OpenDrawerAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function EnableAsync
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedCashDrawer.all.EnableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DisableAsync
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedCashDrawer.all.DisableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RetainDeviceAsync
   (
      this : in out ClaimedCashDrawer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedCashDrawer.all.RetainDeviceAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ResetStatisticsAsync
   (
      this : in out ClaimedCashDrawer;
      statisticsCategories : GenericObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedCashDrawer.all.ResetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function UpdateStatisticsAsync
   (
      this : in out ClaimedCashDrawer;
      statistics : GenericObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedCashDrawer.all.UpdateStatisticsAsync (statistics, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_ReleaseDeviceRequested
   (
      this : in out ClaimedCashDrawer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedCashDrawer.all.add_ReleaseDeviceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReleaseDeviceRequested
   (
      this : in out ClaimedCashDrawer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedCashDrawer.all.remove_ReleaseDeviceRequested (token);
   end;

   function add_Closed
   (
      this : in out ClaimedCashDrawer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer_Interface, WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer2, WinRt.Windows.Devices.PointOfService.IID_IClaimedCashDrawer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedCashDrawer.all);
      Hr := m_Interface.add_Closed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ClaimedCashDrawer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer_Interface, WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer2, WinRt.Windows.Devices.PointOfService.IID_IClaimedCashDrawer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedCashDrawer.all);
      Hr := m_Interface.remove_Closed (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out ClaimedCashDrawer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedCashDrawer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedCashDrawer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedCashDrawerClosedEventArgs

   procedure Initialize (this : in out ClaimedCashDrawerClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedCashDrawerClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedCashDrawerClosedEventArgs, IClaimedCashDrawerClosedEventArgs_Ptr);
   begin
      if this.m_IClaimedCashDrawerClosedEventArgs /= null then
         if this.m_IClaimedCashDrawerClosedEventArgs.all /= null then
            RefCount := this.m_IClaimedCashDrawerClosedEventArgs.all.Release;
            Free (this.m_IClaimedCashDrawerClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedCashDrawerClosedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedJournalPrinter

   procedure Initialize (this : in out ClaimedJournalPrinter) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedJournalPrinter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedJournalPrinter, IClaimedJournalPrinter_Ptr);
   begin
      if this.m_IClaimedJournalPrinter /= null then
         if this.m_IClaimedJournalPrinter.all /= null then
            RefCount := this.m_IClaimedJournalPrinter.all.Release;
            Free (this.m_IClaimedJournalPrinter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedJournalPrinter

   function CreateJob
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Windows.Devices.PointOfService.JournalPrintJob'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IPosPrinterJob;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.JournalPrintJob do
         Hr := this.m_IClaimedJournalPrinter.all.CreateJob (m_ComRetVal'Access);
         Retval.m_IPosPrinterJob := new Windows.Devices.PointOfService.IPosPrinterJob;
         Retval.m_IPosPrinterJob.all := m_ComRetVal;
      end return;
   end;

   procedure put_CharactersPerLine
   (
      this : in out ClaimedJournalPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.put_CharactersPerLine (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CharactersPerLine
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_CharactersPerLine (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LineHeight
   (
      this : in out ClaimedJournalPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.put_LineHeight (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LineHeight
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_LineHeight (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LineSpacing
   (
      this : in out ClaimedJournalPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.put_LineSpacing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LineSpacing
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_LineSpacing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LineWidth
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_LineWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsLetterQuality
   (
      this : in out ClaimedJournalPrinter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.put_IsLetterQuality (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsLetterQuality
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsLetterQuality (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperNearEnd
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsPaperNearEnd (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorCartridge
   (
      this : in out ClaimedJournalPrinter;
      value : Windows.Devices.PointOfService.PosPrinterColorCartridge
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.put_ColorCartridge (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ColorCartridge
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterColorCartridge is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterColorCartridge;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_ColorCartridge (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCoverOpen
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsCoverOpen (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCartridgeRemoved
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsCartridgeRemoved (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCartridgeEmpty
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsCartridgeEmpty (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsHeadCleaning
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsHeadCleaning (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperEmpty
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsPaperEmpty (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReadyToPrint
   (
      this : in out ClaimedJournalPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.get_IsReadyToPrint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ValidateData
   (
      this : in out ClaimedJournalPrinter;
      data : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedJournalPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedJournalPrinter.all);
      Hr := m_Interface.ValidateData (HStr_data, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedLineDisplay

   procedure Initialize (this : in out ClaimedLineDisplay) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedLineDisplay) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedLineDisplay, IClaimedLineDisplay_Ptr);
   begin
      if this.m_IClaimedLineDisplay /= null then
         if this.m_IClaimedLineDisplay.all /= null then
            RefCount := this.m_IClaimedLineDisplay.all.Release;
            Free (this.m_IClaimedLineDisplay);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ClaimedLineDisplay

   function FromIdAsync_ClaimedLineDisplay
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedLineDisplay is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.ClaimedLineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IClaimedLineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ClaimedLineDisplay.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ClaimedLineDisplay.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay;
      m_IID            : aliased WinRt.IID := (1271965956, 6826, 21594, (140, 188, 29, 69, 195, 232, 14, 94 )); -- Windows.Devices.PointOfService.ClaimedLineDisplay;
      m_HandlerIID     : aliased WinRt.IID := (1310358001, 57330, 23320, (190, 190, 42, 202, 1, 11, 191, 204 ));
      m_Handler        : AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind := new AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClaimedLineDisplay.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind_Delegate, AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedLineDisplay do
         Hr := RoGetActivationFactory (m_hString, IID_IClaimedLineDisplayStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IClaimedLineDisplay := new Windows.Devices.PointOfService.IClaimedLineDisplay;
                     Retval.m_IClaimedLineDisplay.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector_ClaimedLineDisplay
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.ClaimedLineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IClaimedLineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IClaimedLineDisplayStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector_ClaimedLineDisplay
   (
      connectionTypes : Windows.Devices.PointOfService.PosConnectionTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.ClaimedLineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IClaimedLineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IClaimedLineDisplayStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (connectionTypes, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedLineDisplay

   function get_DeviceId
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedLineDisplay.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Capabilities
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayCapabilities do
         Hr := this.m_IClaimedLineDisplay.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_ILineDisplayCapabilities := new Windows.Devices.PointOfService.ILineDisplayCapabilities;
         Retval.m_ILineDisplayCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_PhysicalDeviceName
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedLineDisplay.all.get_PhysicalDeviceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PhysicalDeviceDescription
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedLineDisplay.all.get_PhysicalDeviceDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceControlDescription
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedLineDisplay.all.get_DeviceControlDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceControlVersion
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedLineDisplay.all.get_DeviceControlVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceServiceVersion
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedLineDisplay.all.get_DeviceServiceVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DefaultWindow
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayWindow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayWindow;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayWindow do
         Hr := this.m_IClaimedLineDisplay.all.get_DefaultWindow (m_ComRetVal'Access);
         Retval.m_ILineDisplayWindow := new Windows.Devices.PointOfService.ILineDisplayWindow;
         Retval.m_ILineDisplayWindow.all := m_ComRetVal;
      end return;
   end;

   procedure RetainDevice
   (
      this : in out ClaimedLineDisplay
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedLineDisplay.all.RetainDevice;
   end;

   function add_ReleaseDeviceRequested
   (
      this : in out ClaimedLineDisplay;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedLineDisplay.all.add_ReleaseDeviceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReleaseDeviceRequested
   (
      this : in out ClaimedLineDisplay;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedLineDisplay.all.remove_ReleaseDeviceRequested (token);
   end;

   function GetStatisticsAsync
   (
      this : in out ClaimedLineDisplay;
      statisticsCategories : GenericObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.GetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function CheckHealthAsync
   (
      this : in out ClaimedLineDisplay;
      level : Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.CheckHealthAsync (level, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function CheckPowerStatusAsync
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplayPowerStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplayPowerStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus;
      m_IID            : aliased WinRt.IID := (910093773, 31010, 21763, (144, 9, 28, 99, 28, 158, 54, 83 )); -- Windows.Devices.PointOfService.LineDisplayPowerStatus;
      m_HandlerIID     : aliased WinRt.IID := (2881121561, 55327, 23941, (169, 0, 102, 185, 107, 109, 43, 50 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind := new AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplayPowerStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.CheckPowerStatusAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_StatusUpdated
   (
      this : in out ClaimedLineDisplay;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.add_StatusUpdated (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_StatusUpdated
   (
      this : in out ClaimedLineDisplay;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.remove_StatusUpdated (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_SupportedScreenSizesInCharacters
   (
      this : in out ClaimedLineDisplay
   )
   return IVectorView_Size.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Size.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.get_SupportedScreenSizesInCharacters (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Size (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaxBitmapSizeInPixels
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.get_MaxBitmapSizeInPixels (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedCharacterSets
   (
      this : in out ClaimedLineDisplay
   )
   return IVectorView_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Int32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.get_SupportedCharacterSets (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CustomGlyphs
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayCustomGlyphs'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayCustomGlyphs;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayCustomGlyphs do
         m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
         Hr := m_Interface.get_CustomGlyphs (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILineDisplayCustomGlyphs := new Windows.Devices.PointOfService.ILineDisplayCustomGlyphs;
         Retval.m_ILineDisplayCustomGlyphs.all := m_ComRetVal;
      end return;
   end;

   function GetAttributes
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayAttributes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayAttributes;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayAttributes do
         m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
         Hr := m_Interface.GetAttributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILineDisplayAttributes := new Windows.Devices.PointOfService.ILineDisplayAttributes;
         Retval.m_ILineDisplayAttributes.all := m_ComRetVal;
      end return;
   end;

   function TryUpdateAttributesAsync
   (
      this : in out ClaimedLineDisplay;
      attributes : Windows.Devices.PointOfService.LineDisplayAttributes'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.TryUpdateAttributesAsync (attributes.m_ILineDisplayAttributes.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TrySetDescriptorAsync
   (
      this : in out ClaimedLineDisplay;
      descriptor : WinRt.UInt32;
      descriptorState : Windows.Devices.PointOfService.LineDisplayDescriptorState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.TrySetDescriptorAsync (descriptor, descriptorState, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryClearDescriptorsAsync
   (
      this : in out ClaimedLineDisplay
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.TryClearDescriptorsAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryCreateWindowAsync
   (
      this : in out ClaimedLineDisplay;
      viewport : Windows.Foundation.Rect;
      windowSize : Windows.Foundation.Size
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayWindow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplayWindow.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplayWindow.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ILineDisplayWindow;
      m_IID            : aliased WinRt.IID := (2538991707, 25804, 20561, (131, 80, 74, 207, 31, 252, 190, 88 )); -- Windows.Devices.PointOfService.LineDisplayWindow;
      m_HandlerIID     : aliased WinRt.IID := (3839064834, 46682, 23276, (162, 25, 209, 224, 183, 243, 249, 18 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplayWindow.Kind := new AsyncOperationCompletedHandler_LineDisplayWindow.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplayWindow.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplayWindow.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplayWindow.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplayWindow.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayWindow do
         m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
         Hr := m_Interface.TryCreateWindowAsync (viewport, windowSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILineDisplayWindow := new Windows.Devices.PointOfService.ILineDisplayWindow;
                  Retval.m_ILineDisplayWindow.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryStoreStorageFileBitmapAsync
   (
      this : in out ClaimedLineDisplay;
      bitmap : Windows.Storage.StorageFile'Class
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayStoredBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplayStoredBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplayStoredBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ILineDisplayStoredBitmap;
      m_IID            : aliased WinRt.IID := (3718633341, 47009, 21533, (164, 128, 61, 70, 190, 217, 142, 157 )); -- Windows.Devices.PointOfService.LineDisplayStoredBitmap;
      m_HandlerIID     : aliased WinRt.IID := (2776037993, 39304, 23075, (132, 76, 248, 166, 159, 72, 164, 41 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind := new AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplayStoredBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayStoredBitmap do
         m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
         Hr := m_Interface.TryStoreStorageFileBitmapAsync (bitmap.m_IStorageFile.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILineDisplayStoredBitmap := new Windows.Devices.PointOfService.ILineDisplayStoredBitmap;
                  Retval.m_ILineDisplayStoredBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryStoreStorageFileBitmapAsync
   (
      this : in out ClaimedLineDisplay;
      bitmap : Windows.Storage.StorageFile'Class;
      horizontalAlignment : Windows.Devices.PointOfService.LineDisplayHorizontalAlignment;
      verticalAlignment : Windows.Devices.PointOfService.LineDisplayVerticalAlignment
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayStoredBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplayStoredBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplayStoredBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ILineDisplayStoredBitmap;
      m_IID            : aliased WinRt.IID := (3718633341, 47009, 21533, (164, 128, 61, 70, 190, 217, 142, 157 )); -- Windows.Devices.PointOfService.LineDisplayStoredBitmap;
      m_HandlerIID     : aliased WinRt.IID := (2776037993, 39304, 23075, (132, 76, 248, 166, 159, 72, 164, 41 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind := new AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplayStoredBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayStoredBitmap do
         m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
         Hr := m_Interface.TryStoreStorageFileBitmapAsync (bitmap.m_IStorageFile.all, horizontalAlignment, verticalAlignment, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILineDisplayStoredBitmap := new Windows.Devices.PointOfService.ILineDisplayStoredBitmap;
                  Retval.m_ILineDisplayStoredBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryStoreStorageFileBitmapAsync
   (
      this : in out ClaimedLineDisplay;
      bitmap : Windows.Storage.StorageFile'Class;
      horizontalAlignment : Windows.Devices.PointOfService.LineDisplayHorizontalAlignment;
      verticalAlignment : Windows.Devices.PointOfService.LineDisplayVerticalAlignment;
      widthInPixels : WinRt.Int32
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayStoredBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplayStoredBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplayStoredBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ILineDisplayStoredBitmap;
      m_IID            : aliased WinRt.IID := (3718633341, 47009, 21533, (164, 128, 61, 70, 190, 217, 142, 157 )); -- Windows.Devices.PointOfService.LineDisplayStoredBitmap;
      m_HandlerIID     : aliased WinRt.IID := (2776037993, 39304, 23075, (132, 76, 248, 166, 159, 72, 164, 41 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind := new AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplayStoredBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplayStoredBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay2, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayStoredBitmap do
         m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
         Hr := m_Interface.TryStoreStorageFileBitmapAsync (bitmap.m_IStorageFile.all, horizontalAlignment, verticalAlignment, widthInPixels, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILineDisplayStoredBitmap := new Windows.Devices.PointOfService.ILineDisplayStoredBitmap;
                  Retval.m_ILineDisplayStoredBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_Closed
   (
      this : in out ClaimedLineDisplay;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay3, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.add_Closed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ClaimedLineDisplay;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay3, WinRt.Windows.Devices.PointOfService.IID_IClaimedLineDisplay3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.remove_Closed (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out ClaimedLineDisplay
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedLineDisplay.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedLineDisplayClosedEventArgs

   procedure Initialize (this : in out ClaimedLineDisplayClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedLineDisplayClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedLineDisplayClosedEventArgs, IClaimedLineDisplayClosedEventArgs_Ptr);
   begin
      if this.m_IClaimedLineDisplayClosedEventArgs /= null then
         if this.m_IClaimedLineDisplayClosedEventArgs.all /= null then
            RefCount := this.m_IClaimedLineDisplayClosedEventArgs.all.Release;
            Free (this.m_IClaimedLineDisplayClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedLineDisplayClosedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedMagneticStripeReader

   procedure Initialize (this : in out ClaimedMagneticStripeReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedMagneticStripeReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedMagneticStripeReader, IClaimedMagneticStripeReader_Ptr);
   begin
      if this.m_IClaimedMagneticStripeReader /= null then
         if this.m_IClaimedMagneticStripeReader.all /= null then
            RefCount := this.m_IClaimedMagneticStripeReader.all.Release;
            Free (this.m_IClaimedMagneticStripeReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedMagneticStripeReader

   function get_DeviceId
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDisabledOnDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.put_IsDisabledOnDataReceived (value);
   end;

   function get_IsDisabledOnDataReceived
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_IsDisabledOnDataReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDecodeDataEnabled
   (
      this : in out ClaimedMagneticStripeReader;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.put_IsDecodeDataEnabled (value);
   end;

   function get_IsDecodeDataEnabled
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_IsDecodeDataEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDeviceAuthenticated
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_IsDeviceAuthenticated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataEncryptionAlgorithm
   (
      this : in out ClaimedMagneticStripeReader;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.put_DataEncryptionAlgorithm (value);
   end;

   function get_DataEncryptionAlgorithm
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_DataEncryptionAlgorithm (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TracksToRead
   (
      this : in out ClaimedMagneticStripeReader;
      value : Windows.Devices.PointOfService.MagneticStripeReaderTrackIds
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.put_TracksToRead (value);
   end;

   function get_TracksToRead
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackIds is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderTrackIds;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_TracksToRead (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsTransmitSentinelsEnabled
   (
      this : in out ClaimedMagneticStripeReader;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.put_IsTransmitSentinelsEnabled (value);
   end;

   function get_IsTransmitSentinelsEnabled
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.get_IsTransmitSentinelsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure EnableAsync
   (
      this : in out ClaimedMagneticStripeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.EnableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DisableAsync
   (
      this : in out ClaimedMagneticStripeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.DisableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RetainDevice
   (
      this : in out ClaimedMagneticStripeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.RetainDevice;
   end;

   procedure SetErrorReportingType
   (
      this : in out ClaimedMagneticStripeReader;
      value : Windows.Devices.PointOfService.MagneticStripeReaderErrorReportingType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.SetErrorReportingType (value);
   end;

   function RetrieveDeviceAuthenticationDataAsync
   (
      this : in out ClaimedMagneticStripeReader
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.RetrieveDeviceAuthenticationDataAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure AuthenticateDeviceAsync
   (
      this : in out ClaimedMagneticStripeReader;
      responseToken : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function Convert_responseToken is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.AuthenticateDeviceAsync (WinRt.UInt32(responseToken'Length), Convert_responseToken (responseToken (responseToken'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeAuthenticateDeviceAsync
   (
      this : in out ClaimedMagneticStripeReader;
      responseToken : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function Convert_responseToken is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.DeAuthenticateDeviceAsync (WinRt.UInt32(responseToken'Length), Convert_responseToken (responseToken (responseToken'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UpdateKeyAsync
   (
      this : in out ClaimedMagneticStripeReader;
      key : WinRt.WString;
      keyName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_keyName : WinRt.HString := To_HString (keyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.UpdateKeyAsync (HStr_key, HStr_keyName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_keyName);
   end;

   procedure ResetStatisticsAsync
   (
      this : in out ClaimedMagneticStripeReader;
      statisticsCategories : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.ResetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UpdateStatisticsAsync
   (
      this : in out ClaimedMagneticStripeReader;
      statistics : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.UpdateStatisticsAsync (statistics, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_BankCardDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.add_BankCardDataReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BankCardDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.remove_BankCardDataReceived (token);
   end;

   function add_AamvaCardDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.add_AamvaCardDataReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AamvaCardDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.remove_AamvaCardDataReceived (token);
   end;

   function add_VendorSpecificDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.add_VendorSpecificDataReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VendorSpecificDataReceived
   (
      this : in out ClaimedMagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.remove_VendorSpecificDataReceived (token);
   end;

   function add_ReleaseDeviceRequested
   (
      this : in out ClaimedMagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.add_ReleaseDeviceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReleaseDeviceRequested
   (
      this : in out ClaimedMagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.remove_ReleaseDeviceRequested (token);
   end;

   function add_ErrorOccurred
   (
      this : in out ClaimedMagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.add_ErrorOccurred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ErrorOccurred
   (
      this : in out ClaimedMagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedMagneticStripeReader.all.remove_ErrorOccurred (token);
   end;

   function add_Closed
   (
      this : in out ClaimedMagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader_Interface, WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader2, WinRt.Windows.Devices.PointOfService.IID_IClaimedMagneticStripeReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedMagneticStripeReader.all);
      Hr := m_Interface.add_Closed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ClaimedMagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader_Interface, WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader2, WinRt.Windows.Devices.PointOfService.IID_IClaimedMagneticStripeReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedMagneticStripeReader.all);
      Hr := m_Interface.remove_Closed (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out ClaimedMagneticStripeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedMagneticStripeReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedMagneticStripeReaderClosedEventArgs

   procedure Initialize (this : in out ClaimedMagneticStripeReaderClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedMagneticStripeReaderClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedMagneticStripeReaderClosedEventArgs, IClaimedMagneticStripeReaderClosedEventArgs_Ptr);
   begin
      if this.m_IClaimedMagneticStripeReaderClosedEventArgs /= null then
         if this.m_IClaimedMagneticStripeReaderClosedEventArgs.all /= null then
            RefCount := this.m_IClaimedMagneticStripeReaderClosedEventArgs.all.Release;
            Free (this.m_IClaimedMagneticStripeReaderClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedMagneticStripeReaderClosedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedPosPrinter

   procedure Initialize (this : in out ClaimedPosPrinter) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedPosPrinter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedPosPrinter, IClaimedPosPrinter_Ptr);
   begin
      if this.m_IClaimedPosPrinter /= null then
         if this.m_IClaimedPosPrinter.all /= null then
            RefCount := this.m_IClaimedPosPrinter.all.Release;
            Free (this.m_IClaimedPosPrinter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedPosPrinter

   function get_DeviceId
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IClaimedPosPrinter.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedPosPrinter.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacterSet
   (
      this : in out ClaimedPosPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedPosPrinter.all.put_CharacterSet (value);
   end;

   function get_CharacterSet
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedPosPrinter.all.get_CharacterSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCoverOpen
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedPosPrinter.all.get_IsCoverOpen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCharacterSetMappingEnabled
   (
      this : in out ClaimedPosPrinter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedPosPrinter.all.put_IsCharacterSetMappingEnabled (value);
   end;

   function get_IsCharacterSetMappingEnabled
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IClaimedPosPrinter.all.get_IsCharacterSetMappingEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MapMode
   (
      this : in out ClaimedPosPrinter;
      value : Windows.Devices.PointOfService.PosPrinterMapMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedPosPrinter.all.put_MapMode (value);
   end;

   function get_MapMode
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterMapMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterMapMode;
   begin
      Hr := this.m_IClaimedPosPrinter.all.get_MapMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Receipt
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedReceiptPrinter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IClaimedReceiptPrinter;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedReceiptPrinter do
         Hr := this.m_IClaimedPosPrinter.all.get_Receipt (m_ComRetVal'Access);
         Retval.m_IClaimedReceiptPrinter := new Windows.Devices.PointOfService.IClaimedReceiptPrinter;
         Retval.m_IClaimedReceiptPrinter.all := m_ComRetVal;
      end return;
   end;

   function get_Slip
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedSlipPrinter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IClaimedSlipPrinter;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedSlipPrinter do
         Hr := this.m_IClaimedPosPrinter.all.get_Slip (m_ComRetVal'Access);
         Retval.m_IClaimedSlipPrinter := new Windows.Devices.PointOfService.IClaimedSlipPrinter;
         Retval.m_IClaimedSlipPrinter.all := m_ComRetVal;
      end return;
   end;

   function get_Journal
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedJournalPrinter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IClaimedJournalPrinter;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedJournalPrinter do
         Hr := this.m_IClaimedPosPrinter.all.get_Journal (m_ComRetVal'Access);
         Retval.m_IClaimedJournalPrinter := new Windows.Devices.PointOfService.IClaimedJournalPrinter;
         Retval.m_IClaimedJournalPrinter.all := m_ComRetVal;
      end return;
   end;

   function EnableAsync
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedPosPrinter.all.EnableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DisableAsync
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedPosPrinter.all.DisableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RetainDeviceAsync
   (
      this : in out ClaimedPosPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedPosPrinter.all.RetainDeviceAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ResetStatisticsAsync
   (
      this : in out ClaimedPosPrinter;
      statisticsCategories : GenericObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedPosPrinter.all.ResetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function UpdateStatisticsAsync
   (
      this : in out ClaimedPosPrinter;
      statistics : GenericObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedPosPrinter.all.UpdateStatisticsAsync (statistics, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_ReleaseDeviceRequested
   (
      this : in out ClaimedPosPrinter;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IClaimedPosPrinter.all.add_ReleaseDeviceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReleaseDeviceRequested
   (
      this : in out ClaimedPosPrinter;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedPosPrinter.all.remove_ReleaseDeviceRequested (token);
   end;

   function add_Closed
   (
      this : in out ClaimedPosPrinter;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter_Interface, WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter2, WinRt.Windows.Devices.PointOfService.IID_IClaimedPosPrinter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedPosPrinter.all);
      Hr := m_Interface.add_Closed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ClaimedPosPrinter;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter_Interface, WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter2, WinRt.Windows.Devices.PointOfService.IID_IClaimedPosPrinter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedPosPrinter.all);
      Hr := m_Interface.remove_Closed (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out ClaimedPosPrinter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedPosPrinter.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedPosPrinterClosedEventArgs

   procedure Initialize (this : in out ClaimedPosPrinterClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedPosPrinterClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedPosPrinterClosedEventArgs, IClaimedPosPrinterClosedEventArgs_Ptr);
   begin
      if this.m_IClaimedPosPrinterClosedEventArgs /= null then
         if this.m_IClaimedPosPrinterClosedEventArgs.all /= null then
            RefCount := this.m_IClaimedPosPrinterClosedEventArgs.all.Release;
            Free (this.m_IClaimedPosPrinterClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedPosPrinterClosedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedReceiptPrinter

   procedure Initialize (this : in out ClaimedReceiptPrinter) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedReceiptPrinter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedReceiptPrinter, IClaimedReceiptPrinter_Ptr);
   begin
      if this.m_IClaimedReceiptPrinter /= null then
         if this.m_IClaimedReceiptPrinter.all /= null then
            RefCount := this.m_IClaimedReceiptPrinter.all.Release;
            Free (this.m_IClaimedReceiptPrinter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedReceiptPrinter

   function get_SidewaysMaxLines
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedReceiptPrinter.all.get_SidewaysMaxLines (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidewaysMaxChars
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedReceiptPrinter.all.get_SidewaysMaxChars (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LinesToPaperCut
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedReceiptPrinter.all.get_LinesToPaperCut (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PageSize
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IClaimedReceiptPrinter.all.get_PageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrintArea
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IClaimedReceiptPrinter.all.get_PrintArea (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateJob
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Windows.Devices.PointOfService.ReceiptPrintJob'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IReceiptPrintJob;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ReceiptPrintJob do
         Hr := this.m_IClaimedReceiptPrinter.all.CreateJob (m_ComRetVal'Access);
         Retval.m_IReceiptPrintJob := new Windows.Devices.PointOfService.IReceiptPrintJob;
         Retval.m_IReceiptPrintJob.all := m_ComRetVal;
      end return;
   end;

   procedure put_CharactersPerLine
   (
      this : in out ClaimedReceiptPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.put_CharactersPerLine (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CharactersPerLine
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_CharactersPerLine (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LineHeight
   (
      this : in out ClaimedReceiptPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.put_LineHeight (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LineHeight
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_LineHeight (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LineSpacing
   (
      this : in out ClaimedReceiptPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.put_LineSpacing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LineSpacing
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_LineSpacing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LineWidth
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_LineWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsLetterQuality
   (
      this : in out ClaimedReceiptPrinter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.put_IsLetterQuality (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsLetterQuality
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsLetterQuality (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperNearEnd
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsPaperNearEnd (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorCartridge
   (
      this : in out ClaimedReceiptPrinter;
      value : Windows.Devices.PointOfService.PosPrinterColorCartridge
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.put_ColorCartridge (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ColorCartridge
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterColorCartridge is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterColorCartridge;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_ColorCartridge (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCoverOpen
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsCoverOpen (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCartridgeRemoved
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsCartridgeRemoved (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCartridgeEmpty
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsCartridgeEmpty (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsHeadCleaning
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsHeadCleaning (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperEmpty
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsPaperEmpty (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReadyToPrint
   (
      this : in out ClaimedReceiptPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.get_IsReadyToPrint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ValidateData
   (
      this : in out ClaimedReceiptPrinter;
      data : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedReceiptPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedReceiptPrinter.all);
      Hr := m_Interface.ValidateData (HStr_data, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ClaimedSlipPrinter

   procedure Initialize (this : in out ClaimedSlipPrinter) is
   begin
      null;
   end;

   procedure Finalize (this : in out ClaimedSlipPrinter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IClaimedSlipPrinter, IClaimedSlipPrinter_Ptr);
   begin
      if this.m_IClaimedSlipPrinter /= null then
         if this.m_IClaimedSlipPrinter.all /= null then
            RefCount := this.m_IClaimedSlipPrinter.all.Release;
            Free (this.m_IClaimedSlipPrinter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ClaimedSlipPrinter

   function get_SidewaysMaxLines
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_SidewaysMaxLines (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidewaysMaxChars
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_SidewaysMaxChars (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxLines
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_MaxLines (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LinesNearEndToEnd
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_LinesNearEndToEnd (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrintSide
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterPrintSide is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterPrintSide;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_PrintSide (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PageSize
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_PageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrintArea
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.get_PrintArea (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure OpenJaws
   (
      this : in out ClaimedSlipPrinter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.OpenJaws;
   end;

   procedure CloseJaws
   (
      this : in out ClaimedSlipPrinter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.CloseJaws;
   end;

   function InsertSlipAsync
   (
      this : in out ClaimedSlipPrinter;
      timeout : Windows.Foundation.TimeSpan
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedSlipPrinter.all.InsertSlipAsync (timeout, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RemoveSlipAsync
   (
      this : in out ClaimedSlipPrinter;
      timeout : Windows.Foundation.TimeSpan
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IClaimedSlipPrinter.all.RemoveSlipAsync (timeout, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ChangePrintSide
   (
      this : in out ClaimedSlipPrinter;
      printSide : Windows.Devices.PointOfService.PosPrinterPrintSide
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClaimedSlipPrinter.all.ChangePrintSide (printSide);
   end;

   function CreateJob
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Windows.Devices.PointOfService.SlipPrintJob'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IReceiptOrSlipJob;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.SlipPrintJob do
         Hr := this.m_IClaimedSlipPrinter.all.CreateJob (m_ComRetVal'Access);
         Retval.m_IReceiptOrSlipJob := new Windows.Devices.PointOfService.IReceiptOrSlipJob;
         Retval.m_IReceiptOrSlipJob.all := m_ComRetVal;
      end return;
   end;

   procedure put_CharactersPerLine
   (
      this : in out ClaimedSlipPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.put_CharactersPerLine (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CharactersPerLine
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_CharactersPerLine (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LineHeight
   (
      this : in out ClaimedSlipPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.put_LineHeight (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LineHeight
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_LineHeight (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LineSpacing
   (
      this : in out ClaimedSlipPrinter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.put_LineSpacing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LineSpacing
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_LineSpacing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LineWidth
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_LineWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsLetterQuality
   (
      this : in out ClaimedSlipPrinter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.put_IsLetterQuality (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsLetterQuality
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsLetterQuality (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperNearEnd
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsPaperNearEnd (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorCartridge
   (
      this : in out ClaimedSlipPrinter;
      value : Windows.Devices.PointOfService.PosPrinterColorCartridge
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.put_ColorCartridge (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ColorCartridge
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterColorCartridge is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterColorCartridge;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_ColorCartridge (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCoverOpen
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsCoverOpen (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCartridgeRemoved
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsCartridgeRemoved (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsCartridgeEmpty
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsCartridgeEmpty (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsHeadCleaning
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsHeadCleaning (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperEmpty
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsPaperEmpty (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReadyToPrint
   (
      this : in out ClaimedSlipPrinter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.get_IsReadyToPrint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ValidateData
   (
      this : in out ClaimedSlipPrinter;
      data : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IClaimedSlipPrinter_Interface, WinRt.Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation, WinRt.Windows.Devices.PointOfService.IID_ICommonClaimedPosPrinterStation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IClaimedSlipPrinter.all);
      Hr := m_Interface.ValidateData (HStr_data, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JournalPrintJob

   procedure Initialize (this : in out JournalPrintJob) is
   begin
      null;
   end;

   procedure Finalize (this : in out JournalPrintJob) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterJob, IPosPrinterJob_Ptr);
   begin
      if this.m_IPosPrinterJob /= null then
         if this.m_IPosPrinterJob.all /= null then
            RefCount := this.m_IPosPrinterJob.all.Release;
            Free (this.m_IPosPrinterJob);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JournalPrintJob

   procedure Print
   (
      this : in out JournalPrintJob;
      data : WinRt.WString;
      printOptions : Windows.Devices.PointOfService.PosPrinterPrintOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrintJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IPosPrinterJob_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrintJob, WinRt.Windows.Devices.PointOfService.IID_IJournalPrintJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPosPrinterJob.all);
      Hr := m_Interface.Print (HStr_data, printOptions.m_IPosPrinterPrintOptions.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure FeedPaperByLine
   (
      this : in out JournalPrintJob;
      lineCount : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrintJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IPosPrinterJob_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrintJob, WinRt.Windows.Devices.PointOfService.IID_IJournalPrintJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPosPrinterJob.all);
      Hr := m_Interface.FeedPaperByLine (lineCount);
      m_RefCount := m_Interface.Release;
   end;

   procedure FeedPaperByMapModeUnit
   (
      this : in out JournalPrintJob;
      distance : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrintJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IPosPrinterJob_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrintJob, WinRt.Windows.Devices.PointOfService.IID_IJournalPrintJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPosPrinterJob.all);
      Hr := m_Interface.FeedPaperByMapModeUnit (distance);
      m_RefCount := m_Interface.Release;
   end;

   procedure Print
   (
      this : in out JournalPrintJob;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      Hr := this.m_IPosPrinterJob.all.Print (HStr_data);
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintLine
   (
      this : in out JournalPrintJob;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      Hr := this.m_IPosPrinterJob.all.PrintLine (HStr_data);
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintLine
   (
      this : in out JournalPrintJob
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterJob.all.PrintLine;
   end;

   function ExecuteAsync
   (
      this : in out JournalPrintJob
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPosPrinterJob.all.ExecuteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JournalPrinterCapabilities

   procedure Initialize (this : in out JournalPrinterCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out JournalPrinterCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJournalPrinterCapabilities, IJournalPrinterCapabilities_Ptr);
   begin
      if this.m_IJournalPrinterCapabilities /= null then
         if this.m_IJournalPrinterCapabilities.all /= null then
            RefCount := this.m_IJournalPrinterCapabilities.all.Release;
            Free (this.m_IJournalPrinterCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JournalPrinterCapabilities

   function get_IsReverseVideoSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IJournalPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsReverseVideoSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsStrikethroughSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IJournalPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsStrikethroughSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSuperscriptSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IJournalPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsSuperscriptSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSubscriptSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IJournalPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsSubscriptSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReversePaperFeedByLineSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IJournalPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsReversePaperFeedByLineSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReversePaperFeedByMapModeUnitSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IJournalPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsReversePaperFeedByMapModeUnitSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPrinterPresent
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsPrinterPresent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDualColorSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsDualColorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ColorCartridgeCapabilities
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterColorCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterColorCapabilities;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_ColorCartridgeCapabilities (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CartridgeSensors
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterCartridgeSensors is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterCartridgeSensors;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_CartridgeSensors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBoldSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsBoldSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsItalicSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsItalicSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsUnderlineSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsUnderlineSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleHighPrintSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleHighPrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleWidePrintSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleWidePrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleHighDoubleWidePrintSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleHighDoubleWidePrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperEmptySensorSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsPaperEmptySensorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperNearEndSensorSupported
   (
      this : in out JournalPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_IsPaperNearEndSensorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedCharactersPerLine
   (
      this : in out JournalPrinterCapabilities
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IJournalPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJournalPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedCharactersPerLine (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplay

   procedure Initialize (this : in out LineDisplay) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplay) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplay, ILineDisplay_Ptr);
   begin
      if this.m_ILineDisplay /= null then
         if this.m_ILineDisplay.all /= null then
            RefCount := this.m_ILineDisplay.all.Release;
            Free (this.m_ILineDisplay);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LineDisplay

   function FromIdAsync_LineDisplay
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplay is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.LineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ILineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplay.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplay.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ILineDisplay;
      m_IID            : aliased WinRt.IID := (1090509545, 59329, 23620, (145, 180, 189, 132, 235, 248, 83, 155 )); -- Windows.Devices.PointOfService.LineDisplay;
      m_HandlerIID     : aliased WinRt.IID := (3049575542, 20294, 21444, (138, 69, 137, 219, 230, 214, 242, 134 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplay.Kind := new AsyncOperationCompletedHandler_LineDisplay.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplay.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplay.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplay.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplay.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplay do
         Hr := RoGetActivationFactory (m_hString, IID_ILineDisplayStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILineDisplay := new Windows.Devices.PointOfService.ILineDisplay;
                     Retval.m_ILineDisplay.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefaultAsync_LineDisplay
   return WinRt.Windows.Devices.PointOfService.LineDisplay is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.LineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ILineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplay.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplay.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.ILineDisplay;
      m_IID            : aliased WinRt.IID := (1090509545, 59329, 23620, (145, 180, 189, 132, 235, 248, 83, 155 )); -- Windows.Devices.PointOfService.LineDisplay;
      m_HandlerIID     : aliased WinRt.IID := (3049575542, 20294, 21444, (138, 69, 137, 219, 230, 214, 242, 134 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplay.Kind := new AsyncOperationCompletedHandler_LineDisplay.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplay.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplay.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplay.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplay.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplay do
         Hr := RoGetActivationFactory (m_hString, IID_ILineDisplayStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILineDisplay := new Windows.Devices.PointOfService.ILineDisplay;
                     Retval.m_ILineDisplay.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetDeviceSelector_LineDisplay
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.LineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ILineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILineDisplayStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector_LineDisplay
   (
      connectionTypes : Windows.Devices.PointOfService.PosConnectionTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.LineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ILineDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILineDisplayStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (connectionTypes, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_StatisticsCategorySelector
   return WinRt.Windows.Devices.PointOfService.LineDisplayStatisticsCategorySelector is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.LineDisplay");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.ILineDisplayStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayStatisticsCategorySelector;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayStatisticsCategorySelector do
         Hr := RoGetActivationFactory (m_hString, IID_ILineDisplayStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StatisticsCategorySelector (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILineDisplayStatisticsCategorySelector := new Windows.Devices.PointOfService.ILineDisplayStatisticsCategorySelector;
            Retval.m_ILineDisplayStatisticsCategorySelector.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplay

   function get_DeviceId
   (
      this : in out LineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplay.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Capabilities
   (
      this : in out LineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayCapabilities do
         Hr := this.m_ILineDisplay.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_ILineDisplayCapabilities := new Windows.Devices.PointOfService.ILineDisplayCapabilities;
         Retval.m_ILineDisplayCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_PhysicalDeviceName
   (
      this : in out LineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplay.all.get_PhysicalDeviceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PhysicalDeviceDescription
   (
      this : in out LineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplay.all.get_PhysicalDeviceDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceControlDescription
   (
      this : in out LineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplay.all.get_DeviceControlDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceControlVersion
   (
      this : in out LineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplay.all.get_DeviceControlVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceServiceVersion
   (
      this : in out LineDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplay.all.get_DeviceServiceVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ClaimAsync
   (
      this : in out LineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedLineDisplay'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ClaimedLineDisplay.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ClaimedLineDisplay.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IClaimedLineDisplay;
      m_IID            : aliased WinRt.IID := (1271965956, 6826, 21594, (140, 188, 29, 69, 195, 232, 14, 94 )); -- Windows.Devices.PointOfService.ClaimedLineDisplay;
      m_HandlerIID     : aliased WinRt.IID := (1310358001, 57330, 23320, (190, 190, 42, 202, 1, 11, 191, 204 ));
      m_Handler        : AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind := new AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClaimedLineDisplay.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind_Delegate, AsyncOperationCompletedHandler_ClaimedLineDisplay.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedLineDisplay do
         Hr := this.m_ILineDisplay.all.ClaimAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IClaimedLineDisplay := new Windows.Devices.PointOfService.IClaimedLineDisplay;
                  Retval.m_IClaimedLineDisplay.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CheckPowerStatusAsync
   (
      this : in out LineDisplay
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LineDisplayPowerStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LineDisplayPowerStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus;
      m_IID            : aliased WinRt.IID := (910093773, 31010, 21763, (144, 9, 28, 99, 28, 158, 54, 83 )); -- Windows.Devices.PointOfService.LineDisplayPowerStatus;
      m_HandlerIID     : aliased WinRt.IID := (2881121561, 55327, 23941, (169, 0, 102, 185, 107, 109, 43, 50 ));
      m_Handler        : AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind := new AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LineDisplayPowerStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind_Delegate, AsyncOperationCompletedHandler_LineDisplayPowerStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplay_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplay2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplay.all);
      Hr := m_Interface.CheckPowerStatusAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out LineDisplay
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplay_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplay.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayAttributes

   procedure Initialize (this : in out LineDisplayAttributes) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayAttributes) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayAttributes, ILineDisplayAttributes_Ptr);
   begin
      if this.m_ILineDisplayAttributes /= null then
         if this.m_ILineDisplayAttributes.all /= null then
            RefCount := this.m_ILineDisplayAttributes.all.Release;
            Free (this.m_ILineDisplayAttributes);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayAttributes

   function get_IsPowerNotifyEnabled
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayAttributes.all.get_IsPowerNotifyEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPowerNotifyEnabled
   (
      this : in out LineDisplayAttributes;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_IsPowerNotifyEnabled (value);
   end;

   function get_Brightness
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILineDisplayAttributes.all.get_Brightness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Brightness
   (
      this : in out LineDisplayAttributes;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_Brightness (value);
   end;

   function get_BlinkRate
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILineDisplayAttributes.all.get_BlinkRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BlinkRate
   (
      this : in out LineDisplayAttributes;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_BlinkRate (value);
   end;

   function get_ScreenSizeInCharacters
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ILineDisplayAttributes.all.get_ScreenSizeInCharacters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScreenSizeInCharacters
   (
      this : in out LineDisplayAttributes;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_ScreenSizeInCharacters (value);
   end;

   function get_CharacterSet
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILineDisplayAttributes.all.get_CharacterSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacterSet
   (
      this : in out LineDisplayAttributes;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_CharacterSet (value);
   end;

   function get_IsCharacterSetMappingEnabled
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayAttributes.all.get_IsCharacterSetMappingEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCharacterSetMappingEnabled
   (
      this : in out LineDisplayAttributes;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_IsCharacterSetMappingEnabled (value);
   end;

   function get_CurrentWindow
   (
      this : in out LineDisplayAttributes
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayWindow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayWindow;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayWindow do
         Hr := this.m_ILineDisplayAttributes.all.get_CurrentWindow (m_ComRetVal'Access);
         Retval.m_ILineDisplayWindow := new Windows.Devices.PointOfService.ILineDisplayWindow;
         Retval.m_ILineDisplayWindow.all := m_ComRetVal;
      end return;
   end;

   procedure put_CurrentWindow
   (
      this : in out LineDisplayAttributes;
      value : Windows.Devices.PointOfService.LineDisplayWindow'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayAttributes.all.put_CurrentWindow (value.m_ILineDisplayWindow.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayCapabilities

   procedure Initialize (this : in out LineDisplayCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayCapabilities, ILineDisplayCapabilities_Ptr);
   begin
      if this.m_ILineDisplayCapabilities /= null then
         if this.m_ILineDisplayCapabilities.all /= null then
            RefCount := this.m_ILineDisplayCapabilities.all.Release;
            Free (this.m_ILineDisplayCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayCapabilities

   function get_IsStatisticsReportingSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsStatisticsReportingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsUpdatingSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsStatisticsUpdatingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerReportingType
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosPowerReportingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosPowerReportingType;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_PowerReportingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanChangeScreenSize
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanChangeScreenSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanDisplayBitmaps
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanDisplayBitmaps (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanReadCharacterAtCursor
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanReadCharacterAtCursor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanMapCharacterSets
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanMapCharacterSets (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanDisplayCustomGlyphs
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanDisplayCustomGlyphs (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanReverse
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanReverse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanBlink
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.LineDisplayTextAttributeGranularity;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanBlink (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanChangeBlinkRate
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_CanChangeBlinkRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsBrightnessSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsBrightnessSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCursorSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsCursorSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsHorizontalMarqueeSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsHorizontalMarqueeSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVerticalMarqueeSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsVerticalMarqueeSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsInterCharacterWaitSupported
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_IsInterCharacterWaitSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedDescriptors
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_SupportedDescriptors (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedWindows
   (
      this : in out LineDisplayCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILineDisplayCapabilities.all.get_SupportedWindows (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayCursor

   procedure Initialize (this : in out LineDisplayCursor) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayCursor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayCursor, ILineDisplayCursor_Ptr);
   begin
      if this.m_ILineDisplayCursor /= null then
         if this.m_ILineDisplayCursor.all /= null then
            RefCount := this.m_ILineDisplayCursor.all.Release;
            Free (this.m_ILineDisplayCursor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayCursor

   function get_CanCustomize
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_CanCustomize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsBlinkSupported
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_IsBlinkSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsBlockSupported
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_IsBlockSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsHalfBlockSupported
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_IsHalfBlockSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsUnderlineSupported
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_IsUnderlineSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsReverseSupported
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_IsReverseSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsOtherSupported
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursor.all.get_IsOtherSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetAttributes
   (
      this : in out LineDisplayCursor
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayCursorAttributes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayCursorAttributes;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayCursorAttributes do
         Hr := this.m_ILineDisplayCursor.all.GetAttributes (m_ComRetVal'Access);
         Retval.m_ILineDisplayCursorAttributes := new Windows.Devices.PointOfService.ILineDisplayCursorAttributes;
         Retval.m_ILineDisplayCursorAttributes.all := m_ComRetVal;
      end return;
   end;

   function TryUpdateAttributesAsync
   (
      this : in out LineDisplayCursor;
      attributes : Windows.Devices.PointOfService.LineDisplayCursorAttributes'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayCursor.all.TryUpdateAttributesAsync (attributes.m_ILineDisplayCursorAttributes.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayCursorAttributes

   procedure Initialize (this : in out LineDisplayCursorAttributes) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayCursorAttributes) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayCursorAttributes, ILineDisplayCursorAttributes_Ptr);
   begin
      if this.m_ILineDisplayCursorAttributes /= null then
         if this.m_ILineDisplayCursorAttributes.all /= null then
            RefCount := this.m_ILineDisplayCursorAttributes.all.Release;
            Free (this.m_ILineDisplayCursorAttributes);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayCursorAttributes

   function get_IsBlinkEnabled
   (
      this : in out LineDisplayCursorAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.get_IsBlinkEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsBlinkEnabled
   (
      this : in out LineDisplayCursorAttributes;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.put_IsBlinkEnabled (value);
   end;

   function get_CursorType
   (
      this : in out LineDisplayCursorAttributes
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayCursorType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.LineDisplayCursorType;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.get_CursorType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CursorType
   (
      this : in out LineDisplayCursorAttributes;
      value : Windows.Devices.PointOfService.LineDisplayCursorType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.put_CursorType (value);
   end;

   function get_IsAutoAdvanceEnabled
   (
      this : in out LineDisplayCursorAttributes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.get_IsAutoAdvanceEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAutoAdvanceEnabled
   (
      this : in out LineDisplayCursorAttributes;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.put_IsAutoAdvanceEnabled (value);
   end;

   function get_Position
   (
      this : in out LineDisplayCursorAttributes
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out LineDisplayCursorAttributes;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayCursorAttributes.all.put_Position (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayCustomGlyphs

   procedure Initialize (this : in out LineDisplayCustomGlyphs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayCustomGlyphs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayCustomGlyphs, ILineDisplayCustomGlyphs_Ptr);
   begin
      if this.m_ILineDisplayCustomGlyphs /= null then
         if this.m_ILineDisplayCustomGlyphs.all /= null then
            RefCount := this.m_ILineDisplayCustomGlyphs.all.Release;
            Free (this.m_ILineDisplayCustomGlyphs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayCustomGlyphs

   function get_SizeInPixels
   (
      this : in out LineDisplayCustomGlyphs
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ILineDisplayCustomGlyphs.all.get_SizeInPixels (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedGlyphCodes
   (
      this : in out LineDisplayCustomGlyphs
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_ILineDisplayCustomGlyphs.all.get_SupportedGlyphCodes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function TryRedefineAsync
   (
      this : in out LineDisplayCustomGlyphs;
      glyphCode : WinRt.UInt32;
      glyphData : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayCustomGlyphs.all.TryRedefineAsync (glyphCode, glyphData, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayMarquee

   procedure Initialize (this : in out LineDisplayMarquee) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayMarquee) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayMarquee, ILineDisplayMarquee_Ptr);
   begin
      if this.m_ILineDisplayMarquee /= null then
         if this.m_ILineDisplayMarquee.all /= null then
            RefCount := this.m_ILineDisplayMarquee.all.Release;
            Free (this.m_ILineDisplayMarquee);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayMarquee

   function get_Format
   (
      this : in out LineDisplayMarquee
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayMarqueeFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.LineDisplayMarqueeFormat;
   begin
      Hr := this.m_ILineDisplayMarquee.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out LineDisplayMarquee;
      value : Windows.Devices.PointOfService.LineDisplayMarqueeFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayMarquee.all.put_Format (value);
   end;

   function get_RepeatWaitInterval
   (
      this : in out LineDisplayMarquee
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILineDisplayMarquee.all.get_RepeatWaitInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RepeatWaitInterval
   (
      this : in out LineDisplayMarquee;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayMarquee.all.put_RepeatWaitInterval (value);
   end;

   function get_ScrollWaitInterval
   (
      this : in out LineDisplayMarquee
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILineDisplayMarquee.all.get_ScrollWaitInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScrollWaitInterval
   (
      this : in out LineDisplayMarquee;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayMarquee.all.put_ScrollWaitInterval (value);
   end;

   function TryStartScrollingAsync
   (
      this : in out LineDisplayMarquee;
      direction : Windows.Devices.PointOfService.LineDisplayScrollDirection
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayMarquee.all.TryStartScrollingAsync (direction, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryStopScrollingAsync
   (
      this : in out LineDisplayMarquee
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayMarquee.all.TryStopScrollingAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayStatisticsCategorySelector

   procedure Initialize (this : in out LineDisplayStatisticsCategorySelector) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayStatisticsCategorySelector) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayStatisticsCategorySelector, ILineDisplayStatisticsCategorySelector_Ptr);
   begin
      if this.m_ILineDisplayStatisticsCategorySelector /= null then
         if this.m_ILineDisplayStatisticsCategorySelector.all /= null then
            RefCount := this.m_ILineDisplayStatisticsCategorySelector.all.Release;
            Free (this.m_ILineDisplayStatisticsCategorySelector);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayStatisticsCategorySelector

   function get_AllStatistics
   (
      this : in out LineDisplayStatisticsCategorySelector
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplayStatisticsCategorySelector.all.get_AllStatistics (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UnifiedPosStatistics
   (
      this : in out LineDisplayStatisticsCategorySelector
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplayStatisticsCategorySelector.all.get_UnifiedPosStatistics (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ManufacturerStatistics
   (
      this : in out LineDisplayStatisticsCategorySelector
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplayStatisticsCategorySelector.all.get_ManufacturerStatistics (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayStatusUpdatedEventArgs

   procedure Initialize (this : in out LineDisplayStatusUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayStatusUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayStatusUpdatedEventArgs, ILineDisplayStatusUpdatedEventArgs_Ptr);
   begin
      if this.m_ILineDisplayStatusUpdatedEventArgs /= null then
         if this.m_ILineDisplayStatusUpdatedEventArgs.all /= null then
            RefCount := this.m_ILineDisplayStatusUpdatedEventArgs.all.Release;
            Free (this.m_ILineDisplayStatusUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayStatusUpdatedEventArgs

   function get_Status
   (
      this : in out LineDisplayStatusUpdatedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayPowerStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.LineDisplayPowerStatus;
   begin
      Hr := this.m_ILineDisplayStatusUpdatedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayStoredBitmap

   procedure Initialize (this : in out LineDisplayStoredBitmap) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayStoredBitmap) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayStoredBitmap, ILineDisplayStoredBitmap_Ptr);
   begin
      if this.m_ILineDisplayStoredBitmap /= null then
         if this.m_ILineDisplayStoredBitmap.all /= null then
            RefCount := this.m_ILineDisplayStoredBitmap.all.Release;
            Free (this.m_ILineDisplayStoredBitmap);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayStoredBitmap

   function get_EscapeSequence
   (
      this : in out LineDisplayStoredBitmap
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILineDisplayStoredBitmap.all.get_EscapeSequence (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function TryDeleteAsync
   (
      this : in out LineDisplayStoredBitmap
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayStoredBitmap.all.TryDeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineDisplayWindow

   procedure Initialize (this : in out LineDisplayWindow) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineDisplayWindow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineDisplayWindow, ILineDisplayWindow_Ptr);
   begin
      if this.m_ILineDisplayWindow /= null then
         if this.m_ILineDisplayWindow.all /= null then
            RefCount := this.m_ILineDisplayWindow.all.Release;
            Free (this.m_ILineDisplayWindow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineDisplayWindow

   function get_SizeInCharacters
   (
      this : in out LineDisplayWindow
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ILineDisplayWindow.all.get_SizeInCharacters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InterCharacterWaitInterval
   (
      this : in out LineDisplayWindow
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ILineDisplayWindow.all.get_InterCharacterWaitInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InterCharacterWaitInterval
   (
      this : in out LineDisplayWindow;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILineDisplayWindow.all.put_InterCharacterWaitInterval (value);
   end;

   function TryRefreshAsync
   (
      this : in out LineDisplayWindow
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayWindow.all.TryRefreshAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayTextAsync
   (
      this : in out LineDisplayWindow;
      text : WinRt.WString;
      displayAttribute : Windows.Devices.PointOfService.LineDisplayTextAttribute
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayWindow.all.TryDisplayTextAsync (HStr_text, displayAttribute, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_text);
      return m_RetVal;
   end;

   function TryDisplayTextAsync
   (
      this : in out LineDisplayWindow;
      text : WinRt.WString;
      displayAttribute : Windows.Devices.PointOfService.LineDisplayTextAttribute;
      startPosition : Windows.Foundation.Point
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayWindow.all.TryDisplayTextAsync (HStr_text, displayAttribute, startPosition, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_text);
      return m_RetVal;
   end;

   function TryDisplayTextAsync
   (
      this : in out LineDisplayWindow;
      text : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayWindow.all.TryDisplayTextAsync (HStr_text, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_text);
      return m_RetVal;
   end;

   function TryScrollTextAsync
   (
      this : in out LineDisplayWindow;
      direction : Windows.Devices.PointOfService.LineDisplayScrollDirection;
      numberOfColumnsOrRows : WinRt.UInt32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayWindow.all.TryScrollTextAsync (direction, numberOfColumnsOrRows, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryClearTextAsync
   (
      this : in out LineDisplayWindow
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ILineDisplayWindow.all.TryClearTextAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Cursor
   (
      this : in out LineDisplayWindow
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayCursor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayCursor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayCursor do
         m_Interface := QInterface (this.m_ILineDisplayWindow.all);
         Hr := m_Interface.get_Cursor (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILineDisplayCursor := new Windows.Devices.PointOfService.ILineDisplayCursor;
         Retval.m_ILineDisplayCursor.all := m_ComRetVal;
      end return;
   end;

   function get_Marquee
   (
      this : in out LineDisplayWindow
   )
   return WinRt.Windows.Devices.PointOfService.LineDisplayMarquee'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ILineDisplayMarquee;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.LineDisplayMarquee do
         m_Interface := QInterface (this.m_ILineDisplayWindow.all);
         Hr := m_Interface.get_Marquee (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILineDisplayMarquee := new Windows.Devices.PointOfService.ILineDisplayMarquee;
         Retval.m_ILineDisplayMarquee.all := m_ComRetVal;
      end return;
   end;

   function ReadCharacterAtCursorAsync
   (
      this : in out LineDisplayWindow
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.ReadCharacterAtCursorAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayStoredBitmapAtCursorAsync
   (
      this : in out LineDisplayWindow;
      bitmap : Windows.Devices.PointOfService.LineDisplayStoredBitmap'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.TryDisplayStoredBitmapAtCursorAsync (bitmap.m_ILineDisplayStoredBitmap.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayStorageFileBitmapAtCursorAsync
   (
      this : in out LineDisplayWindow;
      bitmap : Windows.Storage.StorageFile'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.TryDisplayStorageFileBitmapAtCursorAsync (bitmap.m_IStorageFile.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayStorageFileBitmapAtCursorAsync
   (
      this : in out LineDisplayWindow;
      bitmap : Windows.Storage.StorageFile'Class;
      horizontalAlignment : Windows.Devices.PointOfService.LineDisplayHorizontalAlignment;
      verticalAlignment : Windows.Devices.PointOfService.LineDisplayVerticalAlignment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.TryDisplayStorageFileBitmapAtCursorAsync (bitmap.m_IStorageFile.all, horizontalAlignment, verticalAlignment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayStorageFileBitmapAtCursorAsync
   (
      this : in out LineDisplayWindow;
      bitmap : Windows.Storage.StorageFile'Class;
      horizontalAlignment : Windows.Devices.PointOfService.LineDisplayHorizontalAlignment;
      verticalAlignment : Windows.Devices.PointOfService.LineDisplayVerticalAlignment;
      widthInPixels : WinRt.Int32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.TryDisplayStorageFileBitmapAtCursorAsync (bitmap.m_IStorageFile.all, horizontalAlignment, verticalAlignment, widthInPixels, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayStorageFileBitmapAtPointAsync
   (
      this : in out LineDisplayWindow;
      bitmap : Windows.Storage.StorageFile'Class;
      offsetInPixels : Windows.Foundation.Point
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.TryDisplayStorageFileBitmapAtPointAsync (bitmap.m_IStorageFile.all, offsetInPixels, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDisplayStorageFileBitmapAtPointAsync
   (
      this : in out LineDisplayWindow;
      bitmap : Windows.Storage.StorageFile'Class;
      offsetInPixels : Windows.Foundation.Point;
      widthInPixels : WinRt.Int32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Devices.PointOfService.ILineDisplayWindow2, WinRt.Windows.Devices.PointOfService.IID_ILineDisplayWindow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.TryDisplayStorageFileBitmapAtPointAsync (bitmap.m_IStorageFile.all, offsetInPixels, widthInPixels, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out LineDisplayWindow
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ILineDisplayWindow_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILineDisplayWindow.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReader

   procedure Initialize (this : in out MagneticStripeReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReader, IMagneticStripeReader_Ptr);
   begin
      if this.m_IMagneticStripeReader /= null then
         if this.m_IMagneticStripeReader.all /= null then
            RefCount := this.m_IMagneticStripeReader.all.Release;
            Free (this.m_IMagneticStripeReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MagneticStripeReader

   function GetDefaultAsync_MagneticStripeReader
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReader is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReader");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MagneticStripeReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MagneticStripeReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IMagneticStripeReader;
      m_IID            : aliased WinRt.IID := (2473750025, 33148, 24371, (190, 228, 9, 13, 231, 7, 79, 25 )); -- Windows.Devices.PointOfService.MagneticStripeReader;
      m_HandlerIID     : aliased WinRt.IID := (851795835, 36579, 21853, (153, 139, 120, 201, 138, 169, 98, 123 ));
      m_Handler        : AsyncOperationCompletedHandler_MagneticStripeReader.Kind := new AsyncOperationCompletedHandler_MagneticStripeReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MagneticStripeReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MagneticStripeReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MagneticStripeReader.Kind_Delegate, AsyncOperationCompletedHandler_MagneticStripeReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReader do
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMagneticStripeReader := new Windows.Devices.PointOfService.IMagneticStripeReader;
                     Retval.m_IMagneticStripeReader.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromIdAsync_MagneticStripeReader
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReader is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReader");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MagneticStripeReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MagneticStripeReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IMagneticStripeReader;
      m_IID            : aliased WinRt.IID := (2473750025, 33148, 24371, (190, 228, 9, 13, 231, 7, 79, 25 )); -- Windows.Devices.PointOfService.MagneticStripeReader;
      m_HandlerIID     : aliased WinRt.IID := (851795835, 36579, 21853, (153, 139, 120, 201, 138, 169, 98, 123 ));
      m_Handler        : AsyncOperationCompletedHandler_MagneticStripeReader.Kind := new AsyncOperationCompletedHandler_MagneticStripeReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MagneticStripeReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MagneticStripeReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MagneticStripeReader.Kind_Delegate, AsyncOperationCompletedHandler_MagneticStripeReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReader do
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMagneticStripeReader := new Windows.Devices.PointOfService.IMagneticStripeReader;
                     Retval.m_IMagneticStripeReader.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector_MagneticStripeReader
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReader");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector_MagneticStripeReader
   (
      connectionTypes : Windows.Devices.PointOfService.PosConnectionTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReader");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (connectionTypes, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReader

   function get_DeviceId
   (
      this : in out MagneticStripeReader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReader.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Capabilities
   (
      this : in out MagneticStripeReader
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderCapabilities do
         Hr := this.m_IMagneticStripeReader.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderCapabilities := new Windows.Devices.PointOfService.IMagneticStripeReaderCapabilities;
         Retval.m_IMagneticStripeReaderCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_SupportedCardTypes
   (
      this : in out MagneticStripeReader
   )
   return WinRt.UInt32_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMagneticStripeReader.all.get_SupportedCardTypes (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.UInt32_Array (1..Integer(m_ComRetValSize));
         function To_Ada_UInt32 is new To_Ada_Type (WinRt.UInt32, WinRt.UInt32_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_UInt32 (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_DeviceAuthenticationProtocol
   (
      this : in out MagneticStripeReader
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderAuthenticationProtocol is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderAuthenticationProtocol;
   begin
      Hr := this.m_IMagneticStripeReader.all.get_DeviceAuthenticationProtocol (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CheckHealthAsync
   (
      this : in out MagneticStripeReader;
      level : Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMagneticStripeReader.all.CheckHealthAsync (level, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function ClaimReaderAsync
   (
      this : in out MagneticStripeReader
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedMagneticStripeReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ClaimedMagneticStripeReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ClaimedMagneticStripeReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IClaimedMagneticStripeReader;
      m_IID            : aliased WinRt.IID := (1097010132, 62554, 22797, (138, 78, 247, 12, 158, 73, 173, 1 )); -- Windows.Devices.PointOfService.ClaimedMagneticStripeReader;
      m_HandlerIID     : aliased WinRt.IID := (2490117476, 8916, 21805, (171, 251, 158, 179, 65, 189, 103, 243 ));
      m_Handler        : AsyncOperationCompletedHandler_ClaimedMagneticStripeReader.Kind := new AsyncOperationCompletedHandler_ClaimedMagneticStripeReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClaimedMagneticStripeReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClaimedMagneticStripeReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClaimedMagneticStripeReader.Kind_Delegate, AsyncOperationCompletedHandler_ClaimedMagneticStripeReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedMagneticStripeReader do
         Hr := this.m_IMagneticStripeReader.all.ClaimReaderAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IClaimedMagneticStripeReader := new Windows.Devices.PointOfService.IClaimedMagneticStripeReader;
                  Retval.m_IClaimedMagneticStripeReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RetrieveStatisticsAsync
   (
      this : in out MagneticStripeReader;
      statisticsCategories : GenericObject
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMagneticStripeReader.all.RetrieveStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetErrorReportingType
   (
      this : in out MagneticStripeReader
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderErrorReportingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderErrorReportingType;
   begin
      Hr := this.m_IMagneticStripeReader.all.GetErrorReportingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_StatusUpdated
   (
      this : in out MagneticStripeReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMagneticStripeReader.all.add_StatusUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusUpdated
   (
      this : in out MagneticStripeReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMagneticStripeReader.all.remove_StatusUpdated (token);
   end;

   procedure Close
   (
      this : in out MagneticStripeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IMagneticStripeReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMagneticStripeReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderAamvaCardDataReceivedEventArgs

   procedure Initialize (this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderAamvaCardDataReceivedEventArgs, IMagneticStripeReaderAamvaCardDataReceivedEventArgs_Ptr);
   begin
      if this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs /= null then
         if this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all /= null then
            RefCount := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.Release;
            Free (this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderAamvaCardDataReceivedEventArgs

   function get_Report
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderReport;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport do
         Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Report (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderReport := new Windows.Devices.PointOfService.IMagneticStripeReaderReport;
         Retval.m_IMagneticStripeReaderReport.all := m_ComRetVal;
      end return;
   end;

   function get_LicenseNumber
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_LicenseNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ExpirationDate
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_ExpirationDate (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Restrictions
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Restrictions (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Class
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Class (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Endorsements
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Endorsements (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_BirthDate
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_BirthDate (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstName
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_FirstName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Surname
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Surname (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Suffix
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Suffix (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Gender
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Gender (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HairColor
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_HairColor (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EyeColor
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_EyeColor (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Height
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Height (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Weight
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Weight (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Address
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_Address (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_City
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_City (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_State (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PostalCode
   (
      this : in out MagneticStripeReaderAamvaCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderAamvaCardDataReceivedEventArgs.all.get_PostalCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderBankCardDataReceivedEventArgs

   procedure Initialize (this : in out MagneticStripeReaderBankCardDataReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderBankCardDataReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderBankCardDataReceivedEventArgs, IMagneticStripeReaderBankCardDataReceivedEventArgs_Ptr);
   begin
      if this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs /= null then
         if this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all /= null then
            RefCount := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.Release;
            Free (this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderBankCardDataReceivedEventArgs

   function get_Report
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderReport;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport do
         Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_Report (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderReport := new Windows.Devices.PointOfService.IMagneticStripeReaderReport;
         Retval.m_IMagneticStripeReaderReport.all := m_ComRetVal;
      end return;
   end;

   function get_AccountNumber
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_AccountNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ExpirationDate
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_ExpirationDate (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceCode
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_ServiceCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Title
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstName
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_FirstName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MiddleInitial
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_MiddleInitial (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Surname
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_Surname (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Suffix
   (
      this : in out MagneticStripeReaderBankCardDataReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderBankCardDataReceivedEventArgs.all.get_Suffix (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderCapabilities

   procedure Initialize (this : in out MagneticStripeReaderCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderCapabilities, IMagneticStripeReaderCapabilities_Ptr);
   begin
      if this.m_IMagneticStripeReaderCapabilities /= null then
         if this.m_IMagneticStripeReaderCapabilities.all /= null then
            RefCount := this.m_IMagneticStripeReaderCapabilities.all.Release;
            Free (this.m_IMagneticStripeReaderCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderCapabilities

   function get_CardAuthentication
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_CardAuthentication (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportedEncryptionAlgorithms
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_SupportedEncryptionAlgorithms (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AuthenticationLevel
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderAuthenticationLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderAuthenticationLevel;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_AuthenticationLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsIsoSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsIsoSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsJisOneSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsJisOneSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsJisTwoSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsJisTwoSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerReportingType
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosPowerReportingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosPowerReportingType;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_PowerReportingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsReportingSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsStatisticsReportingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsUpdatingSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsStatisticsUpdatingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTrackDataMaskingSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsTrackDataMaskingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTransmitSentinelsSupported
   (
      this : in out MagneticStripeReaderCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMagneticStripeReaderCapabilities.all.get_IsTransmitSentinelsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MagneticStripeReaderCardTypes is

      function get_Unknown_MagneticStripeReaderCardTypes
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderCardTypes");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderCardTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderCardTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Unknown (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Bank
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderCardTypes");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderCardTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderCardTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bank (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Aamva
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderCardTypes");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderCardTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderCardTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Aamva (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ExtendedBase_MagneticStripeReaderCardTypes
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderCardTypes");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderCardTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderCardTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExtendedBase (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end MagneticStripeReaderCardTypes;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MagneticStripeReaderEncryptionAlgorithms is

      function get_None
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderEncryptionAlgorithmsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderEncryptionAlgorithmsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_None (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TripleDesDukpt
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderEncryptionAlgorithmsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderEncryptionAlgorithmsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TripleDesDukpt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ExtendedBase_MagneticStripeReaderEncryptionAlgorithms
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IMagneticStripeReaderEncryptionAlgorithmsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMagneticStripeReaderEncryptionAlgorithmsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExtendedBase (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end MagneticStripeReaderEncryptionAlgorithms;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderErrorOccurredEventArgs

   procedure Initialize (this : in out MagneticStripeReaderErrorOccurredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderErrorOccurredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderErrorOccurredEventArgs, IMagneticStripeReaderErrorOccurredEventArgs_Ptr);
   begin
      if this.m_IMagneticStripeReaderErrorOccurredEventArgs /= null then
         if this.m_IMagneticStripeReaderErrorOccurredEventArgs.all /= null then
            RefCount := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.Release;
            Free (this.m_IMagneticStripeReaderErrorOccurredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderErrorOccurredEventArgs

   function get_Track1Status
   (
      this : in out MagneticStripeReaderErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType;
   begin
      Hr := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.get_Track1Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Track2Status
   (
      this : in out MagneticStripeReaderErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType;
   begin
      Hr := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.get_Track2Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Track3Status
   (
      this : in out MagneticStripeReaderErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType;
   begin
      Hr := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.get_Track3Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Track4Status
   (
      this : in out MagneticStripeReaderErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderTrackErrorType;
   begin
      Hr := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.get_Track4Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorData
   (
      this : in out MagneticStripeReaderErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosErrorData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IUnifiedPosErrorData;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.UnifiedPosErrorData do
         Hr := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.get_ErrorData (m_ComRetVal'Access);
         Retval.m_IUnifiedPosErrorData := new Windows.Devices.PointOfService.IUnifiedPosErrorData;
         Retval.m_IUnifiedPosErrorData.all := m_ComRetVal;
      end return;
   end;

   function get_PartialInputData
   (
      this : in out MagneticStripeReaderErrorOccurredEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderReport;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport do
         Hr := this.m_IMagneticStripeReaderErrorOccurredEventArgs.all.get_PartialInputData (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderReport := new Windows.Devices.PointOfService.IMagneticStripeReaderReport;
         Retval.m_IMagneticStripeReaderReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderReport

   procedure Initialize (this : in out MagneticStripeReaderReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderReport, IMagneticStripeReaderReport_Ptr);
   begin
      if this.m_IMagneticStripeReaderReport /= null then
         if this.m_IMagneticStripeReaderReport.all /= null then
            RefCount := this.m_IMagneticStripeReaderReport.all.Release;
            Free (this.m_IMagneticStripeReaderReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderReport

   function get_CardType
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMagneticStripeReaderReport.all.get_CardType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Track1
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData do
         Hr := this.m_IMagneticStripeReaderReport.all.get_Track1 (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderTrackData := new Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
         Retval.m_IMagneticStripeReaderTrackData.all := m_ComRetVal;
      end return;
   end;

   function get_Track2
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData do
         Hr := this.m_IMagneticStripeReaderReport.all.get_Track2 (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderTrackData := new Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
         Retval.m_IMagneticStripeReaderTrackData.all := m_ComRetVal;
      end return;
   end;

   function get_Track3
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData do
         Hr := this.m_IMagneticStripeReaderReport.all.get_Track3 (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderTrackData := new Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
         Retval.m_IMagneticStripeReaderTrackData.all := m_ComRetVal;
      end return;
   end;

   function get_Track4
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderTrackData do
         Hr := this.m_IMagneticStripeReaderReport.all.get_Track4 (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderTrackData := new Windows.Devices.PointOfService.IMagneticStripeReaderTrackData;
         Retval.m_IMagneticStripeReaderTrackData.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out MagneticStripeReaderReport
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
   begin
      Hr := this.m_IMagneticStripeReaderReport.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CardAuthenticationData
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMagneticStripeReaderReport.all.get_CardAuthenticationData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CardAuthenticationDataLength
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMagneticStripeReaderReport.all.get_CardAuthenticationDataLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdditionalSecurityInformation
   (
      this : in out MagneticStripeReaderReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMagneticStripeReaderReport.all.get_AdditionalSecurityInformation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderStatusUpdatedEventArgs

   procedure Initialize (this : in out MagneticStripeReaderStatusUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderStatusUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderStatusUpdatedEventArgs, IMagneticStripeReaderStatusUpdatedEventArgs_Ptr);
   begin
      if this.m_IMagneticStripeReaderStatusUpdatedEventArgs /= null then
         if this.m_IMagneticStripeReaderStatusUpdatedEventArgs.all /= null then
            RefCount := this.m_IMagneticStripeReaderStatusUpdatedEventArgs.all.Release;
            Free (this.m_IMagneticStripeReaderStatusUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderStatusUpdatedEventArgs

   function get_Status
   (
      this : in out MagneticStripeReaderStatusUpdatedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.MagneticStripeReaderStatus;
   begin
      Hr := this.m_IMagneticStripeReaderStatusUpdatedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedStatus
   (
      this : in out MagneticStripeReaderStatusUpdatedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMagneticStripeReaderStatusUpdatedEventArgs.all.get_ExtendedStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderTrackData

   procedure Initialize (this : in out MagneticStripeReaderTrackData) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderTrackData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderTrackData, IMagneticStripeReaderTrackData_Ptr);
   begin
      if this.m_IMagneticStripeReaderTrackData /= null then
         if this.m_IMagneticStripeReaderTrackData.all /= null then
            RefCount := this.m_IMagneticStripeReaderTrackData.all.Release;
            Free (this.m_IMagneticStripeReaderTrackData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderTrackData

   function get_Data
   (
      this : in out MagneticStripeReaderTrackData
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMagneticStripeReaderTrackData.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DiscretionaryData
   (
      this : in out MagneticStripeReaderTrackData
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMagneticStripeReaderTrackData.all.get_DiscretionaryData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EncryptedData
   (
      this : in out MagneticStripeReaderTrackData
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMagneticStripeReaderTrackData.all.get_EncryptedData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs

   procedure Initialize (this : in out MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs, IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_Ptr);
   begin
      if this.m_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs /= null then
         if this.m_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs.all /= null then
            RefCount := this.m_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs.all.Release;
            Free (this.m_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs

   function get_Report
   (
      this : in out MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IMagneticStripeReaderReport;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.MagneticStripeReaderReport do
         Hr := this.m_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs.all.get_Report (m_ComRetVal'Access);
         Retval.m_IMagneticStripeReaderReport := new Windows.Devices.PointOfService.IMagneticStripeReaderReport;
         Retval.m_IMagneticStripeReaderReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinter

   procedure Initialize (this : in out PosPrinter) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinter, IPosPrinter_Ptr);
   begin
      if this.m_IPosPrinter /= null then
         if this.m_IPosPrinter.all /= null then
            RefCount := this.m_IPosPrinter.all.Release;
            Free (this.m_IPosPrinter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PosPrinter

   function GetDefaultAsync_PosPrinter
   return WinRt.Windows.Devices.PointOfService.PosPrinter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinter");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PosPrinter.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PosPrinter.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IPosPrinter;
      m_IID            : aliased WinRt.IID := (38762446, 20931, 23292, (159, 48, 36, 179, 192, 243, 178, 90 )); -- Windows.Devices.PointOfService.PosPrinter;
      m_HandlerIID     : aliased WinRt.IID := (1586346952, 35680, 22657, (139, 110, 246, 153, 180, 148, 157, 186 ));
      m_Handler        : AsyncOperationCompletedHandler_PosPrinter.Kind := new AsyncOperationCompletedHandler_PosPrinter.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PosPrinter.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PosPrinter.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PosPrinter.Kind_Delegate, AsyncOperationCompletedHandler_PosPrinter.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.PosPrinter do
         Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPosPrinter := new Windows.Devices.PointOfService.IPosPrinter;
                     Retval.m_IPosPrinter.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromIdAsync_PosPrinter
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinter");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PosPrinter.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PosPrinter.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IPosPrinter;
      m_IID            : aliased WinRt.IID := (38762446, 20931, 23292, (159, 48, 36, 179, 192, 243, 178, 90 )); -- Windows.Devices.PointOfService.PosPrinter;
      m_HandlerIID     : aliased WinRt.IID := (1586346952, 35680, 22657, (139, 110, 246, 153, 180, 148, 157, 186 ));
      m_Handler        : AsyncOperationCompletedHandler_PosPrinter.Kind := new AsyncOperationCompletedHandler_PosPrinter.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PosPrinter.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PosPrinter.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PosPrinter.Kind_Delegate, AsyncOperationCompletedHandler_PosPrinter.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.PosPrinter do
         Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPosPrinter := new Windows.Devices.PointOfService.IPosPrinter;
                     Retval.m_IPosPrinter.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector_PosPrinter
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinter");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector_PosPrinter
   (
      connectionTypes : Windows.Devices.PointOfService.PosConnectionTypes
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinter");
      m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (connectionTypes, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinter

   function get_DeviceId
   (
      this : in out PosPrinter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPosPrinter.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Capabilities
   (
      this : in out PosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IPosPrinterCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.PosPrinterCapabilities do
         Hr := this.m_IPosPrinter.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_IPosPrinterCapabilities := new Windows.Devices.PointOfService.IPosPrinterCapabilities;
         Retval.m_IPosPrinterCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_SupportedCharacterSets
   (
      this : in out PosPrinter
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IPosPrinter.all.get_SupportedCharacterSets (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedTypeFaces
   (
      this : in out PosPrinter
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPosPrinter.all.get_SupportedTypeFaces (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Status
   (
      this : in out PosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IPosPrinterStatus;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.PosPrinterStatus do
         Hr := this.m_IPosPrinter.all.get_Status (m_ComRetVal'Access);
         Retval.m_IPosPrinterStatus := new Windows.Devices.PointOfService.IPosPrinterStatus;
         Retval.m_IPosPrinterStatus.all := m_ComRetVal;
      end return;
   end;

   function ClaimPrinterAsync
   (
      this : in out PosPrinter
   )
   return WinRt.Windows.Devices.PointOfService.ClaimedPosPrinter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ClaimedPosPrinter.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ClaimedPosPrinter.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.IClaimedPosPrinter;
      m_IID            : aliased WinRt.IID := (3024580501, 13658, 20541, (184, 68, 23, 86, 200, 207, 218, 152 )); -- Windows.Devices.PointOfService.ClaimedPosPrinter;
      m_HandlerIID     : aliased WinRt.IID := (32181699, 15408, 24298, (159, 206, 239, 179, 152, 224, 190, 52 ));
      m_Handler        : AsyncOperationCompletedHandler_ClaimedPosPrinter.Kind := new AsyncOperationCompletedHandler_ClaimedPosPrinter.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ClaimedPosPrinter.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ClaimedPosPrinter.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ClaimedPosPrinter.Kind_Delegate, AsyncOperationCompletedHandler_ClaimedPosPrinter.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ClaimedPosPrinter do
         Hr := this.m_IPosPrinter.all.ClaimPrinterAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IClaimedPosPrinter := new Windows.Devices.PointOfService.IClaimedPosPrinter;
                  Retval.m_IClaimedPosPrinter.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CheckHealthAsync
   (
      this : in out PosPrinter;
      level : Windows.Devices.PointOfService.UnifiedPosHealthCheckLevel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPosPrinter.all.CheckHealthAsync (level, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetStatisticsAsync
   (
      this : in out PosPrinter;
      statisticsCategories : GenericObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPosPrinter.all.GetStatisticsAsync (statisticsCategories, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function add_StatusUpdated
   (
      this : in out PosPrinter;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPosPrinter.all.add_StatusUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusUpdated
   (
      this : in out PosPrinter;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinter.all.remove_StatusUpdated (token);
   end;

   function get_SupportedBarcodeSymbologies
   (
      this : in out PosPrinter
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IPosPrinter_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinter2, WinRt.Windows.Devices.PointOfService.IID_IPosPrinter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPosPrinter.all);
      Hr := m_Interface.get_SupportedBarcodeSymbologies (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetFontProperty
   (
      this : in out PosPrinter;
      typeface : WinRt.WString
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterFontProperty'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IPosPrinterFontProperty;
      HStr_typeface : WinRt.HString := To_HString (typeface);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IPosPrinter_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinter2, WinRt.Windows.Devices.PointOfService.IID_IPosPrinter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.PosPrinterFontProperty do
         m_Interface := QInterface (this.m_IPosPrinter.all);
         Hr := m_Interface.GetFontProperty (HStr_typeface, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPosPrinterFontProperty := new Windows.Devices.PointOfService.IPosPrinterFontProperty;
         Retval.m_IPosPrinterFontProperty.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_typeface);
      end return;
   end;

   procedure Close
   (
      this : in out PosPrinter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IPosPrinter_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPosPrinter.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinterCapabilities

   procedure Initialize (this : in out PosPrinterCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinterCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterCapabilities, IPosPrinterCapabilities_Ptr);
   begin
      if this.m_IPosPrinterCapabilities /= null then
         if this.m_IPosPrinterCapabilities.all /= null then
            RefCount := this.m_IPosPrinterCapabilities.all.Release;
            Free (this.m_IPosPrinterCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinterCapabilities

   function get_PowerReportingType
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosPowerReportingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosPowerReportingType;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_PowerReportingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsReportingSupported
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_IsStatisticsReportingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStatisticsUpdatingSupported
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_IsStatisticsUpdatingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DefaultCharacterSet
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_DefaultCharacterSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasCoverSensor
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_HasCoverSensor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanMapCharacterSet
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_CanMapCharacterSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTransactionSupported
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterCapabilities.all.get_IsTransactionSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Receipt
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.ReceiptPrinterCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IReceiptPrinterCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.ReceiptPrinterCapabilities do
         Hr := this.m_IPosPrinterCapabilities.all.get_Receipt (m_ComRetVal'Access);
         Retval.m_IReceiptPrinterCapabilities := new Windows.Devices.PointOfService.IReceiptPrinterCapabilities;
         Retval.m_IReceiptPrinterCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_Slip
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.SlipPrinterCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.ISlipPrinterCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.SlipPrinterCapabilities do
         Hr := this.m_IPosPrinterCapabilities.all.get_Slip (m_ComRetVal'Access);
         Retval.m_ISlipPrinterCapabilities := new Windows.Devices.PointOfService.ISlipPrinterCapabilities;
         Retval.m_ISlipPrinterCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_Journal
   (
      this : in out PosPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.JournalPrinterCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IJournalPrinterCapabilities;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.JournalPrinterCapabilities do
         Hr := this.m_IPosPrinterCapabilities.all.get_Journal (m_ComRetVal'Access);
         Retval.m_IJournalPrinterCapabilities := new Windows.Devices.PointOfService.IJournalPrinterCapabilities;
         Retval.m_IJournalPrinterCapabilities.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PosPrinterCharacterSetIds is

      function get_Utf16LE
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinterCharacterSetIds");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterCharacterSetIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterCharacterSetIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Utf16LE (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ascii
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinterCharacterSetIds");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterCharacterSetIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterCharacterSetIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ascii (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ansi
      return WinRt.UInt32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinterCharacterSetIds");
         m_Factory        : access WinRt.Windows.Devices.PointOfService.IPosPrinterCharacterSetIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.UInt32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPosPrinterCharacterSetIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ansi (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end PosPrinterCharacterSetIds;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinterFontProperty

   procedure Initialize (this : in out PosPrinterFontProperty) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinterFontProperty) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterFontProperty, IPosPrinterFontProperty_Ptr);
   begin
      if this.m_IPosPrinterFontProperty /= null then
         if this.m_IPosPrinterFontProperty.all /= null then
            RefCount := this.m_IPosPrinterFontProperty.all.Release;
            Free (this.m_IPosPrinterFontProperty);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinterFontProperty

   function get_TypeFace
   (
      this : in out PosPrinterFontProperty
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPosPrinterFontProperty.all.get_TypeFace (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsScalableToAnySize
   (
      this : in out PosPrinterFontProperty
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterFontProperty.all.get_IsScalableToAnySize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CharacterSizes
   (
      this : in out PosPrinterFontProperty
   )
   return IVectorView_SizeUInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SizeUInt32.Kind;
   begin
      Hr := this.m_IPosPrinterFontProperty.all.get_CharacterSizes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SizeUInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinterPrintOptions

   procedure Initialize (this : in out PosPrinterPrintOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinterPrintOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterPrintOptions, IPosPrinterPrintOptions_Ptr);
   begin
      if this.m_IPosPrinterPrintOptions /= null then
         if this.m_IPosPrinterPrintOptions.all /= null then
            RefCount := this.m_IPosPrinterPrintOptions.all.Release;
            Free (this.m_IPosPrinterPrintOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PosPrinterPrintOptions

   function Constructor return PosPrinterPrintOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.PointOfService.PosPrinterPrintOptions");
      m_ComRetVal  : aliased Windows.Devices.PointOfService.IPosPrinterPrintOptions;
   begin
      return RetVal : PosPrinterPrintOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPosPrinterPrintOptions := new Windows.Devices.PointOfService.IPosPrinterPrintOptions;
            Retval.m_IPosPrinterPrintOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinterPrintOptions

   function get_TypeFace
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_TypeFace (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TypeFace
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_TypeFace (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CharacterHeight
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_CharacterHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacterHeight
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_CharacterHeight (value);
   end;

   function get_Bold
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Bold (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Bold
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Bold (value);
   end;

   function get_Italic
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Italic (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Italic
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Italic (value);
   end;

   function get_Underline
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Underline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Underline
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Underline (value);
   end;

   function get_ReverseVideo
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_ReverseVideo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReverseVideo
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_ReverseVideo (value);
   end;

   function get_Strikethrough
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Strikethrough (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Strikethrough
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Strikethrough (value);
   end;

   function get_Superscript
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Superscript (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Superscript
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Superscript (value);
   end;

   function get_Subscript
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Subscript (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Subscript
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Subscript (value);
   end;

   function get_DoubleWide
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_DoubleWide (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DoubleWide
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_DoubleWide (value);
   end;

   function get_DoubleHigh
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_DoubleHigh (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DoubleHigh
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_DoubleHigh (value);
   end;

   function get_Alignment
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterAlignment;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_Alignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Alignment
   (
      this : in out PosPrinterPrintOptions;
      value : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_Alignment (value);
   end;

   function get_CharacterSet
   (
      this : in out PosPrinterPrintOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.get_CharacterSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacterSet
   (
      this : in out PosPrinterPrintOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPosPrinterPrintOptions.all.put_CharacterSet (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinterReleaseDeviceRequestedEventArgs

   procedure Initialize (this : in out PosPrinterReleaseDeviceRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinterReleaseDeviceRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterReleaseDeviceRequestedEventArgs, IPosPrinterReleaseDeviceRequestedEventArgs_Ptr);
   begin
      if this.m_IPosPrinterReleaseDeviceRequestedEventArgs /= null then
         if this.m_IPosPrinterReleaseDeviceRequestedEventArgs.all /= null then
            RefCount := this.m_IPosPrinterReleaseDeviceRequestedEventArgs.all.Release;
            Free (this.m_IPosPrinterReleaseDeviceRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinterReleaseDeviceRequestedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinterStatus

   procedure Initialize (this : in out PosPrinterStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinterStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterStatus, IPosPrinterStatus_Ptr);
   begin
      if this.m_IPosPrinterStatus /= null then
         if this.m_IPosPrinterStatus.all /= null then
            RefCount := this.m_IPosPrinterStatus.all.Release;
            Free (this.m_IPosPrinterStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinterStatus

   function get_StatusKind
   (
      this : in out PosPrinterStatus
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterStatusKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterStatusKind;
   begin
      Hr := this.m_IPosPrinterStatus.all.get_StatusKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedStatus
   (
      this : in out PosPrinterStatus
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPosPrinterStatus.all.get_ExtendedStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PosPrinterStatusUpdatedEventArgs

   procedure Initialize (this : in out PosPrinterStatusUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PosPrinterStatusUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPosPrinterStatusUpdatedEventArgs, IPosPrinterStatusUpdatedEventArgs_Ptr);
   begin
      if this.m_IPosPrinterStatusUpdatedEventArgs /= null then
         if this.m_IPosPrinterStatusUpdatedEventArgs.all /= null then
            RefCount := this.m_IPosPrinterStatusUpdatedEventArgs.all.Release;
            Free (this.m_IPosPrinterStatusUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PosPrinterStatusUpdatedEventArgs

   function get_Status
   (
      this : in out PosPrinterStatusUpdatedEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IPosPrinterStatus;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.PosPrinterStatus do
         Hr := this.m_IPosPrinterStatusUpdatedEventArgs.all.get_Status (m_ComRetVal'Access);
         Retval.m_IPosPrinterStatus := new Windows.Devices.PointOfService.IPosPrinterStatus;
         Retval.m_IPosPrinterStatus.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ReceiptPrintJob

   procedure Initialize (this : in out ReceiptPrintJob) is
   begin
      null;
   end;

   procedure Finalize (this : in out ReceiptPrintJob) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IReceiptPrintJob, IReceiptPrintJob_Ptr);
   begin
      if this.m_IReceiptPrintJob /= null then
         if this.m_IReceiptPrintJob.all /= null then
            RefCount := this.m_IReceiptPrintJob.all.Release;
            Free (this.m_IReceiptPrintJob);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ReceiptPrintJob

   procedure MarkFeed
   (
      this : in out ReceiptPrintJob;
      kind : Windows.Devices.PointOfService.PosPrinterMarkFeedKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptPrintJob.all.MarkFeed (kind);
   end;

   procedure CutPaper
   (
      this : in out ReceiptPrintJob;
      percentage : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptPrintJob.all.CutPaper (percentage);
   end;

   procedure CutPaper
   (
      this : in out ReceiptPrintJob
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptPrintJob.all.CutPaper;
   end;

   procedure StampPaper
   (
      this : in out ReceiptPrintJob
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrintJob2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.StampPaper;
      m_RefCount := m_Interface.Release;
   end;

   procedure Print
   (
      this : in out ReceiptPrintJob;
      data : WinRt.WString;
      printOptions : Windows.Devices.PointOfService.PosPrinterPrintOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrintJob2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.Print (HStr_data, printOptions.m_IPosPrinterPrintOptions.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure FeedPaperByLine
   (
      this : in out ReceiptPrintJob;
      lineCount : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrintJob2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.FeedPaperByLine (lineCount);
      m_RefCount := m_Interface.Release;
   end;

   procedure FeedPaperByMapModeUnit
   (
      this : in out ReceiptPrintJob;
      distance : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrintJob2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrintJob2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.FeedPaperByMapModeUnit (distance);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetBarcodeRotation
   (
      this : in out ReceiptPrintJob;
      value : Windows.Devices.PointOfService.PosPrinterRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetBarcodeRotation (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetPrintRotation
   (
      this : in out ReceiptPrintJob;
      value : Windows.Devices.PointOfService.PosPrinterRotation;
      includeBitmaps : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetPrintRotation (value, includeBitmaps);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetPrintArea
   (
      this : in out ReceiptPrintJob;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetPrintArea (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetBitmap
   (
      this : in out ReceiptPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignment);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetBitmap
   (
      this : in out ReceiptPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignment, width);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetCustomAlignedBitmap
   (
      this : in out ReceiptPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetCustomAlignedBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignmentDistance);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetCustomAlignedBitmap
   (
      this : in out ReceiptPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.SetCustomAlignedBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignmentDistance, width);
      m_RefCount := m_Interface.Release;
   end;

   procedure PrintSavedBitmap
   (
      this : in out ReceiptPrintJob;
      bitmapNumber : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintSavedBitmap (bitmapNumber);
      m_RefCount := m_Interface.Release;
   end;

   procedure DrawRuledLine
   (
      this : in out ReceiptPrintJob;
      positionList : WinRt.WString;
      lineDirection : Windows.Devices.PointOfService.PosPrinterLineDirection;
      lineWidth : WinRt.UInt32;
      lineStyle : Windows.Devices.PointOfService.PosPrinterLineStyle;
      lineColor : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_positionList : WinRt.HString := To_HString (positionList);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.DrawRuledLine (HStr_positionList, lineDirection, lineWidth, lineStyle, lineColor);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_positionList);
   end;

   procedure PrintBarcode
   (
      this : in out ReceiptPrintJob;
      data : WinRt.WString;
      symbology : WinRt.UInt32;
      height : WinRt.UInt32;
      width : WinRt.UInt32;
      textPosition : Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintBarcode (HStr_data, symbology, height, width, textPosition, alignment);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintBarcodeCustomAlign
   (
      this : in out ReceiptPrintJob;
      data : WinRt.WString;
      symbology : WinRt.UInt32;
      height : WinRt.UInt32;
      width : WinRt.UInt32;
      textPosition : Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition;
      alignmentDistance : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintBarcodeCustomAlign (HStr_data, symbology, height, width, textPosition, alignmentDistance);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintBitmap
   (
      this : in out ReceiptPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintBitmap (bitmap.m_IBitmapFrame.all, alignment);
      m_RefCount := m_Interface.Release;
   end;

   procedure PrintBitmap
   (
      this : in out ReceiptPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintBitmap (bitmap.m_IBitmapFrame.all, alignment, width);
      m_RefCount := m_Interface.Release;
   end;

   procedure PrintCustomAlignedBitmap
   (
      this : in out ReceiptPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintCustomAlignedBitmap (bitmap.m_IBitmapFrame.all, alignmentDistance);
      m_RefCount := m_Interface.Release;
   end;

   procedure PrintCustomAlignedBitmap
   (
      this : in out ReceiptPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob, WinRt.Windows.Devices.PointOfService.IID_IReceiptOrSlipJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintCustomAlignedBitmap (bitmap.m_IBitmapFrame.all, alignmentDistance, width);
      m_RefCount := m_Interface.Release;
   end;

   procedure Print
   (
      this : in out ReceiptPrintJob;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.Print (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintLine
   (
      this : in out ReceiptPrintJob;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintLine (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintLine
   (
      this : in out ReceiptPrintJob
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.PrintLine;
      m_RefCount := m_Interface.Release;
   end;

   function ExecuteAsync
   (
      this : in out ReceiptPrintJob
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrintJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrintJob.all);
      Hr := m_Interface.ExecuteAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ReceiptPrinterCapabilities

   procedure Initialize (this : in out ReceiptPrinterCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out ReceiptPrinterCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IReceiptPrinterCapabilities, IReceiptPrinterCapabilities_Ptr);
   begin
      if this.m_IReceiptPrinterCapabilities /= null then
         if this.m_IReceiptPrinterCapabilities.all /= null then
            RefCount := this.m_IReceiptPrinterCapabilities.all.Release;
            Free (this.m_IReceiptPrinterCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ReceiptPrinterCapabilities

   function get_CanCutPaper
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IReceiptPrinterCapabilities.all.get_CanCutPaper (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStampSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IReceiptPrinterCapabilities.all.get_IsStampSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MarkFeedCapabilities
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterMarkFeedCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterMarkFeedCapabilities;
   begin
      Hr := this.m_IReceiptPrinterCapabilities.all.get_MarkFeedCapabilities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsReverseVideoSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsReverseVideoSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsStrikethroughSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsStrikethroughSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSuperscriptSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsSuperscriptSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSubscriptSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsSubscriptSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReversePaperFeedByLineSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsReversePaperFeedByLineSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReversePaperFeedByMapModeUnitSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_IReceiptPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsReversePaperFeedByMapModeUnitSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBarcodeSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsBarcodeSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBitmapSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsBitmapSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsLeft90RotationSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsLeft90RotationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRight90RotationSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsRight90RotationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Is180RotationSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_Is180RotationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPrintAreaSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsPrintAreaSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RuledLineCapabilities
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_RuledLineCapabilities (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedBarcodeRotations
   (
      this : in out ReceiptPrinterCapabilities
   )
   return IVectorView_PosPrinterRotation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_PosPrinterRotation.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedBarcodeRotations (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_PosPrinterRotation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedBitmapRotations
   (
      this : in out ReceiptPrinterCapabilities
   )
   return IVectorView_PosPrinterRotation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_PosPrinterRotation.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedBitmapRotations (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_PosPrinterRotation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsPrinterPresent
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsPrinterPresent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDualColorSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsDualColorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ColorCartridgeCapabilities
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterColorCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterColorCapabilities;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_ColorCartridgeCapabilities (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CartridgeSensors
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterCartridgeSensors is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterCartridgeSensors;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_CartridgeSensors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBoldSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsBoldSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsItalicSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsItalicSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsUnderlineSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsUnderlineSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleHighPrintSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleHighPrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleWidePrintSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleWidePrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleHighDoubleWidePrintSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleHighDoubleWidePrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperEmptySensorSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsPaperEmptySensorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperNearEndSensorSupported
   (
      this : in out ReceiptPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_IsPaperNearEndSensorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedCharactersPerLine
   (
      this : in out ReceiptPrinterCapabilities
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedCharactersPerLine (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SlipPrintJob

   procedure Initialize (this : in out SlipPrintJob) is
   begin
      null;
   end;

   procedure Finalize (this : in out SlipPrintJob) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IReceiptOrSlipJob, IReceiptOrSlipJob_Ptr);
   begin
      if this.m_IReceiptOrSlipJob /= null then
         if this.m_IReceiptOrSlipJob.all /= null then
            RefCount := this.m_IReceiptOrSlipJob.all.Release;
            Free (this.m_IReceiptOrSlipJob);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SlipPrintJob

   procedure Print
   (
      this : in out SlipPrintJob;
      data : WinRt.WString;
      printOptions : Windows.Devices.PointOfService.PosPrinterPrintOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrintJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrintJob, WinRt.Windows.Devices.PointOfService.IID_ISlipPrintJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.Print (HStr_data, printOptions.m_IPosPrinterPrintOptions.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure FeedPaperByLine
   (
      this : in out SlipPrintJob;
      lineCount : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrintJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrintJob, WinRt.Windows.Devices.PointOfService.IID_ISlipPrintJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.FeedPaperByLine (lineCount);
      m_RefCount := m_Interface.Release;
   end;

   procedure FeedPaperByMapModeUnit
   (
      this : in out SlipPrintJob;
      distance : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrintJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrintJob, WinRt.Windows.Devices.PointOfService.IID_ISlipPrintJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.FeedPaperByMapModeUnit (distance);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetBarcodeRotation
   (
      this : in out SlipPrintJob;
      value : Windows.Devices.PointOfService.PosPrinterRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetBarcodeRotation (value);
   end;

   procedure SetPrintRotation
   (
      this : in out SlipPrintJob;
      value : Windows.Devices.PointOfService.PosPrinterRotation;
      includeBitmaps : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetPrintRotation (value, includeBitmaps);
   end;

   procedure SetPrintArea
   (
      this : in out SlipPrintJob;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetPrintArea (value);
   end;

   procedure SetBitmap
   (
      this : in out SlipPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignment);
   end;

   procedure SetBitmap
   (
      this : in out SlipPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignment, width);
   end;

   procedure SetCustomAlignedBitmap
   (
      this : in out SlipPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetCustomAlignedBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignmentDistance);
   end;

   procedure SetCustomAlignedBitmap
   (
      this : in out SlipPrintJob;
      bitmapNumber : WinRt.UInt32;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.SetCustomAlignedBitmap (bitmapNumber, bitmap.m_IBitmapFrame.all, alignmentDistance, width);
   end;

   procedure PrintSavedBitmap
   (
      this : in out SlipPrintJob;
      bitmapNumber : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintSavedBitmap (bitmapNumber);
   end;

   procedure DrawRuledLine
   (
      this : in out SlipPrintJob;
      positionList : WinRt.WString;
      lineDirection : Windows.Devices.PointOfService.PosPrinterLineDirection;
      lineWidth : WinRt.UInt32;
      lineStyle : Windows.Devices.PointOfService.PosPrinterLineStyle;
      lineColor : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_positionList : WinRt.HString := To_HString (positionList);
   begin
      Hr := this.m_IReceiptOrSlipJob.all.DrawRuledLine (HStr_positionList, lineDirection, lineWidth, lineStyle, lineColor);
      Hr := WindowsDeleteString (HStr_positionList);
   end;

   procedure PrintBarcode
   (
      this : in out SlipPrintJob;
      data : WinRt.WString;
      symbology : WinRt.UInt32;
      height : WinRt.UInt32;
      width : WinRt.UInt32;
      textPosition : Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintBarcode (HStr_data, symbology, height, width, textPosition, alignment);
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintBarcodeCustomAlign
   (
      this : in out SlipPrintJob;
      data : WinRt.WString;
      symbology : WinRt.UInt32;
      height : WinRt.UInt32;
      width : WinRt.UInt32;
      textPosition : Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition;
      alignmentDistance : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintBarcodeCustomAlign (HStr_data, symbology, height, width, textPosition, alignmentDistance);
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintBitmap
   (
      this : in out SlipPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintBitmap (bitmap.m_IBitmapFrame.all, alignment);
   end;

   procedure PrintBitmap
   (
      this : in out SlipPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignment : Windows.Devices.PointOfService.PosPrinterAlignment;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintBitmap (bitmap.m_IBitmapFrame.all, alignment, width);
   end;

   procedure PrintCustomAlignedBitmap
   (
      this : in out SlipPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintCustomAlignedBitmap (bitmap.m_IBitmapFrame.all, alignmentDistance);
   end;

   procedure PrintCustomAlignedBitmap
   (
      this : in out SlipPrintJob;
      bitmap : Windows.Graphics.Imaging.BitmapFrame'Class;
      alignmentDistance : WinRt.UInt32;
      width : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReceiptOrSlipJob.all.PrintCustomAlignedBitmap (bitmap.m_IBitmapFrame.all, alignmentDistance, width);
   end;

   procedure Print
   (
      this : in out SlipPrintJob;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.Print (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintLine
   (
      this : in out SlipPrintJob;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.PrintLine (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure PrintLine
   (
      this : in out SlipPrintJob
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.PrintLine;
      m_RefCount := m_Interface.Release;
   end;

   function ExecuteAsync
   (
      this : in out SlipPrintJob
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.IPosPrinterJob := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.IReceiptOrSlipJob_Interface, WinRt.Windows.Devices.PointOfService.IPosPrinterJob, WinRt.Windows.Devices.PointOfService.IID_IPosPrinterJob'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReceiptOrSlipJob.all);
      Hr := m_Interface.ExecuteAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SlipPrinterCapabilities

   procedure Initialize (this : in out SlipPrinterCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out SlipPrinterCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISlipPrinterCapabilities, ISlipPrinterCapabilities_Ptr);
   begin
      if this.m_ISlipPrinterCapabilities /= null then
         if this.m_ISlipPrinterCapabilities.all /= null then
            RefCount := this.m_ISlipPrinterCapabilities.all.Release;
            Free (this.m_ISlipPrinterCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SlipPrinterCapabilities

   function get_IsFullLengthSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISlipPrinterCapabilities.all.get_IsFullLengthSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsBothSidesPrintingSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISlipPrinterCapabilities.all.get_IsBothSidesPrintingSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsReverseVideoSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_ISlipPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsReverseVideoSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsStrikethroughSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_ISlipPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsStrikethroughSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSuperscriptSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_ISlipPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsSuperscriptSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSubscriptSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_ISlipPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsSubscriptSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReversePaperFeedByLineSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_ISlipPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsReversePaperFeedByLineSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsReversePaperFeedByMapModeUnitSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities2, WinRt.Windows.Devices.PointOfService.IID_ISlipPrinterCapabilities2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsReversePaperFeedByMapModeUnitSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBarcodeSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsBarcodeSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBitmapSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsBitmapSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsLeft90RotationSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsLeft90RotationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRight90RotationSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsRight90RotationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Is180RotationSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_Is180RotationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPrintAreaSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsPrintAreaSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RuledLineCapabilities
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_RuledLineCapabilities (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedBarcodeRotations
   (
      this : in out SlipPrinterCapabilities
   )
   return IVectorView_PosPrinterRotation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_PosPrinterRotation.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedBarcodeRotations (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_PosPrinterRotation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedBitmapRotations
   (
      this : in out SlipPrinterCapabilities
   )
   return IVectorView_PosPrinterRotation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_PosPrinterRotation.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonReceiptSlipCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedBitmapRotations (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_PosPrinterRotation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsPrinterPresent
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsPrinterPresent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDualColorSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsDualColorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ColorCartridgeCapabilities
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterColorCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterColorCapabilities;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_ColorCartridgeCapabilities (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CartridgeSensors
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Windows.Devices.PointOfService.PosPrinterCartridgeSensors is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.PosPrinterCartridgeSensors;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_CartridgeSensors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBoldSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsBoldSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsItalicSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsItalicSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsUnderlineSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsUnderlineSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleHighPrintSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleHighPrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleWidePrintSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleWidePrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDoubleHighDoubleWidePrintSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsDoubleHighDoubleWidePrintSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperEmptySensorSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsPaperEmptySensorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPaperNearEndSensorSupported
   (
      this : in out SlipPrinterCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_IsPaperNearEndSensorSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedCharactersPerLine
   (
      this : in out SlipPrinterCapabilities
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.ISlipPrinterCapabilities_Interface, WinRt.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities, WinRt.Windows.Devices.PointOfService.IID_ICommonPosPrintStationCapabilities'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISlipPrinterCapabilities.all);
      Hr := m_Interface.get_SupportedCharactersPerLine (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UnifiedPosErrorData

   procedure Initialize (this : in out UnifiedPosErrorData) is
   begin
      null;
   end;

   procedure Finalize (this : in out UnifiedPosErrorData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUnifiedPosErrorData, IUnifiedPosErrorData_Ptr);
   begin
      if this.m_IUnifiedPosErrorData /= null then
         if this.m_IUnifiedPosErrorData.all /= null then
            RefCount := this.m_IUnifiedPosErrorData.all.Release;
            Free (this.m_IUnifiedPosErrorData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UnifiedPosErrorData

   function Constructor
   (
      message : WinRt.WString;
      severity : Windows.Devices.PointOfService.UnifiedPosErrorSeverity;
      reason : Windows.Devices.PointOfService.UnifiedPosErrorReason;
      extendedReason : WinRt.UInt32
   )
   return UnifiedPosErrorData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.PointOfService.UnifiedPosErrorData");
      m_Factory    : access IUnifiedPosErrorDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.PointOfService.IUnifiedPosErrorData;
      HStr_message : WinRt.HString := To_HString (message);
   begin
      return RetVal : UnifiedPosErrorData do
         Hr := RoGetActivationFactory (m_hString, IID_IUnifiedPosErrorDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (HStr_message, severity, reason, extendedReason, m_ComRetVal'Access);
            Retval.m_IUnifiedPosErrorData := new Windows.Devices.PointOfService.IUnifiedPosErrorData;
            Retval.m_IUnifiedPosErrorData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_message);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UnifiedPosErrorData

   function get_Message
   (
      this : in out UnifiedPosErrorData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUnifiedPosErrorData.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Severity
   (
      this : in out UnifiedPosErrorData
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosErrorSeverity;
   begin
      Hr := this.m_IUnifiedPosErrorData.all.get_Severity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Reason
   (
      this : in out UnifiedPosErrorData
   )
   return WinRt.Windows.Devices.PointOfService.UnifiedPosErrorReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.UnifiedPosErrorReason;
   begin
      Hr := this.m_IUnifiedPosErrorData.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedReason
   (
      this : in out UnifiedPosErrorData
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUnifiedPosErrorData.all.get_ExtendedReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

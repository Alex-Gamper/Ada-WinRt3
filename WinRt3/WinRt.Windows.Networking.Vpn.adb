--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Security.Cryptography.Certificates;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.Vpn is

   package IAsyncOperation_VpnCredential is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Vpn.IVpnCredential);
   package AsyncOperationCompletedHandler_VpnCredential is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Vpn.IVpnCredential);

   package IAsyncOperation_VpnManagementErrorStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus);
   package AsyncOperationCompletedHandler_VpnManagementErrorStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IIterable_IVpnPacketBuffer is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Networking.Vpn.IVpnPacketBuffer);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnAppId

   procedure Initialize (this : in out VpnAppId) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnAppId) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnAppId, IVpnAppId_Ptr);
   begin
      if this.m_IVpnAppId /= null then
         if this.m_IVpnAppId.all /= null then
            RefCount := this.m_IVpnAppId.all.Release;
            Free (this.m_IVpnAppId);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnAppId

   function Constructor
   (
      type_x : Windows.Networking.Vpn.VpnAppIdType;
      value : WinRt.WString
   )
   return VpnAppId is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnAppId");
      m_Factory    : access IVpnAppIdFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnAppId;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : VpnAppId do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnAppIdFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (type_x, HStr_value, m_ComRetVal'Access);
            Retval.m_IVpnAppId := new Windows.Networking.Vpn.IVpnAppId;
            Retval.m_IVpnAppId.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnAppId

   function get_Type
   (
      this : in out VpnAppId
   )
   return WinRt.Windows.Networking.Vpn.VpnAppIdType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnAppIdType;
   begin
      Hr := this.m_IVpnAppId.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Type
   (
      this : in out VpnAppId;
      value : Windows.Networking.Vpn.VpnAppIdType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnAppId.all.put_Type (value);
   end;

   function get_Value
   (
      this : in out VpnAppId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnAppId.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out VpnAppId;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnAppId.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnChannel

   procedure Initialize (this : in out VpnChannel) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnChannel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnChannel, IVpnChannel_Ptr);
   begin
      if this.m_IVpnChannel /= null then
         if this.m_IVpnChannel.all /= null then
            RefCount := this.m_IVpnChannel.all.Release;
            Free (this.m_IVpnChannel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VpnChannel

   procedure ProcessEventAsync
   (
      thirdPartyPlugIn : WinRt.IInspectable;
      event : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnChannel");
      m_Factory        : access WinRt.Windows.Networking.Vpn.IVpnChannelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVpnChannelStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ProcessEventAsync (thirdPartyPlugIn, event);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnChannel

   procedure AssociateTransport
   (
      this : in out VpnChannel;
      mainOuterTunnelTransport : WinRt.IInspectable;
      optionalOuterTunnelTransport : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.AssociateTransport (mainOuterTunnelTransport, optionalOuterTunnelTransport);
   end;

   procedure Start
   (
      this : in out VpnChannel;
      assignedClientIPv4list : GenericObject;
      assignedClientIPv6list : GenericObject;
      vpnInterfaceId_p : Windows.Networking.Vpn.VpnInterfaceId'Class;
      routeScope : Windows.Networking.Vpn.VpnRouteAssignment'Class;
      namespaceScope : Windows.Networking.Vpn.VpnNamespaceAssignment'Class;
      mtuSize : WinRt.UInt32;
      maxFrameSize : WinRt.UInt32;
      optimizeForLowCostNetwork : WinRt.Boolean;
      mainOuterTunnelTransport : WinRt.IInspectable;
      optionalOuterTunnelTransport : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.Start (assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId_p.m_IVpnInterfaceId.all, routeScope.m_IVpnRouteAssignment.all, namespaceScope.m_IVpnNamespaceAssignment.all, mtuSize, maxFrameSize, optimizeForLowCostNetwork, mainOuterTunnelTransport, optionalOuterTunnelTransport);
   end;

   procedure Stop
   (
      this : in out VpnChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.Stop;
   end;

   function RequestCredentials
   (
      this : in out VpnChannel;
      credType : Windows.Networking.Vpn.VpnCredentialType;
      isRetry : WinRt.Boolean;
      isSingleSignOnCredential : WinRt.Boolean;
      certificate : Windows.Security.Cryptography.Certificates.Certificate'Class
   )
   return WinRt.Windows.Networking.Vpn.VpnPickedCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnPickedCredential;
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnPickedCredential do
         Hr := this.m_IVpnChannel.all.RequestCredentials (credType, isRetry, isSingleSignOnCredential, certificate.m_ICertificate.all, m_ComRetVal'Access);
         Retval.m_IVpnPickedCredential := new Windows.Networking.Vpn.IVpnPickedCredential;
         Retval.m_IVpnPickedCredential.all := m_ComRetVal;
      end return;
   end;

   procedure RequestVpnPacketBuffer
   (
      this : in out VpnChannel;
      type_x : Windows.Networking.Vpn.VpnDataPathType;
      vpnPacketBuffer_p : access Windows.Networking.Vpn.IVpnPacketBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.RequestVpnPacketBuffer (type_x, vpnPacketBuffer_p);
   end;

   procedure LogDiagnosticMessage
   (
      this : in out VpnChannel;
      message : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_message : WinRt.HString := To_HString (message);
   begin
      Hr := this.m_IVpnChannel.all.LogDiagnosticMessage (HStr_message);
      Hr := WindowsDeleteString (HStr_message);
   end;

   function get_Id
   (
      this : in out VpnChannel
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVpnChannel.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Configuration
   (
      this : in out VpnChannel
   )
   return WinRt.Windows.Networking.Vpn.VpnChannelConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnChannelConfiguration;
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnChannelConfiguration do
         Hr := this.m_IVpnChannel.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IVpnChannelConfiguration := new Windows.Networking.Vpn.IVpnChannelConfiguration;
         Retval.m_IVpnChannelConfiguration.all := m_ComRetVal;
      end return;
   end;

   function add_ActivityChange
   (
      this : in out VpnChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVpnChannel.all.add_ActivityChange (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ActivityChange
   (
      this : in out VpnChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.remove_ActivityChange (token);
   end;

   procedure put_PlugInContext
   (
      this : in out VpnChannel;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.put_PlugInContext (value);
   end;

   function get_PlugInContext
   (
      this : in out VpnChannel
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IVpnChannel.all.get_PlugInContext (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemHealth
   (
      this : in out VpnChannel
   )
   return WinRt.Windows.Networking.Vpn.VpnSystemHealth'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnSystemHealth;
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnSystemHealth do
         Hr := this.m_IVpnChannel.all.get_SystemHealth (m_ComRetVal'Access);
         Retval.m_IVpnSystemHealth := new Windows.Networking.Vpn.IVpnSystemHealth;
         Retval.m_IVpnSystemHealth.all := m_ComRetVal;
      end return;
   end;

   procedure RequestCustomPrompt
   (
      this : in out VpnChannel;
      customPrompt : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.RequestCustomPrompt (customPrompt);
   end;

   procedure SetErrorMessage
   (
      this : in out VpnChannel;
      message : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_message : WinRt.HString := To_HString (message);
   begin
      Hr := this.m_IVpnChannel.all.SetErrorMessage (HStr_message);
      Hr := WindowsDeleteString (HStr_message);
   end;

   procedure SetAllowedSslTlsVersions
   (
      this : in out VpnChannel;
      tunnelTransport : WinRt.IInspectable;
      useTls12 : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnChannel.all.SetAllowedSslTlsVersions (tunnelTransport, useTls12);
   end;

   procedure StartWithMainTransport
   (
      this : in out VpnChannel;
      assignedClientIPv4list : GenericObject;
      assignedClientIPv6list : GenericObject;
      vpnInterfaceId_p : Windows.Networking.Vpn.VpnInterfaceId'Class;
      assignedRoutes : Windows.Networking.Vpn.VpnRouteAssignment'Class;
      assignedDomainName : Windows.Networking.Vpn.VpnDomainNameAssignment'Class;
      mtuSize : WinRt.UInt32;
      maxFrameSize : WinRt.UInt32;
      Reserved : WinRt.Boolean;
      mainOuterTunnelTransport : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.StartWithMainTransport (assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId_p.m_IVpnInterfaceId.all, assignedRoutes.m_IVpnRouteAssignment.all, assignedDomainName.m_IVpnDomainNameAssignment.all, mtuSize, maxFrameSize, Reserved, mainOuterTunnelTransport);
      m_RefCount := m_Interface.Release;
   end;

   procedure StartExistingTransports
   (
      this : in out VpnChannel;
      assignedClientIPv4list : GenericObject;
      assignedClientIPv6list : GenericObject;
      vpnInterfaceId_p : Windows.Networking.Vpn.VpnInterfaceId'Class;
      assignedRoutes : Windows.Networking.Vpn.VpnRouteAssignment'Class;
      assignedDomainName : Windows.Networking.Vpn.VpnDomainNameAssignment'Class;
      mtuSize : WinRt.UInt32;
      maxFrameSize : WinRt.UInt32;
      Reserved : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.StartExistingTransports (assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId_p.m_IVpnInterfaceId.all, assignedRoutes.m_IVpnRouteAssignment.all, assignedDomainName.m_IVpnDomainNameAssignment.all, mtuSize, maxFrameSize, Reserved);
      m_RefCount := m_Interface.Release;
   end;

   function add_ActivityStateChange
   (
      this : in out VpnChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.add_ActivityStateChange (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ActivityStateChange
   (
      this : in out VpnChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.remove_ActivityStateChange (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetVpnSendPacketBuffer
   (
      this : in out VpnChannel
   )
   return WinRt.Windows.Networking.Vpn.VpnPacketBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnPacketBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnPacketBuffer do
         m_Interface := QInterface (this.m_IVpnChannel.all);
         Hr := m_Interface.GetVpnSendPacketBuffer (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVpnPacketBuffer := new Windows.Networking.Vpn.IVpnPacketBuffer;
         Retval.m_IVpnPacketBuffer.all := m_ComRetVal;
      end return;
   end;

   function GetVpnReceivePacketBuffer
   (
      this : in out VpnChannel
   )
   return WinRt.Windows.Networking.Vpn.VpnPacketBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnPacketBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnPacketBuffer do
         m_Interface := QInterface (this.m_IVpnChannel.all);
         Hr := m_Interface.GetVpnReceivePacketBuffer (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVpnPacketBuffer := new Windows.Networking.Vpn.IVpnPacketBuffer;
         Retval.m_IVpnPacketBuffer.all := m_ComRetVal;
      end return;
   end;

   procedure RequestCustomPromptAsync
   (
      this : in out VpnChannel;
      customPromptElement : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.RequestCustomPromptAsync (customPromptElement, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function RequestCredentialsAsync
   (
      this : in out VpnChannel;
      credType : Windows.Networking.Vpn.VpnCredentialType;
      credOptions : WinRt.UInt32;
      certificate : Windows.Security.Cryptography.Certificates.Certificate'Class
   )
   return WinRt.Windows.Networking.Vpn.VpnCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnCredential.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnCredential.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.IVpnCredential;
      m_IID            : aliased WinRt.IID := (560623511, 56225, 24433, (161, 75, 40, 24, 173, 60, 76, 105 )); -- Windows.Networking.Vpn.VpnCredential;
      m_HandlerIID     : aliased WinRt.IID := (480003332, 19317, 22506, (131, 125, 83, 56, 53, 139, 183, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnCredential.Kind := new AsyncOperationCompletedHandler_VpnCredential.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnCredential.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnCredential.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnCredential.Kind_Delegate, AsyncOperationCompletedHandler_VpnCredential.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnCredential do
         m_Interface := QInterface (this.m_IVpnChannel.all);
         Hr := m_Interface.RequestCredentialsAsync (credType, credOptions, certificate.m_ICertificate.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVpnCredential := new Windows.Networking.Vpn.IVpnCredential;
                  Retval.m_IVpnCredential.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestCredentialsAsync
   (
      this : in out VpnChannel;
      credType : Windows.Networking.Vpn.VpnCredentialType;
      credOptions : WinRt.UInt32
   )
   return WinRt.Windows.Networking.Vpn.VpnCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnCredential.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnCredential.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.IVpnCredential;
      m_IID            : aliased WinRt.IID := (560623511, 56225, 24433, (161, 75, 40, 24, 173, 60, 76, 105 )); -- Windows.Networking.Vpn.VpnCredential;
      m_HandlerIID     : aliased WinRt.IID := (480003332, 19317, 22506, (131, 125, 83, 56, 53, 139, 183, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnCredential.Kind := new AsyncOperationCompletedHandler_VpnCredential.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnCredential.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnCredential.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnCredential.Kind_Delegate, AsyncOperationCompletedHandler_VpnCredential.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnCredential do
         m_Interface := QInterface (this.m_IVpnChannel.all);
         Hr := m_Interface.RequestCredentialsAsync (credType, credOptions, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVpnCredential := new Windows.Networking.Vpn.IVpnCredential;
                  Retval.m_IVpnCredential.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestCredentialsAsync
   (
      this : in out VpnChannel;
      credType : Windows.Networking.Vpn.VpnCredentialType
   )
   return WinRt.Windows.Networking.Vpn.VpnCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnCredential.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnCredential.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.IVpnCredential;
      m_IID            : aliased WinRt.IID := (560623511, 56225, 24433, (161, 75, 40, 24, 173, 60, 76, 105 )); -- Windows.Networking.Vpn.VpnCredential;
      m_HandlerIID     : aliased WinRt.IID := (480003332, 19317, 22506, (131, 125, 83, 56, 53, 139, 183, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnCredential.Kind := new AsyncOperationCompletedHandler_VpnCredential.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnCredential.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnCredential.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnCredential.Kind_Delegate, AsyncOperationCompletedHandler_VpnCredential.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnCredential do
         m_Interface := QInterface (this.m_IVpnChannel.all);
         Hr := m_Interface.RequestCredentialsAsync (credType, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVpnCredential := new Windows.Networking.Vpn.IVpnCredential;
                  Retval.m_IVpnCredential.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure TerminateConnection
   (
      this : in out VpnChannel;
      message : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_message : WinRt.HString := To_HString (message);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.TerminateConnection (HStr_message);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_message);
   end;

   procedure StartWithTrafficFilter
   (
      this : in out VpnChannel;
      assignedClientIpv4List : GenericObject;
      assignedClientIpv6List : GenericObject;
      vpnInterfaceId_p : Windows.Networking.Vpn.VpnInterfaceId'Class;
      assignedRoutes : Windows.Networking.Vpn.VpnRouteAssignment'Class;
      assignedNamespace : Windows.Networking.Vpn.VpnDomainNameAssignment'Class;
      mtuSize : WinRt.UInt32;
      maxFrameSize : WinRt.UInt32;
      reserved : WinRt.Boolean;
      mainOuterTunnelTransport : WinRt.IInspectable;
      optionalOuterTunnelTransport : WinRt.IInspectable;
      assignedTrafficFilters : Windows.Networking.Vpn.VpnTrafficFilterAssignment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel2, WinRt.Windows.Networking.Vpn.IID_IVpnChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.StartWithTrafficFilter (assignedClientIpv4List, assignedClientIpv6List, vpnInterfaceId_p.m_IVpnInterfaceId.all, assignedRoutes.m_IVpnRouteAssignment.all, assignedNamespace.m_IVpnDomainNameAssignment.all, mtuSize, maxFrameSize, reserved, mainOuterTunnelTransport, optionalOuterTunnelTransport, assignedTrafficFilters.m_IVpnTrafficFilterAssignment.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddAndAssociateTransport
   (
      this : in out VpnChannel;
      transport : WinRt.IInspectable;
      context : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel4, WinRt.Windows.Networking.Vpn.IID_IVpnChannel4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.AddAndAssociateTransport (transport, context);
      m_RefCount := m_Interface.Release;
   end;

   procedure StartWithTrafficFilter
   (
      this : in out VpnChannel;
      assignedClientIpv4Addresses : GenericObject;
      assignedClientIpv6Addresses : GenericObject;
      vpninterfaceId_p : Windows.Networking.Vpn.VpnInterfaceId'Class;
      assignedRoutes : Windows.Networking.Vpn.VpnRouteAssignment'Class;
      assignedNamespace : Windows.Networking.Vpn.VpnDomainNameAssignment'Class;
      mtuSize : WinRt.UInt32;
      maxFrameSize : WinRt.UInt32;
      reserved : WinRt.Boolean;
      transports : GenericObject;
      assignedTrafficFilters : Windows.Networking.Vpn.VpnTrafficFilterAssignment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel4, WinRt.Windows.Networking.Vpn.IID_IVpnChannel4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.StartWithTrafficFilter (assignedClientIpv4Addresses, assignedClientIpv6Addresses, vpninterfaceId_p.m_IVpnInterfaceId.all, assignedRoutes.m_IVpnRouteAssignment.all, assignedNamespace.m_IVpnDomainNameAssignment.all, mtuSize, maxFrameSize, reserved, transports, assignedTrafficFilters.m_IVpnTrafficFilterAssignment.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure ReplaceAndAssociateTransport
   (
      this : in out VpnChannel;
      transport : WinRt.IInspectable;
      context : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel4, WinRt.Windows.Networking.Vpn.IID_IVpnChannel4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.ReplaceAndAssociateTransport (transport, context);
      m_RefCount := m_Interface.Release;
   end;

   procedure StartReconnectingTransport
   (
      this : in out VpnChannel;
      transport : WinRt.IInspectable;
      context : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel4, WinRt.Windows.Networking.Vpn.IID_IVpnChannel4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.StartReconnectingTransport (transport, context);
      m_RefCount := m_Interface.Release;
   end;

   function GetSlotTypeForTransportContext
   (
      this : in out VpnChannel;
      context : WinRt.IInspectable
   )
   return WinRt.Windows.Networking.Sockets.ControlChannelTriggerStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.ControlChannelTriggerStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel4, WinRt.Windows.Networking.Vpn.IID_IVpnChannel4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.GetSlotTypeForTransportContext (context, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CurrentRequestTransportContext
   (
      this : in out VpnChannel
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannel4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannel_Interface, WinRt.Windows.Networking.Vpn.IVpnChannel4, WinRt.Windows.Networking.Vpn.IID_IVpnChannel4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannel.all);
      Hr := m_Interface.get_CurrentRequestTransportContext (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnChannelActivityEventArgs

   procedure Initialize (this : in out VpnChannelActivityEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnChannelActivityEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnChannelActivityEventArgs, IVpnChannelActivityEventArgs_Ptr);
   begin
      if this.m_IVpnChannelActivityEventArgs /= null then
         if this.m_IVpnChannelActivityEventArgs.all /= null then
            RefCount := this.m_IVpnChannelActivityEventArgs.all.Release;
            Free (this.m_IVpnChannelActivityEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnChannelActivityEventArgs

   function get_Type
   (
      this : in out VpnChannelActivityEventArgs
   )
   return WinRt.Windows.Networking.Vpn.VpnChannelActivityEventType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnChannelActivityEventType;
   begin
      Hr := this.m_IVpnChannelActivityEventArgs.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnChannelActivityStateChangedArgs

   procedure Initialize (this : in out VpnChannelActivityStateChangedArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnChannelActivityStateChangedArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnChannelActivityStateChangedArgs, IVpnChannelActivityStateChangedArgs_Ptr);
   begin
      if this.m_IVpnChannelActivityStateChangedArgs /= null then
         if this.m_IVpnChannelActivityStateChangedArgs.all /= null then
            RefCount := this.m_IVpnChannelActivityStateChangedArgs.all.Release;
            Free (this.m_IVpnChannelActivityStateChangedArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnChannelActivityStateChangedArgs

   function get_ActivityState
   (
      this : in out VpnChannelActivityStateChangedArgs
   )
   return WinRt.Windows.Networking.Vpn.VpnChannelActivityEventType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnChannelActivityEventType;
   begin
      Hr := this.m_IVpnChannelActivityStateChangedArgs.all.get_ActivityState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnChannelConfiguration

   procedure Initialize (this : in out VpnChannelConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnChannelConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnChannelConfiguration, IVpnChannelConfiguration_Ptr);
   begin
      if this.m_IVpnChannelConfiguration /= null then
         if this.m_IVpnChannelConfiguration.all /= null then
            RefCount := this.m_IVpnChannelConfiguration.all.Release;
            Free (this.m_IVpnChannelConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnChannelConfiguration

   function get_ServerServiceName
   (
      this : in out VpnChannelConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnChannelConfiguration.all.get_ServerServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServerHostNameList
   (
      this : in out VpnChannelConfiguration
   )
   return IVectorView_IHostName.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHostName.Kind;
   begin
      Hr := this.m_IVpnChannelConfiguration.all.get_ServerHostNameList (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHostName (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CustomField
   (
      this : in out VpnChannelConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnChannelConfiguration.all.get_CustomField (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServerUris
   (
      this : in out VpnChannelConfiguration
   )
   return IVectorView_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnChannelConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IUriRuntimeClass.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnChannelConfiguration_Interface, WinRt.Windows.Networking.Vpn.IVpnChannelConfiguration2, WinRt.Windows.Networking.Vpn.IID_IVpnChannelConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnChannelConfiguration.all);
      Hr := m_Interface.get_ServerUris (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCredential

   procedure Initialize (this : in out VpnCredential) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCredential) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCredential, IVpnCredential_Ptr);
   begin
      if this.m_IVpnCredential /= null then
         if this.m_IVpnCredential.all /= null then
            RefCount := this.m_IVpnCredential.all.Release;
            Free (this.m_IVpnCredential);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCredential

   function get_PasskeyCredential
   (
      this : in out VpnCredential
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IVpnCredential.all.get_PasskeyCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   function get_CertificateCredential
   (
      this : in out VpnCredential
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IVpnCredential.all.get_CertificateCredential (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_AdditionalPin
   (
      this : in out VpnCredential
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCredential.all.get_AdditionalPin (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_OldPasswordCredential
   (
      this : in out VpnCredential
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IVpnCredential.all.get_OldPasswordCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomCheckBox

   procedure Initialize (this : in out VpnCustomCheckBox) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomCheckBox) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomCheckBox, IVpnCustomCheckBox_Ptr);
   begin
      if this.m_IVpnCustomCheckBox /= null then
         if this.m_IVpnCustomCheckBox.all /= null then
            RefCount := this.m_IVpnCustomCheckBox.all.Release;
            Free (this.m_IVpnCustomCheckBox);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomCheckBox

   function Constructor return VpnCustomCheckBox is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomCheckBox");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomCheckBox;
   begin
      return RetVal : VpnCustomCheckBox do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomCheckBox := new Windows.Networking.Vpn.IVpnCustomCheckBox;
            Retval.m_IVpnCustomCheckBox.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomCheckBox

   procedure put_InitialCheckState
   (
      this : in out VpnCustomCheckBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnCustomCheckBox.all.put_InitialCheckState (value);
   end;

   function get_InitialCheckState
   (
      this : in out VpnCustomCheckBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnCustomCheckBox.all.get_InitialCheckState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Checked
   (
      this : in out VpnCustomCheckBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnCustomCheckBox.all.get_Checked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Label
   (
      this : in out VpnCustomCheckBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomCheckBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomCheckBox.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VpnCustomCheckBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomCheckBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomCheckBox.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomCheckBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomCheckBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomCheckBox.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomCheckBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomCheckBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomCheckBox.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Bordered
   (
      this : in out VpnCustomCheckBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomCheckBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomCheckBox.all);
      Hr := m_Interface.put_Bordered (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bordered
   (
      this : in out VpnCustomCheckBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomCheckBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomCheckBox.all);
      Hr := m_Interface.get_Bordered (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomComboBox

   procedure Initialize (this : in out VpnCustomComboBox) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomComboBox) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomComboBox, IVpnCustomComboBox_Ptr);
   begin
      if this.m_IVpnCustomComboBox /= null then
         if this.m_IVpnCustomComboBox.all /= null then
            RefCount := this.m_IVpnCustomComboBox.all.Release;
            Free (this.m_IVpnCustomComboBox);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomComboBox

   function Constructor return VpnCustomComboBox is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomComboBox");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomComboBox;
   begin
      return RetVal : VpnCustomComboBox do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomComboBox := new Windows.Networking.Vpn.IVpnCustomComboBox;
            Retval.m_IVpnCustomComboBox.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomComboBox

   procedure put_OptionsText
   (
      this : in out VpnCustomComboBox;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnCustomComboBox.all.put_OptionsText (value);
   end;

   function get_OptionsText
   (
      this : in out VpnCustomComboBox
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IVpnCustomComboBox.all.get_OptionsText (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Selected
   (
      this : in out VpnCustomComboBox
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVpnCustomComboBox.all.get_Selected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Label
   (
      this : in out VpnCustomComboBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomComboBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomComboBox.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VpnCustomComboBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomComboBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomComboBox.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomComboBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomComboBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomComboBox.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomComboBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomComboBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomComboBox.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Bordered
   (
      this : in out VpnCustomComboBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomComboBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomComboBox.all);
      Hr := m_Interface.put_Bordered (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bordered
   (
      this : in out VpnCustomComboBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomComboBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomComboBox.all);
      Hr := m_Interface.get_Bordered (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomEditBox

   procedure Initialize (this : in out VpnCustomEditBox) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomEditBox) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomEditBox, IVpnCustomEditBox_Ptr);
   begin
      if this.m_IVpnCustomEditBox /= null then
         if this.m_IVpnCustomEditBox.all /= null then
            RefCount := this.m_IVpnCustomEditBox.all.Release;
            Free (this.m_IVpnCustomEditBox);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomEditBox

   function Constructor return VpnCustomEditBox is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomEditBox");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomEditBox;
   begin
      return RetVal : VpnCustomEditBox do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomEditBox := new Windows.Networking.Vpn.IVpnCustomEditBox;
            Retval.m_IVpnCustomEditBox.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomEditBox

   procedure put_DefaultText
   (
      this : in out VpnCustomEditBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnCustomEditBox.all.put_DefaultText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DefaultText
   (
      this : in out VpnCustomEditBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCustomEditBox.all.get_DefaultText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NoEcho
   (
      this : in out VpnCustomEditBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnCustomEditBox.all.put_NoEcho (value);
   end;

   function get_NoEcho
   (
      this : in out VpnCustomEditBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnCustomEditBox.all.get_NoEcho (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out VpnCustomEditBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCustomEditBox.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out VpnCustomEditBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomEditBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomEditBox.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VpnCustomEditBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomEditBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomEditBox.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomEditBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomEditBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomEditBox.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomEditBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomEditBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomEditBox.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Bordered
   (
      this : in out VpnCustomEditBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomEditBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomEditBox.all);
      Hr := m_Interface.put_Bordered (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bordered
   (
      this : in out VpnCustomEditBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomEditBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomEditBox.all);
      Hr := m_Interface.get_Bordered (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomErrorBox

   procedure Initialize (this : in out VpnCustomErrorBox) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomErrorBox) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomErrorBox, IVpnCustomErrorBox_Ptr);
   begin
      if this.m_IVpnCustomErrorBox /= null then
         if this.m_IVpnCustomErrorBox.all /= null then
            RefCount := this.m_IVpnCustomErrorBox.all.Release;
            Free (this.m_IVpnCustomErrorBox);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomErrorBox

   function Constructor return VpnCustomErrorBox is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomErrorBox");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomErrorBox;
   begin
      return RetVal : VpnCustomErrorBox do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomErrorBox := new Windows.Networking.Vpn.IVpnCustomErrorBox;
            Retval.m_IVpnCustomErrorBox.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomErrorBox

   procedure put_Label
   (
      this : in out VpnCustomErrorBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomErrorBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomErrorBox.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VpnCustomErrorBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomErrorBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomErrorBox.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomErrorBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomErrorBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomErrorBox.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomErrorBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomErrorBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomErrorBox.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Bordered
   (
      this : in out VpnCustomErrorBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomErrorBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomErrorBox.all);
      Hr := m_Interface.put_Bordered (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bordered
   (
      this : in out VpnCustomErrorBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomErrorBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomErrorBox.all);
      Hr := m_Interface.get_Bordered (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomPromptBooleanInput

   procedure Initialize (this : in out VpnCustomPromptBooleanInput) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomPromptBooleanInput) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomPromptBooleanInput, IVpnCustomPromptBooleanInput_Ptr);
   begin
      if this.m_IVpnCustomPromptBooleanInput /= null then
         if this.m_IVpnCustomPromptBooleanInput.all /= null then
            RefCount := this.m_IVpnCustomPromptBooleanInput.all.Release;
            Free (this.m_IVpnCustomPromptBooleanInput);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomPromptBooleanInput

   function Constructor return VpnCustomPromptBooleanInput is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomPromptBooleanInput");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomPromptBooleanInput;
   begin
      return RetVal : VpnCustomPromptBooleanInput do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomPromptBooleanInput := new Windows.Networking.Vpn.IVpnCustomPromptBooleanInput;
            Retval.m_IVpnCustomPromptBooleanInput.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomPromptBooleanInput

   procedure put_InitialValue
   (
      this : in out VpnCustomPromptBooleanInput;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnCustomPromptBooleanInput.all.put_InitialValue (value);
   end;

   function get_InitialValue
   (
      this : in out VpnCustomPromptBooleanInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnCustomPromptBooleanInput.all.get_InitialValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out VpnCustomPromptBooleanInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnCustomPromptBooleanInput.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out VpnCustomPromptBooleanInput;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptBooleanInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptBooleanInput.all);
      Hr := m_Interface.put_DisplayName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out VpnCustomPromptBooleanInput
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptBooleanInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptBooleanInput.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomPromptBooleanInput;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptBooleanInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptBooleanInput.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomPromptBooleanInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptBooleanInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptBooleanInput.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Emphasized
   (
      this : in out VpnCustomPromptBooleanInput;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptBooleanInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptBooleanInput.all);
      Hr := m_Interface.put_Emphasized (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Emphasized
   (
      this : in out VpnCustomPromptBooleanInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptBooleanInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptBooleanInput.all);
      Hr := m_Interface.get_Emphasized (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomPromptOptionSelector

   procedure Initialize (this : in out VpnCustomPromptOptionSelector) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomPromptOptionSelector) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomPromptOptionSelector, IVpnCustomPromptOptionSelector_Ptr);
   begin
      if this.m_IVpnCustomPromptOptionSelector /= null then
         if this.m_IVpnCustomPromptOptionSelector.all /= null then
            RefCount := this.m_IVpnCustomPromptOptionSelector.all.Release;
            Free (this.m_IVpnCustomPromptOptionSelector);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomPromptOptionSelector

   function Constructor return VpnCustomPromptOptionSelector is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomPromptOptionSelector");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomPromptOptionSelector;
   begin
      return RetVal : VpnCustomPromptOptionSelector do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomPromptOptionSelector := new Windows.Networking.Vpn.IVpnCustomPromptOptionSelector;
            Retval.m_IVpnCustomPromptOptionSelector.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomPromptOptionSelector

   function get_Options
   (
      this : in out VpnCustomPromptOptionSelector
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnCustomPromptOptionSelector.all.get_Options (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SelectedIndex
   (
      this : in out VpnCustomPromptOptionSelector
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVpnCustomPromptOptionSelector.all.get_SelectedIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out VpnCustomPromptOptionSelector;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptOptionSelector_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptOptionSelector.all);
      Hr := m_Interface.put_DisplayName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out VpnCustomPromptOptionSelector
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptOptionSelector_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptOptionSelector.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomPromptOptionSelector;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptOptionSelector_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptOptionSelector.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomPromptOptionSelector
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptOptionSelector_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptOptionSelector.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Emphasized
   (
      this : in out VpnCustomPromptOptionSelector;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptOptionSelector_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptOptionSelector.all);
      Hr := m_Interface.put_Emphasized (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Emphasized
   (
      this : in out VpnCustomPromptOptionSelector
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptOptionSelector_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptOptionSelector.all);
      Hr := m_Interface.get_Emphasized (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomPromptText

   procedure Initialize (this : in out VpnCustomPromptText) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomPromptText) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomPromptText, IVpnCustomPromptText_Ptr);
   begin
      if this.m_IVpnCustomPromptText /= null then
         if this.m_IVpnCustomPromptText.all /= null then
            RefCount := this.m_IVpnCustomPromptText.all.Release;
            Free (this.m_IVpnCustomPromptText);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomPromptText

   function Constructor return VpnCustomPromptText is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomPromptText");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomPromptText;
   begin
      return RetVal : VpnCustomPromptText do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomPromptText := new Windows.Networking.Vpn.IVpnCustomPromptText;
            Retval.m_IVpnCustomPromptText.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomPromptText

   procedure put_Text
   (
      this : in out VpnCustomPromptText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnCustomPromptText.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Text
   (
      this : in out VpnCustomPromptText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCustomPromptText.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out VpnCustomPromptText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptText_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptText.all);
      Hr := m_Interface.put_DisplayName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out VpnCustomPromptText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptText_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptText.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomPromptText;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptText_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptText.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomPromptText
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptText_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptText.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Emphasized
   (
      this : in out VpnCustomPromptText;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptText_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptText.all);
      Hr := m_Interface.put_Emphasized (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Emphasized
   (
      this : in out VpnCustomPromptText
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptText_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptText.all);
      Hr := m_Interface.get_Emphasized (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomPromptTextInput

   procedure Initialize (this : in out VpnCustomPromptTextInput) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomPromptTextInput) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomPromptTextInput, IVpnCustomPromptTextInput_Ptr);
   begin
      if this.m_IVpnCustomPromptTextInput /= null then
         if this.m_IVpnCustomPromptTextInput.all /= null then
            RefCount := this.m_IVpnCustomPromptTextInput.all.Release;
            Free (this.m_IVpnCustomPromptTextInput);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomPromptTextInput

   function Constructor return VpnCustomPromptTextInput is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomPromptTextInput");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomPromptTextInput;
   begin
      return RetVal : VpnCustomPromptTextInput do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomPromptTextInput := new Windows.Networking.Vpn.IVpnCustomPromptTextInput;
            Retval.m_IVpnCustomPromptTextInput.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomPromptTextInput

   procedure put_PlaceholderText
   (
      this : in out VpnCustomPromptTextInput;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnCustomPromptTextInput.all.put_PlaceholderText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PlaceholderText
   (
      this : in out VpnCustomPromptTextInput
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCustomPromptTextInput.all.get_PlaceholderText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IsTextHidden
   (
      this : in out VpnCustomPromptTextInput;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnCustomPromptTextInput.all.put_IsTextHidden (value);
   end;

   function get_IsTextHidden
   (
      this : in out VpnCustomPromptTextInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnCustomPromptTextInput.all.get_IsTextHidden (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out VpnCustomPromptTextInput
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCustomPromptTextInput.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out VpnCustomPromptTextInput;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptTextInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptTextInput.all);
      Hr := m_Interface.put_DisplayName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out VpnCustomPromptTextInput
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptTextInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptTextInput.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomPromptTextInput;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptTextInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptTextInput.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomPromptTextInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptTextInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptTextInput.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Emphasized
   (
      this : in out VpnCustomPromptTextInput;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptTextInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptTextInput.all);
      Hr := m_Interface.put_Emphasized (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Emphasized
   (
      this : in out VpnCustomPromptTextInput
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomPromptTextInput_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPromptElement, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPromptElement'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomPromptTextInput.all);
      Hr := m_Interface.get_Emphasized (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnCustomTextBox

   procedure Initialize (this : in out VpnCustomTextBox) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnCustomTextBox) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnCustomTextBox, IVpnCustomTextBox_Ptr);
   begin
      if this.m_IVpnCustomTextBox /= null then
         if this.m_IVpnCustomTextBox.all /= null then
            RefCount := this.m_IVpnCustomTextBox.all.Release;
            Free (this.m_IVpnCustomTextBox);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnCustomTextBox

   function Constructor return VpnCustomTextBox is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnCustomTextBox");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnCustomTextBox;
   begin
      return RetVal : VpnCustomTextBox do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnCustomTextBox := new Windows.Networking.Vpn.IVpnCustomTextBox;
            Retval.m_IVpnCustomTextBox.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnCustomTextBox

   procedure put_DisplayText
   (
      this : in out VpnCustomTextBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnCustomTextBox.all.put_DisplayText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayText
   (
      this : in out VpnCustomTextBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnCustomTextBox.all.get_DisplayText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out VpnCustomTextBox;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomTextBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomTextBox.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VpnCustomTextBox
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomTextBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomTextBox.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Compulsory
   (
      this : in out VpnCustomTextBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomTextBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomTextBox.all);
      Hr := m_Interface.put_Compulsory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Compulsory
   (
      this : in out VpnCustomTextBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomTextBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomTextBox.all);
      Hr := m_Interface.get_Compulsory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Bordered
   (
      this : in out VpnCustomTextBox;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomTextBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomTextBox.all);
      Hr := m_Interface.put_Bordered (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bordered
   (
      this : in out VpnCustomTextBox
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnCustomPrompt := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnCustomTextBox_Interface, WinRt.Windows.Networking.Vpn.IVpnCustomPrompt, WinRt.Windows.Networking.Vpn.IID_IVpnCustomPrompt'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnCustomTextBox.all);
      Hr := m_Interface.get_Bordered (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnDomainNameAssignment

   procedure Initialize (this : in out VpnDomainNameAssignment) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnDomainNameAssignment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnDomainNameAssignment, IVpnDomainNameAssignment_Ptr);
   begin
      if this.m_IVpnDomainNameAssignment /= null then
         if this.m_IVpnDomainNameAssignment.all /= null then
            RefCount := this.m_IVpnDomainNameAssignment.all.Release;
            Free (this.m_IVpnDomainNameAssignment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnDomainNameAssignment

   function Constructor return VpnDomainNameAssignment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnDomainNameAssignment");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnDomainNameAssignment;
   begin
      return RetVal : VpnDomainNameAssignment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnDomainNameAssignment := new Windows.Networking.Vpn.IVpnDomainNameAssignment;
            Retval.m_IVpnDomainNameAssignment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnDomainNameAssignment

   function get_DomainNameList
   (
      this : in out VpnDomainNameAssignment
   )
   return IVector_IVpnDomainNameInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnDomainNameInfo.Kind;
   begin
      Hr := this.m_IVpnDomainNameAssignment.all.get_DomainNameList (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnDomainNameInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ProxyAutoConfigurationUri
   (
      this : in out VpnDomainNameAssignment;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnDomainNameAssignment.all.put_ProxyAutoConfigurationUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ProxyAutoConfigurationUri
   (
      this : in out VpnDomainNameAssignment
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IVpnDomainNameAssignment.all.get_ProxyAutoConfigurationUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnDomainNameInfo

   procedure Initialize (this : in out VpnDomainNameInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnDomainNameInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnDomainNameInfo, IVpnDomainNameInfo_Ptr);
   begin
      if this.m_IVpnDomainNameInfo /= null then
         if this.m_IVpnDomainNameInfo.all /= null then
            RefCount := this.m_IVpnDomainNameInfo.all.Release;
            Free (this.m_IVpnDomainNameInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnDomainNameInfo

   function Constructor
   (
      name : WinRt.WString;
      nameType : Windows.Networking.Vpn.VpnDomainNameType;
      dnsServerList : GenericObject;
      proxyServerList : GenericObject
   )
   return VpnDomainNameInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnDomainNameInfo");
      m_Factory    : access IVpnDomainNameInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnDomainNameInfo;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : VpnDomainNameInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnDomainNameInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateVpnDomainNameInfo (HStr_name, nameType, dnsServerList, proxyServerList, m_ComRetVal'Access);
            Retval.m_IVpnDomainNameInfo := new Windows.Networking.Vpn.IVpnDomainNameInfo;
            Retval.m_IVpnDomainNameInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnDomainNameInfo

   procedure put_DomainName
   (
      this : in out VpnDomainNameInfo;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnDomainNameInfo.all.put_DomainName (value.m_IHostName.all);
   end;

   function get_DomainName
   (
      this : in out VpnDomainNameInfo
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IVpnDomainNameInfo.all.get_DomainName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_DomainNameType
   (
      this : in out VpnDomainNameInfo;
      value : Windows.Networking.Vpn.VpnDomainNameType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnDomainNameInfo.all.put_DomainNameType (value);
   end;

   function get_DomainNameType
   (
      this : in out VpnDomainNameInfo
   )
   return WinRt.Windows.Networking.Vpn.VpnDomainNameType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnDomainNameType;
   begin
      Hr := this.m_IVpnDomainNameInfo.all.get_DomainNameType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DnsServers
   (
      this : in out VpnDomainNameInfo
   )
   return IVector_IHostName.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHostName.Kind;
   begin
      Hr := this.m_IVpnDomainNameInfo.all.get_DnsServers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHostName (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_WebProxyServers
   (
      this : in out VpnDomainNameInfo
   )
   return IVector_IHostName.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHostName.Kind;
   begin
      Hr := this.m_IVpnDomainNameInfo.all.get_WebProxyServers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHostName (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_WebProxyUris
   (
      this : in out VpnDomainNameInfo
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnDomainNameInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnDomainNameInfo_Interface, WinRt.Windows.Networking.Vpn.IVpnDomainNameInfo2, WinRt.Windows.Networking.Vpn.IID_IVpnDomainNameInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnDomainNameInfo.all);
      Hr := m_Interface.get_WebProxyUris (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnInterfaceId

   procedure Initialize (this : in out VpnInterfaceId) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnInterfaceId) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnInterfaceId, IVpnInterfaceId_Ptr);
   begin
      if this.m_IVpnInterfaceId /= null then
         if this.m_IVpnInterfaceId.all /= null then
            RefCount := this.m_IVpnInterfaceId.all.Release;
            Free (this.m_IVpnInterfaceId);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnInterfaceId

   function Constructor
   (
      address_x : WinRt.Byte_Array
   )
   return VpnInterfaceId is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnInterfaceId");
      m_Factory    : access IVpnInterfaceIdFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnInterfaceId;
      function Convert_address_x is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : VpnInterfaceId do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnInterfaceIdFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateVpnInterfaceId (WinRt.UInt32(address_x'Length), Convert_address_x (address_x (address_x'First)'Address), m_ComRetVal'Access);
            Retval.m_IVpnInterfaceId := new Windows.Networking.Vpn.IVpnInterfaceId;
            Retval.m_IVpnInterfaceId.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnInterfaceId

   procedure GetAddressInfo
   (
      this : in out VpnInterfaceId;
      id : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_id is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IVpnInterfaceId.all.GetAddressInfo (WinRt.UInt32(id'Length), Convert_id (id (id'First)'Address));
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnManagementAgent

   procedure Initialize (this : in out VpnManagementAgent) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnManagementAgent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnManagementAgent, IVpnManagementAgent_Ptr);
   begin
      if this.m_IVpnManagementAgent /= null then
         if this.m_IVpnManagementAgent.all /= null then
            RefCount := this.m_IVpnManagementAgent.all.Release;
            Free (this.m_IVpnManagementAgent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnManagementAgent

   function Constructor return VpnManagementAgent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnManagementAgent");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnManagementAgent;
   begin
      return RetVal : VpnManagementAgent do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnManagementAgent := new Windows.Networking.Vpn.IVpnManagementAgent;
            Retval.m_IVpnManagementAgent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnManagementAgent

   function AddProfileFromXmlAsync
   (
      this : in out VpnManagementAgent;
      xml : WinRt.WString
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_xml : WinRt.HString := To_HString (xml);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.AddProfileFromXmlAsync (HStr_xml, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_xml);
      return m_RetVal;
   end;

   function AddProfileFromObjectAsync
   (
      this : in out VpnManagementAgent;
      profile : Windows.Networking.Vpn.IVpnProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.AddProfileFromObjectAsync (profile, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function UpdateProfileFromXmlAsync
   (
      this : in out VpnManagementAgent;
      xml : WinRt.WString
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_xml : WinRt.HString := To_HString (xml);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.UpdateProfileFromXmlAsync (HStr_xml, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_xml);
      return m_RetVal;
   end;

   function UpdateProfileFromObjectAsync
   (
      this : in out VpnManagementAgent;
      profile : Windows.Networking.Vpn.IVpnProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.UpdateProfileFromObjectAsync (profile, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetProfilesAsync
   (
      this : in out VpnManagementAgent
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1775851454, 1118, 21391, (152, 246, 26, 166, 92, 238, 36, 74 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3670465906, 42449, 22228, (175, 196, 152, 159, 132, 220, 178, 179 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.GetProfilesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DeleteProfileAsync
   (
      this : in out VpnManagementAgent;
      profile : Windows.Networking.Vpn.IVpnProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.DeleteProfileAsync (profile, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ConnectProfileAsync
   (
      this : in out VpnManagementAgent;
      profile : Windows.Networking.Vpn.IVpnProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.ConnectProfileAsync (profile, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ConnectProfileWithPasswordCredentialAsync
   (
      this : in out VpnManagementAgent;
      profile : Windows.Networking.Vpn.IVpnProfile;
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.ConnectProfileWithPasswordCredentialAsync (profile, passwordCredential.m_IPasswordCredential.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DisconnectProfileAsync
   (
      this : in out VpnManagementAgent;
      profile : Windows.Networking.Vpn.IVpnProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VpnManagementErrorStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VpnManagementErrorStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_IID            : aliased WinRt.IID := (3919283932, 27493, 24355, (148, 25, 144, 181, 88, 82, 242, 131 )); -- Windows.Networking.Vpn.VpnManagementErrorStatus;
      m_HandlerIID     : aliased WinRt.IID := (824352652, 28829, 20503, (134, 41, 87, 239, 18, 137, 230, 22 ));
      m_Handler        : AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind := new AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VpnManagementErrorStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind_Delegate, AsyncOperationCompletedHandler_VpnManagementErrorStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVpnManagementAgent.all.DisconnectProfileAsync (profile, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnNamespaceAssignment

   procedure Initialize (this : in out VpnNamespaceAssignment) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnNamespaceAssignment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnNamespaceAssignment, IVpnNamespaceAssignment_Ptr);
   begin
      if this.m_IVpnNamespaceAssignment /= null then
         if this.m_IVpnNamespaceAssignment.all /= null then
            RefCount := this.m_IVpnNamespaceAssignment.all.Release;
            Free (this.m_IVpnNamespaceAssignment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnNamespaceAssignment

   function Constructor return VpnNamespaceAssignment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnNamespaceAssignment");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnNamespaceAssignment;
   begin
      return RetVal : VpnNamespaceAssignment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnNamespaceAssignment := new Windows.Networking.Vpn.IVpnNamespaceAssignment;
            Retval.m_IVpnNamespaceAssignment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnNamespaceAssignment

   procedure put_NamespaceList
   (
      this : in out VpnNamespaceAssignment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNamespaceAssignment.all.put_NamespaceList (value);
   end;

   function get_NamespaceList
   (
      this : in out VpnNamespaceAssignment
   )
   return IVector_IVpnNamespaceInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnNamespaceInfo.Kind;
   begin
      Hr := this.m_IVpnNamespaceAssignment.all.get_NamespaceList (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnNamespaceInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ProxyAutoConfigUri
   (
      this : in out VpnNamespaceAssignment;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNamespaceAssignment.all.put_ProxyAutoConfigUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ProxyAutoConfigUri
   (
      this : in out VpnNamespaceAssignment
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IVpnNamespaceAssignment.all.get_ProxyAutoConfigUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnNamespaceInfo

   procedure Initialize (this : in out VpnNamespaceInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnNamespaceInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnNamespaceInfo, IVpnNamespaceInfo_Ptr);
   begin
      if this.m_IVpnNamespaceInfo /= null then
         if this.m_IVpnNamespaceInfo.all /= null then
            RefCount := this.m_IVpnNamespaceInfo.all.Release;
            Free (this.m_IVpnNamespaceInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnNamespaceInfo

   function Constructor
   (
      name : WinRt.WString;
      dnsServerList : GenericObject;
      proxyServerList : GenericObject
   )
   return VpnNamespaceInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnNamespaceInfo");
      m_Factory    : access IVpnNamespaceInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnNamespaceInfo;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : VpnNamespaceInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnNamespaceInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateVpnNamespaceInfo (HStr_name, dnsServerList, proxyServerList, m_ComRetVal'Access);
            Retval.m_IVpnNamespaceInfo := new Windows.Networking.Vpn.IVpnNamespaceInfo;
            Retval.m_IVpnNamespaceInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnNamespaceInfo

   procedure put_Namespace
   (
      this : in out VpnNamespaceInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnNamespaceInfo.all.put_Namespace (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Namespace
   (
      this : in out VpnNamespaceInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnNamespaceInfo.all.get_Namespace (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DnsServers
   (
      this : in out VpnNamespaceInfo;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNamespaceInfo.all.put_DnsServers (value);
   end;

   function get_DnsServers
   (
      this : in out VpnNamespaceInfo
   )
   return IVector_IHostName.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHostName.Kind;
   begin
      Hr := this.m_IVpnNamespaceInfo.all.get_DnsServers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHostName (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_WebProxyServers
   (
      this : in out VpnNamespaceInfo;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNamespaceInfo.all.put_WebProxyServers (value);
   end;

   function get_WebProxyServers
   (
      this : in out VpnNamespaceInfo
   )
   return IVector_IHostName.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHostName.Kind;
   begin
      Hr := this.m_IVpnNamespaceInfo.all.get_WebProxyServers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHostName (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnNativeProfile

   procedure Initialize (this : in out VpnNativeProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnNativeProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnNativeProfile, IVpnNativeProfile_Ptr);
   begin
      if this.m_IVpnNativeProfile /= null then
         if this.m_IVpnNativeProfile.all /= null then
            RefCount := this.m_IVpnNativeProfile.all.Release;
            Free (this.m_IVpnNativeProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnNativeProfile

   function Constructor return VpnNativeProfile is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnNativeProfile");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnNativeProfile;
   begin
      return RetVal : VpnNativeProfile do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnNativeProfile := new Windows.Networking.Vpn.IVpnNativeProfile;
            Retval.m_IVpnNativeProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnNativeProfile

   function get_Servers
   (
      this : in out VpnNativeProfile
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnNativeProfile.all.get_Servers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RoutingPolicyType
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnRoutingPolicyType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnRoutingPolicyType;
   begin
      Hr := this.m_IVpnNativeProfile.all.get_RoutingPolicyType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RoutingPolicyType
   (
      this : in out VpnNativeProfile;
      value : Windows.Networking.Vpn.VpnRoutingPolicyType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNativeProfile.all.put_RoutingPolicyType (value);
   end;

   function get_NativeProtocolType
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnNativeProtocolType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnNativeProtocolType;
   begin
      Hr := this.m_IVpnNativeProfile.all.get_NativeProtocolType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_NativeProtocolType
   (
      this : in out VpnNativeProfile;
      value : Windows.Networking.Vpn.VpnNativeProtocolType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNativeProfile.all.put_NativeProtocolType (value);
   end;

   function get_UserAuthenticationMethod
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnAuthenticationMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnAuthenticationMethod;
   begin
      Hr := this.m_IVpnNativeProfile.all.get_UserAuthenticationMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UserAuthenticationMethod
   (
      this : in out VpnNativeProfile;
      value : Windows.Networking.Vpn.VpnAuthenticationMethod
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNativeProfile.all.put_UserAuthenticationMethod (value);
   end;

   function get_TunnelAuthenticationMethod
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnAuthenticationMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnAuthenticationMethod;
   begin
      Hr := this.m_IVpnNativeProfile.all.get_TunnelAuthenticationMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TunnelAuthenticationMethod
   (
      this : in out VpnNativeProfile;
      value : Windows.Networking.Vpn.VpnAuthenticationMethod
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnNativeProfile.all.put_TunnelAuthenticationMethod (value);
   end;

   function get_EapConfiguration
   (
      this : in out VpnNativeProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnNativeProfile.all.get_EapConfiguration (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_EapConfiguration
   (
      this : in out VpnNativeProfile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnNativeProfile.all.put_EapConfiguration (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ProfileName
   (
      this : in out VpnNativeProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_ProfileName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ProfileName
   (
      this : in out VpnNativeProfile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.put_ProfileName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AppTriggers
   (
      this : in out VpnNativeProfile
   )
   return IVector_IVpnAppId.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnAppId.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_AppTriggers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnAppId (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Routes
   (
      this : in out VpnNativeProfile
   )
   return IVector_IVpnRoute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnRoute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_Routes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnRoute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DomainNameInfoList
   (
      this : in out VpnNativeProfile
   )
   return IVector_IVpnDomainNameInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnDomainNameInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_DomainNameInfoList (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnDomainNameInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TrafficFilters
   (
      this : in out VpnNativeProfile
   )
   return IVector_IVpnTrafficFilter.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnTrafficFilter.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_TrafficFilters (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnTrafficFilter (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RememberCredentials
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_RememberCredentials (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RememberCredentials
   (
      this : in out VpnNativeProfile;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.put_RememberCredentials (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AlwaysOn
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_AlwaysOn (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AlwaysOn
   (
      this : in out VpnNativeProfile;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.put_AlwaysOn (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RequireVpnClientAppUI
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnNativeProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnNativeProfile2, WinRt.Windows.Networking.Vpn.IID_IVpnNativeProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_RequireVpnClientAppUI (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RequireVpnClientAppUI
   (
      this : in out VpnNativeProfile;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnNativeProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnNativeProfile2, WinRt.Windows.Networking.Vpn.IID_IVpnNativeProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.put_RequireVpnClientAppUI (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ConnectionStatus
   (
      this : in out VpnNativeProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnNativeProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnManagementConnectionStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnNativeProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnNativeProfile2, WinRt.Windows.Networking.Vpn.IID_IVpnNativeProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnNativeProfile.all);
      Hr := m_Interface.get_ConnectionStatus (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnPacketBuffer

   procedure Initialize (this : in out VpnPacketBuffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnPacketBuffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnPacketBuffer, IVpnPacketBuffer_Ptr);
   begin
      if this.m_IVpnPacketBuffer /= null then
         if this.m_IVpnPacketBuffer.all /= null then
            RefCount := this.m_IVpnPacketBuffer.all.Release;
            Free (this.m_IVpnPacketBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnPacketBuffer

   function Constructor
   (
      parentBuffer : Windows.Networking.Vpn.VpnPacketBuffer'Class;
      offset : WinRt.UInt32;
      length : WinRt.UInt32
   )
   return VpnPacketBuffer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnPacketBuffer");
      m_Factory    : access IVpnPacketBufferFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnPacketBuffer;
   begin
      return RetVal : VpnPacketBuffer do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnPacketBufferFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateVpnPacketBuffer (parentBuffer.m_IVpnPacketBuffer.all, offset, length, m_ComRetVal'Access);
            Retval.m_IVpnPacketBuffer := new Windows.Networking.Vpn.IVpnPacketBuffer;
            Retval.m_IVpnPacketBuffer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnPacketBuffer

   function get_Buffer
   (
      this : in out VpnPacketBuffer
   )
   return WinRt.Windows.Storage.Streams.Buffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.Buffer do
         Hr := this.m_IVpnPacketBuffer.all.get_Buffer (m_ComRetVal'Access);
         Retval.m_IBuffer := new Windows.Storage.Streams.IBuffer;
         Retval.m_IBuffer.all := m_ComRetVal;
      end return;
   end;

   procedure put_Status
   (
      this : in out VpnPacketBuffer;
      value : Windows.Networking.Vpn.VpnPacketBufferStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnPacketBuffer.all.put_Status (value);
   end;

   function get_Status
   (
      this : in out VpnPacketBuffer
   )
   return WinRt.Windows.Networking.Vpn.VpnPacketBufferStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnPacketBufferStatus;
   begin
      Hr := this.m_IVpnPacketBuffer.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransportAffinity
   (
      this : in out VpnPacketBuffer;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnPacketBuffer.all.put_TransportAffinity (value);
   end;

   function get_TransportAffinity
   (
      this : in out VpnPacketBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVpnPacketBuffer.all.get_TransportAffinity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppId
   (
      this : in out VpnPacketBuffer
   )
   return WinRt.Windows.Networking.Vpn.VpnAppId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnPacketBuffer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnAppId;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPacketBuffer_Interface, WinRt.Windows.Networking.Vpn.IVpnPacketBuffer2, WinRt.Windows.Networking.Vpn.IID_IVpnPacketBuffer2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnAppId do
         m_Interface := QInterface (this.m_IVpnPacketBuffer.all);
         Hr := m_Interface.get_AppId (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVpnAppId := new Windows.Networking.Vpn.IVpnAppId;
         Retval.m_IVpnAppId.all := m_ComRetVal;
      end return;
   end;

   procedure put_TransportContext
   (
      this : in out VpnPacketBuffer;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnPacketBuffer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPacketBuffer_Interface, WinRt.Windows.Networking.Vpn.IVpnPacketBuffer3, WinRt.Windows.Networking.Vpn.IID_IVpnPacketBuffer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPacketBuffer.all);
      Hr := m_Interface.put_TransportContext (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransportContext
   (
      this : in out VpnPacketBuffer
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnPacketBuffer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPacketBuffer_Interface, WinRt.Windows.Networking.Vpn.IVpnPacketBuffer3, WinRt.Windows.Networking.Vpn.IID_IVpnPacketBuffer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPacketBuffer.all);
      Hr := m_Interface.get_TransportContext (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnPacketBufferList

   procedure Initialize (this : in out VpnPacketBufferList) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnPacketBufferList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnPacketBufferList, IVpnPacketBufferList_Ptr);
   begin
      if this.m_IVpnPacketBufferList /= null then
         if this.m_IVpnPacketBufferList.all /= null then
            RefCount := this.m_IVpnPacketBufferList.all.Release;
            Free (this.m_IVpnPacketBufferList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnPacketBufferList

   procedure Append
   (
      this : in out VpnPacketBufferList;
      nextVpnPacketBuffer : Windows.Networking.Vpn.VpnPacketBuffer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnPacketBufferList.all.Append (nextVpnPacketBuffer.m_IVpnPacketBuffer.all);
   end;

   procedure AddAtBegin
   (
      this : in out VpnPacketBufferList;
      nextVpnPacketBuffer : Windows.Networking.Vpn.VpnPacketBuffer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnPacketBufferList.all.AddAtBegin (nextVpnPacketBuffer.m_IVpnPacketBuffer.all);
   end;

   function RemoveAtEnd
   (
      this : in out VpnPacketBufferList
   )
   return WinRt.Windows.Networking.Vpn.VpnPacketBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnPacketBuffer;
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnPacketBuffer do
         Hr := this.m_IVpnPacketBufferList.all.RemoveAtEnd (m_ComRetVal'Access);
         Retval.m_IVpnPacketBuffer := new Windows.Networking.Vpn.IVpnPacketBuffer;
         Retval.m_IVpnPacketBuffer.all := m_ComRetVal;
      end return;
   end;

   function RemoveAtBegin
   (
      this : in out VpnPacketBufferList
   )
   return WinRt.Windows.Networking.Vpn.VpnPacketBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnPacketBuffer;
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnPacketBuffer do
         Hr := this.m_IVpnPacketBufferList.all.RemoveAtBegin (m_ComRetVal'Access);
         Retval.m_IVpnPacketBuffer := new Windows.Networking.Vpn.IVpnPacketBuffer;
         Retval.m_IVpnPacketBuffer.all := m_ComRetVal;
      end return;
   end;

   procedure Clear
   (
      this : in out VpnPacketBufferList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnPacketBufferList.all.Clear;
   end;

   procedure put_Status
   (
      this : in out VpnPacketBufferList;
      value : Windows.Networking.Vpn.VpnPacketBufferStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnPacketBufferList.all.put_Status (value);
   end;

   function get_Status
   (
      this : in out VpnPacketBufferList
   )
   return WinRt.Windows.Networking.Vpn.VpnPacketBufferStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnPacketBufferStatus;
   begin
      Hr := this.m_IVpnPacketBufferList.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out VpnPacketBufferList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVpnPacketBufferList.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Networking.Vpn.VpnPacketBuffer>
   function First
   (
      this : in out VpnPacketBufferList
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IVpnPacketBuffer.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4204089198, 12503, 20704, (157, 67, 218, 219, 108, 83, 225, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPacketBufferList_Interface, IIterable_IVpnPacketBuffer.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPacketBufferList.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnPickedCredential

   procedure Initialize (this : in out VpnPickedCredential) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnPickedCredential) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnPickedCredential, IVpnPickedCredential_Ptr);
   begin
      if this.m_IVpnPickedCredential /= null then
         if this.m_IVpnPickedCredential.all /= null then
            RefCount := this.m_IVpnPickedCredential.all.Release;
            Free (this.m_IVpnPickedCredential);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnPickedCredential

   function get_PasskeyCredential
   (
      this : in out VpnPickedCredential
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IVpnPickedCredential.all.get_PasskeyCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   function get_AdditionalPin
   (
      this : in out VpnPickedCredential
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnPickedCredential.all.get_AdditionalPin (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_OldPasswordCredential
   (
      this : in out VpnPickedCredential
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IVpnPickedCredential.all.get_OldPasswordCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnPlugInProfile

   procedure Initialize (this : in out VpnPlugInProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnPlugInProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnPlugInProfile, IVpnPlugInProfile_Ptr);
   begin
      if this.m_IVpnPlugInProfile /= null then
         if this.m_IVpnPlugInProfile.all /= null then
            RefCount := this.m_IVpnPlugInProfile.all.Release;
            Free (this.m_IVpnPlugInProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnPlugInProfile

   function Constructor return VpnPlugInProfile is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnPlugInProfile");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnPlugInProfile;
   begin
      return RetVal : VpnPlugInProfile do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnPlugInProfile := new Windows.Networking.Vpn.IVpnPlugInProfile;
            Retval.m_IVpnPlugInProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnPlugInProfile

   function get_ServerUris
   (
      this : in out VpnPlugInProfile
   )
   return IVector_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_IVpnPlugInProfile.all.get_ServerUris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CustomConfiguration
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnPlugInProfile.all.get_CustomConfiguration (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CustomConfiguration
   (
      this : in out VpnPlugInProfile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnPlugInProfile.all.put_CustomConfiguration (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_VpnPluginPackageFamilyName
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVpnPlugInProfile.all.get_VpnPluginPackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_VpnPluginPackageFamilyName
   (
      this : in out VpnPlugInProfile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVpnPlugInProfile.all.put_VpnPluginPackageFamilyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ProfileName
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_ProfileName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ProfileName
   (
      this : in out VpnPlugInProfile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.put_ProfileName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AppTriggers
   (
      this : in out VpnPlugInProfile
   )
   return IVector_IVpnAppId.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnAppId.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_AppTriggers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnAppId (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Routes
   (
      this : in out VpnPlugInProfile
   )
   return IVector_IVpnRoute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnRoute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_Routes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnRoute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DomainNameInfoList
   (
      this : in out VpnPlugInProfile
   )
   return IVector_IVpnDomainNameInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnDomainNameInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_DomainNameInfoList (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnDomainNameInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TrafficFilters
   (
      this : in out VpnPlugInProfile
   )
   return IVector_IVpnTrafficFilter.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnTrafficFilter.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_TrafficFilters (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IVpnTrafficFilter (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RememberCredentials
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_RememberCredentials (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RememberCredentials
   (
      this : in out VpnPlugInProfile;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.put_RememberCredentials (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AlwaysOn
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_AlwaysOn (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AlwaysOn
   (
      this : in out VpnPlugInProfile;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnProfile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnProfile, WinRt.Windows.Networking.Vpn.IID_IVpnProfile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.put_AlwaysOn (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RequireVpnClientAppUI
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnPlugInProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnPlugInProfile2, WinRt.Windows.Networking.Vpn.IID_IVpnPlugInProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_RequireVpnClientAppUI (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RequireVpnClientAppUI
   (
      this : in out VpnPlugInProfile;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnPlugInProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnPlugInProfile2, WinRt.Windows.Networking.Vpn.IID_IVpnPlugInProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.put_RequireVpnClientAppUI (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ConnectionStatus
   (
      this : in out VpnPlugInProfile
   )
   return WinRt.Windows.Networking.Vpn.VpnManagementConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Vpn.IVpnPlugInProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnManagementConnectionStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Vpn.IVpnPlugInProfile_Interface, WinRt.Windows.Networking.Vpn.IVpnPlugInProfile2, WinRt.Windows.Networking.Vpn.IID_IVpnPlugInProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVpnPlugInProfile.all);
      Hr := m_Interface.get_ConnectionStatus (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnRoute

   procedure Initialize (this : in out VpnRoute) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnRoute) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnRoute, IVpnRoute_Ptr);
   begin
      if this.m_IVpnRoute /= null then
         if this.m_IVpnRoute.all /= null then
            RefCount := this.m_IVpnRoute.all.Release;
            Free (this.m_IVpnRoute);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnRoute

   function Constructor
   (
      address_x : Windows.Networking.HostName'Class;
      prefixSize : WinRt.Byte
   )
   return VpnRoute is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnRoute");
      m_Factory    : access IVpnRouteFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnRoute;
   begin
      return RetVal : VpnRoute do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnRouteFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateVpnRoute (address_x.m_IHostName.all, prefixSize, m_ComRetVal'Access);
            Retval.m_IVpnRoute := new Windows.Networking.Vpn.IVpnRoute;
            Retval.m_IVpnRoute.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnRoute

   procedure put_Address
   (
      this : in out VpnRoute;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRoute.all.put_Address (value.m_IHostName.all);
   end;

   function get_Address
   (
      this : in out VpnRoute
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IVpnRoute.all.get_Address (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_PrefixSize
   (
      this : in out VpnRoute;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRoute.all.put_PrefixSize (value);
   end;

   function get_PrefixSize
   (
      this : in out VpnRoute
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IVpnRoute.all.get_PrefixSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnRouteAssignment

   procedure Initialize (this : in out VpnRouteAssignment) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnRouteAssignment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnRouteAssignment, IVpnRouteAssignment_Ptr);
   begin
      if this.m_IVpnRouteAssignment /= null then
         if this.m_IVpnRouteAssignment.all /= null then
            RefCount := this.m_IVpnRouteAssignment.all.Release;
            Free (this.m_IVpnRouteAssignment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnRouteAssignment

   function Constructor return VpnRouteAssignment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnRouteAssignment");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnRouteAssignment;
   begin
      return RetVal : VpnRouteAssignment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnRouteAssignment := new Windows.Networking.Vpn.IVpnRouteAssignment;
            Retval.m_IVpnRouteAssignment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnRouteAssignment

   procedure put_Ipv4InclusionRoutes
   (
      this : in out VpnRouteAssignment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRouteAssignment.all.put_Ipv4InclusionRoutes (value);
   end;

   procedure put_Ipv6InclusionRoutes
   (
      this : in out VpnRouteAssignment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRouteAssignment.all.put_Ipv6InclusionRoutes (value);
   end;

   function get_Ipv4InclusionRoutes
   (
      this : in out VpnRouteAssignment
   )
   return IVector_IVpnRoute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnRoute.Kind;
   begin
      Hr := this.m_IVpnRouteAssignment.all.get_Ipv4InclusionRoutes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnRoute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Ipv6InclusionRoutes
   (
      this : in out VpnRouteAssignment
   )
   return IVector_IVpnRoute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnRoute.Kind;
   begin
      Hr := this.m_IVpnRouteAssignment.all.get_Ipv6InclusionRoutes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnRoute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Ipv4ExclusionRoutes
   (
      this : in out VpnRouteAssignment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRouteAssignment.all.put_Ipv4ExclusionRoutes (value);
   end;

   procedure put_Ipv6ExclusionRoutes
   (
      this : in out VpnRouteAssignment;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRouteAssignment.all.put_Ipv6ExclusionRoutes (value);
   end;

   function get_Ipv4ExclusionRoutes
   (
      this : in out VpnRouteAssignment
   )
   return IVector_IVpnRoute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnRoute.Kind;
   begin
      Hr := this.m_IVpnRouteAssignment.all.get_Ipv4ExclusionRoutes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnRoute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Ipv6ExclusionRoutes
   (
      this : in out VpnRouteAssignment
   )
   return IVector_IVpnRoute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnRoute.Kind;
   begin
      Hr := this.m_IVpnRouteAssignment.all.get_Ipv6ExclusionRoutes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnRoute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ExcludeLocalSubnets
   (
      this : in out VpnRouteAssignment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnRouteAssignment.all.put_ExcludeLocalSubnets (value);
   end;

   function get_ExcludeLocalSubnets
   (
      this : in out VpnRouteAssignment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnRouteAssignment.all.get_ExcludeLocalSubnets (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnSystemHealth

   procedure Initialize (this : in out VpnSystemHealth) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnSystemHealth) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnSystemHealth, IVpnSystemHealth_Ptr);
   begin
      if this.m_IVpnSystemHealth /= null then
         if this.m_IVpnSystemHealth.all /= null then
            RefCount := this.m_IVpnSystemHealth.all.Release;
            Free (this.m_IVpnSystemHealth);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnSystemHealth

   function get_StatementOfHealth
   (
      this : in out VpnSystemHealth
   )
   return WinRt.Windows.Storage.Streams.Buffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.Buffer do
         Hr := this.m_IVpnSystemHealth.all.get_StatementOfHealth (m_ComRetVal'Access);
         Retval.m_IBuffer := new Windows.Storage.Streams.IBuffer;
         Retval.m_IBuffer.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnTrafficFilter

   procedure Initialize (this : in out VpnTrafficFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnTrafficFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnTrafficFilter, IVpnTrafficFilter_Ptr);
   begin
      if this.m_IVpnTrafficFilter /= null then
         if this.m_IVpnTrafficFilter.all /= null then
            RefCount := this.m_IVpnTrafficFilter.all.Release;
            Free (this.m_IVpnTrafficFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnTrafficFilter

   function Constructor
   (
      appId : Windows.Networking.Vpn.VpnAppId'Class
   )
   return VpnTrafficFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnTrafficFilter");
      m_Factory    : access IVpnTrafficFilterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnTrafficFilter;
   begin
      return RetVal : VpnTrafficFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IVpnTrafficFilterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (appId.m_IVpnAppId.all, m_ComRetVal'Access);
            Retval.m_IVpnTrafficFilter := new Windows.Networking.Vpn.IVpnTrafficFilter;
            Retval.m_IVpnTrafficFilter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnTrafficFilter

   function get_AppId
   (
      this : in out VpnTrafficFilter
   )
   return WinRt.Windows.Networking.Vpn.VpnAppId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.IVpnAppId;
   begin
      return RetVal : WinRt.Windows.Networking.Vpn.VpnAppId do
         Hr := this.m_IVpnTrafficFilter.all.get_AppId (m_ComRetVal'Access);
         Retval.m_IVpnAppId := new Windows.Networking.Vpn.IVpnAppId;
         Retval.m_IVpnAppId.all := m_ComRetVal;
      end return;
   end;

   procedure put_AppId
   (
      this : in out VpnTrafficFilter;
      value : Windows.Networking.Vpn.VpnAppId'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnTrafficFilter.all.put_AppId (value.m_IVpnAppId.all);
   end;

   function get_AppClaims
   (
      this : in out VpnTrafficFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_AppClaims (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Protocol
   (
      this : in out VpnTrafficFilter
   )
   return WinRt.Windows.Networking.Vpn.VpnIPProtocol is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnIPProtocol;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_Protocol (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Protocol
   (
      this : in out VpnTrafficFilter;
      value : Windows.Networking.Vpn.VpnIPProtocol
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnTrafficFilter.all.put_Protocol (value);
   end;

   function get_LocalPortRanges
   (
      this : in out VpnTrafficFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_LocalPortRanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RemotePortRanges
   (
      this : in out VpnTrafficFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_RemotePortRanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocalAddressRanges
   (
      this : in out VpnTrafficFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_LocalAddressRanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RemoteAddressRanges
   (
      this : in out VpnTrafficFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_RemoteAddressRanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RoutingPolicyType
   (
      this : in out VpnTrafficFilter
   )
   return WinRt.Windows.Networking.Vpn.VpnRoutingPolicyType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Vpn.VpnRoutingPolicyType;
   begin
      Hr := this.m_IVpnTrafficFilter.all.get_RoutingPolicyType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RoutingPolicyType
   (
      this : in out VpnTrafficFilter;
      value : Windows.Networking.Vpn.VpnRoutingPolicyType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnTrafficFilter.all.put_RoutingPolicyType (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VpnTrafficFilterAssignment

   procedure Initialize (this : in out VpnTrafficFilterAssignment) is
   begin
      null;
   end;

   procedure Finalize (this : in out VpnTrafficFilterAssignment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVpnTrafficFilterAssignment, IVpnTrafficFilterAssignment_Ptr);
   begin
      if this.m_IVpnTrafficFilterAssignment /= null then
         if this.m_IVpnTrafficFilterAssignment.all /= null then
            RefCount := this.m_IVpnTrafficFilterAssignment.all.Release;
            Free (this.m_IVpnTrafficFilterAssignment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VpnTrafficFilterAssignment

   function Constructor return VpnTrafficFilterAssignment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Vpn.VpnTrafficFilterAssignment");
      m_ComRetVal  : aliased Windows.Networking.Vpn.IVpnTrafficFilterAssignment;
   begin
      return RetVal : VpnTrafficFilterAssignment do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVpnTrafficFilterAssignment := new Windows.Networking.Vpn.IVpnTrafficFilterAssignment;
            Retval.m_IVpnTrafficFilterAssignment.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VpnTrafficFilterAssignment

   function get_TrafficFilterList
   (
      this : in out VpnTrafficFilterAssignment
   )
   return IVector_IVpnTrafficFilter.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVpnTrafficFilter.Kind;
   begin
      Hr := this.m_IVpnTrafficFilterAssignment.all.get_TrafficFilterList (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVpnTrafficFilter (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AllowOutbound
   (
      this : in out VpnTrafficFilterAssignment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnTrafficFilterAssignment.all.get_AllowOutbound (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowOutbound
   (
      this : in out VpnTrafficFilterAssignment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnTrafficFilterAssignment.all.put_AllowOutbound (value);
   end;

   function get_AllowInbound
   (
      this : in out VpnTrafficFilterAssignment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVpnTrafficFilterAssignment.all.get_AllowInbound (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowInbound
   (
      this : in out VpnTrafficFilterAssignment;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVpnTrafficFilterAssignment.all.put_AllowInbound (value);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics.DirectX;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Perception;
with WinRt.Windows.Perception.Spatial;
with WinRt.Windows.UI.Core;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Holographic is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicCamera

   procedure Initialize (this : in out HolographicCamera) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicCamera) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicCamera, IHolographicCamera_Ptr);
   begin
      if this.m_IHolographicCamera /= null then
         if this.m_IHolographicCamera.all /= null then
            RefCount := this.m_IHolographicCamera.all.Release;
            Free (this.m_IHolographicCamera);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicCamera

   function get_RenderTargetSize
   (
      this : in out HolographicCamera
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IHolographicCamera.all.get_RenderTargetSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewportScaleFactor
   (
      this : in out HolographicCamera
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IHolographicCamera.all.get_ViewportScaleFactor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewportScaleFactor
   (
      this : in out HolographicCamera;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCamera.all.put_ViewportScaleFactor (value);
   end;

   function get_IsStereo
   (
      this : in out HolographicCamera
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHolographicCamera.all.get_IsStereo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out HolographicCamera
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHolographicCamera.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetNearPlaneDistance
   (
      this : in out HolographicCamera;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCamera.all.SetNearPlaneDistance (value);
   end;

   procedure SetFarPlaneDistance
   (
      this : in out HolographicCamera;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCamera.all.SetFarPlaneDistance (value);
   end;

   function get_LeftViewportParameters
   (
      this : in out HolographicCamera
   )
   return WinRt.Windows.Graphics.Holographic.HolographicCameraViewportParameters'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicCameraViewportParameters;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicCameraViewportParameters do
         m_Interface := QInterface (this.m_IHolographicCamera.all);
         Hr := m_Interface.get_LeftViewportParameters (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicCameraViewportParameters := new Windows.Graphics.Holographic.IHolographicCameraViewportParameters;
         Retval.m_IHolographicCameraViewportParameters.all := m_ComRetVal;
      end return;
   end;

   function get_RightViewportParameters
   (
      this : in out HolographicCamera
   )
   return WinRt.Windows.Graphics.Holographic.HolographicCameraViewportParameters'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicCameraViewportParameters;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicCameraViewportParameters do
         m_Interface := QInterface (this.m_IHolographicCamera.all);
         Hr := m_Interface.get_RightViewportParameters (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicCameraViewportParameters := new Windows.Graphics.Holographic.IHolographicCameraViewportParameters;
         Retval.m_IHolographicCameraViewportParameters.all := m_ComRetVal;
      end return;
   end;

   function get_Display
   (
      this : in out HolographicCamera
   )
   return WinRt.Windows.Graphics.Holographic.HolographicDisplay'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicDisplay;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicDisplay do
         m_Interface := QInterface (this.m_IHolographicCamera.all);
         Hr := m_Interface.get_Display (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicDisplay := new Windows.Graphics.Holographic.IHolographicDisplay;
         Retval.m_IHolographicDisplay.all := m_ComRetVal;
      end return;
   end;

   function get_IsPrimaryLayerEnabled
   (
      this : in out HolographicCamera
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera3, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.get_IsPrimaryLayerEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsPrimaryLayerEnabled
   (
      this : in out HolographicCamera;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera3, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.put_IsPrimaryLayerEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxQuadLayerCount
   (
      this : in out HolographicCamera
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera3, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.get_MaxQuadLayerCount (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_QuadLayers
   (
      this : in out HolographicCamera
   )
   return IVector_IHolographicQuadLayer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHolographicQuadLayer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera3, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.get_QuadLayers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IHolographicQuadLayer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CanOverrideViewport
   (
      this : in out HolographicCamera
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera4, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.get_CanOverrideViewport (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsHardwareContentProtectionSupported
   (
      this : in out HolographicCamera
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera5, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.get_IsHardwareContentProtectionSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsHardwareContentProtectionEnabled
   (
      this : in out HolographicCamera
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera5, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.get_IsHardwareContentProtectionEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsHardwareContentProtectionEnabled
   (
      this : in out HolographicCamera;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera5, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCamera.all);
      Hr := m_Interface.put_IsHardwareContentProtectionEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ViewConfiguration
   (
      this : in out HolographicCamera
   )
   return WinRt.Windows.Graphics.Holographic.HolographicViewConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCamera6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicViewConfiguration;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCamera_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCamera6, WinRt.Windows.Graphics.Holographic.IID_IHolographicCamera6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicViewConfiguration do
         m_Interface := QInterface (this.m_IHolographicCamera.all);
         Hr := m_Interface.get_ViewConfiguration (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicViewConfiguration := new Windows.Graphics.Holographic.IHolographicViewConfiguration;
         Retval.m_IHolographicViewConfiguration.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicCameraPose

   procedure Initialize (this : in out HolographicCameraPose) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicCameraPose) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicCameraPose, IHolographicCameraPose_Ptr);
   begin
      if this.m_IHolographicCameraPose /= null then
         if this.m_IHolographicCameraPose.all /= null then
            RefCount := this.m_IHolographicCameraPose.all.Release;
            Free (this.m_IHolographicCameraPose);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicCameraPose

   function get_HolographicCamera
   (
      this : in out HolographicCameraPose
   )
   return WinRt.Windows.Graphics.Holographic.HolographicCamera'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicCamera;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicCamera do
         Hr := this.m_IHolographicCameraPose.all.get_HolographicCamera (m_ComRetVal'Access);
         Retval.m_IHolographicCamera := new Windows.Graphics.Holographic.IHolographicCamera;
         Retval.m_IHolographicCamera.all := m_ComRetVal;
      end return;
   end;

   function get_Viewport
   (
      this : in out HolographicCameraPose
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IHolographicCameraPose.all.get_Viewport (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetViewTransform
   (
      this : in out HolographicCameraPose;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return IReference_HolographicStereoTransform.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_HolographicStereoTransform.Kind;
   begin
      Hr := this.m_IHolographicCameraPose.all.TryGetViewTransform (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_HolographicStereoTransform (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProjectionTransform
   (
      this : in out HolographicCameraPose
   )
   return WinRt.Windows.Graphics.Holographic.HolographicStereoTransform is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicStereoTransform;
   begin
      Hr := this.m_IHolographicCameraPose.all.get_ProjectionTransform (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetCullingFrustum
   (
      this : in out HolographicCameraPose;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHolographicCameraPose.all.TryGetCullingFrustum (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetVisibleFrustum
   (
      this : in out HolographicCameraPose;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHolographicCameraPose.all.TryGetVisibleFrustum (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NearPlaneDistance
   (
      this : in out HolographicCameraPose
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IHolographicCameraPose.all.get_NearPlaneDistance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FarPlaneDistance
   (
      this : in out HolographicCameraPose
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IHolographicCameraPose.all.get_FarPlaneDistance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure OverrideViewTransform
   (
      this : in out HolographicCameraPose;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      coordinateSystemToViewTransform : Windows.Graphics.Holographic.HolographicStereoTransform
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraPose2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraPose_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraPose2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraPose2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraPose.all);
      Hr := m_Interface.OverrideViewTransform (coordinateSystem.m_ISpatialCoordinateSystem.all, coordinateSystemToViewTransform);
      m_RefCount := m_Interface.Release;
   end;

   procedure OverrideProjectionTransform
   (
      this : in out HolographicCameraPose;
      projectionTransform : Windows.Graphics.Holographic.HolographicStereoTransform
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraPose2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraPose_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraPose2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraPose2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraPose.all);
      Hr := m_Interface.OverrideProjectionTransform (projectionTransform);
      m_RefCount := m_Interface.Release;
   end;

   procedure OverrideViewport
   (
      this : in out HolographicCameraPose;
      leftViewport : Windows.Foundation.Rect;
      rightViewport : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraPose2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraPose_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraPose2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraPose2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraPose.all);
      Hr := m_Interface.OverrideViewport (leftViewport, rightViewport);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicCameraRenderingParameters

   procedure Initialize (this : in out HolographicCameraRenderingParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicCameraRenderingParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicCameraRenderingParameters, IHolographicCameraRenderingParameters_Ptr);
   begin
      if this.m_IHolographicCameraRenderingParameters /= null then
         if this.m_IHolographicCameraRenderingParameters.all /= null then
            RefCount := this.m_IHolographicCameraRenderingParameters.all.Release;
            Free (this.m_IHolographicCameraRenderingParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicCameraRenderingParameters

   procedure SetFocusPoint
   (
      this : in out HolographicCameraRenderingParameters;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      position : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCameraRenderingParameters.all.SetFocusPoint (coordinateSystem.m_ISpatialCoordinateSystem.all, position);
   end;

   procedure SetFocusPoint
   (
      this : in out HolographicCameraRenderingParameters;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      position : Windows.Foundation.Numerics.Vector3;
      normal : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCameraRenderingParameters.all.SetFocusPoint (coordinateSystem.m_ISpatialCoordinateSystem.all, position, normal);
   end;

   procedure SetFocusPoint
   (
      this : in out HolographicCameraRenderingParameters;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      position : Windows.Foundation.Numerics.Vector3;
      normal : Windows.Foundation.Numerics.Vector3;
      linearVelocity : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCameraRenderingParameters.all.SetFocusPoint (coordinateSystem.m_ISpatialCoordinateSystem.all, position, normal, linearVelocity);
   end;

   function get_Direct3D11Device
   (
      this : in out HolographicCameraRenderingParameters
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice;
   begin
      Hr := this.m_IHolographicCameraRenderingParameters.all.get_Direct3D11Device (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Direct3D11BackBuffer
   (
      this : in out HolographicCameraRenderingParameters
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
   begin
      Hr := this.m_IHolographicCameraRenderingParameters.all.get_Direct3D11BackBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReprojectionMode
   (
      this : in out HolographicCameraRenderingParameters
   )
   return WinRt.Windows.Graphics.Holographic.HolographicReprojectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicReprojectionMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraRenderingParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraRenderingParameters.all);
      Hr := m_Interface.get_ReprojectionMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ReprojectionMode
   (
      this : in out HolographicCameraRenderingParameters;
      value : Windows.Graphics.Holographic.HolographicReprojectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraRenderingParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraRenderingParameters.all);
      Hr := m_Interface.put_ReprojectionMode (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure CommitDirect3D11DepthBuffer
   (
      this : in out HolographicCameraRenderingParameters;
      value : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters2, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraRenderingParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraRenderingParameters.all);
      Hr := m_Interface.CommitDirect3D11DepthBuffer (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsContentProtectionEnabled
   (
      this : in out HolographicCameraRenderingParameters
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters3, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraRenderingParameters3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraRenderingParameters.all);
      Hr := m_Interface.get_IsContentProtectionEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsContentProtectionEnabled
   (
      this : in out HolographicCameraRenderingParameters;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicCameraRenderingParameters3, WinRt.Windows.Graphics.Holographic.IID_IHolographicCameraRenderingParameters3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicCameraRenderingParameters.all);
      Hr := m_Interface.put_IsContentProtectionEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicCameraViewportParameters

   procedure Initialize (this : in out HolographicCameraViewportParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicCameraViewportParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicCameraViewportParameters, IHolographicCameraViewportParameters_Ptr);
   begin
      if this.m_IHolographicCameraViewportParameters /= null then
         if this.m_IHolographicCameraViewportParameters.all /= null then
            RefCount := this.m_IHolographicCameraViewportParameters.all.Release;
            Free (this.m_IHolographicCameraViewportParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicCameraViewportParameters

   function get_HiddenAreaMesh
   (
      this : in out HolographicCameraViewportParameters
   )
   return WinRt.Windows.Foundation.Numerics.Vector2_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCameraViewportParameters.all.get_HiddenAreaMesh (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Windows.Foundation.Numerics.Vector2_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Vector2 is new To_Ada_Type (WinRt.Windows.Foundation.Numerics.Vector2, WinRt.Windows.Foundation.Numerics.Vector2_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Vector2 (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_VisibleAreaMesh
   (
      this : in out HolographicCameraViewportParameters
   )
   return WinRt.Windows.Foundation.Numerics.Vector2_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicCameraViewportParameters.all.get_VisibleAreaMesh (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Windows.Foundation.Numerics.Vector2_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Vector2 is new To_Ada_Type (WinRt.Windows.Foundation.Numerics.Vector2, WinRt.Windows.Foundation.Numerics.Vector2_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Vector2 (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicDisplay

   procedure Initialize (this : in out HolographicDisplay) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicDisplay) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicDisplay, IHolographicDisplay_Ptr);
   begin
      if this.m_IHolographicDisplay /= null then
         if this.m_IHolographicDisplay.all /= null then
            RefCount := this.m_IHolographicDisplay.all.Release;
            Free (this.m_IHolographicDisplay);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HolographicDisplay

   function GetDefault
   return WinRt.Windows.Graphics.Holographic.HolographicDisplay is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicDisplay");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicDisplayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicDisplay;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicDisplay do
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicDisplayStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHolographicDisplay := new Windows.Graphics.Holographic.IHolographicDisplay;
            Retval.m_IHolographicDisplay.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicDisplay

   function get_DisplayName
   (
      this : in out HolographicDisplay
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHolographicDisplay.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MaxViewportSize
   (
      this : in out HolographicDisplay
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IHolographicDisplay.all.get_MaxViewportSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsStereo
   (
      this : in out HolographicDisplay
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHolographicDisplay.all.get_IsStereo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsOpaque
   (
      this : in out HolographicDisplay
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHolographicDisplay.all.get_IsOpaque (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdapterId
   (
      this : in out HolographicDisplay
   )
   return WinRt.Windows.Graphics.Holographic.HolographicAdapterId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicAdapterId;
   begin
      Hr := this.m_IHolographicDisplay.all.get_AdapterId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SpatialLocator
   (
      this : in out HolographicDisplay
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocator'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocator;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocator do
         Hr := this.m_IHolographicDisplay.all.get_SpatialLocator (m_ComRetVal'Access);
         Retval.m_ISpatialLocator := new Windows.Perception.Spatial.ISpatialLocator;
         Retval.m_ISpatialLocator.all := m_ComRetVal;
      end return;
   end;

   function get_RefreshRate
   (
      this : in out HolographicDisplay
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicDisplay2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicDisplay_Interface, WinRt.Windows.Graphics.Holographic.IHolographicDisplay2, WinRt.Windows.Graphics.Holographic.IID_IHolographicDisplay2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicDisplay.all);
      Hr := m_Interface.get_RefreshRate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryGetViewConfiguration
   (
      this : in out HolographicDisplay;
      kind : Windows.Graphics.Holographic.HolographicViewConfigurationKind
   )
   return WinRt.Windows.Graphics.Holographic.HolographicViewConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicDisplay3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicViewConfiguration;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicDisplay_Interface, WinRt.Windows.Graphics.Holographic.IHolographicDisplay3, WinRt.Windows.Graphics.Holographic.IID_IHolographicDisplay3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicViewConfiguration do
         m_Interface := QInterface (this.m_IHolographicDisplay.all);
         Hr := m_Interface.TryGetViewConfiguration (kind, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicViewConfiguration := new Windows.Graphics.Holographic.IHolographicViewConfiguration;
         Retval.m_IHolographicViewConfiguration.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFrame

   procedure Initialize (this : in out HolographicFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFrame, IHolographicFrame_Ptr);
   begin
      if this.m_IHolographicFrame /= null then
         if this.m_IHolographicFrame.all /= null then
            RefCount := this.m_IHolographicFrame.all.Release;
            Free (this.m_IHolographicFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFrame

   function get_AddedCameras
   (
      this : in out HolographicFrame
   )
   return IVectorView_IHolographicCamera.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHolographicCamera.Kind;
   begin
      Hr := this.m_IHolographicFrame.all.get_AddedCameras (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHolographicCamera (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RemovedCameras
   (
      this : in out HolographicFrame
   )
   return IVectorView_IHolographicCamera.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHolographicCamera.Kind;
   begin
      Hr := this.m_IHolographicFrame.all.get_RemovedCameras (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHolographicCamera (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetRenderingParameters
   (
      this : in out HolographicFrame;
      cameraPose : Windows.Graphics.Holographic.HolographicCameraPose'Class
   )
   return WinRt.Windows.Graphics.Holographic.HolographicCameraRenderingParameters'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicCameraRenderingParameters;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicCameraRenderingParameters do
         Hr := this.m_IHolographicFrame.all.GetRenderingParameters (cameraPose.m_IHolographicCameraPose.all, m_ComRetVal'Access);
         Retval.m_IHolographicCameraRenderingParameters := new Windows.Graphics.Holographic.IHolographicCameraRenderingParameters;
         Retval.m_IHolographicCameraRenderingParameters.all := m_ComRetVal;
      end return;
   end;

   function get_Duration
   (
      this : in out HolographicFrame
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrame.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrentPrediction
   (
      this : in out HolographicFrame
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFramePrediction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicFramePrediction;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicFramePrediction do
         Hr := this.m_IHolographicFrame.all.get_CurrentPrediction (m_ComRetVal'Access);
         Retval.m_IHolographicFramePrediction := new Windows.Graphics.Holographic.IHolographicFramePrediction;
         Retval.m_IHolographicFramePrediction.all := m_ComRetVal;
      end return;
   end;

   procedure UpdateCurrentPrediction
   (
      this : in out HolographicFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicFrame.all.UpdateCurrentPrediction;
   end;

   function PresentUsingCurrentPrediction
   (
      this : in out HolographicFrame
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFramePresentResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicFramePresentResult;
   begin
      Hr := this.m_IHolographicFrame.all.PresentUsingCurrentPrediction (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function PresentUsingCurrentPrediction
   (
      this : in out HolographicFrame;
      waitBehavior : Windows.Graphics.Holographic.HolographicFramePresentWaitBehavior
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFramePresentResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicFramePresentResult;
   begin
      Hr := this.m_IHolographicFrame.all.PresentUsingCurrentPrediction (waitBehavior, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure WaitForFrameToFinish
   (
      this : in out HolographicFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicFrame.all.WaitForFrameToFinish;
   end;

   function GetQuadLayerUpdateParameters
   (
      this : in out HolographicFrame;
      layer : Windows.Graphics.Holographic.HolographicQuadLayer'Class
   )
   return WinRt.Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicFrame_Interface, WinRt.Windows.Graphics.Holographic.IHolographicFrame2, WinRt.Windows.Graphics.Holographic.IID_IHolographicFrame2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters do
         m_Interface := QInterface (this.m_IHolographicFrame.all);
         Hr := m_Interface.GetQuadLayerUpdateParameters (layer.m_IHolographicQuadLayer.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicQuadLayerUpdateParameters := new Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters;
         Retval.m_IHolographicQuadLayerUpdateParameters.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out HolographicFrame
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFrameId is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicFrame3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicFrameId;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicFrame_Interface, WinRt.Windows.Graphics.Holographic.IHolographicFrame3, WinRt.Windows.Graphics.Holographic.IID_IHolographicFrame3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicFrame.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFramePrediction

   procedure Initialize (this : in out HolographicFramePrediction) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFramePrediction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFramePrediction, IHolographicFramePrediction_Ptr);
   begin
      if this.m_IHolographicFramePrediction /= null then
         if this.m_IHolographicFramePrediction.all /= null then
            RefCount := this.m_IHolographicFramePrediction.all.Release;
            Free (this.m_IHolographicFramePrediction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFramePrediction

   function get_CameraPoses
   (
      this : in out HolographicFramePrediction
   )
   return IVectorView_IHolographicCameraPose.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHolographicCameraPose.Kind;
   begin
      Hr := this.m_IHolographicFramePrediction.all.get_CameraPoses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHolographicCameraPose (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Timestamp
   (
      this : in out HolographicFramePrediction
   )
   return WinRt.Windows.Perception.PerceptionTimestamp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.IPerceptionTimestamp;
   begin
      return RetVal : WinRt.Windows.Perception.PerceptionTimestamp do
         Hr := this.m_IHolographicFramePrediction.all.get_Timestamp (m_ComRetVal'Access);
         Retval.m_IPerceptionTimestamp := new Windows.Perception.IPerceptionTimestamp;
         Retval.m_IPerceptionTimestamp.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFramePresentationMonitor

   procedure Initialize (this : in out HolographicFramePresentationMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFramePresentationMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFramePresentationMonitor, IHolographicFramePresentationMonitor_Ptr);
   begin
      if this.m_IHolographicFramePresentationMonitor /= null then
         if this.m_IHolographicFramePresentationMonitor.all /= null then
            RefCount := this.m_IHolographicFramePresentationMonitor.all.Release;
            Free (this.m_IHolographicFramePresentationMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFramePresentationMonitor

   function ReadReports
   (
      this : in out HolographicFramePresentationMonitor
   )
   return IVectorView_IHolographicFramePresentationReport.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHolographicFramePresentationReport.Kind;
   begin
      Hr := this.m_IHolographicFramePresentationMonitor.all.ReadReports (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHolographicFramePresentationReport (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Close
   (
      this : in out HolographicFramePresentationMonitor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicFramePresentationMonitor_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicFramePresentationMonitor.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFramePresentationReport

   procedure Initialize (this : in out HolographicFramePresentationReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFramePresentationReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFramePresentationReport, IHolographicFramePresentationReport_Ptr);
   begin
      if this.m_IHolographicFramePresentationReport /= null then
         if this.m_IHolographicFramePresentationReport.all /= null then
            RefCount := this.m_IHolographicFramePresentationReport.all.Release;
            Free (this.m_IHolographicFramePresentationReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFramePresentationReport

   function get_CompositorGpuDuration
   (
      this : in out HolographicFramePresentationReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFramePresentationReport.all.get_CompositorGpuDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppGpuDuration
   (
      this : in out HolographicFramePresentationReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFramePresentationReport.all.get_AppGpuDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppGpuOverrun
   (
      this : in out HolographicFramePresentationReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFramePresentationReport.all.get_AppGpuOverrun (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MissedPresentationOpportunityCount
   (
      this : in out HolographicFramePresentationReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHolographicFramePresentationReport.all.get_MissedPresentationOpportunityCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PresentationCount
   (
      this : in out HolographicFramePresentationReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHolographicFramePresentationReport.all.get_PresentationCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFrameRenderingReport

   procedure Initialize (this : in out HolographicFrameRenderingReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFrameRenderingReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFrameRenderingReport, IHolographicFrameRenderingReport_Ptr);
   begin
      if this.m_IHolographicFrameRenderingReport /= null then
         if this.m_IHolographicFrameRenderingReport.all /= null then
            RefCount := this.m_IHolographicFrameRenderingReport.all.Release;
            Free (this.m_IHolographicFrameRenderingReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFrameRenderingReport

   function get_FrameId
   (
      this : in out HolographicFrameRenderingReport
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFrameId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicFrameId;
   begin
      Hr := this.m_IHolographicFrameRenderingReport.all.get_FrameId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MissedLatchCount
   (
      this : in out HolographicFrameRenderingReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHolographicFrameRenderingReport.all.get_MissedLatchCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativeFrameReadyTime
   (
      this : in out HolographicFrameRenderingReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrameRenderingReport.all.get_SystemRelativeFrameReadyTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativeActualGpuFinishTime
   (
      this : in out HolographicFrameRenderingReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrameRenderingReport.all.get_SystemRelativeActualGpuFinishTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativeTargetLatchTime
   (
      this : in out HolographicFrameRenderingReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrameRenderingReport.all.get_SystemRelativeTargetLatchTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFrameScanoutMonitor

   procedure Initialize (this : in out HolographicFrameScanoutMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFrameScanoutMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFrameScanoutMonitor, IHolographicFrameScanoutMonitor_Ptr);
   begin
      if this.m_IHolographicFrameScanoutMonitor /= null then
         if this.m_IHolographicFrameScanoutMonitor.all /= null then
            RefCount := this.m_IHolographicFrameScanoutMonitor.all.Release;
            Free (this.m_IHolographicFrameScanoutMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFrameScanoutMonitor

   function ReadReports
   (
      this : in out HolographicFrameScanoutMonitor
   )
   return IVector_IHolographicFrameScanoutReport.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHolographicFrameScanoutReport.Kind;
   begin
      Hr := this.m_IHolographicFrameScanoutMonitor.all.ReadReports (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHolographicFrameScanoutReport (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Close
   (
      this : in out HolographicFrameScanoutMonitor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicFrameScanoutMonitor_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicFrameScanoutMonitor.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicFrameScanoutReport

   procedure Initialize (this : in out HolographicFrameScanoutReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicFrameScanoutReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicFrameScanoutReport, IHolographicFrameScanoutReport_Ptr);
   begin
      if this.m_IHolographicFrameScanoutReport /= null then
         if this.m_IHolographicFrameScanoutReport.all /= null then
            RefCount := this.m_IHolographicFrameScanoutReport.all.Release;
            Free (this.m_IHolographicFrameScanoutReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicFrameScanoutReport

   function get_RenderingReport
   (
      this : in out HolographicFrameScanoutReport
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFrameRenderingReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicFrameRenderingReport;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicFrameRenderingReport do
         Hr := this.m_IHolographicFrameScanoutReport.all.get_RenderingReport (m_ComRetVal'Access);
         Retval.m_IHolographicFrameRenderingReport := new Windows.Graphics.Holographic.IHolographicFrameRenderingReport;
         Retval.m_IHolographicFrameRenderingReport.all := m_ComRetVal;
      end return;
   end;

   function get_MissedScanoutCount
   (
      this : in out HolographicFrameScanoutReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHolographicFrameScanoutReport.all.get_MissedScanoutCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativeLatchTime
   (
      this : in out HolographicFrameScanoutReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrameScanoutReport.all.get_SystemRelativeLatchTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativeScanoutStartTime
   (
      this : in out HolographicFrameScanoutReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrameScanoutReport.all.get_SystemRelativeScanoutStartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemRelativePhotonTime
   (
      this : in out HolographicFrameScanoutReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IHolographicFrameScanoutReport.all.get_SystemRelativePhotonTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicQuadLayer

   procedure Initialize (this : in out HolographicQuadLayer) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicQuadLayer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicQuadLayer, IHolographicQuadLayer_Ptr);
   begin
      if this.m_IHolographicQuadLayer /= null then
         if this.m_IHolographicQuadLayer.all /= null then
            RefCount := this.m_IHolographicQuadLayer.all.Release;
            Free (this.m_IHolographicQuadLayer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HolographicQuadLayer

   function Constructor
   (
      size : Windows.Foundation.Size
   )
   return HolographicQuadLayer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicQuadLayer");
      m_Factory    : access IHolographicQuadLayerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Holographic.IHolographicQuadLayer;
   begin
      return RetVal : HolographicQuadLayer do
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicQuadLayerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (size, m_ComRetVal'Access);
            Retval.m_IHolographicQuadLayer := new Windows.Graphics.Holographic.IHolographicQuadLayer;
            Retval.m_IHolographicQuadLayer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      size : Windows.Foundation.Size;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat
   )
   return HolographicQuadLayer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicQuadLayer");
      m_Factory    : access IHolographicQuadLayerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Holographic.IHolographicQuadLayer;
   begin
      return RetVal : HolographicQuadLayer do
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicQuadLayerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPixelFormat (size, pixelFormat, m_ComRetVal'Access);
            Retval.m_IHolographicQuadLayer := new Windows.Graphics.Holographic.IHolographicQuadLayer;
            Retval.m_IHolographicQuadLayer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicQuadLayer

   procedure Close
   (
      this : in out HolographicQuadLayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicQuadLayer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicQuadLayer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_PixelFormat
   (
      this : in out HolographicQuadLayer
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_IHolographicQuadLayer.all.get_PixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out HolographicQuadLayer
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IHolographicQuadLayer.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicQuadLayerUpdateParameters

   procedure Initialize (this : in out HolographicQuadLayerUpdateParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicQuadLayerUpdateParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicQuadLayerUpdateParameters, IHolographicQuadLayerUpdateParameters_Ptr);
   begin
      if this.m_IHolographicQuadLayerUpdateParameters /= null then
         if this.m_IHolographicQuadLayerUpdateParameters.all /= null then
            RefCount := this.m_IHolographicQuadLayerUpdateParameters.all.Release;
            Free (this.m_IHolographicQuadLayerUpdateParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicQuadLayerUpdateParameters

   function AcquireBufferToUpdateContent
   (
      this : in out HolographicQuadLayerUpdateParameters
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
   begin
      Hr := this.m_IHolographicQuadLayerUpdateParameters.all.AcquireBufferToUpdateContent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure UpdateViewport
   (
      this : in out HolographicQuadLayerUpdateParameters;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicQuadLayerUpdateParameters.all.UpdateViewport (value);
   end;

   procedure UpdateContentProtectionEnabled
   (
      this : in out HolographicQuadLayerUpdateParameters;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicQuadLayerUpdateParameters.all.UpdateContentProtectionEnabled (value);
   end;

   procedure UpdateExtents
   (
      this : in out HolographicQuadLayerUpdateParameters;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicQuadLayerUpdateParameters.all.UpdateExtents (value);
   end;

   procedure UpdateLocationWithStationaryMode
   (
      this : in out HolographicQuadLayerUpdateParameters;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      position : Windows.Foundation.Numerics.Vector3;
      orientation : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicQuadLayerUpdateParameters.all.UpdateLocationWithStationaryMode (coordinateSystem.m_ISpatialCoordinateSystem.all, position, orientation);
   end;

   procedure UpdateLocationWithDisplayRelativeMode
   (
      this : in out HolographicQuadLayerUpdateParameters;
      position : Windows.Foundation.Numerics.Vector3;
      orientation : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicQuadLayerUpdateParameters.all.UpdateLocationWithDisplayRelativeMode (position, orientation);
   end;

   function get_CanAcquireWithHardwareProtection
   (
      this : in out HolographicQuadLayerUpdateParameters
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters2, WinRt.Windows.Graphics.Holographic.IID_IHolographicQuadLayerUpdateParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicQuadLayerUpdateParameters.all);
      Hr := m_Interface.get_CanAcquireWithHardwareProtection (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AcquireBufferToUpdateContentWithHardwareProtection
   (
      this : in out HolographicQuadLayerUpdateParameters
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters_Interface, WinRt.Windows.Graphics.Holographic.IHolographicQuadLayerUpdateParameters2, WinRt.Windows.Graphics.Holographic.IID_IHolographicQuadLayerUpdateParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicQuadLayerUpdateParameters.all);
      Hr := m_Interface.AcquireBufferToUpdateContentWithHardwareProtection (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicSpace

   procedure Initialize (this : in out HolographicSpace) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicSpace) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicSpace, IHolographicSpace_Ptr);
   begin
      if this.m_IHolographicSpace /= null then
         if this.m_IHolographicSpace.all /= null then
            RefCount := this.m_IHolographicSpace.all.Release;
            Free (this.m_IHolographicSpace);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HolographicSpace

   function CreateForCoreWindow
   (
      window : Windows.UI.Core.CoreWindow'Class
   )
   return WinRt.Windows.Graphics.Holographic.HolographicSpace is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicSpace");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicSpaceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicSpace;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicSpace do
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicSpaceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForCoreWindow (window.m_ICoreWindow.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHolographicSpace := new Windows.Graphics.Holographic.IHolographicSpace;
            Retval.m_IHolographicSpace.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsConfigured
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicSpace");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicSpaceStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHolographicSpaceStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsConfigured (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicSpace");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicSpaceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHolographicSpaceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_IsAvailable
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicSpace");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicSpaceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHolographicSpaceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsAvailable (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function add_IsAvailableChanged
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicSpace");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicSpaceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHolographicSpaceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_IsAvailableChanged (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_IsAvailableChanged
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Holographic.HolographicSpace");
      m_Factory        : access WinRt.Windows.Graphics.Holographic.IHolographicSpaceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHolographicSpaceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_IsAvailableChanged (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicSpace

   function get_PrimaryAdapterId
   (
      this : in out HolographicSpace
   )
   return WinRt.Windows.Graphics.Holographic.HolographicAdapterId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicAdapterId;
   begin
      Hr := this.m_IHolographicSpace.all.get_PrimaryAdapterId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetDirect3D11Device
   (
      this : in out HolographicSpace;
      value : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicSpace.all.SetDirect3D11Device (value);
   end;

   function add_CameraAdded
   (
      this : in out HolographicSpace;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IHolographicSpace.all.add_CameraAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CameraAdded
   (
      this : in out HolographicSpace;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicSpace.all.remove_CameraAdded (cookie);
   end;

   function add_CameraRemoved
   (
      this : in out HolographicSpace;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IHolographicSpace.all.add_CameraRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CameraRemoved
   (
      this : in out HolographicSpace;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicSpace.all.remove_CameraRemoved (cookie);
   end;

   function CreateNextFrame
   (
      this : in out HolographicSpace
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicFrame;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicFrame do
         Hr := this.m_IHolographicSpace.all.CreateNextFrame (m_ComRetVal'Access);
         Retval.m_IHolographicFrame := new Windows.Graphics.Holographic.IHolographicFrame;
         Retval.m_IHolographicFrame.all := m_ComRetVal;
      end return;
   end;

   function get_UserPresence
   (
      this : in out HolographicSpace
   )
   return WinRt.Windows.Graphics.Holographic.HolographicSpaceUserPresence is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicSpaceUserPresence;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace2, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicSpace.all);
      Hr := m_Interface.get_UserPresence (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_UserPresenceChanged
   (
      this : in out HolographicSpace;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace2, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicSpace.all);
      Hr := m_Interface.add_UserPresenceChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_UserPresenceChanged
   (
      this : in out HolographicSpace;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace2, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicSpace.all);
      Hr := m_Interface.remove_UserPresenceChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure WaitForNextFrameReady
   (
      this : in out HolographicSpace
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace2, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicSpace.all);
      Hr := m_Interface.WaitForNextFrameReady;
      m_RefCount := m_Interface.Release;
   end;

   procedure WaitForNextFrameReadyWithHeadStart
   (
      this : in out HolographicSpace;
      requestedHeadStartDuration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace2, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHolographicSpace.all);
      Hr := m_Interface.WaitForNextFrameReadyWithHeadStart (requestedHeadStartDuration);
      m_RefCount := m_Interface.Release;
   end;

   function CreateFramePresentationMonitor
   (
      this : in out HolographicSpace;
      maxQueuedReports : WinRt.UInt32
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFramePresentationMonitor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicFramePresentationMonitor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace2, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicFramePresentationMonitor do
         m_Interface := QInterface (this.m_IHolographicSpace.all);
         Hr := m_Interface.CreateFramePresentationMonitor (maxQueuedReports, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicFramePresentationMonitor := new Windows.Graphics.Holographic.IHolographicFramePresentationMonitor;
         Retval.m_IHolographicFramePresentationMonitor.all := m_ComRetVal;
      end return;
   end;

   function CreateFrameScanoutMonitor
   (
      this : in out HolographicSpace;
      maxQueuedReports : WinRt.UInt32
   )
   return WinRt.Windows.Graphics.Holographic.HolographicFrameScanoutMonitor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Holographic.IHolographicSpace3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicFrameScanoutMonitor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Holographic.IHolographicSpace_Interface, WinRt.Windows.Graphics.Holographic.IHolographicSpace3, WinRt.Windows.Graphics.Holographic.IID_IHolographicSpace3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicFrameScanoutMonitor do
         m_Interface := QInterface (this.m_IHolographicSpace.all);
         Hr := m_Interface.CreateFrameScanoutMonitor (maxQueuedReports, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHolographicFrameScanoutMonitor := new Windows.Graphics.Holographic.IHolographicFrameScanoutMonitor;
         Retval.m_IHolographicFrameScanoutMonitor.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicSpaceCameraAddedEventArgs

   procedure Initialize (this : in out HolographicSpaceCameraAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicSpaceCameraAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicSpaceCameraAddedEventArgs, IHolographicSpaceCameraAddedEventArgs_Ptr);
   begin
      if this.m_IHolographicSpaceCameraAddedEventArgs /= null then
         if this.m_IHolographicSpaceCameraAddedEventArgs.all /= null then
            RefCount := this.m_IHolographicSpaceCameraAddedEventArgs.all.Release;
            Free (this.m_IHolographicSpaceCameraAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicSpaceCameraAddedEventArgs

   function get_Camera
   (
      this : in out HolographicSpaceCameraAddedEventArgs
   )
   return WinRt.Windows.Graphics.Holographic.HolographicCamera'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicCamera;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicCamera do
         Hr := this.m_IHolographicSpaceCameraAddedEventArgs.all.get_Camera (m_ComRetVal'Access);
         Retval.m_IHolographicCamera := new Windows.Graphics.Holographic.IHolographicCamera;
         Retval.m_IHolographicCamera.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out HolographicSpaceCameraAddedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IHolographicSpaceCameraAddedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicSpaceCameraRemovedEventArgs

   procedure Initialize (this : in out HolographicSpaceCameraRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicSpaceCameraRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicSpaceCameraRemovedEventArgs, IHolographicSpaceCameraRemovedEventArgs_Ptr);
   begin
      if this.m_IHolographicSpaceCameraRemovedEventArgs /= null then
         if this.m_IHolographicSpaceCameraRemovedEventArgs.all /= null then
            RefCount := this.m_IHolographicSpaceCameraRemovedEventArgs.all.Release;
            Free (this.m_IHolographicSpaceCameraRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicSpaceCameraRemovedEventArgs

   function get_Camera
   (
      this : in out HolographicSpaceCameraRemovedEventArgs
   )
   return WinRt.Windows.Graphics.Holographic.HolographicCamera'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicCamera;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicCamera do
         Hr := this.m_IHolographicSpaceCameraRemovedEventArgs.all.get_Camera (m_ComRetVal'Access);
         Retval.m_IHolographicCamera := new Windows.Graphics.Holographic.IHolographicCamera;
         Retval.m_IHolographicCamera.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicViewConfiguration

   procedure Initialize (this : in out HolographicViewConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicViewConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicViewConfiguration, IHolographicViewConfiguration_Ptr);
   begin
      if this.m_IHolographicViewConfiguration /= null then
         if this.m_IHolographicViewConfiguration.all /= null then
            RefCount := this.m_IHolographicViewConfiguration.all.Release;
            Free (this.m_IHolographicViewConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicViewConfiguration

   function get_NativeRenderTargetSize
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_NativeRenderTargetSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RenderTargetSize
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_RenderTargetSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestRenderTargetSize
   (
      this : in out HolographicViewConfiguration;
      size : Windows.Foundation.Size
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.RequestRenderTargetSize (size, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedPixelFormats
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_SupportedPixelFormats (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelFormat
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_PixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PixelFormat
   (
      this : in out HolographicViewConfiguration;
      value : Windows.Graphics.DirectX.DirectXPixelFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.put_PixelFormat (value);
   end;

   function get_IsStereo
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_IsStereo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RefreshRate
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_RefreshRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Windows.Graphics.Holographic.HolographicViewConfigurationKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.HolographicViewConfigurationKind;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Display
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Windows.Graphics.Holographic.HolographicDisplay'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Holographic.IHolographicDisplay;
   begin
      return RetVal : WinRt.Windows.Graphics.Holographic.HolographicDisplay do
         Hr := this.m_IHolographicViewConfiguration.all.get_Display (m_ComRetVal'Access);
         Retval.m_IHolographicDisplay := new Windows.Graphics.Holographic.IHolographicDisplay;
         Retval.m_IHolographicDisplay.all := m_ComRetVal;
      end return;
   end;

   function get_IsEnabled
   (
      this : in out HolographicViewConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out HolographicViewConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicViewConfiguration.all.put_IsEnabled (value);
   end;

end;

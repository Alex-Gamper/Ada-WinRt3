--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.WiFiDirect is

   package IAsyncOperation_WiFiDirectDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDevice);
   package AsyncOperationCompletedHandler_WiFiDirectDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDevice);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectAdvertisement

   procedure Initialize (this : in out WiFiDirectAdvertisement) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectAdvertisement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectAdvertisement, IWiFiDirectAdvertisement_Ptr);
   begin
      if this.m_IWiFiDirectAdvertisement /= null then
         if this.m_IWiFiDirectAdvertisement.all /= null then
            RefCount := this.m_IWiFiDirectAdvertisement.all.Release;
            Free (this.m_IWiFiDirectAdvertisement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectAdvertisement

   function get_InformationElements
   (
      this : in out WiFiDirectAdvertisement
   )
   return IVector_IWiFiDirectInformationElement.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWiFiDirectInformationElement.Kind;
   begin
      Hr := this.m_IWiFiDirectAdvertisement.all.get_InformationElements (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IWiFiDirectInformationElement (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InformationElements
   (
      this : in out WiFiDirectAdvertisement;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectAdvertisement.all.put_InformationElements (value);
   end;

   function get_ListenStateDiscoverability
   (
      this : in out WiFiDirectAdvertisement
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectAdvertisementListenStateDiscoverability is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.WiFiDirectAdvertisementListenStateDiscoverability;
   begin
      Hr := this.m_IWiFiDirectAdvertisement.all.get_ListenStateDiscoverability (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ListenStateDiscoverability
   (
      this : in out WiFiDirectAdvertisement;
      value : Windows.Devices.WiFiDirect.WiFiDirectAdvertisementListenStateDiscoverability
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectAdvertisement.all.put_ListenStateDiscoverability (value);
   end;

   function get_IsAutonomousGroupOwnerEnabled
   (
      this : in out WiFiDirectAdvertisement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiDirectAdvertisement.all.get_IsAutonomousGroupOwnerEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAutonomousGroupOwnerEnabled
   (
      this : in out WiFiDirectAdvertisement;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectAdvertisement.all.put_IsAutonomousGroupOwnerEnabled (value);
   end;

   function get_LegacySettings
   (
      this : in out WiFiDirectAdvertisement
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectLegacySettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.IWiFiDirectLegacySettings;
   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.WiFiDirectLegacySettings do
         Hr := this.m_IWiFiDirectAdvertisement.all.get_LegacySettings (m_ComRetVal'Access);
         Retval.m_IWiFiDirectLegacySettings := new Windows.Devices.WiFiDirect.IWiFiDirectLegacySettings;
         Retval.m_IWiFiDirectLegacySettings.all := m_ComRetVal;
      end return;
   end;

   function get_SupportedConfigurationMethods
   (
      this : in out WiFiDirectAdvertisement
   )
   return IVector_WiFiDirectConfigurationMethod.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.WiFiDirect.IWiFiDirectAdvertisement2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_WiFiDirectConfigurationMethod.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectAdvertisement_Interface, WinRt.Windows.Devices.WiFiDirect.IWiFiDirectAdvertisement2, WinRt.Windows.Devices.WiFiDirect.IID_IWiFiDirectAdvertisement2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectAdvertisement.all);
      Hr := m_Interface.get_SupportedConfigurationMethods (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_WiFiDirectConfigurationMethod (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectAdvertisementPublisher

   procedure Initialize (this : in out WiFiDirectAdvertisementPublisher) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectAdvertisementPublisher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectAdvertisementPublisher, IWiFiDirectAdvertisementPublisher_Ptr);
   begin
      if this.m_IWiFiDirectAdvertisementPublisher /= null then
         if this.m_IWiFiDirectAdvertisementPublisher.all /= null then
            RefCount := this.m_IWiFiDirectAdvertisementPublisher.all.Release;
            Free (this.m_IWiFiDirectAdvertisementPublisher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WiFiDirectAdvertisementPublisher

   function Constructor return WiFiDirectAdvertisementPublisher is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisher");
      m_ComRetVal  : aliased Windows.Devices.WiFiDirect.IWiFiDirectAdvertisementPublisher;
   begin
      return RetVal : WiFiDirectAdvertisementPublisher do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWiFiDirectAdvertisementPublisher := new Windows.Devices.WiFiDirect.IWiFiDirectAdvertisementPublisher;
            Retval.m_IWiFiDirectAdvertisementPublisher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectAdvertisementPublisher

   function get_Advertisement
   (
      this : in out WiFiDirectAdvertisementPublisher
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectAdvertisement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.IWiFiDirectAdvertisement;
   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.WiFiDirectAdvertisement do
         Hr := this.m_IWiFiDirectAdvertisementPublisher.all.get_Advertisement (m_ComRetVal'Access);
         Retval.m_IWiFiDirectAdvertisement := new Windows.Devices.WiFiDirect.IWiFiDirectAdvertisement;
         Retval.m_IWiFiDirectAdvertisement.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out WiFiDirectAdvertisementPublisher
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatus;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_StatusChanged
   (
      this : in out WiFiDirectAdvertisementPublisher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisher.all.add_StatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out WiFiDirectAdvertisementPublisher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisher.all.remove_StatusChanged (token);
   end;

   procedure Start
   (
      this : in out WiFiDirectAdvertisementPublisher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisher.all.Start;
   end;

   procedure Stop
   (
      this : in out WiFiDirectAdvertisementPublisher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectAdvertisementPublisherStatusChangedEventArgs

   procedure Initialize (this : in out WiFiDirectAdvertisementPublisherStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectAdvertisementPublisherStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectAdvertisementPublisherStatusChangedEventArgs, IWiFiDirectAdvertisementPublisherStatusChangedEventArgs_Ptr);
   begin
      if this.m_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs /= null then
         if this.m_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs.all /= null then
            RefCount := this.m_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs.all.Release;
            Free (this.m_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectAdvertisementPublisherStatusChangedEventArgs

   function get_Status
   (
      this : in out WiFiDirectAdvertisementPublisherStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.WiFiDirectAdvertisementPublisherStatus;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Error
   (
      this : in out WiFiDirectAdvertisementPublisherStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.WiFiDirectError;
   begin
      Hr := this.m_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectConnectionListener

   procedure Initialize (this : in out WiFiDirectConnectionListener) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectConnectionListener) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectConnectionListener, IWiFiDirectConnectionListener_Ptr);
   begin
      if this.m_IWiFiDirectConnectionListener /= null then
         if this.m_IWiFiDirectConnectionListener.all /= null then
            RefCount := this.m_IWiFiDirectConnectionListener.all.Release;
            Free (this.m_IWiFiDirectConnectionListener);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WiFiDirectConnectionListener

   function Constructor return WiFiDirectConnectionListener is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectConnectionListener");
      m_ComRetVal  : aliased Windows.Devices.WiFiDirect.IWiFiDirectConnectionListener;
   begin
      return RetVal : WiFiDirectConnectionListener do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWiFiDirectConnectionListener := new Windows.Devices.WiFiDirect.IWiFiDirectConnectionListener;
            Retval.m_IWiFiDirectConnectionListener.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectConnectionListener

   function add_ConnectionRequested
   (
      this : in out WiFiDirectConnectionListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectConnectionListener.all.add_ConnectionRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConnectionRequested
   (
      this : in out WiFiDirectConnectionListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectConnectionListener.all.remove_ConnectionRequested (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectConnectionParameters

   procedure Initialize (this : in out WiFiDirectConnectionParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectConnectionParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectConnectionParameters, IWiFiDirectConnectionParameters_Ptr);
   begin
      if this.m_IWiFiDirectConnectionParameters /= null then
         if this.m_IWiFiDirectConnectionParameters.all /= null then
            RefCount := this.m_IWiFiDirectConnectionParameters.all.Release;
            Free (this.m_IWiFiDirectConnectionParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WiFiDirectConnectionParameters

   function Constructor return WiFiDirectConnectionParameters is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectConnectionParameters");
      m_ComRetVal  : aliased Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters;
   begin
      return RetVal : WiFiDirectConnectionParameters do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWiFiDirectConnectionParameters := new Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters;
            Retval.m_IWiFiDirectConnectionParameters.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WiFiDirectConnectionParameters

   function GetDevicePairingKinds
   (
      configurationMethod : Windows.Devices.WiFiDirect.WiFiDirectConfigurationMethod
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingKinds is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectConnectionParameters");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParametersStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DevicePairingKinds;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectConnectionParametersStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDevicePairingKinds (configurationMethod, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectConnectionParameters

   function get_GroupOwnerIntent
   (
      this : in out WiFiDirectConnectionParameters
   )
   return WinRt.Int16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int16;
   begin
      Hr := this.m_IWiFiDirectConnectionParameters.all.get_GroupOwnerIntent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GroupOwnerIntent
   (
      this : in out WiFiDirectConnectionParameters;
      value : WinRt.Int16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectConnectionParameters.all.put_GroupOwnerIntent (value);
   end;

   function get_PreferenceOrderedConfigurationMethods
   (
      this : in out WiFiDirectConnectionParameters
   )
   return IVector_WiFiDirectConfigurationMethod.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_WiFiDirectConfigurationMethod.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters_Interface, WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters2, WinRt.Windows.Devices.WiFiDirect.IID_IWiFiDirectConnectionParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectConnectionParameters.all);
      Hr := m_Interface.get_PreferenceOrderedConfigurationMethods (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_WiFiDirectConfigurationMethod (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PreferredPairingProcedure
   (
      this : in out WiFiDirectConnectionParameters
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectPairingProcedure is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.WiFiDirectPairingProcedure;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters_Interface, WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters2, WinRt.Windows.Devices.WiFiDirect.IID_IWiFiDirectConnectionParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectConnectionParameters.all);
      Hr := m_Interface.get_PreferredPairingProcedure (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PreferredPairingProcedure
   (
      this : in out WiFiDirectConnectionParameters;
      value : Windows.Devices.WiFiDirect.WiFiDirectPairingProcedure
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters_Interface, WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionParameters2, WinRt.Windows.Devices.WiFiDirect.IID_IWiFiDirectConnectionParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectConnectionParameters.all);
      Hr := m_Interface.put_PreferredPairingProcedure (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectConnectionRequest

   procedure Initialize (this : in out WiFiDirectConnectionRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectConnectionRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectConnectionRequest, IWiFiDirectConnectionRequest_Ptr);
   begin
      if this.m_IWiFiDirectConnectionRequest /= null then
         if this.m_IWiFiDirectConnectionRequest.all /= null then
            RefCount := this.m_IWiFiDirectConnectionRequest.all.Release;
            Free (this.m_IWiFiDirectConnectionRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectConnectionRequest

   function get_DeviceInformation
   (
      this : in out WiFiDirectConnectionRequest
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IWiFiDirectConnectionRequest.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out WiFiDirectConnectionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectConnectionRequest_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectConnectionRequest.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectConnectionRequestedEventArgs

   procedure Initialize (this : in out WiFiDirectConnectionRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectConnectionRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectConnectionRequestedEventArgs, IWiFiDirectConnectionRequestedEventArgs_Ptr);
   begin
      if this.m_IWiFiDirectConnectionRequestedEventArgs /= null then
         if this.m_IWiFiDirectConnectionRequestedEventArgs.all /= null then
            RefCount := this.m_IWiFiDirectConnectionRequestedEventArgs.all.Release;
            Free (this.m_IWiFiDirectConnectionRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectConnectionRequestedEventArgs

   function GetConnectionRequest
   (
      this : in out WiFiDirectConnectionRequestedEventArgs
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectConnectionRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.IWiFiDirectConnectionRequest;
   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.WiFiDirectConnectionRequest do
         Hr := this.m_IWiFiDirectConnectionRequestedEventArgs.all.GetConnectionRequest (m_ComRetVal'Access);
         Retval.m_IWiFiDirectConnectionRequest := new Windows.Devices.WiFiDirect.IWiFiDirectConnectionRequest;
         Retval.m_IWiFiDirectConnectionRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectDevice

   procedure Initialize (this : in out WiFiDirectDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectDevice, IWiFiDirectDevice_Ptr);
   begin
      if this.m_IWiFiDirectDevice /= null then
         if this.m_IWiFiDirectDevice.all /= null then
            RefCount := this.m_IWiFiDirectDevice.all.Release;
            Free (this.m_IWiFiDirectDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WiFiDirectDevice

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectDevice");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectDevice");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDevice;
      m_IID            : aliased WinRt.IID := (3671071585, 43053, 22124, (186, 130, 34, 76, 17, 80, 6, 105 )); -- Windows.Devices.WiFiDirect.WiFiDirectDevice;
      m_HandlerIID     : aliased WinRt.IID := (3544890903, 64281, 22462, (188, 65, 14, 184, 61, 234, 21, 28 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectDevice.Kind := new AsyncOperationCompletedHandler_WiFiDirectDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectDevice.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.WiFiDirectDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IWiFiDirectDevice := new Windows.Devices.WiFiDirect.IWiFiDirectDevice;
                     Retval.m_IWiFiDirectDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector
   (
      type_x : Windows.Devices.WiFiDirect.WiFiDirectDeviceSelectorType
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectDevice");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectDeviceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (type_x, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString;
      connectionParameters : Windows.Devices.WiFiDirect.WiFiDirectConnectionParameters'Class
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectDevice");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDeviceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDevice;
      m_IID            : aliased WinRt.IID := (3671071585, 43053, 22124, (186, 130, 34, 76, 17, 80, 6, 105 )); -- Windows.Devices.WiFiDirect.WiFiDirectDevice;
      m_HandlerIID     : aliased WinRt.IID := (3544890903, 64281, 22462, (188, 65, 14, 184, 61, 234, 21, 28 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectDevice.Kind := new AsyncOperationCompletedHandler_WiFiDirectDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectDevice.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.WiFiDirectDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectDeviceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, connectionParameters.m_IWiFiDirectConnectionParameters.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IWiFiDirectDevice := new Windows.Devices.WiFiDirect.IWiFiDirectDevice;
                     Retval.m_IWiFiDirectDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectDevice

   function get_ConnectionStatus
   (
      this : in out WiFiDirectDevice
   )
   return WinRt.Windows.Devices.WiFiDirect.WiFiDirectConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.WiFiDirectConnectionStatus;
   begin
      Hr := this.m_IWiFiDirectDevice.all.get_ConnectionStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out WiFiDirectDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiDirectDevice.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_ConnectionStatusChanged
   (
      this : in out WiFiDirectDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectDevice.all.add_ConnectionStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConnectionStatusChanged
   (
      this : in out WiFiDirectDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectDevice.all.remove_ConnectionStatusChanged (token);
   end;

   function GetConnectionEndpointPairs
   (
      this : in out WiFiDirectDevice
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWiFiDirectDevice.all.GetConnectionEndpointPairs (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out WiFiDirectDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.IWiFiDirectDevice_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectDevice.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectInformationElement

   procedure Initialize (this : in out WiFiDirectInformationElement) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectInformationElement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectInformationElement, IWiFiDirectInformationElement_Ptr);
   begin
      if this.m_IWiFiDirectInformationElement /= null then
         if this.m_IWiFiDirectInformationElement.all /= null then
            RefCount := this.m_IWiFiDirectInformationElement.all.Release;
            Free (this.m_IWiFiDirectInformationElement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WiFiDirectInformationElement

   function Constructor return WiFiDirectInformationElement is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectInformationElement");
      m_ComRetVal  : aliased Windows.Devices.WiFiDirect.IWiFiDirectInformationElement;
   begin
      return RetVal : WiFiDirectInformationElement do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWiFiDirectInformationElement := new Windows.Devices.WiFiDirect.IWiFiDirectInformationElement;
            Retval.m_IWiFiDirectInformationElement.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WiFiDirectInformationElement

   function CreateFromBuffer
   (
      buffer : Windows.Storage.Streams.IBuffer
   )
   return IVector_IWiFiDirectInformationElement.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectInformationElement");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectInformationElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWiFiDirectInformationElement.Kind;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectInformationElementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.CreateFromBuffer (buffer, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      m_GenericRetVal := QInterface_IVector_IWiFiDirectInformationElement (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function CreateFromDeviceInformation
   (
      deviceInformation : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return IVector_IWiFiDirectInformationElement.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.WiFiDirectInformationElement");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.IWiFiDirectInformationElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWiFiDirectInformationElement.Kind;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectInformationElementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.CreateFromDeviceInformation (deviceInformation.m_IDeviceInformation.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      m_GenericRetVal := QInterface_IVector_IWiFiDirectInformationElement (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectInformationElement

   function get_Oui
   (
      this : in out WiFiDirectInformationElement
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectInformationElement.all.get_Oui (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Oui
   (
      this : in out WiFiDirectInformationElement;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectInformationElement.all.put_Oui (value);
   end;

   function get_OuiType
   (
      this : in out WiFiDirectInformationElement
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IWiFiDirectInformationElement.all.get_OuiType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OuiType
   (
      this : in out WiFiDirectInformationElement;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectInformationElement.all.put_OuiType (value);
   end;

   function get_Value
   (
      this : in out WiFiDirectInformationElement
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectInformationElement.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out WiFiDirectInformationElement;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectInformationElement.all.put_Value (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectLegacySettings

   procedure Initialize (this : in out WiFiDirectLegacySettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectLegacySettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectLegacySettings, IWiFiDirectLegacySettings_Ptr);
   begin
      if this.m_IWiFiDirectLegacySettings /= null then
         if this.m_IWiFiDirectLegacySettings.all /= null then
            RefCount := this.m_IWiFiDirectLegacySettings.all.Release;
            Free (this.m_IWiFiDirectLegacySettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectLegacySettings

   function get_IsEnabled
   (
      this : in out WiFiDirectLegacySettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiDirectLegacySettings.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out WiFiDirectLegacySettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectLegacySettings.all.put_IsEnabled (value);
   end;

   function get_Ssid
   (
      this : in out WiFiDirectLegacySettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiDirectLegacySettings.all.get_Ssid (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Ssid
   (
      this : in out WiFiDirectLegacySettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWiFiDirectLegacySettings.all.put_Ssid (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Passphrase
   (
      this : in out WiFiDirectLegacySettings
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IWiFiDirectLegacySettings.all.get_Passphrase (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_Passphrase
   (
      this : in out WiFiDirectLegacySettings;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectLegacySettings.all.put_Passphrase (value.m_IPasswordCredential.all);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Globalization.Collation is

   package IVectorView_ICharacterGrouping is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Globalization.Collation.ICharacterGrouping);
   package IIterable_ICharacterGrouping is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Globalization.Collation.ICharacterGrouping);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CharacterGrouping

   procedure Initialize (this : in out CharacterGrouping) is
   begin
      null;
   end;

   procedure Finalize (this : in out CharacterGrouping) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICharacterGrouping, ICharacterGrouping_Ptr);
   begin
      if this.m_ICharacterGrouping /= null then
         if this.m_ICharacterGrouping.all /= null then
            RefCount := this.m_ICharacterGrouping.all.Release;
            Free (this.m_ICharacterGrouping);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CharacterGrouping

   function get_First
   (
      this : in out CharacterGrouping
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICharacterGrouping.all.get_First (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Label
   (
      this : in out CharacterGrouping
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICharacterGrouping.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CharacterGroupings

   procedure Initialize (this : in out CharacterGroupings) is
   begin
      null;
   end;

   procedure Finalize (this : in out CharacterGroupings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICharacterGroupings, ICharacterGroupings_Ptr);
   begin
      if this.m_ICharacterGroupings /= null then
         if this.m_ICharacterGroupings.all /= null then
            RefCount := this.m_ICharacterGroupings.all.Release;
            Free (this.m_ICharacterGroupings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CharacterGroupings

   function Constructor return CharacterGroupings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Collation.CharacterGroupings");
      m_ComRetVal  : aliased Windows.Globalization.Collation.ICharacterGroupings;
   begin
      return RetVal : CharacterGroupings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICharacterGroupings := new Windows.Globalization.Collation.ICharacterGroupings;
            Retval.m_ICharacterGroupings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      language : WinRt.WString
   )
   return CharacterGroupings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Collation.CharacterGroupings");
      m_Factory    : access ICharacterGroupingsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.Collation.ICharacterGroupings;
      HStr_language : WinRt.HString := To_HString (language);
   begin
      return RetVal : CharacterGroupings do
         Hr := RoGetActivationFactory (m_hString, IID_ICharacterGroupingsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_language, m_ComRetVal'Access);
            Retval.m_ICharacterGroupings := new Windows.Globalization.Collation.ICharacterGroupings;
            Retval.m_ICharacterGroupings.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_language);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CharacterGroupings

   function Lookup
   (
      this : in out CharacterGroupings;
      text : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      Hr := this.m_ICharacterGroupings.all.Lookup (HStr_text, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_text);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Globalization.Collation.CharacterGrouping>
   function GetAt
   (
      this : in out CharacterGroupings;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Globalization.Collation.CharacterGrouping'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ICharacterGrouping.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.Collation.ICharacterGrouping;
      m_GenericIID     : aliased WinRt.IID := (4157561418, 11130, 23497, (160, 196, 157, 206, 7, 255, 97, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.Collation.ICharacterGroupings_Interface, IVectorView_ICharacterGrouping.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Globalization.Collation.CharacterGrouping do
         m_Interface := QInterface (this.m_ICharacterGroupings.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICharacterGrouping := new Windows.Globalization.Collation.ICharacterGrouping;
         Retval.m_ICharacterGrouping.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out CharacterGroupings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ICharacterGrouping.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4157561418, 11130, 23497, (160, 196, 157, 206, 7, 255, 97, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.Collation.ICharacterGroupings_Interface, IVectorView_ICharacterGrouping.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICharacterGroupings.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out CharacterGroupings;
      value : Windows.Globalization.Collation.CharacterGrouping'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ICharacterGrouping.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (4157561418, 11130, 23497, (160, 196, 157, 206, 7, 255, 97, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.Collation.ICharacterGroupings_Interface, IVectorView_ICharacterGrouping.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICharacterGroupings.all);
      Hr := m_Interface.IndexOf (value.m_ICharacterGrouping.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out CharacterGroupings;
      startIndex : WinRt.UInt32;
      items : Windows.Globalization.Collation.ICharacterGrouping_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ICharacterGrouping.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4157561418, 11130, 23497, (160, 196, 157, 206, 7, 255, 97, 201 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.Collation.ICharacterGroupings_Interface, IVectorView_ICharacterGrouping.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_ICharacterGroupings.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Globalization.Collation.CharacterGrouping>
   function First
   (
      this : in out CharacterGroupings
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICharacterGrouping.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2195958768, 1763, 22025, (186, 57, 197, 30, 178, 245, 250, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.Collation.ICharacterGroupings_Interface, IIterable_ICharacterGrouping.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICharacterGroupings.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

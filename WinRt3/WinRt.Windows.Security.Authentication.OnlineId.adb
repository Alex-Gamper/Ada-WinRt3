--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.OnlineId is

   package IAsyncOperation_OnlineIdSystemTicketResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.OnlineId.IOnlineIdSystemTicketResult);
   package AsyncOperationCompletedHandler_OnlineIdSystemTicketResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.OnlineId.IOnlineIdSystemTicketResult);

   package IAsyncOperation_IUserIdentity is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.OnlineId.IUserIdentity);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OnlineIdAuthenticator

   procedure Initialize (this : in out OnlineIdAuthenticator) is
   begin
      null;
   end;

   procedure Finalize (this : in out OnlineIdAuthenticator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOnlineIdAuthenticator, IOnlineIdAuthenticator_Ptr);
   begin
      if this.m_IOnlineIdAuthenticator /= null then
         if this.m_IOnlineIdAuthenticator.all /= null then
            RefCount := this.m_IOnlineIdAuthenticator.all.Release;
            Free (this.m_IOnlineIdAuthenticator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for OnlineIdAuthenticator

   function Constructor return OnlineIdAuthenticator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.OnlineId.OnlineIdAuthenticator");
      m_ComRetVal  : aliased Windows.Security.Authentication.OnlineId.IOnlineIdAuthenticator;
   begin
      return RetVal : OnlineIdAuthenticator do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IOnlineIdAuthenticator := new Windows.Security.Authentication.OnlineId.IOnlineIdAuthenticator;
            Retval.m_IOnlineIdAuthenticator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OnlineIdAuthenticator

   function AuthenticateUserAsync
   (
      this : in out OnlineIdAuthenticator;
      request : Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest'Class
   )
   return WinRt.Windows.Security.Authentication.OnlineId.UserAuthenticationOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.UserAuthenticationOperation do
         Hr := this.m_IOnlineIdAuthenticator.all.AuthenticateUserAsync (request.m_IOnlineIdServiceTicketRequest.all, m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function AuthenticateUserAsync
   (
      this : in out OnlineIdAuthenticator;
      requests : GenericObject;
      credentialPromptType : Windows.Security.Authentication.OnlineId.CredentialPromptType
   )
   return WinRt.Windows.Security.Authentication.OnlineId.UserAuthenticationOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.UserAuthenticationOperation do
         Hr := this.m_IOnlineIdAuthenticator.all.AuthenticateUserAsync (requests, credentialPromptType, m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function SignOutUserAsync
   (
      this : in out OnlineIdAuthenticator
   )
   return WinRt.Windows.Security.Authentication.OnlineId.SignOutUserOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IAsyncAction;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.SignOutUserOperation do
         Hr := this.m_IOnlineIdAuthenticator.all.SignOutUserAsync (m_ComRetVal'Access);
         Retval.m_IAsyncAction := new Windows.Foundation.IAsyncAction;
         Retval.m_IAsyncAction.all := m_ComRetVal;
      end return;
   end;

   procedure put_ApplicationId
   (
      this : in out OnlineIdAuthenticator;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOnlineIdAuthenticator.all.put_ApplicationId (value);
   end;

   function get_ApplicationId
   (
      this : in out OnlineIdAuthenticator
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IOnlineIdAuthenticator.all.get_ApplicationId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanSignOut
   (
      this : in out OnlineIdAuthenticator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IOnlineIdAuthenticator.all.get_CanSignOut (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AuthenticatedSafeCustomerId
   (
      this : in out OnlineIdAuthenticator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOnlineIdAuthenticator.all.get_AuthenticatedSafeCustomerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OnlineIdServiceTicket

   procedure Initialize (this : in out OnlineIdServiceTicket) is
   begin
      null;
   end;

   procedure Finalize (this : in out OnlineIdServiceTicket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOnlineIdServiceTicket, IOnlineIdServiceTicket_Ptr);
   begin
      if this.m_IOnlineIdServiceTicket /= null then
         if this.m_IOnlineIdServiceTicket.all /= null then
            RefCount := this.m_IOnlineIdServiceTicket.all.Release;
            Free (this.m_IOnlineIdServiceTicket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OnlineIdServiceTicket

   function get_Value
   (
      this : in out OnlineIdServiceTicket
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOnlineIdServiceTicket.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Request
   (
      this : in out OnlineIdServiceTicket
   )
   return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicketRequest;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest do
         Hr := this.m_IOnlineIdServiceTicket.all.get_Request (m_ComRetVal'Access);
         Retval.m_IOnlineIdServiceTicketRequest := new Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicketRequest;
         Retval.m_IOnlineIdServiceTicketRequest.all := m_ComRetVal;
      end return;
   end;

   function get_ErrorCode
   (
      this : in out OnlineIdServiceTicket
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IOnlineIdServiceTicket.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OnlineIdServiceTicketRequest

   procedure Initialize (this : in out OnlineIdServiceTicketRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out OnlineIdServiceTicketRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequest_Ptr);
   begin
      if this.m_IOnlineIdServiceTicketRequest /= null then
         if this.m_IOnlineIdServiceTicketRequest.all /= null then
            RefCount := this.m_IOnlineIdServiceTicketRequest.all.Release;
            Free (this.m_IOnlineIdServiceTicketRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for OnlineIdServiceTicketRequest

   function Constructor
   (
      service : WinRt.WString;
      policy : WinRt.WString
   )
   return OnlineIdServiceTicketRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest");
      m_Factory    : access IOnlineIdServiceTicketRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicketRequest;
      HStr_service : WinRt.HString := To_HString (service);
      HStr_policy : WinRt.HString := To_HString (policy);
   begin
      return RetVal : OnlineIdServiceTicketRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IOnlineIdServiceTicketRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateOnlineIdServiceTicketRequest (HStr_service, HStr_policy, m_ComRetVal'Access);
            Retval.m_IOnlineIdServiceTicketRequest := new Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicketRequest;
            Retval.m_IOnlineIdServiceTicketRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_service);
         Hr := WindowsDeleteString (HStr_policy);
      end return;
   end;

   function Constructor
   (
      service : WinRt.WString
   )
   return OnlineIdServiceTicketRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest");
      m_Factory    : access IOnlineIdServiceTicketRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicketRequest;
      HStr_service : WinRt.HString := To_HString (service);
   begin
      return RetVal : OnlineIdServiceTicketRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IOnlineIdServiceTicketRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateOnlineIdServiceTicketRequestAdvanced (HStr_service, m_ComRetVal'Access);
            Retval.m_IOnlineIdServiceTicketRequest := new Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicketRequest;
            Retval.m_IOnlineIdServiceTicketRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_service);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OnlineIdServiceTicketRequest

   function get_Service
   (
      this : in out OnlineIdServiceTicketRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOnlineIdServiceTicketRequest.all.get_Service (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Policy
   (
      this : in out OnlineIdServiceTicketRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOnlineIdServiceTicketRequest.all.get_Policy (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body OnlineIdSystemAuthenticator is

      function get_Default
      return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticatorForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticator");
         m_Factory        : access WinRt.Windows.Security.Authentication.OnlineId.IOnlineIdSystemAuthenticatorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.IOnlineIdSystemAuthenticatorForUser;
      begin
         return RetVal : WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticatorForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IOnlineIdSystemAuthenticatorStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_Default (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IOnlineIdSystemAuthenticatorForUser := new Windows.Security.Authentication.OnlineId.IOnlineIdSystemAuthenticatorForUser;
               Retval.m_IOnlineIdSystemAuthenticatorForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticatorForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticator");
         m_Factory        : access WinRt.Windows.Security.Authentication.OnlineId.IOnlineIdSystemAuthenticatorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.IOnlineIdSystemAuthenticatorForUser;
      begin
         return RetVal : WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticatorForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IOnlineIdSystemAuthenticatorStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IOnlineIdSystemAuthenticatorForUser := new Windows.Security.Authentication.OnlineId.IOnlineIdSystemAuthenticatorForUser;
               Retval.m_IOnlineIdSystemAuthenticatorForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end OnlineIdSystemAuthenticator;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OnlineIdSystemAuthenticatorForUser

   procedure Initialize (this : in out OnlineIdSystemAuthenticatorForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out OnlineIdSystemAuthenticatorForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOnlineIdSystemAuthenticatorForUser, IOnlineIdSystemAuthenticatorForUser_Ptr);
   begin
      if this.m_IOnlineIdSystemAuthenticatorForUser /= null then
         if this.m_IOnlineIdSystemAuthenticatorForUser.all /= null then
            RefCount := this.m_IOnlineIdSystemAuthenticatorForUser.all.Release;
            Free (this.m_IOnlineIdSystemAuthenticatorForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OnlineIdSystemAuthenticatorForUser

   function GetTicketAsync
   (
      this : in out OnlineIdSystemAuthenticatorForUser;
      request : Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest'Class
   )
   return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemTicketResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_OnlineIdSystemTicketResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_OnlineIdSystemTicketResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.OnlineId.IOnlineIdSystemTicketResult;
      m_IID            : aliased WinRt.IID := (372201584, 23114, 20540, (152, 127, 160, 90, 19, 18, 216, 228 )); -- Windows.Security.Authentication.OnlineId.OnlineIdSystemTicketResult;
      m_HandlerIID     : aliased WinRt.IID := (100266732, 22864, 22264, (183, 248, 34, 226, 11, 152, 70, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_OnlineIdSystemTicketResult.Kind := new AsyncOperationCompletedHandler_OnlineIdSystemTicketResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_OnlineIdSystemTicketResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_OnlineIdSystemTicketResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_OnlineIdSystemTicketResult.Kind_Delegate, AsyncOperationCompletedHandler_OnlineIdSystemTicketResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemTicketResult do
         Hr := this.m_IOnlineIdSystemAuthenticatorForUser.all.GetTicketAsync (request.m_IOnlineIdServiceTicketRequest.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IOnlineIdSystemTicketResult := new Windows.Security.Authentication.OnlineId.IOnlineIdSystemTicketResult;
                  Retval.m_IOnlineIdSystemTicketResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure put_ApplicationId
   (
      this : in out OnlineIdSystemAuthenticatorForUser;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOnlineIdSystemAuthenticatorForUser.all.put_ApplicationId (value);
   end;

   function get_ApplicationId
   (
      this : in out OnlineIdSystemAuthenticatorForUser
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IOnlineIdSystemAuthenticatorForUser.all.get_ApplicationId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_User
   (
      this : in out OnlineIdSystemAuthenticatorForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IOnlineIdSystemAuthenticatorForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OnlineIdSystemIdentity

   procedure Initialize (this : in out OnlineIdSystemIdentity) is
   begin
      null;
   end;

   procedure Finalize (this : in out OnlineIdSystemIdentity) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOnlineIdSystemIdentity, IOnlineIdSystemIdentity_Ptr);
   begin
      if this.m_IOnlineIdSystemIdentity /= null then
         if this.m_IOnlineIdSystemIdentity.all /= null then
            RefCount := this.m_IOnlineIdSystemIdentity.all.Release;
            Free (this.m_IOnlineIdSystemIdentity);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OnlineIdSystemIdentity

   function get_Ticket
   (
      this : in out OnlineIdSystemIdentity
   )
   return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdServiceTicket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicket;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.OnlineIdServiceTicket do
         Hr := this.m_IOnlineIdSystemIdentity.all.get_Ticket (m_ComRetVal'Access);
         Retval.m_IOnlineIdServiceTicket := new Windows.Security.Authentication.OnlineId.IOnlineIdServiceTicket;
         Retval.m_IOnlineIdServiceTicket.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out OnlineIdSystemIdentity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOnlineIdSystemIdentity.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OnlineIdSystemTicketResult

   procedure Initialize (this : in out OnlineIdSystemTicketResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out OnlineIdSystemTicketResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOnlineIdSystemTicketResult, IOnlineIdSystemTicketResult_Ptr);
   begin
      if this.m_IOnlineIdSystemTicketResult /= null then
         if this.m_IOnlineIdSystemTicketResult.all /= null then
            RefCount := this.m_IOnlineIdSystemTicketResult.all.Release;
            Free (this.m_IOnlineIdSystemTicketResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OnlineIdSystemTicketResult

   function get_Identity
   (
      this : in out OnlineIdSystemTicketResult
   )
   return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemIdentity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.IOnlineIdSystemIdentity;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemIdentity do
         Hr := this.m_IOnlineIdSystemTicketResult.all.get_Identity (m_ComRetVal'Access);
         Retval.m_IOnlineIdSystemIdentity := new Windows.Security.Authentication.OnlineId.IOnlineIdSystemIdentity;
         Retval.m_IOnlineIdSystemIdentity.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out OnlineIdSystemTicketResult
   )
   return WinRt.Windows.Security.Authentication.OnlineId.OnlineIdSystemTicketStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.OnlineIdSystemTicketStatus;
   begin
      Hr := this.m_IOnlineIdSystemTicketResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out OnlineIdSystemTicketResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IOnlineIdSystemTicketResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SignOutUserOperation

   procedure Initialize (this : in out SignOutUserOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SignOutUserOperation) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Foundation.IAsyncAction;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.IAsyncAction, WinRt.Windows.Foundation.IAsyncAction_Ptr);
   begin
      if this.m_IAsyncAction /= null then
         if this.m_IAsyncAction.all /= null then
            RefCount := this.m_IAsyncAction.all.Release;
            Free (this.m_IAsyncAction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SignOutUserOperation

   procedure put_Completed
   (
      this : in out SignOutUserOperation;
      handler : Windows.Foundation.AsyncActionCompletedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.put_Completed (handler);
   end;

   function get_Completed
   (
      this : in out SignOutUserOperation
   )
   return WinRt.Windows.Foundation.AsyncActionCompletedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncActionCompletedHandler;
   begin
      Hr := this.m_IAsyncAction.all.get_Completed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetResults
   (
      this : in out SignOutUserOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAsyncAction.all.GetResults;
   end;

   function get_Id
   (
      this : in out SignOutUserOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out SignOutUserOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out SignOutUserOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out SignOutUserOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out SignOutUserOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.IAsyncAction_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAsyncAction.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserAuthenticationOperation

   procedure Initialize (this : in out UserAuthenticationOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserAuthenticationOperation) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserAuthenticationOperation

   -- Generic Interface Windows.Foundation.IAsyncOperation`1<Windows.Security.Authentication.OnlineId.UserIdentity>
   procedure put_Completed
   (
      this : in out UserAuthenticationOperation;
      handler : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_IUserIdentity.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3100386785, 16543, 22516, (187, 228, 59, 149, 183, 75, 134, 200 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_IUserIdentity.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_Completed (handler);
      m_RefCount := m_Interface.Release;
   end;

   function get_Completed
   (
      this : in out UserAuthenticationOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_IUserIdentity.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3100386785, 16543, 22516, (187, 228, 59, 149, 183, 75, 134, 200 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_IUserIdentity.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Completed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResults
   (
      this : in out UserAuthenticationOperation
   )
   return WinRt.Windows.Security.Authentication.OnlineId.UserIdentity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_IUserIdentity.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.OnlineId.IUserIdentity;
      m_GenericIID     : aliased WinRt.IID := (3100386785, 16543, 22516, (187, 228, 59, 149, 183, 75, 134, 200 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_IUserIdentity.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Authentication.OnlineId.UserIdentity do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetResults (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUserIdentity := new Windows.Security.Authentication.OnlineId.IUserIdentity;
         Retval.m_IUserIdentity.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out UserAuthenticationOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out UserAuthenticationOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out UserAuthenticationOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out UserAuthenticationOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out UserAuthenticationOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserIdentity

   procedure Initialize (this : in out UserIdentity) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserIdentity) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserIdentity, IUserIdentity_Ptr);
   begin
      if this.m_IUserIdentity /= null then
         if this.m_IUserIdentity.all /= null then
            RefCount := this.m_IUserIdentity.all.Release;
            Free (this.m_IUserIdentity);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserIdentity

   function get_Tickets
   (
      this : in out UserIdentity
   )
   return IVectorView_IOnlineIdServiceTicket.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IOnlineIdServiceTicket.Kind;
   begin
      Hr := this.m_IUserIdentity.all.get_Tickets (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IOnlineIdServiceTicket (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Id
   (
      this : in out UserIdentity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserIdentity.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SafeCustomerId
   (
      this : in out UserIdentity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserIdentity.all.get_SafeCustomerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SignInName
   (
      this : in out UserIdentity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserIdentity.all.get_SignInName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstName
   (
      this : in out UserIdentity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserIdentity.all.get_FirstName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LastName
   (
      this : in out UserIdentity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserIdentity.all.get_LastName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsBetaAccount
   (
      this : in out UserIdentity
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUserIdentity.all.get_IsBetaAccount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsConfirmedPC
   (
      this : in out UserIdentity
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUserIdentity.all.get_IsConfirmedPC (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.Identity.Provider is

   package IAsyncOperation_SecondaryAuthenticationFactorFinishAuthenticationStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorFinishAuthenticationStatus);
   package AsyncOperationCompletedHandler_SecondaryAuthenticationFactorFinishAuthenticationStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorFinishAuthenticationStatus);

   package IAsyncOperation_SecondaryAuthenticationFactorAuthenticationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationResult);
   package AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationResult);

   package IAsyncOperation_SecondaryAuthenticationFactorAuthenticationStageInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStageInfo);
   package AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationStageInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStageInfo);

   package IAsyncOperation_SecondaryAuthenticationFactorRegistrationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationResult);
   package AsyncOperationCompletedHandler_SecondaryAuthenticationFactorRegistrationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationResult);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus);
   package AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorAuthentication

   procedure Initialize (this : in out SecondaryAuthenticationFactorAuthentication) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorAuthentication) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorAuthentication, ISecondaryAuthenticationFactorAuthentication_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorAuthentication /= null then
         if this.m_ISecondaryAuthenticationFactorAuthentication.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorAuthentication.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorAuthentication);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SecondaryAuthenticationFactorAuthentication

   procedure ShowNotificationMessageAsync
   (
      deviceName : WinRt.WString;
      message : Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationMessage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceName : WinRt.HString := To_HString (deviceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorAuthenticationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowNotificationMessageAsync (HStr_deviceName, message, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceName);
   end;

   function StartAuthenticationAsync
   (
      deviceId : WinRt.WString;
      serviceAuthenticationNonce : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SecondaryAuthenticationFactorAuthenticationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SecondaryAuthenticationFactorAuthenticationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationResult;
      m_IID            : aliased WinRt.IID := (414230332, 56153, 21113, (167, 109, 2, 65, 107, 45, 144, 182 )); -- Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationResult;
      m_HandlerIID     : aliased WinRt.IID := (625424189, 38532, 24155, (169, 184, 166, 249, 12, 230, 50, 173 ));
      m_Handler        : AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationResult.Kind := new AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SecondaryAuthenticationFactorAuthenticationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationResult.Kind_Delegate, AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationResult do
         Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorAuthenticationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartAuthenticationAsync (HStr_deviceId, serviceAuthenticationNonce, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISecondaryAuthenticationFactorAuthenticationResult := new Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationResult;
                     Retval.m_ISecondaryAuthenticationFactorAuthenticationResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function add_AuthenticationStageChanged
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorAuthenticationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_AuthenticationStageChanged (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_AuthenticationStageChanged
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorAuthenticationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_AuthenticationStageChanged (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetAuthenticationStageInfoAsync
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStageInfo;
      m_IID            : aliased WinRt.IID := (2253005591, 46144, 24222, (174, 85, 69, 80, 187, 99, 7, 223 )); -- Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageInfo;
      m_HandlerIID     : aliased WinRt.IID := (2014434180, 11960, 22769, (175, 237, 75, 75, 136, 143, 67, 87 ));
      m_Handler        : AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind := new AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind_Delegate, AsyncOperationCompletedHandler_SecondaryAuthenticationFactorAuthenticationStageInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageInfo do
         Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorAuthenticationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAuthenticationStageInfoAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISecondaryAuthenticationFactorAuthenticationStageInfo := new Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStageInfo;
                     Retval.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorAuthentication

   function get_ServiceAuthenticationHmac
   (
      this : in out SecondaryAuthenticationFactorAuthentication
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthentication.all.get_ServiceAuthenticationHmac (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SessionNonce
   (
      this : in out SecondaryAuthenticationFactorAuthentication
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthentication.all.get_SessionNonce (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceNonce
   (
      this : in out SecondaryAuthenticationFactorAuthentication
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthentication.all.get_DeviceNonce (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceConfigurationData
   (
      this : in out SecondaryAuthenticationFactorAuthentication
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthentication.all.get_DeviceConfigurationData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function FinishAuthenticationAsync
   (
      this : in out SecondaryAuthenticationFactorAuthentication;
      deviceHmac : Windows.Storage.Streams.IBuffer;
      sessionHmac : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorFinishAuthenticationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorFinishAuthenticationStatus;
      m_IID            : aliased WinRt.IID := (2438546298, 17303, 21614, (190, 97, 46, 241, 97, 113, 126, 6 )); -- Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorFinishAuthenticationStatus;
      m_HandlerIID     : aliased WinRt.IID := (2921165126, 15761, 20707, (143, 19, 97, 60, 242, 128, 18, 7 ));
      m_Handler        : AsyncOperationCompletedHandler_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind := new AsyncOperationCompletedHandler_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SecondaryAuthenticationFactorFinishAuthenticationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthentication.all.FinishAuthenticationAsync (deviceHmac, sessionHmac, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure AbortAuthenticationAsync
   (
      this : in out SecondaryAuthenticationFactorAuthentication;
      errorLogMessage : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_errorLogMessage : WinRt.HString := To_HString (errorLogMessage);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthentication.all.AbortAuthenticationAsync (HStr_errorLogMessage, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_errorLogMessage);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorAuthenticationResult

   procedure Initialize (this : in out SecondaryAuthenticationFactorAuthenticationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorAuthenticationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorAuthenticationResult, ISecondaryAuthenticationFactorAuthenticationResult_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorAuthenticationResult /= null then
         if this.m_ISecondaryAuthenticationFactorAuthenticationResult.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorAuthenticationResult.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorAuthenticationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorAuthenticationResult

   function get_Status
   (
      this : in out SecondaryAuthenticationFactorAuthenticationResult
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStatus;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthenticationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Authentication
   (
      this : in out SecondaryAuthenticationFactorAuthenticationResult
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthentication;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthentication do
         Hr := this.m_ISecondaryAuthenticationFactorAuthenticationResult.all.get_Authentication (m_ComRetVal'Access);
         Retval.m_ISecondaryAuthenticationFactorAuthentication := new Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthentication;
         Retval.m_ISecondaryAuthenticationFactorAuthentication.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs

   procedure Initialize (this : in out SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs, ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs /= null then
         if this.m_ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs

   function get_StageInfo
   (
      this : in out SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStageInfo;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStageInfo do
         Hr := this.m_ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs.all.get_StageInfo (m_ComRetVal'Access);
         Retval.m_ISecondaryAuthenticationFactorAuthenticationStageInfo := new Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorAuthenticationStageInfo;
         Retval.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorAuthenticationStageInfo

   procedure Initialize (this : in out SecondaryAuthenticationFactorAuthenticationStageInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorAuthenticationStageInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorAuthenticationStageInfo, ISecondaryAuthenticationFactorAuthenticationStageInfo_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo /= null then
         if this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorAuthenticationStageInfo

   function get_Stage
   (
      this : in out SecondaryAuthenticationFactorAuthenticationStageInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStage is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationStage;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all.get_Stage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Scenario
   (
      this : in out SecondaryAuthenticationFactorAuthenticationStageInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationScenario is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorAuthenticationScenario;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all.get_Scenario (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out SecondaryAuthenticationFactorAuthenticationStageInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorAuthenticationStageInfo.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorInfo

   procedure Initialize (this : in out SecondaryAuthenticationFactorInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorInfo, ISecondaryAuthenticationFactorInfo_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorInfo /= null then
         if this.m_ISecondaryAuthenticationFactorInfo.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorInfo.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorInfo

   function get_DeviceId
   (
      this : in out SecondaryAuthenticationFactorInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorInfo.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceFriendlyName
   (
      this : in out SecondaryAuthenticationFactorInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorInfo.all.get_DeviceFriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceModelNumber
   (
      this : in out SecondaryAuthenticationFactorInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorInfo.all.get_DeviceModelNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceConfigurationData
   (
      this : in out SecondaryAuthenticationFactorInfo
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorInfo.all.get_DeviceConfigurationData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PresenceMonitoringMode
   (
      this : in out SecondaryAuthenticationFactorInfo
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo_Interface, WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2, WinRt.Windows.Security.Authentication.Identity.Provider.IID_ISecondaryAuthenticationFactorInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISecondaryAuthenticationFactorInfo.all);
      Hr := m_Interface.get_PresenceMonitoringMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure UpdateDevicePresenceAsync
   (
      this : in out SecondaryAuthenticationFactorInfo;
      presenceState : Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo_Interface, WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2, WinRt.Windows.Security.Authentication.Identity.Provider.IID_ISecondaryAuthenticationFactorInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISecondaryAuthenticationFactorInfo.all);
      Hr := m_Interface.UpdateDevicePresenceAsync (presenceState, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_IsAuthenticationSupported
   (
      this : in out SecondaryAuthenticationFactorInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo_Interface, WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2, WinRt.Windows.Security.Authentication.Identity.Provider.IID_ISecondaryAuthenticationFactorInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISecondaryAuthenticationFactorInfo.all);
      Hr := m_Interface.get_IsAuthenticationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorRegistration

   procedure Initialize (this : in out SecondaryAuthenticationFactorRegistration) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorRegistration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorRegistration_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorRegistration /= null then
         if this.m_ISecondaryAuthenticationFactorRegistration.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorRegistration.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorRegistration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SecondaryAuthenticationFactorRegistration

   function RequestStartRegisteringDeviceAsync
   (
      deviceId : WinRt.WString;
      capabilities : Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDeviceCapabilities;
      deviceFriendlyName : WinRt.WString;
      deviceModelNumber : WinRt.WString;
      deviceKey : Windows.Storage.Streams.IBuffer;
      mutualAuthenticationKey : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistrationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      HStr_deviceFriendlyName : WinRt.HString := To_HString (deviceFriendlyName);
      HStr_deviceModelNumber : WinRt.HString := To_HString (deviceModelNumber);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SecondaryAuthenticationFactorRegistrationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SecondaryAuthenticationFactorRegistrationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationResult;
      m_IID            : aliased WinRt.IID := (98193932, 43940, 22604, (188, 8, 25, 197, 56, 154, 112, 226 )); -- Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistrationResult;
      m_HandlerIID     : aliased WinRt.IID := (2689139432, 63536, 20714, (137, 234, 150, 226, 166, 251, 148, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_SecondaryAuthenticationFactorRegistrationResult.Kind := new AsyncOperationCompletedHandler_SecondaryAuthenticationFactorRegistrationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SecondaryAuthenticationFactorRegistrationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorRegistrationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorRegistrationResult.Kind_Delegate, AsyncOperationCompletedHandler_SecondaryAuthenticationFactorRegistrationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistrationResult do
         Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorRegistrationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestStartRegisteringDeviceAsync (HStr_deviceId, capabilities, HStr_deviceFriendlyName, HStr_deviceModelNumber, deviceKey, mutualAuthenticationKey, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISecondaryAuthenticationFactorRegistrationResult := new Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationResult;
                     Retval.m_ISecondaryAuthenticationFactorRegistrationResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
         Hr := WindowsDeleteString (HStr_deviceFriendlyName);
         Hr := WindowsDeleteString (HStr_deviceModelNumber);
      end return;
   end;

   function FindAllRegisteredDeviceInfoAsync
   (
      queryType : Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDeviceFindScope
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1206588763, 44000, 21925, (147, 16, 254, 177, 221, 87, 220, 165 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (108342565, 54334, 23854, (163, 5, 78, 21, 118, 132, 111, 238 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllRegisteredDeviceInfoAsync (queryType, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   procedure UnregisterDeviceAsync
   (
      deviceId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.UnregisterDeviceAsync (HStr_deviceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceId);
   end;

   procedure UpdateDeviceConfigurationDataAsync
   (
      deviceId : WinRt.WString;
      deviceConfigurationData : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.UpdateDeviceConfigurationDataAsync (HStr_deviceId, deviceConfigurationData, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceId);
   end;

   function RegisterDevicePresenceMonitoringAsync
   (
      deviceId : WinRt.WString;
      deviceInstancePath : WinRt.WString;
      monitoringMode : Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringMode
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      HStr_deviceInstancePath : WinRt.HString := To_HString (deviceInstancePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus;
      m_IID            : aliased WinRt.IID := (2134371562, 58344, 21500, (176, 229, 122, 164, 113, 151, 14, 221 )); -- Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus;
      m_HandlerIID     : aliased WinRt.IID := (580166162, 36961, 24217, (162, 38, 164, 74, 200, 248, 244, 221 ));
      m_Handler        : AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind := new AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RegisterDevicePresenceMonitoringAsync (HStr_deviceId, HStr_deviceInstancePath, monitoringMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceId);
      Hr := WindowsDeleteString (HStr_deviceInstancePath);
      return m_RetVal;
   end;

   function RegisterDevicePresenceMonitoringAsync
   (
      deviceId : WinRt.WString;
      deviceInstancePath : WinRt.WString;
      monitoringMode : Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringMode;
      deviceFriendlyName : WinRt.WString;
      deviceModelNumber : WinRt.WString;
      deviceConfigurationData : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      HStr_deviceInstancePath : WinRt.HString := To_HString (deviceInstancePath);
      HStr_deviceFriendlyName : WinRt.HString := To_HString (deviceFriendlyName);
      HStr_deviceModelNumber : WinRt.HString := To_HString (deviceModelNumber);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus;
      m_IID            : aliased WinRt.IID := (2134371562, 58344, 21500, (176, 229, 122, 164, 113, 151, 14, 221 )); -- Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus;
      m_HandlerIID     : aliased WinRt.IID := (580166162, 36961, 24217, (162, 38, 164, 74, 200, 248, 244, 221 ));
      m_Handler        : AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind := new AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RegisterDevicePresenceMonitoringAsync (HStr_deviceId, HStr_deviceInstancePath, monitoringMode, HStr_deviceFriendlyName, HStr_deviceModelNumber, deviceConfigurationData, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceId);
      Hr := WindowsDeleteString (HStr_deviceInstancePath);
      Hr := WindowsDeleteString (HStr_deviceFriendlyName);
      Hr := WindowsDeleteString (HStr_deviceModelNumber);
      return m_RetVal;
   end;

   procedure UnregisterDevicePresenceMonitoringAsync
   (
      deviceId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.UnregisterDevicePresenceMonitoringAsync (HStr_deviceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceId);
   end;

   function IsDevicePresenceMonitoringSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsDevicePresenceMonitoringSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorRegistration

   procedure FinishRegisteringDeviceAsync
   (
      this : in out SecondaryAuthenticationFactorRegistration;
      deviceConfigurationData : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISecondaryAuthenticationFactorRegistration.all.FinishRegisteringDeviceAsync (deviceConfigurationData, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure AbortRegisteringDeviceAsync
   (
      this : in out SecondaryAuthenticationFactorRegistration;
      errorLogMessage : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_errorLogMessage : WinRt.HString := To_HString (errorLogMessage);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISecondaryAuthenticationFactorRegistration.all.AbortRegisteringDeviceAsync (HStr_errorLogMessage, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_errorLogMessage);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorRegistrationResult

   procedure Initialize (this : in out SecondaryAuthenticationFactorRegistrationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorRegistrationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorRegistrationResult, ISecondaryAuthenticationFactorRegistrationResult_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorRegistrationResult /= null then
         if this.m_ISecondaryAuthenticationFactorRegistrationResult.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorRegistrationResult.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorRegistrationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorRegistrationResult

   function get_Status
   (
      this : in out SecondaryAuthenticationFactorRegistrationResult
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistrationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistrationStatus;
   begin
      Hr := this.m_ISecondaryAuthenticationFactorRegistrationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Registration
   (
      this : in out SecondaryAuthenticationFactorRegistrationResult
   )
   return WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistration;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.Provider.SecondaryAuthenticationFactorRegistration do
         Hr := this.m_ISecondaryAuthenticationFactorRegistrationResult.all.get_Registration (m_ComRetVal'Access);
         Retval.m_ISecondaryAuthenticationFactorRegistration := new Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorRegistration;
         Retval.m_ISecondaryAuthenticationFactorRegistration.all := m_ComRetVal;
      end return;
   end;

end;

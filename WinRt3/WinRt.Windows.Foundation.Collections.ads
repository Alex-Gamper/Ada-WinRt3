--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Foundation.Collections is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Delegates declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IPropertySet_Interface is interface and WinRt.IInspectable_Interface;
   type IPropertySet is access all IPropertySet_Interface'Class;
   type IPropertySet_Ptr is access all IPropertySet;

   type IVectorChangedEventArgs_Interface is interface and WinRt.IInspectable_Interface;
   type IVectorChangedEventArgs is access all IVectorChangedEventArgs_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type PropertySet is new Ada.Finalization.Limited_Controlled with
      record
         m_IPropertySet : access Windows.Foundation.Collections.IPropertySet;
      end record;
   type PropertySet_Ptr is access all PropertySet;

   type StringMap is new Ada.Finalization.Limited_Controlled with
      record
         m_GenericObject : access GenericObject;
      end record;
   type StringMap_Ptr is access all StringMap;

   type ValueSet is new Ada.Finalization.Limited_Controlled with
      record
         m_IPropertySet : access Windows.Foundation.Collections.IPropertySet;
      end record;
   type ValueSet_Ptr is access all ValueSet;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type CollectionChange is (
      Reset_e,
      ItemInserted_e,
      ItemRemoved_e,
      ItemChanged_e
   );
   for CollectionChange use (
      Reset_e => 0,
      ItemInserted_e => 1,
      ItemRemoved_e => 2,
      ItemChanged_e => 3
   );
   type CollectionChange_Ptr is access all CollectionChange;

   -----------------------------------------------------------------------------
   -- Delegate declarations
   -----------------------------------------------------------------------------

   IID_MapChangedEventHandler : aliased WinRt.IID := (395646963, 38126, 16888, (189, 220, 118, 138, 137, 85, 68, 243 ));
   -----------------------------------------------------------------------------
   generic
      type K is private;
      type V is private;
   --------------------------------------------------------------------------------
   package MapChangedEventHandler is

      type Kind_Delegate (Callback : access procedure  (sender : GenericObject;event : GenericObject)) is new WinRt.IMulticastDelegate_Interface (IID_MapChangedEventHandler'Access) with null record;
      type Kind is access all Kind_Delegate;

      function Invoke
      (
         this : access Kind_Delegate;
         sender : GenericObject;
         event : GenericObject
      )
      return WinRt.Hresult;

   end;

   IID_VectorChangedEventHandler : aliased WinRt.IID := (201660242, 40895, 19568, (170, 12, 14, 76, 130, 217, 167, 97 ));
   -----------------------------------------------------------------------------
   generic
      type T is private;
   --------------------------------------------------------------------------------
   package VectorChangedEventHandler is

      type Kind_Delegate (Callback : access procedure  (sender : GenericObject;event : Windows.Foundation.Collections.IVectorChangedEventArgs)) is new WinRt.IMulticastDelegate_Interface (IID_VectorChangedEventHandler'Access) with null record;
      type Kind is access all Kind_Delegate;

      function Invoke
      (
         this : access Kind_Delegate;
         sender : GenericObject;
         event : Windows.Foundation.Collections.IVectorChangedEventArgs
      )
      return WinRt.Hresult;

   end;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   generic
      type T is private;
   --------------------------------------------------------------------------------
   package IIterable is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type T_Ptr is access all T;

      function First
      (
         this : access Kind_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IIterable : aliased WinRt.IID := (4205151722, 25108, 16919, (175, 218, 127, 70, 222, 88, 105, 179 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type T is private;
   --------------------------------------------------------------------------------
   package IIterator is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type T_Ptr is access all T;

      function get_Current
      (
         this : access Kind_Interface;
         RetVal : access T
      )
      return WinRt.Hresult is abstract;

      function get_HasCurrent
      (
         this : access Kind_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function MoveNext
      (
         this : access Kind_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetMany
      (
         this : access Kind_Interface;
         itemsSize : WinRt.UInt32;
         items : WinRt.GenericObject_Ptr;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IIterator : aliased WinRt.IID := (1786374243, 17152, 17818, (153, 102, 203, 182, 96, 150, 62, 225 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type K is private;
      type V is private;
   --------------------------------------------------------------------------------
   package IKeyValuePair is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type K_Ptr is access all K;
      type V_Ptr is access all V;

      function get_Key
      (
         this : access Kind_Interface;
         RetVal : access K
      )
      return WinRt.Hresult is abstract;

      function get_Value
      (
         this : access Kind_Interface;
         RetVal : access V
      )
      return WinRt.Hresult is abstract;

      IID_IKeyValuePair : aliased WinRt.IID := (45422889, 49604, 19070, (137, 64, 3, 18, 181, 193, 133, 0 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type K is private;
   --------------------------------------------------------------------------------
   package IMapChangedEventArgs is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type K_Ptr is access all K;

      function get_CollectionChange
      (
         this : access Kind_Interface;
         RetVal : access Windows.Foundation.Collections.CollectionChange
      )
      return WinRt.Hresult is abstract;

      function get_Key
      (
         this : access Kind_Interface;
         RetVal : access K
      )
      return WinRt.Hresult is abstract;

      IID_IMapChangedEventArgs : aliased WinRt.IID := (2570712287, 1290, 19471, (170, 96, 119, 7, 95, 156, 71, 119 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type K is private;
      type V is private;
   --------------------------------------------------------------------------------
   package IMapView is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type K_Ptr is access all K;
      type V_Ptr is access all V;

      function Lookup
      (
         this : access Kind_Interface;
         key : K;
         RetVal : access V
      )
      return WinRt.Hresult is abstract;

      function get_Size
      (
         this : access Kind_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function HasKey
      (
         this : access Kind_Interface;
         key : K;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function Split
      (
         this : access Kind_Interface;
         first : access GenericObject_Ptr;
         second : access GenericObject_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_IMapView : aliased WinRt.IID := (3833646656, 41784, 19162, (173, 207, 39, 34, 114, 228, 140, 185 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type K is private;
      type V is private;
   --------------------------------------------------------------------------------
   package IMap is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type K_Ptr is access all K;
      type V_Ptr is access all V;

      function Lookup
      (
         this : access Kind_Interface;
         key : K;
         RetVal : access V
      )
      return WinRt.Hresult is abstract;

      function get_Size
      (
         this : access Kind_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function HasKey
      (
         this : access Kind_Interface;
         key : K;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetView
      (
         this : access Kind_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function Insert
      (
         this : access Kind_Interface;
         key : K;
         value : V;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function Remove
      (
         this : access Kind_Interface;
         key : K
      )
      return WinRt.Hresult is abstract;

      function Clear
      (
         this : access Kind_Interface
      )
      return WinRt.Hresult is abstract;

      IID_IMap : aliased WinRt.IID := (1009329662, 34073, 17857, (170, 121, 25, 123, 103, 24, 193, 193 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type K is private;
      type V is private;
   --------------------------------------------------------------------------------
   package IObservableMap is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type K_Ptr is access all K;
      type V_Ptr is access all V;

      function add_MapChanged
      (
         this : access Kind_Interface;
         vhnd : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_MapChanged
      (
         this : access Kind_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      IID_IObservableMap : aliased WinRt.IID := (1709124597, 48953, 16821, (174, 188, 90, 157, 134, 94, 71, 43 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type T is private;
   --------------------------------------------------------------------------------
   package IObservableVector is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type T_Ptr is access all T;

      function add_VectorChanged
      (
         this : access Kind_Interface;
         vhnd : GenericObject;
         RetVal : access Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      function remove_VectorChanged
      (
         this : access Kind_Interface;
         token : Windows.Foundation.EventRegistrationToken
      )
      return WinRt.Hresult is abstract;

      IID_IObservableVector : aliased WinRt.IID := (1494739795, 20660, 18957, (179, 9, 101, 134, 43, 63, 29, 188 ));

   end;

   -----------------------------------------------------------------------------
   -- type IPropertySet is interface and WinRt.IInspectable;

      IID_IPropertySet : aliased WinRt.IID := (2319707551, 62694, 17441, (172, 249, 29, 171, 41, 134, 130, 12 ));

   -----------------------------------------------------------------------------
   -- type IVectorChangedEventArgs is interface and WinRt.IInspectable;

      function get_CollectionChange
      (
         this : access IVectorChangedEventArgs_Interface;
         RetVal : access Windows.Foundation.Collections.CollectionChange
      )
      return WinRt.Hresult is abstract;

      function get_Index
      (
         this : access IVectorChangedEventArgs_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IVectorChangedEventArgs : aliased WinRt.IID := (1465463775, 13566, 17536, (175, 21, 7, 105, 31, 61, 93, 155 ));

   -----------------------------------------------------------------------------
   generic
      type T is private;
   --------------------------------------------------------------------------------
   package IVectorView is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type T_Ptr is access all T;

      function GetAt
      (
         this : access Kind_Interface;
         index : WinRt.UInt32;
         RetVal : access T
      )
      return WinRt.Hresult is abstract;

      function get_Size
      (
         this : access Kind_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function IndexOf
      (
         this : access Kind_Interface;
         value : T;
         index : WinRt.UInt32_Ptr;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetMany
      (
         this : access Kind_Interface;
         startIndex : WinRt.UInt32;
         itemsSize : WinRt.UInt32;
         items : WinRt.GenericObject_Ptr;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IVectorView : aliased WinRt.IID := (3152149068, 45283, 17795, (186, 239, 31, 27, 46, 72, 62, 86 ));

   end;

   -----------------------------------------------------------------------------
   generic
      type T is private;
   --------------------------------------------------------------------------------
   package IVector is

      type Kind_Interface is interface and WinRt.IInspectable_Interface;
      type Kind is access all Kind_Interface'Class;

      type T_Ptr is access all T;

      function GetAt
      (
         this : access Kind_Interface;
         index : WinRt.UInt32;
         RetVal : access T
      )
      return WinRt.Hresult is abstract;

      function get_Size
      (
         this : access Kind_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function GetView
      (
         this : access Kind_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function IndexOf
      (
         this : access Kind_Interface;
         value : T;
         index : WinRt.UInt32_Ptr;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function SetAt
      (
         this : access Kind_Interface;
         index : WinRt.UInt32;
         value : T
      )
      return WinRt.Hresult is abstract;

      function InsertAt
      (
         this : access Kind_Interface;
         index : WinRt.UInt32;
         value : T
      )
      return WinRt.Hresult is abstract;

      function RemoveAt
      (
         this : access Kind_Interface;
         index : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function Append
      (
         this : access Kind_Interface;
         value : T
      )
      return WinRt.Hresult is abstract;

      function RemoveAtEnd
      (
         this : access Kind_Interface
      )
      return WinRt.Hresult is abstract;

      function Clear
      (
         this : access Kind_Interface
      )
      return WinRt.Hresult is abstract;

      function GetMany
      (
         this : access Kind_Interface;
         startIndex : WinRt.UInt32;
         itemsSize : WinRt.UInt32;
         items : WinRt.GenericObject_Ptr;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function ReplaceAll
      (
         this : access Kind_Interface;
         itemsSize : WinRt.UInt32;
         items : WinRt.GenericObject_Ptr
      )
      return WinRt.Hresult is abstract;

      IID_IVector : aliased WinRt.IID := (2436052969, 4513, 17221, (163, 162, 78, 127, 149, 110, 34, 45 ));

   end;

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PropertySet

   overriding procedure Initialize (this : in out PropertySet);
   overriding procedure Finalize (this : in out PropertySet);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PropertySet

   function Constructor return PropertySet;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PropertySet

   -- Generic Interface Windows.Foundation.Collections.IObservableMap`2<System.String,System.Object>
   function add_MapChanged
   (
      this : in out PropertySet;
      vhnd : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_MapChanged
   (
      this : in out PropertySet;
      token : Windows.Foundation.EventRegistrationToken
   );

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.Object>
   function Lookup
   (
      this : in out PropertySet;
      key : WinRt.WString
   )
   return WinRt.IInspectable;

   function get_Size
   (
      this : in out PropertySet
   )
   return WinRt.UInt32;

   function HasKey
   (
      this : in out PropertySet;
      key : WinRt.WString
   )
   return WinRt.Boolean;

   function GetView
   (
      this : in out PropertySet
   )
   return WinRt.GenericObject;

   function Insert
   (
      this : in out PropertySet;
      key : WinRt.WString;
      value : WinRt.IInspectable
   )
   return WinRt.Boolean;

   procedure Remove
   (
      this : in out PropertySet;
      key : WinRt.WString
   );

   procedure Clear
   (
      this : in out PropertySet
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StringMap

   overriding procedure Initialize (this : in out StringMap);
   overriding procedure Finalize (this : in out StringMap);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StringMap

   function Constructor return StringMap;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StringMap

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.String>
   function Lookup
   (
      this : in out StringMap;
      key : WinRt.WString
   )
   return WinRt.WString;

   function get_Size
   (
      this : in out StringMap
   )
   return WinRt.UInt32;

   function HasKey
   (
      this : in out StringMap;
      key : WinRt.WString
   )
   return WinRt.Boolean;

   function GetView
   (
      this : in out StringMap
   )
   return WinRt.GenericObject;

   function Insert
   (
      this : in out StringMap;
      key : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean;

   procedure Remove
   (
      this : in out StringMap;
      key : WinRt.WString
   );

   procedure Clear
   (
      this : in out StringMap
   );

   -- Generic Interface Windows.Foundation.Collections.IObservableMap`2<System.String,System.String>
   function add_MapChanged
   (
      this : in out StringMap;
      vhnd : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_MapChanged
   (
      this : in out StringMap;
      token : Windows.Foundation.EventRegistrationToken
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ValueSet

   overriding procedure Initialize (this : in out ValueSet);
   overriding procedure Finalize (this : in out ValueSet);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ValueSet

   function Constructor return ValueSet;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ValueSet

   -- Generic Interface Windows.Foundation.Collections.IObservableMap`2<System.String,System.Object>
   function add_MapChanged
   (
      this : in out ValueSet;
      vhnd : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken;

   procedure remove_MapChanged
   (
      this : in out ValueSet;
      token : Windows.Foundation.EventRegistrationToken
   );

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.Object>
   function Lookup
   (
      this : in out ValueSet;
      key : WinRt.WString
   )
   return WinRt.IInspectable;

   function get_Size
   (
      this : in out ValueSet
   )
   return WinRt.UInt32;

   function HasKey
   (
      this : in out ValueSet;
      key : WinRt.WString
   )
   return WinRt.Boolean;

   function GetView
   (
      this : in out ValueSet
   )
   return WinRt.GenericObject;

   function Insert
   (
      this : in out ValueSet;
      key : WinRt.WString;
      value : WinRt.IInspectable
   )
   return WinRt.Boolean;

   procedure Remove
   (
      this : in out ValueSet;
      key : WinRt.WString
   );

   procedure Clear
   (
      this : in out ValueSet
   );

end;

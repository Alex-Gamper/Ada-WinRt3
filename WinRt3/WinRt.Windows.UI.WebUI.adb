--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel;
with WinRt.Windows.ApplicationModel.Activation;
with WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider;
with WinRt.Windows.ApplicationModel.Background;
with WinRt.Windows.ApplicationModel.Calls;
with WinRt.Windows.ApplicationModel.Contacts;
with WinRt.Windows.ApplicationModel.Contacts.Provider;
with WinRt.Windows.ApplicationModel.Core;
with WinRt.Windows.ApplicationModel.DataTransfer;
with WinRt.Windows.ApplicationModel.DataTransfer.ShareTarget;
with WinRt.Windows.ApplicationModel.Search;
with WinRt.Windows.ApplicationModel.UserDataAccounts.Provider;
with WinRt.Windows.ApplicationModel.Wallet;
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Devices.Printers.Extensions;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Printing;
with WinRt.Windows.Media.SpeechRecognition;
with WinRt.Windows.Security.Authentication.Web;
with WinRt.Windows.Security.Authentication.Web.Provider;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Pickers.Provider;
with WinRt.Windows.Storage.Provider;
with WinRt.Windows.Storage.Search;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.Web;
with WinRt.Windows.Web.Http;
with WinRt.Windows.Web.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.WebUI is

   package IAsyncOperation_AppRestartFailureReason is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason);
   package AsyncOperationCompletedHandler_AppRestartFailureReason is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_DataPackage is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage);
   package AsyncOperationCompletedHandler_DataPackage is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage);

   package IAsyncOperation_WebUIView is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.WebUI.IWebUIView);
   package AsyncOperationCompletedHandler_WebUIView is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.WebUI.IWebUIView);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ActivatedDeferral

   procedure Initialize (this : in out ActivatedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out ActivatedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivatedDeferral, IActivatedDeferral_Ptr);
   begin
      if this.m_IActivatedDeferral /= null then
         if this.m_IActivatedDeferral.all /= null then
            RefCount := this.m_IActivatedDeferral.all.Release;
            Free (this.m_IActivatedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ActivatedDeferral

   procedure Complete
   (
      this : in out ActivatedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IActivatedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- Delegate ActivatedEventHandler

   function Invoke
   (
      this : access ActivatedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      eventArgs : Windows.ApplicationModel.Activation.IActivatedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, eventArgs);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ActivatedOperation

   procedure Initialize (this : in out ActivatedOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ActivatedOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivatedOperation, IActivatedOperation_Ptr);
   begin
      if this.m_IActivatedOperation /= null then
         if this.m_IActivatedOperation.all /= null then
            RefCount := this.m_IActivatedOperation.all.Release;
            Free (this.m_IActivatedOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ActivatedOperation

   function GetDeferral
   (
      this : in out ActivatedOperation
   )
   return WinRt.Windows.UI.WebUI.ActivatedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedDeferral;
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedDeferral do
         Hr := this.m_IActivatedOperation.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IActivatedDeferral := new Windows.UI.WebUI.IActivatedDeferral;
         Retval.m_IActivatedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundActivatedEventArgs

   procedure Initialize (this : in out BackgroundActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs_Ptr);
   begin
      if this.m_IBackgroundActivatedEventArgs /= null then
         if this.m_IBackgroundActivatedEventArgs.all /= null then
            RefCount := this.m_IBackgroundActivatedEventArgs.all.Release;
            Free (this.m_IBackgroundActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundActivatedEventArgs

   function get_TaskInstance
   (
      this : in out BackgroundActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskInstance;
   begin
      Hr := this.m_IBackgroundActivatedEventArgs.all.get_TaskInstance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate BackgroundActivatedEventHandler

   function Invoke
   (
      this : access BackgroundActivatedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      eventArgs : Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, eventArgs);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EnteredBackgroundEventArgs

   procedure Initialize (this : in out EnteredBackgroundEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EnteredBackgroundEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.IEnteredBackgroundEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.IEnteredBackgroundEventArgs, WinRt.Windows.ApplicationModel.IEnteredBackgroundEventArgs_Ptr);
   begin
      if this.m_IEnteredBackgroundEventArgs /= null then
         if this.m_IEnteredBackgroundEventArgs.all /= null then
            RefCount := this.m_IEnteredBackgroundEventArgs.all.Release;
            Free (this.m_IEnteredBackgroundEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EnteredBackgroundEventArgs

   function GetDeferral
   (
      this : in out EnteredBackgroundEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEnteredBackgroundEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate EnteredBackgroundEventHandler

   function Invoke
   (
      this : access EnteredBackgroundEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.ApplicationModel.IEnteredBackgroundEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HtmlPrintDocumentSource

   procedure Initialize (this : in out HtmlPrintDocumentSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out HtmlPrintDocumentSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHtmlPrintDocumentSource, IHtmlPrintDocumentSource_Ptr);
   begin
      if this.m_IHtmlPrintDocumentSource /= null then
         if this.m_IHtmlPrintDocumentSource.all /= null then
            RefCount := this.m_IHtmlPrintDocumentSource.all.Release;
            Free (this.m_IHtmlPrintDocumentSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HtmlPrintDocumentSource

   function get_Content
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Windows.UI.WebUI.PrintContent is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.PrintContent;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_Content (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Content
   (
      this : in out HtmlPrintDocumentSource;
      value : Windows.UI.WebUI.PrintContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_Content (value);
   end;

   function get_LeftMargin
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_LeftMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LeftMargin
   (
      this : in out HtmlPrintDocumentSource;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_LeftMargin (value);
   end;

   function get_TopMargin
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_TopMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TopMargin
   (
      this : in out HtmlPrintDocumentSource;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_TopMargin (value);
   end;

   function get_RightMargin
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_RightMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RightMargin
   (
      this : in out HtmlPrintDocumentSource;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_RightMargin (value);
   end;

   function get_BottomMargin
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_BottomMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BottomMargin
   (
      this : in out HtmlPrintDocumentSource;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_BottomMargin (value);
   end;

   function get_EnableHeaderFooter
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_EnableHeaderFooter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EnableHeaderFooter
   (
      this : in out HtmlPrintDocumentSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_EnableHeaderFooter (value);
   end;

   function get_ShrinkToFit
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_ShrinkToFit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShrinkToFit
   (
      this : in out HtmlPrintDocumentSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_ShrinkToFit (value);
   end;

   function get_PercentScale
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_PercentScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PercentScale
   (
      this : in out HtmlPrintDocumentSource;
      scalePercent : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.put_PercentScale (scalePercent);
   end;

   function get_PageRange
   (
      this : in out HtmlPrintDocumentSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.get_PageRange (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function TrySetPageRange
   (
      this : in out HtmlPrintDocumentSource;
      strPageRange : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_strPageRange : WinRt.HString := To_HString (strPageRange);
   begin
      Hr := this.m_IHtmlPrintDocumentSource.all.TrySetPageRange (HStr_strPageRange, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_strPageRange);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out HtmlPrintDocumentSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IHtmlPrintDocumentSource_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHtmlPrintDocumentSource.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LeavingBackgroundEventArgs

   procedure Initialize (this : in out LeavingBackgroundEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LeavingBackgroundEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.ILeavingBackgroundEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.ILeavingBackgroundEventArgs, WinRt.Windows.ApplicationModel.ILeavingBackgroundEventArgs_Ptr);
   begin
      if this.m_ILeavingBackgroundEventArgs /= null then
         if this.m_ILeavingBackgroundEventArgs.all /= null then
            RefCount := this.m_ILeavingBackgroundEventArgs.all.Release;
            Free (this.m_ILeavingBackgroundEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LeavingBackgroundEventArgs

   function GetDeferral
   (
      this : in out LeavingBackgroundEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ILeavingBackgroundEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate LeavingBackgroundEventHandler

   function Invoke
   (
      this : access LeavingBackgroundEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.ApplicationModel.ILeavingBackgroundEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate NavigatedEventHandler

   function Invoke
   (
      this : access NavigatedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.WebUI.IWebUINavigatedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NewWebUIViewCreatedEventArgs

   procedure Initialize (this : in out NewWebUIViewCreatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out NewWebUIViewCreatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INewWebUIViewCreatedEventArgs, INewWebUIViewCreatedEventArgs_Ptr);
   begin
      if this.m_INewWebUIViewCreatedEventArgs /= null then
         if this.m_INewWebUIViewCreatedEventArgs.all /= null then
            RefCount := this.m_INewWebUIViewCreatedEventArgs.all.Release;
            Free (this.m_INewWebUIViewCreatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NewWebUIViewCreatedEventArgs

   function get_WebUIView
   (
      this : in out NewWebUIViewCreatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.WebUIView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IWebUIView;
   begin
      return RetVal : WinRt.Windows.UI.WebUI.WebUIView do
         Hr := this.m_INewWebUIViewCreatedEventArgs.all.get_WebUIView (m_ComRetVal'Access);
         Retval.m_IWebUIView := new Windows.UI.WebUI.IWebUIView;
         Retval.m_IWebUIView.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedEventArgs
   (
      this : in out NewWebUIViewCreatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.IActivatedEventArgs;
   begin
      Hr := this.m_INewWebUIViewCreatedEventArgs.all.get_ActivatedEventArgs (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasPendingNavigate
   (
      this : in out NewWebUIViewCreatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INewWebUIViewCreatedEventArgs.all.get_HasPendingNavigate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out NewWebUIViewCreatedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_INewWebUIViewCreatedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate ResumingEventHandler

   function Invoke
   (
      this : access ResumingEventHandler_Delegate;
      sender : WinRt.IInspectable
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SuspendingDeferral

   procedure Initialize (this : in out SuspendingDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out SuspendingDeferral) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.ISuspendingDeferral;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.ISuspendingDeferral, WinRt.Windows.ApplicationModel.ISuspendingDeferral_Ptr);
   begin
      if this.m_ISuspendingDeferral /= null then
         if this.m_ISuspendingDeferral.all /= null then
            RefCount := this.m_ISuspendingDeferral.all.Release;
            Free (this.m_ISuspendingDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SuspendingDeferral

   procedure Complete
   (
      this : in out SuspendingDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISuspendingDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SuspendingEventArgs

   procedure Initialize (this : in out SuspendingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SuspendingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.ISuspendingEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.ISuspendingEventArgs, WinRt.Windows.ApplicationModel.ISuspendingEventArgs_Ptr);
   begin
      if this.m_ISuspendingEventArgs /= null then
         if this.m_ISuspendingEventArgs.all /= null then
            RefCount := this.m_ISuspendingEventArgs.all.Release;
            Free (this.m_ISuspendingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SuspendingEventArgs

   function get_SuspendingOperation
   (
      this : in out SuspendingEventArgs
   )
   return WinRt.Windows.ApplicationModel.SuspendingOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ISuspendingOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SuspendingOperation do
         Hr := this.m_ISuspendingEventArgs.all.get_SuspendingOperation (m_ComRetVal'Access);
         Retval.m_ISuspendingOperation := new Windows.ApplicationModel.ISuspendingOperation;
         Retval.m_ISuspendingOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate SuspendingEventHandler

   function Invoke
   (
      this : access SuspendingEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.ApplicationModel.ISuspendingEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SuspendingOperation

   procedure Initialize (this : in out SuspendingOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SuspendingOperation) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.ISuspendingOperation;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.ISuspendingOperation, WinRt.Windows.ApplicationModel.ISuspendingOperation_Ptr);
   begin
      if this.m_ISuspendingOperation /= null then
         if this.m_ISuspendingOperation.all /= null then
            RefCount := this.m_ISuspendingOperation.all.Release;
            Free (this.m_ISuspendingOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SuspendingOperation

   function GetDeferral
   (
      this : in out SuspendingOperation
   )
   return WinRt.Windows.ApplicationModel.SuspendingDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ISuspendingDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SuspendingDeferral do
         Hr := this.m_ISuspendingOperation.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ISuspendingDeferral := new Windows.ApplicationModel.ISuspendingDeferral;
         Retval.m_ISuspendingDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_Deadline
   (
      this : in out SuspendingOperation
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISuspendingOperation.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebUIApplication is

      function add_NewWebUIViewCreated
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_NewWebUIViewCreated (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_NewWebUIViewCreated
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_NewWebUIViewCreated (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_BackgroundActivated
      (
         handler : Windows.UI.WebUI.BackgroundActivatedEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_BackgroundActivated (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_BackgroundActivated
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_BackgroundActivated (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_LeavingBackground
      (
         handler : Windows.UI.WebUI.LeavingBackgroundEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_LeavingBackground (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_LeavingBackground
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_LeavingBackground (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_EnteredBackground
      (
         handler : Windows.UI.WebUI.EnteredBackgroundEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_EnteredBackground (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_EnteredBackground
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_EnteredBackground (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure EnablePrelaunch
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnablePrelaunch (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RequestRestartAsync
      (
         launchArguments : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_launchArguments : WinRt.HString := To_HString (launchArguments);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AppRestartFailureReason.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AppRestartFailureReason.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_IID            : aliased WinRt.IID := (154701917, 21696, 22319, (132, 81, 75, 253, 43, 82, 237, 218 )); -- Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_HandlerIID     : aliased WinRt.IID := (3706472330, 40743, 23645, (175, 219, 201, 26, 238, 79, 31, 2 ));
         m_Handler        : AsyncOperationCompletedHandler_AppRestartFailureReason.Kind := new AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppRestartFailureReason.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_AppRestartFailureReason.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestRestartAsync (HStr_launchArguments, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_launchArguments);
         return m_RetVal;
      end;

      function RequestRestartForUserAsync
      (
         user : Windows.System.User'Class;
         launchArguments : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_launchArguments : WinRt.HString := To_HString (launchArguments);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AppRestartFailureReason.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AppRestartFailureReason.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_IID            : aliased WinRt.IID := (154701917, 21696, 22319, (132, 81, 75, 253, 43, 82, 237, 218 )); -- Windows.ApplicationModel.Core.AppRestartFailureReason;
         m_HandlerIID     : aliased WinRt.IID := (3706472330, 40743, 23645, (175, 219, 201, 26, 238, 79, 31, 2 ));
         m_Handler        : AsyncOperationCompletedHandler_AppRestartFailureReason.Kind := new AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppRestartFailureReason.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppRestartFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_AppRestartFailureReason.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestRestartForUserAsync (user.m_IUser.all, HStr_launchArguments, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_launchArguments);
         return m_RetVal;
      end;

      function add_Activated
      (
         handler : Windows.UI.WebUI.ActivatedEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Activated (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Activated
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Activated (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_Suspending
      (
         handler : Windows.UI.WebUI.SuspendingEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Suspending (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Suspending
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Suspending (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_Resuming
      (
         handler : Windows.UI.WebUI.ResumingEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Resuming (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Resuming
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Resuming (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_Navigated
      (
         handler : Windows.UI.WebUI.NavigatedEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_Navigated (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_Navigated
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIApplication");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIActivationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIActivationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_Navigated (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end WebUIApplication;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIAppointmentsProviderAddAppointmentActivatedEventArgs

   procedure Initialize (this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIAppointmentsProviderAddAppointmentActivatedEventArgs

   function get_AddAppointmentOperation
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentsProvider.IAddAppointmentOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation do
         Hr := this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all.get_AddAppointmentOperation (m_ComRetVal'Access);
         Retval.m_IAddAppointmentOperation := new Windows.ApplicationModel.Appointments.AppointmentsProvider.IAddAppointmentOperation;
         Retval.m_IAddAppointmentOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderAddAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs

   procedure Initialize (this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs

   function get_RemoveAppointmentOperation
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentsProvider.IRemoveAppointmentOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation do
         Hr := this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all.get_RemoveAppointmentOperation (m_ComRetVal'Access);
         Retval.m_IRemoveAppointmentOperation := new Windows.ApplicationModel.Appointments.AppointmentsProvider.IRemoveAppointmentOperation;
         Retval.m_IRemoveAppointmentOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderRemoveAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs

   procedure Initialize (this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs

   function get_ReplaceAppointmentOperation
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentsProvider.IReplaceAppointmentOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation do
         Hr := this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all.get_ReplaceAppointmentOperation (m_ComRetVal'Access);
         Retval.m_IReplaceAppointmentOperation := new Windows.ApplicationModel.Appointments.AppointmentsProvider.IReplaceAppointmentOperation;
         Retval.m_IReplaceAppointmentOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderReplaceAppointmentActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs

   procedure Initialize (this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs

   function get_InstanceStartDate
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.get_InstanceStartDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocalId
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.get_LocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RoamingId
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all.get_RoamingId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Verb
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs

   procedure Initialize (this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Ptr);
   begin
      if this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs /= null then
         if this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all /= null then
            RefCount := this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all.Release;
            Free (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs

   function get_TimeToShow
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all.get_TimeToShow (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Verb
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IAppointmentsProviderActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppointmentsProviderShowTimeFrameActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebUIBackgroundTaskInstance is

      function get_Current
      return WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIBackgroundTaskInstance");
         m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstanceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.WebUI.IWebUIBackgroundTaskInstance;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIBackgroundTaskInstanceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end WebUIBackgroundTaskInstance;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIBackgroundTaskInstanceRuntimeClass

   procedure Initialize (this : in out WebUIBackgroundTaskInstanceRuntimeClass) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIBackgroundTaskInstanceRuntimeClass) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebUIBackgroundTaskInstance, IWebUIBackgroundTaskInstance_Ptr);
   begin
      if this.m_IWebUIBackgroundTaskInstance /= null then
         if this.m_IWebUIBackgroundTaskInstance.all /= null then
            RefCount := this.m_IWebUIBackgroundTaskInstance.all.Release;
            Free (this.m_IWebUIBackgroundTaskInstance);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIBackgroundTaskInstanceRuntimeClass

   function get_Succeeded
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebUIBackgroundTaskInstance.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Succeeded
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass;
      succeeded : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebUIBackgroundTaskInstance.all.put_Succeeded (succeeded);
   end;

   function get_InstanceId
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.get_InstanceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Task
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistration;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistration do
         m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
         Hr := m_Interface.get_Task (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTaskRegistration := new Windows.ApplicationModel.Background.IBackgroundTaskRegistration;
         Retval.m_IBackgroundTaskRegistration.all := m_ComRetVal;
      end return;
   end;

   function get_Progress
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.get_Progress (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Progress
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.put_Progress (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TriggerDetails
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.get_TriggerDetails (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_Canceled
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass;
      cancelHandler : Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.add_Canceled (cancelHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Canceled
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.remove_Canceled (cookie);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuspendedCount
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
      Hr := m_Interface.get_SuspendedCount (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out WebUIBackgroundTaskInstanceRuntimeClass
   )
   return WinRt.Windows.ApplicationModel.Background.BackgroundTaskDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskDeferral;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIBackgroundTaskInstance_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskInstance, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskInstance'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.BackgroundTaskDeferral do
         m_Interface := QInterface (this.m_IWebUIBackgroundTaskInstance.all);
         Hr := m_Interface.GetDeferral (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTaskDeferral := new Windows.ApplicationModel.Background.IBackgroundTaskDeferral;
         Retval.m_IBackgroundTaskDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIBarcodeScannerPreviewActivatedEventArgs

   procedure Initialize (this : in out WebUIBarcodeScannerPreviewActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIBarcodeScannerPreviewActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerPreviewActivatedEventArgs /= null then
         if this.m_IBarcodeScannerPreviewActivatedEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerPreviewActivatedEventArgs.all.Release;
            Free (this.m_IBarcodeScannerPreviewActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIBarcodeScannerPreviewActivatedEventArgs

   function get_ConnectionId
   (
      this : in out WebUIBarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerPreviewActivatedEventArgs.all.get_ConnectionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIBarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIBarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIBarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIBarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIBarcodeScannerPreviewActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IBarcodeScannerPreviewActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IBarcodeScannerPreviewActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUICachedFileUpdaterActivatedEventArgs

   procedure Initialize (this : in out WebUICachedFileUpdaterActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUICachedFileUpdaterActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Ptr);
   begin
      if this.m_ICachedFileUpdaterActivatedEventArgs /= null then
         if this.m_ICachedFileUpdaterActivatedEventArgs.all /= null then
            RefCount := this.m_ICachedFileUpdaterActivatedEventArgs.all.Release;
            Free (this.m_ICachedFileUpdaterActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUICachedFileUpdaterActivatedEventArgs

   function get_CachedFileUpdaterUI
   (
      this : in out WebUICachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.Storage.Provider.CachedFileUpdaterUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.ICachedFileUpdaterUI;
   begin
      return RetVal : WinRt.Windows.Storage.Provider.CachedFileUpdaterUI do
         Hr := this.m_ICachedFileUpdaterActivatedEventArgs.all.get_CachedFileUpdaterUI (m_ComRetVal'Access);
         Retval.m_ICachedFileUpdaterUI := new Windows.Storage.Provider.ICachedFileUpdaterUI;
         Retval.m_ICachedFileUpdaterUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUICachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUICachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUICachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUICachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUICachedFileUpdaterActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ICachedFileUpdaterActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUICameraSettingsActivatedEventArgs

   procedure Initialize (this : in out WebUICameraSettingsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUICameraSettingsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Ptr);
   begin
      if this.m_ICameraSettingsActivatedEventArgs /= null then
         if this.m_ICameraSettingsActivatedEventArgs.all /= null then
            RefCount := this.m_ICameraSettingsActivatedEventArgs.all.Release;
            Free (this.m_ICameraSettingsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUICameraSettingsActivatedEventArgs

   function get_VideoDeviceController
   (
      this : in out WebUICameraSettingsActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ICameraSettingsActivatedEventArgs.all.get_VideoDeviceController (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoDeviceExtension
   (
      this : in out WebUICameraSettingsActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ICameraSettingsActivatedEventArgs.all.get_VideoDeviceExtension (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebUICameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUICameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUICameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUICameraSettingsActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICameraSettingsActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ICameraSettingsActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUICommandLineActivatedEventArgs

   procedure Initialize (this : in out WebUICommandLineActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUICommandLineActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Ptr);
   begin
      if this.m_ICommandLineActivatedEventArgs /= null then
         if this.m_ICommandLineActivatedEventArgs.all /= null then
            RefCount := this.m_ICommandLineActivatedEventArgs.all.Release;
            Free (this.m_ICommandLineActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUICommandLineActivatedEventArgs

   function get_Operation
   (
      this : in out WebUICommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.CommandLineActivationOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ICommandLineActivationOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.CommandLineActivationOperation do
         Hr := this.m_ICommandLineActivatedEventArgs.all.get_Operation (m_ComRetVal'Access);
         Retval.m_ICommandLineActivationOperation := new Windows.ApplicationModel.Activation.ICommandLineActivationOperation;
         Retval.m_ICommandLineActivationOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUICommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUICommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUICommandLineActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUICommandLineActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUICommandLineActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ICommandLineActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ICommandLineActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactCallActivatedEventArgs

   procedure Initialize (this : in out WebUIContactCallActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactCallActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Ptr);
   begin
      if this.m_IContactCallActivatedEventArgs /= null then
         if this.m_IContactCallActivatedEventArgs.all /= null then
            RefCount := this.m_IContactCallActivatedEventArgs.all.Release;
            Free (this.m_IContactCallActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactCallActivatedEventArgs

   function get_ServiceId
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactCallActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactCallActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactCallActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactCallActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactCallActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactCallActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactMapActivatedEventArgs

   procedure Initialize (this : in out WebUIContactMapActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactMapActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Ptr);
   begin
      if this.m_IContactMapActivatedEventArgs /= null then
         if this.m_IContactMapActivatedEventArgs.all /= null then
            RefCount := this.m_IContactMapActivatedEventArgs.all.Release;
            Free (this.m_IContactMapActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactMapActivatedEventArgs

   function get_Address
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactAddress;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactAddress do
         Hr := this.m_IContactMapActivatedEventArgs.all.get_Address (m_ComRetVal'Access);
         Retval.m_IContactAddress := new Windows.ApplicationModel.Contacts.IContactAddress;
         Retval.m_IContactAddress.all := m_ComRetVal;
      end return;
   end;

   function get_Contact
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactMapActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactMapActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMapActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactMapActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactMessageActivatedEventArgs

   procedure Initialize (this : in out WebUIContactMessageActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactMessageActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Ptr);
   begin
      if this.m_IContactMessageActivatedEventArgs /= null then
         if this.m_IContactMessageActivatedEventArgs.all /= null then
            RefCount := this.m_IContactMessageActivatedEventArgs.all.Release;
            Free (this.m_IContactMessageActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactMessageActivatedEventArgs

   function get_ServiceId
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactMessageActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactMessageActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactMessageActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactMessageActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactMessageActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactMessageActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactPanelActivatedEventArgs

   procedure Initialize (this : in out WebUIContactPanelActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactPanelActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Ptr);
   begin
      if this.m_IContactPanelActivatedEventArgs /= null then
         if this.m_IContactPanelActivatedEventArgs.all /= null then
            RefCount := this.m_IContactPanelActivatedEventArgs.all.Release;
            Free (this.m_IContactPanelActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactPanelActivatedEventArgs

   function get_ContactPanel
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactPanel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactPanel;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactPanel do
         Hr := this.m_IContactPanelActivatedEventArgs.all.get_ContactPanel (m_ComRetVal'Access);
         Retval.m_IContactPanel := new Windows.ApplicationModel.Contacts.IContactPanel;
         Retval.m_IContactPanel.all := m_ComRetVal;
      end return;
   end;

   function get_Contact
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactPanelActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIContactPanelActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPanelActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IContactPanelActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactPickerActivatedEventArgs

   procedure Initialize (this : in out WebUIContactPickerActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactPickerActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Ptr);
   begin
      if this.m_IContactPickerActivatedEventArgs /= null then
         if this.m_IContactPickerActivatedEventArgs.all /= null then
            RefCount := this.m_IContactPickerActivatedEventArgs.all.Release;
            Free (this.m_IContactPickerActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactPickerActivatedEventArgs

   function get_ContactPickerUI
   (
      this : in out WebUIContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Provider.ContactPickerUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.Provider.IContactPickerUI;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Provider.ContactPickerUI do
         Hr := this.m_IContactPickerActivatedEventArgs.all.get_ContactPickerUI (m_ComRetVal'Access);
         Retval.m_IContactPickerUI := new Windows.ApplicationModel.Contacts.Provider.IContactPickerUI;
         Retval.m_IContactPickerUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactPickerActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPickerActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactPickerActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactPostActivatedEventArgs

   procedure Initialize (this : in out WebUIContactPostActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactPostActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Ptr);
   begin
      if this.m_IContactPostActivatedEventArgs /= null then
         if this.m_IContactPostActivatedEventArgs.all /= null then
            RefCount := this.m_IContactPostActivatedEventArgs.all.Release;
            Free (this.m_IContactPostActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactPostActivatedEventArgs

   function get_ServiceId
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPostActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactPostActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactPostActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactPostActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactPostActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactPostActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIContactVideoCallActivatedEventArgs

   procedure Initialize (this : in out WebUIContactVideoCallActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIContactVideoCallActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Ptr);
   begin
      if this.m_IContactVideoCallActivatedEventArgs /= null then
         if this.m_IContactVideoCallActivatedEventArgs.all /= null then
            RefCount := this.m_IContactVideoCallActivatedEventArgs.all.Release;
            Free (this.m_IContactVideoCallActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIContactVideoCallActivatedEventArgs

   function get_ServiceId
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactVideoCallActivatedEventArgs.all.get_ServiceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceUserId
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactVideoCallActivatedEventArgs.all.get_ServiceUserId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactVideoCallActivatedEventArgs.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   function get_Verb
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContactActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContactActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
      Hr := m_Interface.get_Verb (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIContactVideoCallActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IContactVideoCallActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IContactVideoCallActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIDeviceActivatedEventArgs

   procedure Initialize (this : in out WebUIDeviceActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIDeviceActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Ptr);
   begin
      if this.m_IDeviceActivatedEventArgs /= null then
         if this.m_IDeviceActivatedEventArgs.all /= null then
            RefCount := this.m_IDeviceActivatedEventArgs.all.Release;
            Free (this.m_IDeviceActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIDeviceActivatedEventArgs

   function get_DeviceInformationId
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceActivatedEventArgs.all.get_DeviceInformationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Verb
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceActivatedEventArgs.all.get_Verb (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIDeviceActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDeviceActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IDeviceActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIDevicePairingActivatedEventArgs

   procedure Initialize (this : in out WebUIDevicePairingActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIDevicePairingActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Ptr);
   begin
      if this.m_IDevicePairingActivatedEventArgs /= null then
         if this.m_IDevicePairingActivatedEventArgs.all /= null then
            RefCount := this.m_IDevicePairingActivatedEventArgs.all.Release;
            Free (this.m_IDevicePairingActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIDevicePairingActivatedEventArgs

   function get_DeviceInformation
   (
      this : in out WebUIDevicePairingActivatedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDevicePairingActivatedEventArgs.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIDevicePairingActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIDevicePairingActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIDevicePairingActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIDevicePairingActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIDevicePairingActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDevicePairingActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IDevicePairingActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIDialReceiverActivatedEventArgs

   procedure Initialize (this : in out WebUIDialReceiverActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIDialReceiverActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Ptr);
   begin
      if this.m_IDialReceiverActivatedEventArgs /= null then
         if this.m_IDialReceiverActivatedEventArgs.all /= null then
            RefCount := this.m_IDialReceiverActivatedEventArgs.all.Release;
            Free (this.m_IDialReceiverActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIDialReceiverActivatedEventArgs

   function get_AppName
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDialReceiverActivatedEventArgs.all.get_AppName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Arguments
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_Arguments (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TileId
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_TileId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIDialReceiverActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IDialReceiverActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IDialReceiverActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIFileActivatedEventArgs

   procedure Initialize (this : in out WebUIFileActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIFileActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Ptr);
   begin
      if this.m_IFileActivatedEventArgs /= null then
         if this.m_IFileActivatedEventArgs.all /= null then
            RefCount := this.m_IFileActivatedEventArgs.all.Release;
            Free (this.m_IFileActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIFileActivatedEventArgs

   function get_Files
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFileActivatedEventArgs.all.get_Files (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Verb
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileActivatedEventArgs.all.get_Verb (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_NeighboringFilesQuery
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Windows.Storage.Search.StorageFileQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgsWithNeighboringFiles := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFileQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgsWithNeighboringFiles, WinRt.Windows.ApplicationModel.Activation.IID_IFileActivatedEventArgsWithNeighboringFiles'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFileQueryResult do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_NeighboringFilesQuery (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFileQueryResult := new Windows.Storage.Search.IStorageFileQueryResult;
         Retval.m_IStorageFileQueryResult.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIFileActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIFileOpenPickerActivatedEventArgs

   procedure Initialize (this : in out WebUIFileOpenPickerActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIFileOpenPickerActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Ptr);
   begin
      if this.m_IFileOpenPickerActivatedEventArgs /= null then
         if this.m_IFileOpenPickerActivatedEventArgs.all /= null then
            RefCount := this.m_IFileOpenPickerActivatedEventArgs.all.Release;
            Free (this.m_IFileOpenPickerActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIFileOpenPickerActivatedEventArgs

   function get_FileOpenPickerUI
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.Storage.Pickers.Provider.FileOpenPickerUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.Provider.IFileOpenPickerUI;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.Provider.FileOpenPickerUI do
         Hr := this.m_IFileOpenPickerActivatedEventArgs.all.get_FileOpenPickerUI (m_ComRetVal'Access);
         Retval.m_IFileOpenPickerUI := new Windows.Storage.Pickers.Provider.IFileOpenPickerUI;
         Retval.m_IFileOpenPickerUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_IFileOpenPickerActivatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIFileOpenPickerActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileOpenPickerActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIFileOpenPickerContinuationEventArgs

   procedure Initialize (this : in out WebUIFileOpenPickerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIFileOpenPickerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs, WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Ptr);
   begin
      if this.m_IFileOpenPickerContinuationEventArgs /= null then
         if this.m_IFileOpenPickerContinuationEventArgs.all /= null then
            RefCount := this.m_IFileOpenPickerContinuationEventArgs.all.Release;
            Free (this.m_IFileOpenPickerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIFileOpenPickerContinuationEventArgs

   function get_Files
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFileOpenPickerContinuationEventArgs.all.get_Files (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContinuationData
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIFileOpenPickerContinuationEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileOpenPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileOpenPickerContinuationEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIFileSavePickerActivatedEventArgs

   procedure Initialize (this : in out WebUIFileSavePickerActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIFileSavePickerActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Ptr);
   begin
      if this.m_IFileSavePickerActivatedEventArgs /= null then
         if this.m_IFileSavePickerActivatedEventArgs.all /= null then
            RefCount := this.m_IFileSavePickerActivatedEventArgs.all.Release;
            Free (this.m_IFileSavePickerActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIFileSavePickerActivatedEventArgs

   function get_FileSavePickerUI
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.Storage.Pickers.Provider.FileSavePickerUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.Provider.IFileSavePickerUI;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.Provider.FileSavePickerUI do
         Hr := this.m_IFileSavePickerActivatedEventArgs.all.get_FileSavePickerUI (m_ComRetVal'Access);
         Retval.m_IFileSavePickerUI := new Windows.Storage.Pickers.Provider.IFileSavePickerUI;
         Retval.m_IFileSavePickerUI.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_IFileSavePickerActivatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EnterpriseId
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_IFileSavePickerActivatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
      Hr := m_Interface.get_EnterpriseId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIFileSavePickerActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileSavePickerActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIFileSavePickerContinuationEventArgs

   procedure Initialize (this : in out WebUIFileSavePickerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIFileSavePickerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs, WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Ptr);
   begin
      if this.m_IFileSavePickerContinuationEventArgs /= null then
         if this.m_IFileSavePickerContinuationEventArgs.all /= null then
            RefCount := this.m_IFileSavePickerContinuationEventArgs.all.Release;
            Free (this.m_IFileSavePickerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIFileSavePickerContinuationEventArgs

   function get_File
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileSavePickerContinuationEventArgs.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_ContinuationData
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIFileSavePickerContinuationEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFileSavePickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileSavePickerContinuationEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIFolderPickerContinuationEventArgs

   procedure Initialize (this : in out WebUIFolderPickerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIFolderPickerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs, WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Ptr);
   begin
      if this.m_IFolderPickerContinuationEventArgs /= null then
         if this.m_IFolderPickerContinuationEventArgs.all /= null then
            RefCount := this.m_IFolderPickerContinuationEventArgs.all.Release;
            Free (this.m_IFolderPickerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIFolderPickerContinuationEventArgs

   function get_Folder
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IFolderPickerContinuationEventArgs.all.get_Folder (m_ComRetVal'Access);
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_ContinuationData
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIFolderPickerContinuationEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IFolderPickerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFolderPickerContinuationEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUILaunchActivatedEventArgs

   procedure Initialize (this : in out WebUILaunchActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUILaunchActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Ptr);
   begin
      if this.m_ILaunchActivatedEventArgs /= null then
         if this.m_ILaunchActivatedEventArgs.all /= null then
            RefCount := this.m_ILaunchActivatedEventArgs.all.Release;
            Free (this.m_ILaunchActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUILaunchActivatedEventArgs

   function get_Arguments
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILaunchActivatedEventArgs.all.get_Arguments (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TileId
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILaunchActivatedEventArgs.all.get_TileId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_PrelaunchActivated
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IPrelaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_PrelaunchActivated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_TileActivatedInfo
   (
      this : in out WebUILaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.TileActivatedInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ITileActivatedInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.TileActivatedInfo do
         m_Interface := QInterface (this.m_ILaunchActivatedEventArgs.all);
         Hr := m_Interface.get_TileActivatedInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITileActivatedInfo := new Windows.ApplicationModel.Activation.ITileActivatedInfo;
         Retval.m_ITileActivatedInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUILockScreenActivatedEventArgs

   procedure Initialize (this : in out WebUILockScreenActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUILockScreenActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Ptr);
   begin
      if this.m_ILockScreenActivatedEventArgs /= null then
         if this.m_ILockScreenActivatedEventArgs.all /= null then
            RefCount := this.m_ILockScreenActivatedEventArgs.all.Release;
            Free (this.m_ILockScreenActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUILockScreenActivatedEventArgs

   function get_Info
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ILockScreenActivatedEventArgs.all.get_Info (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUILockScreenActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_ILockScreenActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUILockScreenCallActivatedEventArgs

   procedure Initialize (this : in out WebUILockScreenCallActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUILockScreenCallActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Ptr);
   begin
      if this.m_ILockScreenCallActivatedEventArgs /= null then
         if this.m_ILockScreenCallActivatedEventArgs.all /= null then
            RefCount := this.m_ILockScreenCallActivatedEventArgs.all.Release;
            Free (this.m_ILockScreenCallActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUILockScreenCallActivatedEventArgs

   function get_CallUI
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Calls.LockScreenCallUI'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.ILockScreenCallUI;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.LockScreenCallUI do
         Hr := this.m_ILockScreenCallActivatedEventArgs.all.get_CallUI (m_ComRetVal'Access);
         Retval.m_ILockScreenCallUI := new Windows.ApplicationModel.Calls.ILockScreenCallUI;
         Retval.m_ILockScreenCallUI.all := m_ComRetVal;
      end return;
   end;

   function get_Arguments
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_Arguments (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TileId
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_ILaunchActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_TileId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUILockScreenCallActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ILockScreenCallActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ILockScreenCallActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUILockScreenComponentActivatedEventArgs

   procedure Initialize (this : in out WebUILockScreenComponentActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUILockScreenComponentActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs_Ptr);
   begin
      if this.m_IActivatedEventArgs /= null then
         if this.m_IActivatedEventArgs.all /= null then
            RefCount := this.m_IActivatedEventArgs.all.Release;
            Free (this.m_IActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUILockScreenComponentActivatedEventArgs

   function get_Kind
   (
      this : in out WebUILockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
   begin
      Hr := this.m_IActivatedEventArgs.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUILockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
   begin
      Hr := this.m_IActivatedEventArgs.all.get_PreviousExecutionState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUILockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         Hr := this.m_IActivatedEventArgs.all.get_SplashScreen (m_ComRetVal'Access);
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUILockScreenComponentActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUINavigatedDeferral

   procedure Initialize (this : in out WebUINavigatedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUINavigatedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebUINavigatedDeferral, IWebUINavigatedDeferral_Ptr);
   begin
      if this.m_IWebUINavigatedDeferral /= null then
         if this.m_IWebUINavigatedDeferral.all /= null then
            RefCount := this.m_IWebUINavigatedDeferral.all.Release;
            Free (this.m_IWebUINavigatedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUINavigatedDeferral

   procedure Complete
   (
      this : in out WebUINavigatedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebUINavigatedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUINavigatedEventArgs

   procedure Initialize (this : in out WebUINavigatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUINavigatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebUINavigatedEventArgs, IWebUINavigatedEventArgs_Ptr);
   begin
      if this.m_IWebUINavigatedEventArgs /= null then
         if this.m_IWebUINavigatedEventArgs.all /= null then
            RefCount := this.m_IWebUINavigatedEventArgs.all.Release;
            Free (this.m_IWebUINavigatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUINavigatedEventArgs

   function get_NavigatedOperation
   (
      this : in out WebUINavigatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.WebUINavigatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IWebUINavigatedOperation;
   begin
      return RetVal : WinRt.Windows.UI.WebUI.WebUINavigatedOperation do
         Hr := this.m_IWebUINavigatedEventArgs.all.get_NavigatedOperation (m_ComRetVal'Access);
         Retval.m_IWebUINavigatedOperation := new Windows.UI.WebUI.IWebUINavigatedOperation;
         Retval.m_IWebUINavigatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUINavigatedOperation

   procedure Initialize (this : in out WebUINavigatedOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUINavigatedOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebUINavigatedOperation, IWebUINavigatedOperation_Ptr);
   begin
      if this.m_IWebUINavigatedOperation /= null then
         if this.m_IWebUINavigatedOperation.all /= null then
            RefCount := this.m_IWebUINavigatedOperation.all.Release;
            Free (this.m_IWebUINavigatedOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUINavigatedOperation

   function GetDeferral
   (
      this : in out WebUINavigatedOperation
   )
   return WinRt.Windows.UI.WebUI.WebUINavigatedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IWebUINavigatedDeferral;
   begin
      return RetVal : WinRt.Windows.UI.WebUI.WebUINavigatedDeferral do
         Hr := this.m_IWebUINavigatedOperation.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IWebUINavigatedDeferral := new Windows.UI.WebUI.IWebUINavigatedDeferral;
         Retval.m_IWebUINavigatedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIPrint3DWorkflowActivatedEventArgs

   procedure Initialize (this : in out WebUIPrint3DWorkflowActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIPrint3DWorkflowActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Ptr);
   begin
      if this.m_IPrint3DWorkflowActivatedEventArgs /= null then
         if this.m_IPrint3DWorkflowActivatedEventArgs.all /= null then
            RefCount := this.m_IPrint3DWorkflowActivatedEventArgs.all.Release;
            Free (this.m_IPrint3DWorkflowActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIPrint3DWorkflowActivatedEventArgs

   function get_Workflow
   (
      this : in out WebUIPrint3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.Devices.Printers.Extensions.Print3DWorkflow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.IPrint3DWorkflow;
   begin
      return RetVal : WinRt.Windows.Devices.Printers.Extensions.Print3DWorkflow do
         Hr := this.m_IPrint3DWorkflowActivatedEventArgs.all.get_Workflow (m_ComRetVal'Access);
         Retval.m_IPrint3DWorkflow := new Windows.Devices.Printers.Extensions.IPrint3DWorkflow;
         Retval.m_IPrint3DWorkflow.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIPrint3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIPrint3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIPrint3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIPrint3DWorkflowActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrint3DWorkflowActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IPrint3DWorkflowActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIPrintTaskSettingsActivatedEventArgs

   procedure Initialize (this : in out WebUIPrintTaskSettingsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIPrintTaskSettingsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Ptr);
   begin
      if this.m_IPrintTaskSettingsActivatedEventArgs /= null then
         if this.m_IPrintTaskSettingsActivatedEventArgs.all /= null then
            RefCount := this.m_IPrintTaskSettingsActivatedEventArgs.all.Release;
            Free (this.m_IPrintTaskSettingsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIPrintTaskSettingsActivatedEventArgs

   function get_Configuration
   (
      this : in out WebUIPrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.IPrintTaskConfiguration;
   begin
      return RetVal : WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfiguration do
         Hr := this.m_IPrintTaskSettingsActivatedEventArgs.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IPrintTaskConfiguration := new Windows.Devices.Printers.Extensions.IPrintTaskConfiguration;
         Retval.m_IPrintTaskConfiguration.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIPrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIPrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIPrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIPrintTaskSettingsActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IPrintTaskSettingsActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IPrintTaskSettingsActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIPrintWorkflowForegroundTaskActivatedEventArgs

   procedure Initialize (this : in out WebUIPrintWorkflowForegroundTaskActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIPrintWorkflowForegroundTaskActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs_Ptr);
   begin
      if this.m_IActivatedEventArgs /= null then
         if this.m_IActivatedEventArgs.all /= null then
            RefCount := this.m_IActivatedEventArgs.all.Release;
            Free (this.m_IActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIPrintWorkflowForegroundTaskActivatedEventArgs

   function get_Kind
   (
      this : in out WebUIPrintWorkflowForegroundTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
   begin
      Hr := this.m_IActivatedEventArgs.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIPrintWorkflowForegroundTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
   begin
      Hr := this.m_IActivatedEventArgs.all.get_PreviousExecutionState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIPrintWorkflowForegroundTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         Hr := this.m_IActivatedEventArgs.all.get_SplashScreen (m_ComRetVal'Access);
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIPrintWorkflowForegroundTaskActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIProtocolActivatedEventArgs

   procedure Initialize (this : in out WebUIProtocolActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIProtocolActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Ptr);
   begin
      if this.m_IProtocolActivatedEventArgs /= null then
         if this.m_IProtocolActivatedEventArgs.all /= null then
            RefCount := this.m_IProtocolActivatedEventArgs.all.Release;
            Free (this.m_IProtocolActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIProtocolActivatedEventArgs

   function get_Uri
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IProtocolActivatedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Data
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_Data (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIProtocolActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IProtocolActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIProtocolForResultsActivatedEventArgs

   procedure Initialize (this : in out WebUIProtocolForResultsActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIProtocolForResultsActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Ptr);
   begin
      if this.m_IProtocolForResultsActivatedEventArgs /= null then
         if this.m_IProtocolForResultsActivatedEventArgs.all /= null then
            RefCount := this.m_IProtocolForResultsActivatedEventArgs.all.Release;
            Free (this.m_IProtocolForResultsActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIProtocolForResultsActivatedEventArgs

   function get_ProtocolForResultsOperation
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.System.ProtocolForResultsOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IProtocolForResultsOperation;
   begin
      return RetVal : WinRt.Windows.System.ProtocolForResultsOperation do
         Hr := this.m_IProtocolForResultsActivatedEventArgs.all.get_ProtocolForResultsOperation (m_ComRetVal'Access);
         Retval.m_IProtocolForResultsOperation := new Windows.System.IProtocolForResultsOperation;
         Retval.m_IProtocolForResultsOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_Uri
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_CallerPackageFamilyName
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_CallerPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Data
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRt.Windows.ApplicationModel.Activation.IID_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_Data (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIProtocolForResultsActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IProtocolForResultsActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IProtocolForResultsActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIRestrictedLaunchActivatedEventArgs

   procedure Initialize (this : in out WebUIRestrictedLaunchActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIRestrictedLaunchActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Ptr);
   begin
      if this.m_IRestrictedLaunchActivatedEventArgs /= null then
         if this.m_IRestrictedLaunchActivatedEventArgs.all /= null then
            RefCount := this.m_IRestrictedLaunchActivatedEventArgs.all.Release;
            Free (this.m_IRestrictedLaunchActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIRestrictedLaunchActivatedEventArgs

   function get_SharedContext
   (
      this : in out WebUIRestrictedLaunchActivatedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IRestrictedLaunchActivatedEventArgs.all.get_SharedContext (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIRestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIRestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIRestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIRestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIRestrictedLaunchActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IRestrictedLaunchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IRestrictedLaunchActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUISearchActivatedEventArgs

   procedure Initialize (this : in out WebUISearchActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUISearchActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Ptr);
   begin
      if this.m_ISearchActivatedEventArgs /= null then
         if this.m_ISearchActivatedEventArgs.all /= null then
            RefCount := this.m_ISearchActivatedEventArgs.all.Release;
            Free (this.m_ISearchActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUISearchActivatedEventArgs

   function get_QueryText
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchActivatedEventArgs.all.get_QueryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchActivatedEventArgs.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_LinguisticDetails
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgsWithLinguisticDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgsWithLinguisticDetails, WinRt.Windows.ApplicationModel.Activation.IID_ISearchActivatedEventArgsWithLinguisticDetails'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_LinguisticDetails (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISearchPaneQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
         Retval.m_ISearchPaneQueryLinguisticDetails.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentlyShownApplicationViewId
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IApplicationViewActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
      Hr := m_Interface.get_CurrentlyShownApplicationViewId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUISearchActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_ISearchActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIShareTargetActivatedEventArgs

   procedure Initialize (this : in out WebUIShareTargetActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIShareTargetActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Ptr);
   begin
      if this.m_IShareTargetActivatedEventArgs /= null then
         if this.m_IShareTargetActivatedEventArgs.all /= null then
            RefCount := this.m_IShareTargetActivatedEventArgs.all.Release;
            Free (this.m_IShareTargetActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIShareTargetActivatedEventArgs

   function get_ShareOperation
   (
      this : in out WebUIShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.DataTransfer.ShareTarget.IShareOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation do
         Hr := this.m_IShareTargetActivatedEventArgs.all.get_ShareOperation (m_ComRetVal'Access);
         Retval.m_IShareOperation := new Windows.ApplicationModel.DataTransfer.ShareTarget.IShareOperation;
         Retval.m_IShareOperation.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIShareTargetActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIShareTargetActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIShareTargetActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IShareTargetActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIStartupTaskActivatedEventArgs

   procedure Initialize (this : in out WebUIStartupTaskActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIStartupTaskActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Ptr);
   begin
      if this.m_IStartupTaskActivatedEventArgs /= null then
         if this.m_IStartupTaskActivatedEventArgs.all /= null then
            RefCount := this.m_IStartupTaskActivatedEventArgs.all.Release;
            Free (this.m_IStartupTaskActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIStartupTaskActivatedEventArgs

   function get_TaskId
   (
      this : in out WebUIStartupTaskActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStartupTaskActivatedEventArgs.all.get_TaskId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIStartupTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIStartupTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIStartupTaskActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIStartupTaskActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIStartupTaskActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IStartupTaskActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IStartupTaskActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIToastNotificationActivatedEventArgs

   procedure Initialize (this : in out WebUIToastNotificationActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIToastNotificationActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Ptr);
   begin
      if this.m_IToastNotificationActivatedEventArgs /= null then
         if this.m_IToastNotificationActivatedEventArgs.all /= null then
            RefCount := this.m_IToastNotificationActivatedEventArgs.all.Release;
            Free (this.m_IToastNotificationActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIToastNotificationActivatedEventArgs

   function get_Argument
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationActivatedEventArgs.all.get_Argument (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserInput
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IToastNotificationActivatedEventArgs.all.get_UserInput (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIToastNotificationActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IToastNotificationActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIUserDataAccountProviderActivatedEventArgs

   procedure Initialize (this : in out WebUIUserDataAccountProviderActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIUserDataAccountProviderActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Ptr);
   begin
      if this.m_IUserDataAccountProviderActivatedEventArgs /= null then
         if this.m_IUserDataAccountProviderActivatedEventArgs.all /= null then
            RefCount := this.m_IUserDataAccountProviderActivatedEventArgs.all.Release;
            Free (this.m_IUserDataAccountProviderActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIUserDataAccountProviderActivatedEventArgs

   function get_Operation
   (
      this : in out WebUIUserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation;
   begin
      Hr := this.m_IUserDataAccountProviderActivatedEventArgs.all.get_Operation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIUserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIUserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIUserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIUserDataAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IUserDataAccountProviderActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IUserDataAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIView

   procedure Initialize (this : in out WebUIView) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebUIView, IWebUIView_Ptr);
   begin
      if this.m_IWebUIView /= null then
         if this.m_IWebUIView.all /= null then
            RefCount := this.m_IWebUIView.all.Release;
            Free (this.m_IWebUIView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WebUIView

   function CreateAsync
   return WinRt.Windows.UI.WebUI.WebUIView is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIView");
      m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIViewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WebUIView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WebUIView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.WebUI.IWebUIView;
      m_IID            : aliased WinRt.IID := (1135704425, 58847, 22073, (154, 92, 143, 24, 71, 124, 99, 126 )); -- Windows.UI.WebUI.WebUIView;
      m_HandlerIID     : aliased WinRt.IID := (1285969373, 14594, 20528, (189, 96, 91, 79, 71, 47, 213, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_WebUIView.Kind := new AsyncOperationCompletedHandler_WebUIView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebUIView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebUIView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebUIView.Kind_Delegate, AsyncOperationCompletedHandler_WebUIView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.UI.WebUI.WebUIView do
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIViewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IWebUIView := new Windows.UI.WebUI.IWebUIView;
                     Retval.m_IWebUIView.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAsync
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.UI.WebUI.WebUIView is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.WebUI.WebUIView");
      m_Factory        : access WinRt.Windows.UI.WebUI.IWebUIViewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WebUIView.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WebUIView.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.WebUI.IWebUIView;
      m_IID            : aliased WinRt.IID := (1135704425, 58847, 22073, (154, 92, 143, 24, 71, 124, 99, 126 )); -- Windows.UI.WebUI.WebUIView;
      m_HandlerIID     : aliased WinRt.IID := (1285969373, 14594, 20528, (189, 96, 91, 79, 71, 47, 213, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_WebUIView.Kind := new AsyncOperationCompletedHandler_WebUIView.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebUIView.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebUIView.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebUIView.Kind_Delegate, AsyncOperationCompletedHandler_WebUIView.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.UI.WebUI.WebUIView do
         Hr := RoGetActivationFactory (m_hString, IID_IWebUIViewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IWebUIView := new Windows.UI.WebUI.IWebUIView;
                     Retval.m_IWebUIView.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIView

   function get_ApplicationViewId
   (
      this : in out WebUIView
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IWebUIView.all.get_ApplicationViewId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Closed
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebUIView.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebUIView.all.remove_Closed (token);
   end;

   function add_Activated
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebUIView.all.add_Activated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Activated
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebUIView.all.remove_Activated (token);
   end;

   function get_IgnoreApplicationContentUriRulesNavigationRestrictions
   (
      this : in out WebUIView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebUIView.all.get_IgnoreApplicationContentUriRulesNavigationRestrictions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IgnoreApplicationContentUriRulesNavigationRestrictions
   (
      this : in out WebUIView;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebUIView.all.put_IgnoreApplicationContentUriRulesNavigationRestrictions (value);
   end;

   function get_Source
   (
      this : in out WebUIView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IWebUIView.all);
         Hr := m_Interface.get_Source (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out WebUIView;
      source : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.put_Source (source.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_DocumentTitle
   (
      this : in out WebUIView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.get_DocumentTitle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CanGoBack
   (
      this : in out WebUIView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.get_CanGoBack (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanGoForward
   (
      this : in out WebUIView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.get_CanGoForward (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DefaultBackgroundColor
   (
      this : in out WebUIView;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.put_DefaultBackgroundColor (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DefaultBackgroundColor
   (
      this : in out WebUIView
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.get_DefaultBackgroundColor (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ContainsFullScreenElement
   (
      this : in out WebUIView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.get_ContainsFullScreenElement (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Settings
   (
      this : in out WebUIView
   )
   return WinRt.Windows.Web.UI.WebViewControlSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.IWebViewControlSettings;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.UI.WebViewControlSettings do
         m_Interface := QInterface (this.m_IWebUIView.all);
         Hr := m_Interface.get_Settings (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IWebViewControlSettings := new Windows.Web.UI.IWebViewControlSettings;
         Retval.m_IWebViewControlSettings.all := m_ComRetVal;
      end return;
   end;

   function get_DeferredPermissionRequests
   (
      this : in out WebUIView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.get_DeferredPermissionRequests (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure GoForward
   (
      this : in out WebUIView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.GoForward;
      m_RefCount := m_Interface.Release;
   end;

   procedure GoBack
   (
      this : in out WebUIView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.GoBack;
      m_RefCount := m_Interface.Release;
   end;

   procedure Refresh
   (
      this : in out WebUIView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.Refresh;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out WebUIView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Navigate
   (
      this : in out WebUIView;
      source : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.Navigate (source.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure NavigateToString
   (
      this : in out WebUIView;
      text : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.NavigateToString (HStr_text);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
   end;

   procedure NavigateToLocalStreamUri
   (
      this : in out WebUIView;
      source : Windows.Foundation.Uri'Class;
      streamResolver : Windows.Web.IUriToStreamResolver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.NavigateToLocalStreamUri (source.m_IUriRuntimeClass.all, streamResolver);
      m_RefCount := m_Interface.Release;
   end;

   procedure NavigateWithHttpRequestMessage
   (
      this : in out WebUIView;
      requestMessage : Windows.Web.Http.HttpRequestMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.NavigateWithHttpRequestMessage (requestMessage.m_IHttpRequestMessage.all);
      m_RefCount := m_Interface.Release;
   end;

   function InvokeScriptAsync
   (
      this : in out WebUIView;
      scriptName : WinRt.WString;
      arguments : GenericObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_scriptName : WinRt.HString := To_HString (scriptName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.InvokeScriptAsync (HStr_scriptName, arguments, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_scriptName);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   procedure CapturePreviewToStreamAsync
   (
      this : in out WebUIView;
      stream : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.CapturePreviewToStreamAsync (stream, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function CaptureSelectedContentToDataPackageAsync
   (
      this : in out WebUIView
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DataPackage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DataPackage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage;
      m_IID            : aliased WinRt.IID := (2708417799, 60115, 21476, (148, 144, 117, 189, 186, 235, 122, 91 )); -- Windows.ApplicationModel.DataTransfer.DataPackage;
      m_HandlerIID     : aliased WinRt.IID := (2839165849, 59718, 22478, (170, 217, 194, 61, 19, 140, 53, 62 ));
      m_Handler        : AsyncOperationCompletedHandler_DataPackage.Kind := new AsyncOperationCompletedHandler_DataPackage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DataPackage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DataPackage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DataPackage.Kind_Delegate, AsyncOperationCompletedHandler_DataPackage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackage do
         m_Interface := QInterface (this.m_IWebUIView.all);
         Hr := m_Interface.CaptureSelectedContentToDataPackageAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDataPackage := new Windows.ApplicationModel.DataTransfer.IDataPackage;
                  Retval.m_IDataPackage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function BuildLocalStreamUri
   (
      this : in out WebUIView;
      contentIdentifier : WinRt.WString;
      relativePath : WinRt.WString
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      HStr_contentIdentifier : WinRt.HString := To_HString (contentIdentifier);
      HStr_relativePath : WinRt.HString := To_HString (relativePath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IWebUIView.all);
         Hr := m_Interface.BuildLocalStreamUri (HStr_contentIdentifier, HStr_relativePath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_contentIdentifier);
         Hr := WindowsDeleteString (HStr_relativePath);
      end return;
   end;

   procedure GetDeferredPermissionRequestById
   (
      this : in out WebUIView;
      id : WinRt.UInt32;
      result : access Windows.Web.UI.IWebViewControlDeferredPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.GetDeferredPermissionRequestById (id, result);
      m_RefCount := m_Interface.Release;
   end;

   function add_NavigationStarting
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_NavigationStarting (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_NavigationStarting
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_NavigationStarting (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_ContentLoading
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_ContentLoading (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ContentLoading
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_ContentLoading (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_DOMContentLoaded
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_DOMContentLoaded (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_DOMContentLoaded
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_DOMContentLoaded (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_NavigationCompleted
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_NavigationCompleted (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_NavigationCompleted
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_NavigationCompleted (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_FrameNavigationStarting
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_FrameNavigationStarting (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_FrameNavigationStarting
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_FrameNavigationStarting (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_FrameContentLoading
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_FrameContentLoading (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_FrameContentLoading
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_FrameContentLoading (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_FrameDOMContentLoaded
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_FrameDOMContentLoaded (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_FrameDOMContentLoaded
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_FrameDOMContentLoaded (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_FrameNavigationCompleted
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_FrameNavigationCompleted (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_FrameNavigationCompleted
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_FrameNavigationCompleted (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_ScriptNotify
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_ScriptNotify (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ScriptNotify
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_ScriptNotify (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_LongRunningScriptDetected
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_LongRunningScriptDetected (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_LongRunningScriptDetected
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_LongRunningScriptDetected (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_UnsafeContentWarningDisplaying
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_UnsafeContentWarningDisplaying (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_UnsafeContentWarningDisplaying
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_UnsafeContentWarningDisplaying (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_UnviewableContentIdentified
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_UnviewableContentIdentified (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_UnviewableContentIdentified
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_UnviewableContentIdentified (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_PermissionRequested
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_PermissionRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PermissionRequested
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_PermissionRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_UnsupportedUriSchemeIdentified
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_UnsupportedUriSchemeIdentified (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_UnsupportedUriSchemeIdentified
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_UnsupportedUriSchemeIdentified (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_NewWindowRequested
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_NewWindowRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_NewWindowRequested
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_NewWindowRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_ContainsFullScreenElementChanged
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_ContainsFullScreenElementChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ContainsFullScreenElementChanged
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_ContainsFullScreenElementChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_WebResourceRequested
   (
      this : in out WebUIView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.add_WebResourceRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_WebResourceRequested
   (
      this : in out WebUIView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IID_IWebViewControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.remove_WebResourceRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddInitializeScript
   (
      this : in out WebUIView;
      script : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_script : WinRt.HString := To_HString (script);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.WebUI.IWebUIView_Interface, WinRt.Windows.Web.UI.IWebViewControl2, WinRt.Windows.Web.UI.IID_IWebViewControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebUIView.all);
      Hr := m_Interface.AddInitializeScript (HStr_script);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_script);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIVoiceCommandActivatedEventArgs

   procedure Initialize (this : in out WebUIVoiceCommandActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIVoiceCommandActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Ptr);
   begin
      if this.m_IVoiceCommandActivatedEventArgs /= null then
         if this.m_IVoiceCommandActivatedEventArgs.all /= null then
            RefCount := this.m_IVoiceCommandActivatedEventArgs.all.Release;
            Free (this.m_IVoiceCommandActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIVoiceCommandActivatedEventArgs

   function get_Result
   (
      this : in out WebUIVoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult do
         Hr := this.m_IVoiceCommandActivatedEventArgs.all.get_Result (m_ComRetVal'Access);
         Retval.m_ISpeechRecognitionResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
         Retval.m_ISpeechRecognitionResult.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIVoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIVoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIVoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIVoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIVoiceCommandActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IVoiceCommandActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IVoiceCommandActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIWalletActionActivatedEventArgs

   procedure Initialize (this : in out WebUIWalletActionActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIWalletActionActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Ptr);
   begin
      if this.m_IWalletActionActivatedEventArgs /= null then
         if this.m_IWalletActionActivatedEventArgs.all /= null then
            RefCount := this.m_IWalletActionActivatedEventArgs.all.Release;
            Free (this.m_IWalletActionActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIWalletActionActivatedEventArgs

   function get_ItemId
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletActionActivatedEventArgs.all.get_ItemId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ActionKind
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletActionKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.WalletActionKind;
   begin
      Hr := this.m_IWalletActionActivatedEventArgs.all.get_ActionKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActionId
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletActionActivatedEventArgs.all.get_ActionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIWalletActionActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWalletActionActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IWalletActionActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIWebAccountProviderActivatedEventArgs

   procedure Initialize (this : in out WebUIWebAccountProviderActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIWebAccountProviderActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Ptr);
   begin
      if this.m_IWebAccountProviderActivatedEventArgs /= null then
         if this.m_IWebAccountProviderActivatedEventArgs.all /= null then
            RefCount := this.m_IWebAccountProviderActivatedEventArgs.all.Release;
            Free (this.m_IWebAccountProviderActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIWebAccountProviderActivatedEventArgs

   function get_Operation
   (
      this : in out WebUIWebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation;
   begin
      Hr := this.m_IWebAccountProviderActivatedEventArgs.all.get_Operation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebUIWebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIWebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIWebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIWebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out WebUIWebAccountProviderActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAccountProviderActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IWebAccountProviderActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebUIWebAuthenticationBrokerContinuationEventArgs

   procedure Initialize (this : in out WebUIWebAuthenticationBrokerContinuationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebUIWebAuthenticationBrokerContinuationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs, WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Ptr);
   begin
      if this.m_IWebAuthenticationBrokerContinuationEventArgs /= null then
         if this.m_IWebAuthenticationBrokerContinuationEventArgs.all /= null then
            RefCount := this.m_IWebAuthenticationBrokerContinuationEventArgs.all.Release;
            Free (this.m_IWebAuthenticationBrokerContinuationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebUIWebAuthenticationBrokerContinuationEventArgs

   function get_WebAuthenticationResult
   (
      this : in out WebUIWebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.IWebAuthenticationResult;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
         Hr := this.m_IWebAuthenticationBrokerContinuationEventArgs.all.get_WebAuthenticationResult (m_ComRetVal'Access);
         Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
         Retval.m_IWebAuthenticationResult.all := m_ComRetVal;
      end return;
   end;

   function get_ContinuationData
   (
      this : in out WebUIWebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IContinuationActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IContinuationActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebUIWebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out WebUIWebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out WebUIWebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   function get_ActivatedOperation
   (
      this : in out WebUIWebAuthenticationBrokerContinuationEventArgs
   )
   return WinRt.Windows.UI.WebUI.ActivatedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WebUI.IActivatedOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Activation.IWebAuthenticationBrokerContinuationEventArgs_Interface, WinRt.Windows.UI.WebUI.IActivatedEventArgsDeferral, WinRt.Windows.UI.WebUI.IID_IActivatedEventArgsDeferral'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WebUI.ActivatedOperation do
         m_Interface := QInterface (this.m_IWebAuthenticationBrokerContinuationEventArgs.all);
         Hr := m_Interface.get_ActivatedOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IActivatedOperation := new Windows.UI.WebUI.IActivatedOperation;
         Retval.m_IActivatedOperation.all := m_ComRetVal;
      end return;
   end;

end;

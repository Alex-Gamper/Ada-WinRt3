--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.System;
with WinRt.Windows.UI.Popups;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.ApplicationSettings is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AccountsSettingsPane

   procedure Initialize (this : in out AccountsSettingsPane) is
   begin
      null;
   end;

   procedure Finalize (this : in out AccountsSettingsPane) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAccountsSettingsPane, IAccountsSettingsPane_Ptr);
   begin
      if this.m_IAccountsSettingsPane /= null then
         if this.m_IAccountsSettingsPane.all /= null then
            RefCount := this.m_IAccountsSettingsPane.all.Release;
            Free (this.m_IAccountsSettingsPane);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AccountsSettingsPane

   procedure ShowManageAccountsForUserAsync
   (
      user : Windows.System.User'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.AccountsSettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAccountsSettingsPaneStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowManageAccountsForUserAsync (user.m_IUser.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ShowAddAccountForUserAsync
   (
      user : Windows.System.User'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.AccountsSettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAccountsSettingsPaneStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowAddAccountForUserAsync (user.m_IUser.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetForCurrentView
   return WinRt.Windows.UI.ApplicationSettings.AccountsSettingsPane is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.AccountsSettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.IAccountsSettingsPane;
   begin
      return RetVal : WinRt.Windows.UI.ApplicationSettings.AccountsSettingsPane do
         Hr := RoGetActivationFactory (m_hString, IID_IAccountsSettingsPaneStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAccountsSettingsPane := new Windows.UI.ApplicationSettings.IAccountsSettingsPane;
            Retval.m_IAccountsSettingsPane.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure Show is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.AccountsSettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAccountsSettingsPaneStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Show;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ShowManageAccountsAsync is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.AccountsSettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAccountsSettingsPaneStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowManageAccountsAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ShowAddAccountAsync is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.AccountsSettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAccountsSettingsPaneStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowAddAccountAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AccountsSettingsPane

   function add_AccountCommandsRequested
   (
      this : in out AccountsSettingsPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAccountsSettingsPane.all.add_AccountCommandsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AccountCommandsRequested
   (
      this : in out AccountsSettingsPane;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAccountsSettingsPane.all.remove_AccountCommandsRequested (cookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AccountsSettingsPaneCommandsRequestedEventArgs

   procedure Initialize (this : in out AccountsSettingsPaneCommandsRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AccountsSettingsPaneCommandsRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAccountsSettingsPaneCommandsRequestedEventArgs, IAccountsSettingsPaneCommandsRequestedEventArgs_Ptr);
   begin
      if this.m_IAccountsSettingsPaneCommandsRequestedEventArgs /= null then
         if this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all /= null then
            RefCount := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.Release;
            Free (this.m_IAccountsSettingsPaneCommandsRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AccountsSettingsPaneCommandsRequestedEventArgs

   function get_WebAccountProviderCommands
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return IVector_IWebAccountProviderCommand.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWebAccountProviderCommand.Kind;
   begin
      Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.get_WebAccountProviderCommands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IWebAccountProviderCommand (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_WebAccountCommands
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return IVector_IWebAccountCommand.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWebAccountCommand.Kind;
   begin
      Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.get_WebAccountCommands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IWebAccountCommand (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CredentialCommands
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return IVector_ICredentialCommand.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ICredentialCommand.Kind;
   begin
      Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.get_CredentialCommands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ICredentialCommand (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Commands
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.get_Commands (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HeaderText
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.get_HeaderText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_HeaderText
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.put_HeaderText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetDeferral
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return WinRt.Windows.UI.ApplicationSettings.AccountsSettingsPaneEventDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.IAccountsSettingsPaneEventDeferral;
   begin
      return RetVal : WinRt.Windows.UI.ApplicationSettings.AccountsSettingsPaneEventDeferral do
         Hr := this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IAccountsSettingsPaneEventDeferral := new Windows.UI.ApplicationSettings.IAccountsSettingsPaneEventDeferral;
         Retval.m_IAccountsSettingsPaneEventDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out AccountsSettingsPaneCommandsRequestedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneCommandsRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneCommandsRequestedEventArgs_Interface, WinRt.Windows.UI.ApplicationSettings.IAccountsSettingsPaneCommandsRequestedEventArgs2, WinRt.Windows.UI.ApplicationSettings.IID_IAccountsSettingsPaneCommandsRequestedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAccountsSettingsPaneCommandsRequestedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AccountsSettingsPaneEventDeferral

   procedure Initialize (this : in out AccountsSettingsPaneEventDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out AccountsSettingsPaneEventDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAccountsSettingsPaneEventDeferral, IAccountsSettingsPaneEventDeferral_Ptr);
   begin
      if this.m_IAccountsSettingsPaneEventDeferral /= null then
         if this.m_IAccountsSettingsPaneEventDeferral.all /= null then
            RefCount := this.m_IAccountsSettingsPaneEventDeferral.all.Release;
            Free (this.m_IAccountsSettingsPaneEventDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AccountsSettingsPaneEventDeferral

   procedure Complete
   (
      this : in out AccountsSettingsPaneEventDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAccountsSettingsPaneEventDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CredentialCommand

   procedure Initialize (this : in out CredentialCommand) is
   begin
      null;
   end;

   procedure Finalize (this : in out CredentialCommand) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICredentialCommand, ICredentialCommand_Ptr);
   begin
      if this.m_ICredentialCommand /= null then
         if this.m_ICredentialCommand.all /= null then
            RefCount := this.m_ICredentialCommand.all.Release;
            Free (this.m_ICredentialCommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CredentialCommand

   function Constructor
   (
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class
   )
   return CredentialCommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.CredentialCommand");
      m_Factory    : access ICredentialCommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.ApplicationSettings.ICredentialCommand;
   begin
      return RetVal : CredentialCommand do
         Hr := RoGetActivationFactory (m_hString, IID_ICredentialCommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCredentialCommand (passwordCredential.m_IPasswordCredential.all, m_ComRetVal'Access);
            Retval.m_ICredentialCommand := new Windows.UI.ApplicationSettings.ICredentialCommand;
            Retval.m_ICredentialCommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class;
      deleted : Windows.UI.ApplicationSettings.CredentialCommandCredentialDeletedHandler
   )
   return CredentialCommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.CredentialCommand");
      m_Factory    : access ICredentialCommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.ApplicationSettings.ICredentialCommand;
   begin
      return RetVal : CredentialCommand do
         Hr := RoGetActivationFactory (m_hString, IID_ICredentialCommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCredentialCommandWithHandler (passwordCredential.m_IPasswordCredential.all, deleted, m_ComRetVal'Access);
            Retval.m_ICredentialCommand := new Windows.UI.ApplicationSettings.ICredentialCommand;
            Retval.m_ICredentialCommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CredentialCommand

   function get_PasswordCredential
   (
      this : in out CredentialCommand
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_ICredentialCommand.all.get_PasswordCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   function get_CredentialDeleted
   (
      this : in out CredentialCommand
   )
   return WinRt.Windows.UI.ApplicationSettings.CredentialCommandCredentialDeletedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.CredentialCommandCredentialDeletedHandler;
   begin
      Hr := this.m_ICredentialCommand.all.get_CredentialDeleted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate CredentialCommandCredentialDeletedHandler

   function Invoke
   (
      this : access CredentialCommandCredentialDeletedHandler_Delegate;
      command : Windows.UI.ApplicationSettings.ICredentialCommand
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (command);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SettingsCommand

   procedure Initialize (this : in out SettingsCommand) is
   begin
      null;
   end;

   procedure Finalize (this : in out SettingsCommand) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.UI.Popups.IUICommand;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.UI.Popups.IUICommand, WinRt.Windows.UI.Popups.IUICommand_Ptr);
   begin
      if this.m_IUICommand /= null then
         if this.m_IUICommand.all /= null then
            RefCount := this.m_IUICommand.all.Release;
            Free (this.m_IUICommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SettingsCommand

   function Constructor
   (
      settingsCommandId : WinRt.IInspectable;
      label : WinRt.WString;
      handler : Windows.UI.Popups.UICommandInvokedHandler
   )
   return SettingsCommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.SettingsCommand");
      m_Factory    : access ISettingsCommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Popups.IUICommand;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : SettingsCommand do
         Hr := RoGetActivationFactory (m_hString, IID_ISettingsCommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSettingsCommand (settingsCommandId, HStr_label, handler, m_ComRetVal'Access);
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SettingsCommand

   function get_AccountsCommand
   return WinRt.Windows.UI.ApplicationSettings.SettingsCommand is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.SettingsCommand");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.ISettingsCommandStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Popups.IUICommand;
   begin
      return RetVal : WinRt.Windows.UI.ApplicationSettings.SettingsCommand do
         Hr := RoGetActivationFactory (m_hString, IID_ISettingsCommandStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AccountsCommand (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUICommand := new Windows.UI.Popups.IUICommand;
            Retval.m_IUICommand.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SettingsCommand

   function get_Label
   (
      this : in out SettingsCommand
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUICommand.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out SettingsCommand;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUICommand.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Invoked
   (
      this : in out SettingsCommand
   )
   return WinRt.Windows.UI.Popups.UICommandInvokedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Popups.UICommandInvokedHandler;
   begin
      Hr := this.m_IUICommand.all.get_Invoked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Invoked
   (
      this : in out SettingsCommand;
      value : Windows.UI.Popups.UICommandInvokedHandler
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUICommand.all.put_Invoked (value);
   end;

   function get_Id
   (
      this : in out SettingsCommand
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IUICommand.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out SettingsCommand;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUICommand.all.put_Id (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SettingsPane

   procedure Initialize (this : in out SettingsPane) is
   begin
      null;
   end;

   procedure Finalize (this : in out SettingsPane) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISettingsPane, ISettingsPane_Ptr);
   begin
      if this.m_ISettingsPane /= null then
         if this.m_ISettingsPane.all /= null then
            RefCount := this.m_ISettingsPane.all.Release;
            Free (this.m_ISettingsPane);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SettingsPane

   function GetForCurrentView
   return WinRt.Windows.UI.ApplicationSettings.SettingsPane is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.SettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.ISettingsPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.ISettingsPane;
   begin
      return RetVal : WinRt.Windows.UI.ApplicationSettings.SettingsPane do
         Hr := RoGetActivationFactory (m_hString, IID_ISettingsPaneStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISettingsPane := new Windows.UI.ApplicationSettings.ISettingsPane;
            Retval.m_ISettingsPane.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure Show_SettingsPane is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.SettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.ISettingsPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISettingsPaneStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Show;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_Edge
   return WinRt.Windows.UI.ApplicationSettings.SettingsEdgeLocation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.SettingsPane");
      m_Factory        : access WinRt.Windows.UI.ApplicationSettings.ISettingsPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.SettingsEdgeLocation;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISettingsPaneStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Edge (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SettingsPane

   function add_CommandsRequested
   (
      this : in out SettingsPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISettingsPane.all.add_CommandsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CommandsRequested
   (
      this : in out SettingsPane;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISettingsPane.all.remove_CommandsRequested (cookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SettingsPaneCommandsRequest

   procedure Initialize (this : in out SettingsPaneCommandsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out SettingsPaneCommandsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISettingsPaneCommandsRequest, ISettingsPaneCommandsRequest_Ptr);
   begin
      if this.m_ISettingsPaneCommandsRequest /= null then
         if this.m_ISettingsPaneCommandsRequest.all /= null then
            RefCount := this.m_ISettingsPaneCommandsRequest.all.Release;
            Free (this.m_ISettingsPaneCommandsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SettingsPaneCommandsRequest

   function get_ApplicationCommands
   (
      this : in out SettingsPaneCommandsRequest
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ISettingsPaneCommandsRequest.all.get_ApplicationCommands (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SettingsPaneCommandsRequestedEventArgs

   procedure Initialize (this : in out SettingsPaneCommandsRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SettingsPaneCommandsRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISettingsPaneCommandsRequestedEventArgs, ISettingsPaneCommandsRequestedEventArgs_Ptr);
   begin
      if this.m_ISettingsPaneCommandsRequestedEventArgs /= null then
         if this.m_ISettingsPaneCommandsRequestedEventArgs.all /= null then
            RefCount := this.m_ISettingsPaneCommandsRequestedEventArgs.all.Release;
            Free (this.m_ISettingsPaneCommandsRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SettingsPaneCommandsRequestedEventArgs

   function get_Request
   (
      this : in out SettingsPaneCommandsRequestedEventArgs
   )
   return WinRt.Windows.UI.ApplicationSettings.SettingsPaneCommandsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.ISettingsPaneCommandsRequest;
   begin
      return RetVal : WinRt.Windows.UI.ApplicationSettings.SettingsPaneCommandsRequest do
         Hr := this.m_ISettingsPaneCommandsRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_ISettingsPaneCommandsRequest := new Windows.UI.ApplicationSettings.ISettingsPaneCommandsRequest;
         Retval.m_ISettingsPaneCommandsRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountCommand

   procedure Initialize (this : in out WebAccountCommand) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountCommand) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountCommand, IWebAccountCommand_Ptr);
   begin
      if this.m_IWebAccountCommand /= null then
         if this.m_IWebAccountCommand.all /= null then
            RefCount := this.m_IWebAccountCommand.all.Release;
            Free (this.m_IWebAccountCommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebAccountCommand

   function Constructor
   (
      webAccount : Windows.Security.Credentials.WebAccount'Class;
      invoked : Windows.UI.ApplicationSettings.WebAccountCommandInvokedHandler;
      actions : Windows.UI.ApplicationSettings.SupportedWebAccountActions
   )
   return WebAccountCommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.WebAccountCommand");
      m_Factory    : access IWebAccountCommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.ApplicationSettings.IWebAccountCommand;
   begin
      return RetVal : WebAccountCommand do
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountCommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWebAccountCommand (webAccount.m_IWebAccount.all, invoked, actions, m_ComRetVal'Access);
            Retval.m_IWebAccountCommand := new Windows.UI.ApplicationSettings.IWebAccountCommand;
            Retval.m_IWebAccountCommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountCommand

   function get_WebAccount
   (
      this : in out WebAccountCommand
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IWebAccountCommand.all.get_WebAccount (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

   function get_Invoked
   (
      this : in out WebAccountCommand
   )
   return WinRt.Windows.UI.ApplicationSettings.WebAccountCommandInvokedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.WebAccountCommandInvokedHandler;
   begin
      Hr := this.m_IWebAccountCommand.all.get_Invoked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Actions
   (
      this : in out WebAccountCommand
   )
   return WinRt.Windows.UI.ApplicationSettings.SupportedWebAccountActions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.SupportedWebAccountActions;
   begin
      Hr := this.m_IWebAccountCommand.all.get_Actions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate WebAccountCommandInvokedHandler

   function Invoke
   (
      this : access WebAccountCommandInvokedHandler_Delegate;
      command : Windows.UI.ApplicationSettings.IWebAccountCommand;
      args : Windows.UI.ApplicationSettings.IWebAccountInvokedArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (command, args);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountInvokedArgs

   procedure Initialize (this : in out WebAccountInvokedArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountInvokedArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountInvokedArgs, IWebAccountInvokedArgs_Ptr);
   begin
      if this.m_IWebAccountInvokedArgs /= null then
         if this.m_IWebAccountInvokedArgs.all /= null then
            RefCount := this.m_IWebAccountInvokedArgs.all.Release;
            Free (this.m_IWebAccountInvokedArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountInvokedArgs

   function get_Action
   (
      this : in out WebAccountInvokedArgs
   )
   return WinRt.Windows.UI.ApplicationSettings.WebAccountAction is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.WebAccountAction;
   begin
      Hr := this.m_IWebAccountInvokedArgs.all.get_Action (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderCommand

   procedure Initialize (this : in out WebAccountProviderCommand) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderCommand) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderCommand, IWebAccountProviderCommand_Ptr);
   begin
      if this.m_IWebAccountProviderCommand /= null then
         if this.m_IWebAccountProviderCommand.all /= null then
            RefCount := this.m_IWebAccountProviderCommand.all.Release;
            Free (this.m_IWebAccountProviderCommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebAccountProviderCommand

   function Constructor
   (
      webAccountProvider : Windows.Security.Credentials.WebAccountProvider'Class;
      invoked : Windows.UI.ApplicationSettings.WebAccountProviderCommandInvokedHandler
   )
   return WebAccountProviderCommand is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ApplicationSettings.WebAccountProviderCommand");
      m_Factory    : access IWebAccountProviderCommandFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.ApplicationSettings.IWebAccountProviderCommand;
   begin
      return RetVal : WebAccountProviderCommand do
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountProviderCommandFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWebAccountProviderCommand (webAccountProvider.m_IWebAccountProvider.all, invoked, m_ComRetVal'Access);
            Retval.m_IWebAccountProviderCommand := new Windows.UI.ApplicationSettings.IWebAccountProviderCommand;
            Retval.m_IWebAccountProviderCommand.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderCommand

   function get_WebAccountProvider
   (
      this : in out WebAccountProviderCommand
   )
   return WinRt.Windows.Security.Credentials.WebAccountProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccountProvider;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
         Hr := this.m_IWebAccountProviderCommand.all.get_WebAccountProvider (m_ComRetVal'Access);
         Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
         Retval.m_IWebAccountProvider.all := m_ComRetVal;
      end return;
   end;

   function get_Invoked
   (
      this : in out WebAccountProviderCommand
   )
   return WinRt.Windows.UI.ApplicationSettings.WebAccountProviderCommandInvokedHandler is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ApplicationSettings.WebAccountProviderCommandInvokedHandler;
   begin
      Hr := this.m_IWebAccountProviderCommand.all.get_Invoked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate WebAccountProviderCommandInvokedHandler

   function Invoke
   (
      this : access WebAccountProviderCommandInvokedHandler_Delegate;
      command : Windows.UI.ApplicationSettings.IWebAccountProviderCommand
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (command);
      return Hr;
   end;

end;

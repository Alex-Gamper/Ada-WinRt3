--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel;
with WinRt.Windows.Data.Xml.Dom;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Notifications is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_ToastCollection is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Notifications.IToastCollection);
   package AsyncOperationCompletedHandler_ToastCollection is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Notifications.IToastCollection);

   package IAsyncOperation_ToastNotifier is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Notifications.IToastNotifier);
   package AsyncOperationCompletedHandler_ToastNotifier is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Notifications.IToastNotifier);

   package IAsyncOperation_ToastNotificationHistory is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Notifications.IToastNotificationHistory);
   package AsyncOperationCompletedHandler_ToastNotificationHistory is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Notifications.IToastNotificationHistory);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdaptiveNotificationText

   procedure Initialize (this : in out AdaptiveNotificationText) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdaptiveNotificationText) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdaptiveNotificationText, IAdaptiveNotificationText_Ptr);
   begin
      if this.m_IAdaptiveNotificationText /= null then
         if this.m_IAdaptiveNotificationText.all /= null then
            RefCount := this.m_IAdaptiveNotificationText.all.Release;
            Free (this.m_IAdaptiveNotificationText);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AdaptiveNotificationText

   function Constructor return AdaptiveNotificationText is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.AdaptiveNotificationText");
      m_ComRetVal  : aliased Windows.UI.Notifications.IAdaptiveNotificationText;
   begin
      return RetVal : AdaptiveNotificationText do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAdaptiveNotificationText := new Windows.UI.Notifications.IAdaptiveNotificationText;
            Retval.m_IAdaptiveNotificationText.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdaptiveNotificationText

   function get_Text
   (
      this : in out AdaptiveNotificationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAdaptiveNotificationText.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out AdaptiveNotificationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAdaptiveNotificationText.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out AdaptiveNotificationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAdaptiveNotificationText.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out AdaptiveNotificationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAdaptiveNotificationText.all.put_Language (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Kind
   (
      this : in out AdaptiveNotificationText
   )
   return WinRt.Windows.UI.Notifications.AdaptiveNotificationContentKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IAdaptiveNotificationContent := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.AdaptiveNotificationContentKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IAdaptiveNotificationText_Interface, WinRt.Windows.UI.Notifications.IAdaptiveNotificationContent, WinRt.Windows.UI.Notifications.IID_IAdaptiveNotificationContent'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveNotificationText.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Hints
   (
      this : in out AdaptiveNotificationText
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IAdaptiveNotificationContent := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IAdaptiveNotificationText_Interface, WinRt.Windows.UI.Notifications.IAdaptiveNotificationContent, WinRt.Windows.UI.Notifications.IID_IAdaptiveNotificationContent'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdaptiveNotificationText.all);
      Hr := m_Interface.get_Hints (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BadgeNotification

   procedure Initialize (this : in out BadgeNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out BadgeNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBadgeNotification, IBadgeNotification_Ptr);
   begin
      if this.m_IBadgeNotification /= null then
         if this.m_IBadgeNotification.all /= null then
            RefCount := this.m_IBadgeNotification.all.Release;
            Free (this.m_IBadgeNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BadgeNotification

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class
   )
   return BadgeNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.BadgeNotification");
      m_Factory    : access IBadgeNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.IBadgeNotification;
   begin
      return RetVal : BadgeNotification do
         Hr := RoGetActivationFactory (m_hString, IID_IBadgeNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateBadgeNotification (content.m_IXmlDocument.all, m_ComRetVal'Access);
            Retval.m_IBadgeNotification := new Windows.UI.Notifications.IBadgeNotification;
            Retval.m_IBadgeNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BadgeNotification

   function get_Content
   (
      this : in out BadgeNotification
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_IBadgeNotification.all.get_Content (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExpirationTime
   (
      this : in out BadgeNotification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBadgeNotification.all.put_ExpirationTime (value);
   end;

   function get_ExpirationTime
   (
      this : in out BadgeNotification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IBadgeNotification.all.get_ExpirationTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BadgeUpdateManager is

      function CreateBadgeUpdaterForApplication
      return WinRt.Windows.UI.Notifications.BadgeUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.BadgeUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IBadgeUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdater;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_IBadgeUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateBadgeUpdaterForApplication (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IBadgeUpdater := new Windows.UI.Notifications.IBadgeUpdater;
               Retval.m_IBadgeUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateBadgeUpdaterForApplication
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.BadgeUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.BadgeUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IBadgeUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdater;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_IBadgeUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateBadgeUpdaterForApplication (HStr_applicationId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IBadgeUpdater := new Windows.UI.Notifications.IBadgeUpdater;
               Retval.m_IBadgeUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_applicationId);
         end return;
      end;

      function CreateBadgeUpdaterForSecondaryTile
      (
         tileId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.BadgeUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.BadgeUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IBadgeUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdater;
         HStr_tileId : WinRt.HString := To_HString (tileId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_IBadgeUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateBadgeUpdaterForSecondaryTile (HStr_tileId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IBadgeUpdater := new Windows.UI.Notifications.IBadgeUpdater;
               Retval.m_IBadgeUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_tileId);
         end return;
      end;

      function GetTemplateContent
      (
         type_x : Windows.UI.Notifications.BadgeTemplateType
      )
      return WinRt.Windows.Data.Xml.Dom.XmlDocument is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.BadgeUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IBadgeUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      begin
         return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
            Hr := RoGetActivationFactory (m_hString, IID_IBadgeUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTemplateContent (type_x, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
               Retval.m_IXmlDocument.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.UI.Notifications.BadgeUpdateManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.BadgeUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IBadgeUpdateManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdateManagerForUser;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdateManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IBadgeUpdateManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IBadgeUpdateManagerForUser := new Windows.UI.Notifications.IBadgeUpdateManagerForUser;
               Retval.m_IBadgeUpdateManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end BadgeUpdateManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BadgeUpdateManagerForUser

   procedure Initialize (this : in out BadgeUpdateManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out BadgeUpdateManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBadgeUpdateManagerForUser, IBadgeUpdateManagerForUser_Ptr);
   begin
      if this.m_IBadgeUpdateManagerForUser /= null then
         if this.m_IBadgeUpdateManagerForUser.all /= null then
            RefCount := this.m_IBadgeUpdateManagerForUser.all.Release;
            Free (this.m_IBadgeUpdateManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BadgeUpdateManagerForUser

   function CreateBadgeUpdaterForApplication
   (
      this : in out BadgeUpdateManagerForUser
   )
   return WinRt.Windows.UI.Notifications.BadgeUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdater;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdater do
         Hr := this.m_IBadgeUpdateManagerForUser.all.CreateBadgeUpdaterForApplication (m_ComRetVal'Access);
         Retval.m_IBadgeUpdater := new Windows.UI.Notifications.IBadgeUpdater;
         Retval.m_IBadgeUpdater.all := m_ComRetVal;
      end return;
   end;

   function CreateBadgeUpdaterForApplication
   (
      this : in out BadgeUpdateManagerForUser;
      applicationId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.BadgeUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdater;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdater do
         Hr := this.m_IBadgeUpdateManagerForUser.all.CreateBadgeUpdaterForApplication (HStr_applicationId, m_ComRetVal'Access);
         Retval.m_IBadgeUpdater := new Windows.UI.Notifications.IBadgeUpdater;
         Retval.m_IBadgeUpdater.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   function CreateBadgeUpdaterForSecondaryTile
   (
      this : in out BadgeUpdateManagerForUser;
      tileId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.BadgeUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeUpdater;
      HStr_tileId : WinRt.HString := To_HString (tileId);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.BadgeUpdater do
         Hr := this.m_IBadgeUpdateManagerForUser.all.CreateBadgeUpdaterForSecondaryTile (HStr_tileId, m_ComRetVal'Access);
         Retval.m_IBadgeUpdater := new Windows.UI.Notifications.IBadgeUpdater;
         Retval.m_IBadgeUpdater.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_tileId);
      end return;
   end;

   function get_User
   (
      this : in out BadgeUpdateManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IBadgeUpdateManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BadgeUpdater

   procedure Initialize (this : in out BadgeUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out BadgeUpdater) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBadgeUpdater, IBadgeUpdater_Ptr);
   begin
      if this.m_IBadgeUpdater /= null then
         if this.m_IBadgeUpdater.all /= null then
            RefCount := this.m_IBadgeUpdater.all.Release;
            Free (this.m_IBadgeUpdater);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BadgeUpdater

   procedure Update
   (
      this : in out BadgeUpdater;
      notification_p : Windows.UI.Notifications.BadgeNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBadgeUpdater.all.Update (notification_p.m_IBadgeNotification.all);
   end;

   procedure Clear
   (
      this : in out BadgeUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBadgeUpdater.all.Clear;
   end;

   procedure StartPeriodicUpdate
   (
      this : in out BadgeUpdater;
      badgeContent : Windows.Foundation.Uri'Class;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBadgeUpdater.all.StartPeriodicUpdate (badgeContent.m_IUriRuntimeClass.all, requestedInterval);
   end;

   procedure StartPeriodicUpdate
   (
      this : in out BadgeUpdater;
      badgeContent : Windows.Foundation.Uri'Class;
      startTime : Windows.Foundation.DateTime;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBadgeUpdater.all.StartPeriodicUpdate (badgeContent.m_IUriRuntimeClass.all, startTime, requestedInterval);
   end;

   procedure StopPeriodicUpdate
   (
      this : in out BadgeUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBadgeUpdater.all.StopPeriodicUpdate;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownAdaptiveNotificationHints is

      function get_Style
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationHints");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationHintsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Style (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Wrap
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationHints");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationHintsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Wrap (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MaxLines
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationHints");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationHintsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxLines (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MinLines
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationHints");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationHintsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinLines (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TextStacking
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationHints");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationHintsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TextStacking (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Align
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationHints");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationHintsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Align (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownAdaptiveNotificationHints;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownAdaptiveNotificationTextStyles is

      function get_Caption
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Caption (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Body
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Body (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Base
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Base (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Subtitle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Subtitle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Title
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Title (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Subheader
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Subheader (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Header
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Header (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TitleNumeral
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TitleNumeral (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SubheaderNumeral
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SubheaderNumeral (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HeaderNumeral
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeaderNumeral (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CaptionSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CaptionSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BodySubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BodySubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BaseSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BaseSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SubtitleSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SubtitleSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TitleSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TitleSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SubheaderSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SubheaderSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SubheaderNumeralSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SubheaderNumeralSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HeaderSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeaderSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HeaderNumeralSubtle
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownAdaptiveNotificationTextStylesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeaderNumeralSubtle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownAdaptiveNotificationTextStyles;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownNotificationBindings is

      function get_ToastGeneric
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.KnownNotificationBindings");
         m_Factory        : access WinRt.Windows.UI.Notifications.IKnownNotificationBindingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownNotificationBindingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ToastGeneric (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownNotificationBindings;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Notification

   procedure Initialize (this : in out Notification) is
   begin
      null;
   end;

   procedure Finalize (this : in out Notification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotification, INotification_Ptr);
   begin
      if this.m_INotification /= null then
         if this.m_INotification.all /= null then
            RefCount := this.m_INotification.all.Release;
            Free (this.m_INotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Notification

   function Constructor return Notification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.Notification");
      m_ComRetVal  : aliased Windows.UI.Notifications.INotification;
   begin
      return RetVal : Notification do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INotification := new Windows.UI.Notifications.INotification;
            Retval.m_INotification.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Notification

   function get_ExpirationTime
   (
      this : in out Notification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_INotification.all.get_ExpirationTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ExpirationTime
   (
      this : in out Notification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotification.all.put_ExpirationTime (value);
   end;

   function get_Visual
   (
      this : in out Notification
   )
   return WinRt.Windows.UI.Notifications.NotificationVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.INotificationVisual;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.NotificationVisual do
         Hr := this.m_INotification.all.get_Visual (m_ComRetVal'Access);
         Retval.m_INotificationVisual := new Windows.UI.Notifications.INotificationVisual;
         Retval.m_INotificationVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_Visual
   (
      this : in out Notification;
      value : Windows.UI.Notifications.NotificationVisual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotification.all.put_Visual (value.m_INotificationVisual.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotificationBinding

   procedure Initialize (this : in out NotificationBinding) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotificationBinding) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotificationBinding, INotificationBinding_Ptr);
   begin
      if this.m_INotificationBinding /= null then
         if this.m_INotificationBinding.all /= null then
            RefCount := this.m_INotificationBinding.all.Release;
            Free (this.m_INotificationBinding);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotificationBinding

   function get_Template
   (
      this : in out NotificationBinding
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INotificationBinding.all.get_Template (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Template
   (
      this : in out NotificationBinding;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INotificationBinding.all.put_Template (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out NotificationBinding
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INotificationBinding.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out NotificationBinding;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INotificationBinding.all.put_Language (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Hints
   (
      this : in out NotificationBinding
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_INotificationBinding.all.get_Hints (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetTextElements
   (
      this : in out NotificationBinding
   )
   return IVectorView_IAdaptiveNotificationText.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAdaptiveNotificationText.Kind;
   begin
      Hr := this.m_INotificationBinding.all.GetTextElements (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAdaptiveNotificationText (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotificationData

   procedure Initialize (this : in out NotificationData) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotificationData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotificationData, INotificationData_Ptr);
   begin
      if this.m_INotificationData /= null then
         if this.m_INotificationData.all /= null then
            RefCount := this.m_INotificationData.all.Release;
            Free (this.m_INotificationData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NotificationData

   function Constructor
   (
      initialValues : GenericObject;
      sequenceNumber : WinRt.UInt32
   )
   return NotificationData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.NotificationData");
      m_Factory    : access INotificationDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.INotificationData;
   begin
      return RetVal : NotificationData do
         Hr := RoGetActivationFactory (m_hString, IID_INotificationDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateNotificationData (initialValues, sequenceNumber, m_ComRetVal'Access);
            Retval.m_INotificationData := new Windows.UI.Notifications.INotificationData;
            Retval.m_INotificationData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      initialValues : GenericObject
   )
   return NotificationData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.NotificationData");
      m_Factory    : access INotificationDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.INotificationData;
   begin
      return RetVal : NotificationData do
         Hr := RoGetActivationFactory (m_hString, IID_INotificationDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateNotificationData (initialValues, m_ComRetVal'Access);
            Retval.m_INotificationData := new Windows.UI.Notifications.INotificationData;
            Retval.m_INotificationData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return NotificationData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.NotificationData");
      m_ComRetVal  : aliased Windows.UI.Notifications.INotificationData;
   begin
      return RetVal : NotificationData do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INotificationData := new Windows.UI.Notifications.INotificationData;
            Retval.m_INotificationData.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotificationData

   function get_Values
   (
      this : in out NotificationData
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_INotificationData.all.get_Values (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SequenceNumber
   (
      this : in out NotificationData
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_INotificationData.all.get_SequenceNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SequenceNumber
   (
      this : in out NotificationData;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotificationData.all.put_SequenceNumber (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotificationVisual

   procedure Initialize (this : in out NotificationVisual) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotificationVisual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotificationVisual, INotificationVisual_Ptr);
   begin
      if this.m_INotificationVisual /= null then
         if this.m_INotificationVisual.all /= null then
            RefCount := this.m_INotificationVisual.all.Release;
            Free (this.m_INotificationVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotificationVisual

   function get_Language
   (
      this : in out NotificationVisual
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INotificationVisual.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out NotificationVisual;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INotificationVisual.all.put_Language (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Bindings
   (
      this : in out NotificationVisual
   )
   return IVector_INotificationBinding.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_INotificationBinding.Kind;
   begin
      Hr := this.m_INotificationVisual.all.get_Bindings (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_INotificationBinding (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetBinding
   (
      this : in out NotificationVisual;
      templateName : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.NotificationBinding'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.INotificationBinding;
      HStr_templateName : WinRt.HString := To_HString (templateName);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.NotificationBinding do
         Hr := this.m_INotificationVisual.all.GetBinding (HStr_templateName, m_ComRetVal'Access);
         Retval.m_INotificationBinding := new Windows.UI.Notifications.INotificationBinding;
         Retval.m_INotificationBinding.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_templateName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScheduledTileNotification

   procedure Initialize (this : in out ScheduledTileNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScheduledTileNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScheduledTileNotification, IScheduledTileNotification_Ptr);
   begin
      if this.m_IScheduledTileNotification /= null then
         if this.m_IScheduledTileNotification.all /= null then
            RefCount := this.m_IScheduledTileNotification.all.Release;
            Free (this.m_IScheduledTileNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScheduledTileNotification

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class;
      deliveryTime : Windows.Foundation.DateTime
   )
   return ScheduledTileNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.ScheduledTileNotification");
      m_Factory    : access IScheduledTileNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.IScheduledTileNotification;
   begin
      return RetVal : ScheduledTileNotification do
         Hr := RoGetActivationFactory (m_hString, IID_IScheduledTileNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateScheduledTileNotification (content.m_IXmlDocument.all, deliveryTime, m_ComRetVal'Access);
            Retval.m_IScheduledTileNotification := new Windows.UI.Notifications.IScheduledTileNotification;
            Retval.m_IScheduledTileNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScheduledTileNotification

   function get_Content
   (
      this : in out ScheduledTileNotification
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_IScheduledTileNotification.all.get_Content (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function get_DeliveryTime
   (
      this : in out ScheduledTileNotification
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IScheduledTileNotification.all.get_DeliveryTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ExpirationTime
   (
      this : in out ScheduledTileNotification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScheduledTileNotification.all.put_ExpirationTime (value);
   end;

   function get_ExpirationTime
   (
      this : in out ScheduledTileNotification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IScheduledTileNotification.all.get_ExpirationTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Tag
   (
      this : in out ScheduledTileNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IScheduledTileNotification.all.put_Tag (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Tag
   (
      this : in out ScheduledTileNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IScheduledTileNotification.all.get_Tag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out ScheduledTileNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IScheduledTileNotification.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out ScheduledTileNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IScheduledTileNotification.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScheduledToastNotification

   procedure Initialize (this : in out ScheduledToastNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScheduledToastNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScheduledToastNotification, IScheduledToastNotification_Ptr);
   begin
      if this.m_IScheduledToastNotification /= null then
         if this.m_IScheduledToastNotification.all /= null then
            RefCount := this.m_IScheduledToastNotification.all.Release;
            Free (this.m_IScheduledToastNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScheduledToastNotification

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class;
      deliveryTime : Windows.Foundation.DateTime
   )
   return ScheduledToastNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.ScheduledToastNotification");
      m_Factory    : access IScheduledToastNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.IScheduledToastNotification;
   begin
      return RetVal : ScheduledToastNotification do
         Hr := RoGetActivationFactory (m_hString, IID_IScheduledToastNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateScheduledToastNotification (content.m_IXmlDocument.all, deliveryTime, m_ComRetVal'Access);
            Retval.m_IScheduledToastNotification := new Windows.UI.Notifications.IScheduledToastNotification;
            Retval.m_IScheduledToastNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class;
      deliveryTime : Windows.Foundation.DateTime;
      snoozeInterval : Windows.Foundation.TimeSpan;
      maximumSnoozeCount : WinRt.UInt32
   )
   return ScheduledToastNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.ScheduledToastNotification");
      m_Factory    : access IScheduledToastNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.IScheduledToastNotification;
   begin
      return RetVal : ScheduledToastNotification do
         Hr := RoGetActivationFactory (m_hString, IID_IScheduledToastNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateScheduledToastNotificationRecurring (content.m_IXmlDocument.all, deliveryTime, snoozeInterval, maximumSnoozeCount, m_ComRetVal'Access);
            Retval.m_IScheduledToastNotification := new Windows.UI.Notifications.IScheduledToastNotification;
            Retval.m_IScheduledToastNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScheduledToastNotification

   function get_Content
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_IScheduledToastNotification.all.get_Content (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function get_DeliveryTime
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IScheduledToastNotification.all.get_DeliveryTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SnoozeInterval
   (
      this : in out ScheduledToastNotification
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IScheduledToastNotification.all.get_SnoozeInterval (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaximumSnoozeCount
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IScheduledToastNotification.all.get_MaximumSnoozeCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out ScheduledToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IScheduledToastNotification.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IScheduledToastNotification.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Tag
   (
      this : in out ScheduledToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification2, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.put_Tag (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Tag
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification2, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.get_Tag (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Group
   (
      this : in out ScheduledToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification2, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.put_Group (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Group
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification2, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.get_Group (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SuppressPopup
   (
      this : in out ScheduledToastNotification;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification2, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.put_SuppressPopup (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuppressPopup
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification2, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.get_SuppressPopup (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NotificationMirroring
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.Windows.UI.Notifications.NotificationMirroring is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationMirroring;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification3, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.get_NotificationMirroring (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NotificationMirroring
   (
      this : in out ScheduledToastNotification;
      value : Windows.UI.Notifications.NotificationMirroring
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification3, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.put_NotificationMirroring (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RemoteId
   (
      this : in out ScheduledToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification3, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.get_RemoteId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out ScheduledToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification3, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.put_RemoteId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ExpirationTime
   (
      this : in out ScheduledToastNotification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification4, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.get_ExpirationTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ExpirationTime
   (
      this : in out ScheduledToastNotification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IScheduledToastNotification4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IScheduledToastNotification_Interface, WinRt.Windows.UI.Notifications.IScheduledToastNotification4, WinRt.Windows.UI.Notifications.IID_IScheduledToastNotification4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScheduledToastNotification.all);
      Hr := m_Interface.put_ExpirationTime (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScheduledToastNotificationShowingEventArgs

   procedure Initialize (this : in out ScheduledToastNotificationShowingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScheduledToastNotificationShowingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScheduledToastNotificationShowingEventArgs, IScheduledToastNotificationShowingEventArgs_Ptr);
   begin
      if this.m_IScheduledToastNotificationShowingEventArgs /= null then
         if this.m_IScheduledToastNotificationShowingEventArgs.all /= null then
            RefCount := this.m_IScheduledToastNotificationShowingEventArgs.all.Release;
            Free (this.m_IScheduledToastNotificationShowingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScheduledToastNotificationShowingEventArgs

   function get_Cancel
   (
      this : in out ScheduledToastNotificationShowingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IScheduledToastNotificationShowingEventArgs.all.get_Cancel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Cancel
   (
      this : in out ScheduledToastNotificationShowingEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScheduledToastNotificationShowingEventArgs.all.put_Cancel (value);
   end;

   function get_ScheduledToastNotification
   (
      this : in out ScheduledToastNotificationShowingEventArgs
   )
   return WinRt.Windows.UI.Notifications.ScheduledToastNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IScheduledToastNotification;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ScheduledToastNotification do
         Hr := this.m_IScheduledToastNotificationShowingEventArgs.all.get_ScheduledToastNotification (m_ComRetVal'Access);
         Retval.m_IScheduledToastNotification := new Windows.UI.Notifications.IScheduledToastNotification;
         Retval.m_IScheduledToastNotification.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out ScheduledToastNotificationShowingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IScheduledToastNotificationShowingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShownTileNotification

   procedure Initialize (this : in out ShownTileNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShownTileNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShownTileNotification, IShownTileNotification_Ptr);
   begin
      if this.m_IShownTileNotification /= null then
         if this.m_IShownTileNotification.all /= null then
            RefCount := this.m_IShownTileNotification.all.Release;
            Free (this.m_IShownTileNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShownTileNotification

   function get_Arguments
   (
      this : in out ShownTileNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IShownTileNotification.all.get_Arguments (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileFlyoutNotification

   procedure Initialize (this : in out TileFlyoutNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileFlyoutNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileFlyoutNotification, ITileFlyoutNotification_Ptr);
   begin
      if this.m_ITileFlyoutNotification /= null then
         if this.m_ITileFlyoutNotification.all /= null then
            RefCount := this.m_ITileFlyoutNotification.all.Release;
            Free (this.m_ITileFlyoutNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TileFlyoutNotification

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class
   )
   return TileFlyoutNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.TileFlyoutNotification");
      m_Factory    : access ITileFlyoutNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.ITileFlyoutNotification;
   begin
      return RetVal : TileFlyoutNotification do
         Hr := RoGetActivationFactory (m_hString, IID_ITileFlyoutNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateTileFlyoutNotification (content.m_IXmlDocument.all, m_ComRetVal'Access);
            Retval.m_ITileFlyoutNotification := new Windows.UI.Notifications.ITileFlyoutNotification;
            Retval.m_ITileFlyoutNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileFlyoutNotification

   function get_Content
   (
      this : in out TileFlyoutNotification
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_ITileFlyoutNotification.all.get_Content (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExpirationTime
   (
      this : in out TileFlyoutNotification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileFlyoutNotification.all.put_ExpirationTime (value);
   end;

   function get_ExpirationTime
   (
      this : in out TileFlyoutNotification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_ITileFlyoutNotification.all.get_ExpirationTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body TileFlyoutUpdateManager is

      function CreateTileFlyoutUpdaterForApplication
      return WinRt.Windows.UI.Notifications.TileFlyoutUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileFlyoutUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileFlyoutUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileFlyoutUpdater;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileFlyoutUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ITileFlyoutUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateTileFlyoutUpdaterForApplication (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileFlyoutUpdater := new Windows.UI.Notifications.ITileFlyoutUpdater;
               Retval.m_ITileFlyoutUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateTileFlyoutUpdaterForApplication
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.TileFlyoutUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileFlyoutUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileFlyoutUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileFlyoutUpdater;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileFlyoutUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ITileFlyoutUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateTileFlyoutUpdaterForApplication (HStr_applicationId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileFlyoutUpdater := new Windows.UI.Notifications.ITileFlyoutUpdater;
               Retval.m_ITileFlyoutUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_applicationId);
         end return;
      end;

      function CreateTileFlyoutUpdaterForSecondaryTile
      (
         tileId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.TileFlyoutUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileFlyoutUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileFlyoutUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileFlyoutUpdater;
         HStr_tileId : WinRt.HString := To_HString (tileId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileFlyoutUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ITileFlyoutUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateTileFlyoutUpdaterForSecondaryTile (HStr_tileId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileFlyoutUpdater := new Windows.UI.Notifications.ITileFlyoutUpdater;
               Retval.m_ITileFlyoutUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_tileId);
         end return;
      end;

      function GetTemplateContent
      (
         type_x : Windows.UI.Notifications.TileFlyoutTemplateType
      )
      return WinRt.Windows.Data.Xml.Dom.XmlDocument is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileFlyoutUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileFlyoutUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      begin
         return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
            Hr := RoGetActivationFactory (m_hString, IID_ITileFlyoutUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTemplateContent (type_x, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
               Retval.m_IXmlDocument.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end TileFlyoutUpdateManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileFlyoutUpdater

   procedure Initialize (this : in out TileFlyoutUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileFlyoutUpdater) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileFlyoutUpdater, ITileFlyoutUpdater_Ptr);
   begin
      if this.m_ITileFlyoutUpdater /= null then
         if this.m_ITileFlyoutUpdater.all /= null then
            RefCount := this.m_ITileFlyoutUpdater.all.Release;
            Free (this.m_ITileFlyoutUpdater);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileFlyoutUpdater

   procedure Update
   (
      this : in out TileFlyoutUpdater;
      notification_p : Windows.UI.Notifications.TileFlyoutNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileFlyoutUpdater.all.Update (notification_p.m_ITileFlyoutNotification.all);
   end;

   procedure Clear
   (
      this : in out TileFlyoutUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileFlyoutUpdater.all.Clear;
   end;

   procedure StartPeriodicUpdate
   (
      this : in out TileFlyoutUpdater;
      tileFlyoutContent : Windows.Foundation.Uri'Class;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileFlyoutUpdater.all.StartPeriodicUpdate (tileFlyoutContent.m_IUriRuntimeClass.all, requestedInterval);
   end;

   procedure StartPeriodicUpdate
   (
      this : in out TileFlyoutUpdater;
      tileFlyoutContent : Windows.Foundation.Uri'Class;
      startTime : Windows.Foundation.DateTime;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileFlyoutUpdater.all.StartPeriodicUpdate (tileFlyoutContent.m_IUriRuntimeClass.all, startTime, requestedInterval);
   end;

   procedure StopPeriodicUpdate
   (
      this : in out TileFlyoutUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileFlyoutUpdater.all.StopPeriodicUpdate;
   end;

   function get_Setting
   (
      this : in out TileFlyoutUpdater
   )
   return WinRt.Windows.UI.Notifications.NotificationSetting is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationSetting;
   begin
      Hr := this.m_ITileFlyoutUpdater.all.get_Setting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileNotification

   procedure Initialize (this : in out TileNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileNotification, ITileNotification_Ptr);
   begin
      if this.m_ITileNotification /= null then
         if this.m_ITileNotification.all /= null then
            RefCount := this.m_ITileNotification.all.Release;
            Free (this.m_ITileNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TileNotification

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class
   )
   return TileNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.TileNotification");
      m_Factory    : access ITileNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.ITileNotification;
   begin
      return RetVal : TileNotification do
         Hr := RoGetActivationFactory (m_hString, IID_ITileNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateTileNotification (content.m_IXmlDocument.all, m_ComRetVal'Access);
            Retval.m_ITileNotification := new Windows.UI.Notifications.ITileNotification;
            Retval.m_ITileNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileNotification

   function get_Content
   (
      this : in out TileNotification
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_ITileNotification.all.get_Content (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExpirationTime
   (
      this : in out TileNotification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileNotification.all.put_ExpirationTime (value);
   end;

   function get_ExpirationTime
   (
      this : in out TileNotification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_ITileNotification.all.get_ExpirationTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Tag
   (
      this : in out TileNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITileNotification.all.put_Tag (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Tag
   (
      this : in out TileNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITileNotification.all.get_Tag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body TileUpdateManager is

      function CreateTileUpdaterForApplication
      return WinRt.Windows.UI.Notifications.TileUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdater;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ITileUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateTileUpdaterForApplication (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileUpdater := new Windows.UI.Notifications.ITileUpdater;
               Retval.m_ITileUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateTileUpdaterForApplication
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.TileUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdater;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ITileUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateTileUpdaterForApplication (HStr_applicationId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileUpdater := new Windows.UI.Notifications.ITileUpdater;
               Retval.m_ITileUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_applicationId);
         end return;
      end;

      function CreateTileUpdaterForSecondaryTile
      (
         tileId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.TileUpdater is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdater;
         HStr_tileId : WinRt.HString := To_HString (tileId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileUpdater do
            Hr := RoGetActivationFactory (m_hString, IID_ITileUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateTileUpdaterForSecondaryTile (HStr_tileId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileUpdater := new Windows.UI.Notifications.ITileUpdater;
               Retval.m_ITileUpdater.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_tileId);
         end return;
      end;

      function GetTemplateContent
      (
         type_x : Windows.UI.Notifications.TileTemplateType
      )
      return WinRt.Windows.Data.Xml.Dom.XmlDocument is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileUpdateManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      begin
         return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
            Hr := RoGetActivationFactory (m_hString, IID_ITileUpdateManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTemplateContent (type_x, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
               Retval.m_IXmlDocument.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.UI.Notifications.TileUpdateManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.TileUpdateManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.ITileUpdateManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdateManagerForUser;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.TileUpdateManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_ITileUpdateManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ITileUpdateManagerForUser := new Windows.UI.Notifications.ITileUpdateManagerForUser;
               Retval.m_ITileUpdateManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end TileUpdateManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileUpdateManagerForUser

   procedure Initialize (this : in out TileUpdateManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileUpdateManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileUpdateManagerForUser, ITileUpdateManagerForUser_Ptr);
   begin
      if this.m_ITileUpdateManagerForUser /= null then
         if this.m_ITileUpdateManagerForUser.all /= null then
            RefCount := this.m_ITileUpdateManagerForUser.all.Release;
            Free (this.m_ITileUpdateManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileUpdateManagerForUser

   function CreateTileUpdaterForApplicationForUser
   (
      this : in out TileUpdateManagerForUser
   )
   return WinRt.Windows.UI.Notifications.TileUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdater;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileUpdater do
         Hr := this.m_ITileUpdateManagerForUser.all.CreateTileUpdaterForApplicationForUser (m_ComRetVal'Access);
         Retval.m_ITileUpdater := new Windows.UI.Notifications.ITileUpdater;
         Retval.m_ITileUpdater.all := m_ComRetVal;
      end return;
   end;

   function CreateTileUpdaterForApplication
   (
      this : in out TileUpdateManagerForUser;
      applicationId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.TileUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdater;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileUpdater do
         Hr := this.m_ITileUpdateManagerForUser.all.CreateTileUpdaterForApplication (HStr_applicationId, m_ComRetVal'Access);
         Retval.m_ITileUpdater := new Windows.UI.Notifications.ITileUpdater;
         Retval.m_ITileUpdater.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   function CreateTileUpdaterForSecondaryTile
   (
      this : in out TileUpdateManagerForUser;
      tileId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.TileUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileUpdater;
      HStr_tileId : WinRt.HString := To_HString (tileId);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileUpdater do
         Hr := this.m_ITileUpdateManagerForUser.all.CreateTileUpdaterForSecondaryTile (HStr_tileId, m_ComRetVal'Access);
         Retval.m_ITileUpdater := new Windows.UI.Notifications.ITileUpdater;
         Retval.m_ITileUpdater.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_tileId);
      end return;
   end;

   function get_User
   (
      this : in out TileUpdateManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_ITileUpdateManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TileUpdater

   procedure Initialize (this : in out TileUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out TileUpdater) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITileUpdater, ITileUpdater_Ptr);
   begin
      if this.m_ITileUpdater /= null then
         if this.m_ITileUpdater.all /= null then
            RefCount := this.m_ITileUpdater.all.Release;
            Free (this.m_ITileUpdater);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TileUpdater

   procedure Update
   (
      this : in out TileUpdater;
      notification_p : Windows.UI.Notifications.TileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.Update (notification_p.m_ITileNotification.all);
   end;

   procedure Clear
   (
      this : in out TileUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.Clear;
   end;

   procedure EnableNotificationQueue
   (
      this : in out TileUpdater;
      enable : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.EnableNotificationQueue (enable);
   end;

   function get_Setting
   (
      this : in out TileUpdater
   )
   return WinRt.Windows.UI.Notifications.NotificationSetting is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationSetting;
   begin
      Hr := this.m_ITileUpdater.all.get_Setting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AddToSchedule
   (
      this : in out TileUpdater;
      scheduledTile : Windows.UI.Notifications.ScheduledTileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.AddToSchedule (scheduledTile.m_IScheduledTileNotification.all);
   end;

   procedure RemoveFromSchedule
   (
      this : in out TileUpdater;
      scheduledTile : Windows.UI.Notifications.ScheduledTileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.RemoveFromSchedule (scheduledTile.m_IScheduledTileNotification.all);
   end;

   function GetScheduledTileNotifications
   (
      this : in out TileUpdater
   )
   return IVectorView_IScheduledTileNotification.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IScheduledTileNotification.Kind;
   begin
      Hr := this.m_ITileUpdater.all.GetScheduledTileNotifications (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IScheduledTileNotification (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure StartPeriodicUpdate
   (
      this : in out TileUpdater;
      tileContent : Windows.Foundation.Uri'Class;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.StartPeriodicUpdate (tileContent.m_IUriRuntimeClass.all, requestedInterval);
   end;

   procedure StartPeriodicUpdate
   (
      this : in out TileUpdater;
      tileContent : Windows.Foundation.Uri'Class;
      startTime : Windows.Foundation.DateTime;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.StartPeriodicUpdate (tileContent.m_IUriRuntimeClass.all, startTime, requestedInterval);
   end;

   procedure StopPeriodicUpdate
   (
      this : in out TileUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.StopPeriodicUpdate;
   end;

   procedure StartPeriodicUpdateBatch
   (
      this : in out TileUpdater;
      tileContents : GenericObject;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.StartPeriodicUpdateBatch (tileContents, requestedInterval);
   end;

   procedure StartPeriodicUpdateBatch
   (
      this : in out TileUpdater;
      tileContents : GenericObject;
      startTime : Windows.Foundation.DateTime;
      requestedInterval : Windows.UI.Notifications.PeriodicUpdateRecurrence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITileUpdater.all.StartPeriodicUpdateBatch (tileContents, startTime, requestedInterval);
   end;

   procedure EnableNotificationQueueForSquare150x150
   (
      this : in out TileUpdater;
      enable : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.ITileUpdater2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.ITileUpdater_Interface, WinRt.Windows.UI.Notifications.ITileUpdater2, WinRt.Windows.UI.Notifications.IID_ITileUpdater2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITileUpdater.all);
      Hr := m_Interface.EnableNotificationQueueForSquare150x150 (enable);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableNotificationQueueForWide310x150
   (
      this : in out TileUpdater;
      enable : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.ITileUpdater2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.ITileUpdater_Interface, WinRt.Windows.UI.Notifications.ITileUpdater2, WinRt.Windows.UI.Notifications.IID_ITileUpdater2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITileUpdater.all);
      Hr := m_Interface.EnableNotificationQueueForWide310x150 (enable);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableNotificationQueueForSquare310x310
   (
      this : in out TileUpdater;
      enable : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.ITileUpdater2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.ITileUpdater_Interface, WinRt.Windows.UI.Notifications.ITileUpdater2, WinRt.Windows.UI.Notifications.IID_ITileUpdater2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITileUpdater.all);
      Hr := m_Interface.EnableNotificationQueueForSquare310x310 (enable);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastActivatedEventArgs

   procedure Initialize (this : in out ToastActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastActivatedEventArgs, IToastActivatedEventArgs_Ptr);
   begin
      if this.m_IToastActivatedEventArgs /= null then
         if this.m_IToastActivatedEventArgs.all /= null then
            RefCount := this.m_IToastActivatedEventArgs.all.Release;
            Free (this.m_IToastActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastActivatedEventArgs

   function get_Arguments
   (
      this : in out ToastActivatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastActivatedEventArgs.all.get_Arguments (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserInput
   (
      this : in out ToastActivatedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastActivatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastActivatedEventArgs_Interface, WinRt.Windows.UI.Notifications.IToastActivatedEventArgs2, WinRt.Windows.UI.Notifications.IID_IToastActivatedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IToastActivatedEventArgs.all);
         Hr := m_Interface.get_UserInput (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastCollection

   procedure Initialize (this : in out ToastCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastCollection, IToastCollection_Ptr);
   begin
      if this.m_IToastCollection /= null then
         if this.m_IToastCollection.all /= null then
            RefCount := this.m_IToastCollection.all.Release;
            Free (this.m_IToastCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToastCollection

   function Constructor
   (
      collectionId : WinRt.WString;
      displayName : WinRt.WString;
      launchArgs : WinRt.WString;
      iconUri : Windows.Foundation.Uri'Class
   )
   return ToastCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastCollection");
      m_Factory    : access IToastCollectionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.IToastCollection;
      HStr_collectionId : WinRt.HString := To_HString (collectionId);
      HStr_displayName : WinRt.HString := To_HString (displayName);
      HStr_launchArgs : WinRt.HString := To_HString (launchArgs);
   begin
      return RetVal : ToastCollection do
         Hr := RoGetActivationFactory (m_hString, IID_IToastCollectionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (HStr_collectionId, HStr_displayName, HStr_launchArgs, iconUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IToastCollection := new Windows.UI.Notifications.IToastCollection;
            Retval.m_IToastCollection.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_collectionId);
         Hr := WindowsDeleteString (HStr_displayName);
         Hr := WindowsDeleteString (HStr_launchArgs);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastCollection

   function get_Id
   (
      this : in out ToastCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastCollection.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out ToastCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastCollection.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out ToastCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IToastCollection.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LaunchArgs
   (
      this : in out ToastCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastCollection.all.get_LaunchArgs (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LaunchArgs
   (
      this : in out ToastCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IToastCollection.all.put_LaunchArgs (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Icon
   (
      this : in out ToastCollection
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IToastCollection.all.get_Icon (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Icon
   (
      this : in out ToastCollection;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastCollection.all.put_Icon (value.m_IUriRuntimeClass.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastCollectionManager

   procedure Initialize (this : in out ToastCollectionManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastCollectionManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastCollectionManager, IToastCollectionManager_Ptr);
   begin
      if this.m_IToastCollectionManager /= null then
         if this.m_IToastCollectionManager.all /= null then
            RefCount := this.m_IToastCollectionManager.all.Release;
            Free (this.m_IToastCollectionManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastCollectionManager

   procedure SaveToastCollectionAsync
   (
      this : in out ToastCollectionManager;
      collection : Windows.UI.Notifications.ToastCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IToastCollectionManager.all.SaveToastCollectionAsync (collection.m_IToastCollection.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function FindAllToastCollectionsAsync
   (
      this : in out ToastCollectionManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (886372884, 9515, 23732, (167, 218, 151, 30, 229, 218, 236, 124 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1179705449, 12370, 21262, (188, 56, 147, 196, 17, 119, 59, 119 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IToastCollectionManager.all.FindAllToastCollectionsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetToastCollectionAsync
   (
      this : in out ToastCollectionManager;
      collectionId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.ToastCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_collectionId : WinRt.HString := To_HString (collectionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ToastCollection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ToastCollection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Notifications.IToastCollection;
      m_IID            : aliased WinRt.IID := (2467359815, 40714, 22937, (128, 194, 75, 49, 233, 247, 126, 142 )); -- Windows.UI.Notifications.ToastCollection;
      m_HandlerIID     : aliased WinRt.IID := (2370095646, 5591, 23499, (176, 2, 56, 76, 135, 23, 28, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_ToastCollection.Kind := new AsyncOperationCompletedHandler_ToastCollection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ToastCollection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ToastCollection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ToastCollection.Kind_Delegate, AsyncOperationCompletedHandler_ToastCollection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastCollection do
         Hr := this.m_IToastCollectionManager.all.GetToastCollectionAsync (HStr_collectionId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IToastCollection := new Windows.UI.Notifications.IToastCollection;
                  Retval.m_IToastCollection.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_collectionId);
      end return;
   end;

   procedure RemoveToastCollectionAsync
   (
      this : in out ToastCollectionManager;
      collectionId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_collectionId : WinRt.HString := To_HString (collectionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IToastCollectionManager.all.RemoveToastCollectionAsync (HStr_collectionId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_collectionId);
   end;

   procedure RemoveAllToastCollectionsAsync
   (
      this : in out ToastCollectionManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IToastCollectionManager.all.RemoveAllToastCollectionsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_User
   (
      this : in out ToastCollectionManager
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IToastCollectionManager.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_AppId
   (
      this : in out ToastCollectionManager
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastCollectionManager.all.get_AppId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastDismissedEventArgs

   procedure Initialize (this : in out ToastDismissedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastDismissedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastDismissedEventArgs, IToastDismissedEventArgs_Ptr);
   begin
      if this.m_IToastDismissedEventArgs /= null then
         if this.m_IToastDismissedEventArgs.all /= null then
            RefCount := this.m_IToastDismissedEventArgs.all.Release;
            Free (this.m_IToastDismissedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastDismissedEventArgs

   function get_Reason
   (
      this : in out ToastDismissedEventArgs
   )
   return WinRt.Windows.UI.Notifications.ToastDismissalReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ToastDismissalReason;
   begin
      Hr := this.m_IToastDismissedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastFailedEventArgs

   procedure Initialize (this : in out ToastFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastFailedEventArgs, IToastFailedEventArgs_Ptr);
   begin
      if this.m_IToastFailedEventArgs /= null then
         if this.m_IToastFailedEventArgs.all /= null then
            RefCount := this.m_IToastFailedEventArgs.all.Release;
            Free (this.m_IToastFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastFailedEventArgs

   function get_ErrorCode
   (
      this : in out ToastFailedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IToastFailedEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotification

   procedure Initialize (this : in out ToastNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotification, IToastNotification_Ptr);
   begin
      if this.m_IToastNotification /= null then
         if this.m_IToastNotification.all /= null then
            RefCount := this.m_IToastNotification.all.Release;
            Free (this.m_IToastNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToastNotification

   function Constructor
   (
      content : Windows.Data.Xml.Dom.XmlDocument'Class
   )
   return ToastNotification is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotification");
      m_Factory    : access IToastNotificationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Notifications.IToastNotification;
   begin
      return RetVal : ToastNotification do
         Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateToastNotification (content.m_IXmlDocument.all, m_ComRetVal'Access);
            Retval.m_IToastNotification := new Windows.UI.Notifications.IToastNotification;
            Retval.m_IToastNotification.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotification

   function get_Content
   (
      this : in out ToastNotification
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_IToastNotification.all.get_Content (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   procedure put_ExpirationTime
   (
      this : in out ToastNotification;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotification.all.put_ExpirationTime (value);
   end;

   function get_ExpirationTime
   (
      this : in out ToastNotification
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IToastNotification.all.get_ExpirationTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_Dismissed
   (
      this : in out ToastNotification;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IToastNotification.all.add_Dismissed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Dismissed
   (
      this : in out ToastNotification;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotification.all.remove_Dismissed (token);
   end;

   function add_Activated
   (
      this : in out ToastNotification;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IToastNotification.all.add_Activated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Activated
   (
      this : in out ToastNotification;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotification.all.remove_Activated (token);
   end;

   function add_Failed
   (
      this : in out ToastNotification;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IToastNotification.all.add_Failed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Failed
   (
      this : in out ToastNotification;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotification.all.remove_Failed (token);
   end;

   procedure put_Tag
   (
      this : in out ToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification2, WinRt.Windows.UI.Notifications.IID_IToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_Tag (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Tag
   (
      this : in out ToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification2, WinRt.Windows.UI.Notifications.IID_IToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_Tag (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Group
   (
      this : in out ToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification2, WinRt.Windows.UI.Notifications.IID_IToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_Group (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Group
   (
      this : in out ToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification2, WinRt.Windows.UI.Notifications.IID_IToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_Group (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SuppressPopup
   (
      this : in out ToastNotification;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification2, WinRt.Windows.UI.Notifications.IID_IToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_SuppressPopup (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuppressPopup
   (
      this : in out ToastNotification
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification2, WinRt.Windows.UI.Notifications.IID_IToastNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_SuppressPopup (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NotificationMirroring
   (
      this : in out ToastNotification
   )
   return WinRt.Windows.UI.Notifications.NotificationMirroring is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationMirroring;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification3, WinRt.Windows.UI.Notifications.IID_IToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_NotificationMirroring (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NotificationMirroring
   (
      this : in out ToastNotification;
      value : Windows.UI.Notifications.NotificationMirroring
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification3, WinRt.Windows.UI.Notifications.IID_IToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_NotificationMirroring (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RemoteId
   (
      this : in out ToastNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification3, WinRt.Windows.UI.Notifications.IID_IToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_RemoteId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out ToastNotification;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification3, WinRt.Windows.UI.Notifications.IID_IToastNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_RemoteId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Data
   (
      this : in out ToastNotification
   )
   return WinRt.Windows.UI.Notifications.NotificationData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.INotificationData;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification4, WinRt.Windows.UI.Notifications.IID_IToastNotification4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.NotificationData do
         m_Interface := QInterface (this.m_IToastNotification.all);
         Hr := m_Interface.get_Data (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_INotificationData := new Windows.UI.Notifications.INotificationData;
         Retval.m_INotificationData.all := m_ComRetVal;
      end return;
   end;

   procedure put_Data
   (
      this : in out ToastNotification;
      value : Windows.UI.Notifications.NotificationData'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification4, WinRt.Windows.UI.Notifications.IID_IToastNotification4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_Data (value.m_INotificationData.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_Priority
   (
      this : in out ToastNotification
   )
   return WinRt.Windows.UI.Notifications.ToastNotificationPriority is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ToastNotificationPriority;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification4, WinRt.Windows.UI.Notifications.IID_IToastNotification4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_Priority (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Priority
   (
      this : in out ToastNotification;
      value : Windows.UI.Notifications.ToastNotificationPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification4, WinRt.Windows.UI.Notifications.IID_IToastNotification4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_Priority (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ExpiresOnReboot
   (
      this : in out ToastNotification
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification6, WinRt.Windows.UI.Notifications.IID_IToastNotification6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.get_ExpiresOnReboot (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ExpiresOnReboot
   (
      this : in out ToastNotification;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotification6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotification_Interface, WinRt.Windows.UI.Notifications.IToastNotification6, WinRt.Windows.UI.Notifications.IID_IToastNotification6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotification.all);
      Hr := m_Interface.put_ExpiresOnReboot (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationActionTriggerDetail

   procedure Initialize (this : in out ToastNotificationActionTriggerDetail) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationActionTriggerDetail) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotificationActionTriggerDetail, IToastNotificationActionTriggerDetail_Ptr);
   begin
      if this.m_IToastNotificationActionTriggerDetail /= null then
         if this.m_IToastNotificationActionTriggerDetail.all /= null then
            RefCount := this.m_IToastNotificationActionTriggerDetail.all.Release;
            Free (this.m_IToastNotificationActionTriggerDetail);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationActionTriggerDetail

   function get_Argument
   (
      this : in out ToastNotificationActionTriggerDetail
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationActionTriggerDetail.all.get_Argument (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserInput
   (
      this : in out ToastNotificationActionTriggerDetail
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IToastNotificationActionTriggerDetail.all.get_UserInput (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationHistory

   procedure Initialize (this : in out ToastNotificationHistory) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationHistory) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotificationHistory, IToastNotificationHistory_Ptr);
   begin
      if this.m_IToastNotificationHistory /= null then
         if this.m_IToastNotificationHistory.all /= null then
            RefCount := this.m_IToastNotificationHistory.all.Release;
            Free (this.m_IToastNotificationHistory);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationHistory

   function GetHistory
   (
      this : in out ToastNotificationHistory
   )
   return IVectorView_IToastNotification.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationHistory2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IToastNotification.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationHistory_Interface, WinRt.Windows.UI.Notifications.IToastNotificationHistory2, WinRt.Windows.UI.Notifications.IID_IToastNotificationHistory2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationHistory.all);
      Hr := m_Interface.GetHistory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IToastNotification (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetHistory
   (
      this : in out ToastNotificationHistory;
      applicationId : WinRt.WString
   )
   return IVectorView_IToastNotification.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationHistory2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IToastNotification.Kind;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationHistory_Interface, WinRt.Windows.UI.Notifications.IToastNotificationHistory2, WinRt.Windows.UI.Notifications.IID_IToastNotificationHistory2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationHistory.all);
      Hr := m_Interface.GetHistory (HStr_applicationId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_applicationId);
      m_GenericRetVal := QInterface_IVectorView_IToastNotification (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure RemoveGroup
   (
      this : in out ToastNotificationHistory;
      group : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_group : WinRt.HString := To_HString (group);
   begin
      Hr := this.m_IToastNotificationHistory.all.RemoveGroup (HStr_group);
      Hr := WindowsDeleteString (HStr_group);
   end;

   procedure RemoveGroup
   (
      this : in out ToastNotificationHistory;
      group : WinRt.WString;
      applicationId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_group : WinRt.HString := To_HString (group);
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      Hr := this.m_IToastNotificationHistory.all.RemoveGroup (HStr_group, HStr_applicationId);
      Hr := WindowsDeleteString (HStr_group);
      Hr := WindowsDeleteString (HStr_applicationId);
   end;

   procedure Remove
   (
      this : in out ToastNotificationHistory;
      tag : WinRt.WString;
      group : WinRt.WString;
      applicationId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_tag : WinRt.HString := To_HString (tag);
      HStr_group : WinRt.HString := To_HString (group);
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      Hr := this.m_IToastNotificationHistory.all.Remove (HStr_tag, HStr_group, HStr_applicationId);
      Hr := WindowsDeleteString (HStr_tag);
      Hr := WindowsDeleteString (HStr_group);
      Hr := WindowsDeleteString (HStr_applicationId);
   end;

   procedure Remove
   (
      this : in out ToastNotificationHistory;
      tag : WinRt.WString;
      group : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_tag : WinRt.HString := To_HString (tag);
      HStr_group : WinRt.HString := To_HString (group);
   begin
      Hr := this.m_IToastNotificationHistory.all.Remove (HStr_tag, HStr_group);
      Hr := WindowsDeleteString (HStr_tag);
      Hr := WindowsDeleteString (HStr_group);
   end;

   procedure Remove
   (
      this : in out ToastNotificationHistory;
      tag : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_tag : WinRt.HString := To_HString (tag);
   begin
      Hr := this.m_IToastNotificationHistory.all.Remove (HStr_tag);
      Hr := WindowsDeleteString (HStr_tag);
   end;

   procedure Clear
   (
      this : in out ToastNotificationHistory
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotificationHistory.all.Clear;
   end;

   procedure Clear
   (
      this : in out ToastNotificationHistory;
      applicationId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      Hr := this.m_IToastNotificationHistory.all.Clear (HStr_applicationId);
      Hr := WindowsDeleteString (HStr_applicationId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationHistoryChangedTriggerDetail

   procedure Initialize (this : in out ToastNotificationHistoryChangedTriggerDetail) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationHistoryChangedTriggerDetail) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotificationHistoryChangedTriggerDetail, IToastNotificationHistoryChangedTriggerDetail_Ptr);
   begin
      if this.m_IToastNotificationHistoryChangedTriggerDetail /= null then
         if this.m_IToastNotificationHistoryChangedTriggerDetail.all /= null then
            RefCount := this.m_IToastNotificationHistoryChangedTriggerDetail.all.Release;
            Free (this.m_IToastNotificationHistoryChangedTriggerDetail);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationHistoryChangedTriggerDetail

   function get_ChangeType
   (
      this : in out ToastNotificationHistoryChangedTriggerDetail
   )
   return WinRt.Windows.UI.Notifications.ToastHistoryChangedType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ToastHistoryChangedType;
   begin
      Hr := this.m_IToastNotificationHistoryChangedTriggerDetail.all.get_ChangeType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CollectionId
   (
      this : in out ToastNotificationHistoryChangedTriggerDetail
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationHistoryChangedTriggerDetail2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationHistoryChangedTriggerDetail_Interface, WinRt.Windows.UI.Notifications.IToastNotificationHistoryChangedTriggerDetail2, WinRt.Windows.UI.Notifications.IID_IToastNotificationHistoryChangedTriggerDetail2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationHistoryChangedTriggerDetail.all);
      Hr := m_Interface.get_CollectionId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ToastNotificationManager is

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.UI.Notifications.ToastNotificationManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotificationManagerForUser;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.ToastNotificationManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IToastNotificationManagerForUser := new Windows.UI.Notifications.IToastNotificationManagerForUser;
               Retval.m_IToastNotificationManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ConfigureNotificationMirroring
      (
         value : Windows.UI.Notifications.NotificationMirroring
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ConfigureNotificationMirroring (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function CreateToastNotifier
      return WinRt.Windows.UI.Notifications.ToastNotifier is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotifier;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.ToastNotifier do
            Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateToastNotifier (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IToastNotifier := new Windows.UI.Notifications.IToastNotifier;
               Retval.m_IToastNotifier.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateToastNotifier
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.UI.Notifications.ToastNotifier is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotifier;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
      begin
         return RetVal : WinRt.Windows.UI.Notifications.ToastNotifier do
            Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateToastNotifier (HStr_applicationId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IToastNotifier := new Windows.UI.Notifications.IToastNotifier;
               Retval.m_IToastNotifier.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_applicationId);
         end return;
      end;

      function GetTemplateContent
      (
         type_x : Windows.UI.Notifications.ToastTemplateType
      )
      return WinRt.Windows.Data.Xml.Dom.XmlDocument is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      begin
         return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
            Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTemplateContent (type_x, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
               Retval.m_IXmlDocument.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_History
      return WinRt.Windows.UI.Notifications.ToastNotificationHistory is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotificationHistory;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.ToastNotificationHistory do
            Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_History (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IToastNotificationHistory := new Windows.UI.Notifications.IToastNotificationHistory;
               Retval.m_IToastNotificationHistory.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetDefault
      return WinRt.Windows.UI.Notifications.ToastNotificationManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Notifications.ToastNotificationManager");
         m_Factory        : access WinRt.Windows.UI.Notifications.IToastNotificationManagerStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotificationManagerForUser;
      begin
         return RetVal : WinRt.Windows.UI.Notifications.ToastNotificationManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationManagerStatics5'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetDefault (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IToastNotificationManagerForUser := new Windows.UI.Notifications.IToastNotificationManagerForUser;
               Retval.m_IToastNotificationManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end ToastNotificationManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationManagerForUser

   procedure Initialize (this : in out ToastNotificationManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotificationManagerForUser, IToastNotificationManagerForUser_Ptr);
   begin
      if this.m_IToastNotificationManagerForUser /= null then
         if this.m_IToastNotificationManagerForUser.all /= null then
            RefCount := this.m_IToastNotificationManagerForUser.all.Release;
            Free (this.m_IToastNotificationManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationManagerForUser

   function CreateToastNotifier
   (
      this : in out ToastNotificationManagerForUser
   )
   return WinRt.Windows.UI.Notifications.ToastNotifier'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotifier;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotifier do
         Hr := this.m_IToastNotificationManagerForUser.all.CreateToastNotifier (m_ComRetVal'Access);
         Retval.m_IToastNotifier := new Windows.UI.Notifications.IToastNotifier;
         Retval.m_IToastNotifier.all := m_ComRetVal;
      end return;
   end;

   function CreateToastNotifier
   (
      this : in out ToastNotificationManagerForUser;
      applicationId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.ToastNotifier'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotifier;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotifier do
         Hr := this.m_IToastNotificationManagerForUser.all.CreateToastNotifier (HStr_applicationId, m_ComRetVal'Access);
         Retval.m_IToastNotifier := new Windows.UI.Notifications.IToastNotifier;
         Retval.m_IToastNotifier.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   function get_History
   (
      this : in out ToastNotificationManagerForUser
   )
   return WinRt.Windows.UI.Notifications.ToastNotificationHistory'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotificationHistory;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotificationHistory do
         Hr := this.m_IToastNotificationManagerForUser.all.get_History (m_ComRetVal'Access);
         Retval.m_IToastNotificationHistory := new Windows.UI.Notifications.IToastNotificationHistory;
         Retval.m_IToastNotificationHistory.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out ToastNotificationManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IToastNotificationManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function GetToastNotifierForToastCollectionIdAsync
   (
      this : in out ToastNotificationManagerForUser;
      collectionId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.ToastNotifier'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_collectionId : WinRt.HString := To_HString (collectionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ToastNotifier.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ToastNotifier.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Notifications.IToastNotifier;
      m_IID            : aliased WinRt.IID := (769507598, 14566, 22101, (173, 243, 130, 14, 143, 177, 77, 204 )); -- Windows.UI.Notifications.ToastNotifier;
      m_HandlerIID     : aliased WinRt.IID := (4259475159, 48183, 23164, (179, 218, 62, 65, 172, 151, 187, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_ToastNotifier.Kind := new AsyncOperationCompletedHandler_ToastNotifier.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ToastNotifier.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ToastNotifier.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ToastNotifier.Kind_Delegate, AsyncOperationCompletedHandler_ToastNotifier.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser_Interface, WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2, WinRt.Windows.UI.Notifications.IID_IToastNotificationManagerForUser2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotifier do
         m_Interface := QInterface (this.m_IToastNotificationManagerForUser.all);
         Hr := m_Interface.GetToastNotifierForToastCollectionIdAsync (HStr_collectionId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IToastNotifier := new Windows.UI.Notifications.IToastNotifier;
                  Retval.m_IToastNotifier.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_collectionId);
      end return;
   end;

   function GetHistoryForToastCollectionIdAsync
   (
      this : in out ToastNotificationManagerForUser;
      collectionId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.ToastNotificationHistory'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_collectionId : WinRt.HString := To_HString (collectionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ToastNotificationHistory.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ToastNotificationHistory.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Notifications.IToastNotificationHistory;
      m_IID            : aliased WinRt.IID := (706936523, 19350, 21791, (183, 185, 167, 181, 190, 236, 173, 5 )); -- Windows.UI.Notifications.ToastNotificationHistory;
      m_HandlerIID     : aliased WinRt.IID := (3328300506, 26466, 23955, (145, 56, 231, 218, 205, 87, 16, 86 ));
      m_Handler        : AsyncOperationCompletedHandler_ToastNotificationHistory.Kind := new AsyncOperationCompletedHandler_ToastNotificationHistory.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ToastNotificationHistory.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ToastNotificationHistory.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ToastNotificationHistory.Kind_Delegate, AsyncOperationCompletedHandler_ToastNotificationHistory.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser_Interface, WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2, WinRt.Windows.UI.Notifications.IID_IToastNotificationManagerForUser2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotificationHistory do
         m_Interface := QInterface (this.m_IToastNotificationManagerForUser.all);
         Hr := m_Interface.GetHistoryForToastCollectionIdAsync (HStr_collectionId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IToastNotificationHistory := new Windows.UI.Notifications.IToastNotificationHistory;
                  Retval.m_IToastNotificationHistory.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_collectionId);
      end return;
   end;

   function GetToastCollectionManager
   (
      this : in out ToastNotificationManagerForUser
   )
   return WinRt.Windows.UI.Notifications.ToastCollectionManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastCollectionManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser_Interface, WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2, WinRt.Windows.UI.Notifications.IID_IToastNotificationManagerForUser2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastCollectionManager do
         m_Interface := QInterface (this.m_IToastNotificationManagerForUser.all);
         Hr := m_Interface.GetToastCollectionManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IToastCollectionManager := new Windows.UI.Notifications.IToastCollectionManager;
         Retval.m_IToastCollectionManager.all := m_ComRetVal;
      end return;
   end;

   function GetToastCollectionManager
   (
      this : in out ToastNotificationManagerForUser;
      appId : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.ToastCollectionManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastCollectionManager;
      HStr_appId : WinRt.HString := To_HString (appId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser_Interface, WinRt.Windows.UI.Notifications.IToastNotificationManagerForUser2, WinRt.Windows.UI.Notifications.IID_IToastNotificationManagerForUser2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastCollectionManager do
         m_Interface := QInterface (this.m_IToastNotificationManagerForUser.all);
         Hr := m_Interface.GetToastCollectionManager (HStr_appId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IToastCollectionManager := new Windows.UI.Notifications.IToastCollectionManager;
         Retval.m_IToastCollectionManager.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_appId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotifier

   procedure Initialize (this : in out ToastNotifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotifier, IToastNotifier_Ptr);
   begin
      if this.m_IToastNotifier /= null then
         if this.m_IToastNotifier.all /= null then
            RefCount := this.m_IToastNotifier.all.Release;
            Free (this.m_IToastNotifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotifier

   procedure Show
   (
      this : in out ToastNotifier;
      notification_p : Windows.UI.Notifications.ToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotifier.all.Show (notification_p.m_IToastNotification.all);
   end;

   procedure Hide
   (
      this : in out ToastNotifier;
      notification_p : Windows.UI.Notifications.ToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotifier.all.Hide (notification_p.m_IToastNotification.all);
   end;

   function get_Setting
   (
      this : in out ToastNotifier
   )
   return WinRt.Windows.UI.Notifications.NotificationSetting is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationSetting;
   begin
      Hr := this.m_IToastNotifier.all.get_Setting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AddToSchedule
   (
      this : in out ToastNotifier;
      scheduledToast : Windows.UI.Notifications.ScheduledToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotifier.all.AddToSchedule (scheduledToast.m_IScheduledToastNotification.all);
   end;

   procedure RemoveFromSchedule
   (
      this : in out ToastNotifier;
      scheduledToast : Windows.UI.Notifications.ScheduledToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToastNotifier.all.RemoveFromSchedule (scheduledToast.m_IScheduledToastNotification.all);
   end;

   function GetScheduledToastNotifications
   (
      this : in out ToastNotifier
   )
   return IVectorView_IScheduledToastNotification.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IScheduledToastNotification.Kind;
   begin
      Hr := this.m_IToastNotifier.all.GetScheduledToastNotifications (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IScheduledToastNotification (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function Update
   (
      this : in out ToastNotifier;
      data : Windows.UI.Notifications.NotificationData'Class;
      tag : WinRt.WString;
      group : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.NotificationUpdateResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotifier2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationUpdateResult;
      HStr_tag : WinRt.HString := To_HString (tag);
      HStr_group : WinRt.HString := To_HString (group);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotifier_Interface, WinRt.Windows.UI.Notifications.IToastNotifier2, WinRt.Windows.UI.Notifications.IID_IToastNotifier2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotifier.all);
      Hr := m_Interface.Update (data.m_INotificationData.all, HStr_tag, HStr_group, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_tag);
      Hr := WindowsDeleteString (HStr_group);
      return m_ComRetVal;
   end;

   function Update
   (
      this : in out ToastNotifier;
      data : Windows.UI.Notifications.NotificationData'Class;
      tag : WinRt.WString
   )
   return WinRt.Windows.UI.Notifications.NotificationUpdateResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotifier2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.NotificationUpdateResult;
      HStr_tag : WinRt.HString := To_HString (tag);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotifier_Interface, WinRt.Windows.UI.Notifications.IToastNotifier2, WinRt.Windows.UI.Notifications.IID_IToastNotifier2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotifier.all);
      Hr := m_Interface.Update (data.m_INotificationData.all, HStr_tag, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_tag);
      return m_ComRetVal;
   end;

   function add_ScheduledToastNotificationShowing
   (
      this : in out ToastNotifier;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotifier3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotifier_Interface, WinRt.Windows.UI.Notifications.IToastNotifier3, WinRt.Windows.UI.Notifications.IID_IToastNotifier3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotifier.all);
      Hr := m_Interface.add_ScheduledToastNotificationShowing (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ScheduledToastNotificationShowing
   (
      this : in out ToastNotifier;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Notifications.IToastNotifier3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Notifications.IToastNotifier_Interface, WinRt.Windows.UI.Notifications.IToastNotifier3, WinRt.Windows.UI.Notifications.IID_IToastNotifier3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotifier.all);
      Hr := m_Interface.remove_ScheduledToastNotificationShowing (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserNotification

   procedure Initialize (this : in out UserNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserNotification, IUserNotification_Ptr);
   begin
      if this.m_IUserNotification /= null then
         if this.m_IUserNotification.all /= null then
            RefCount := this.m_IUserNotification.all.Release;
            Free (this.m_IUserNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserNotification

   function get_Notification
   (
      this : in out UserNotification
   )
   return WinRt.Windows.UI.Notifications.Notification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.INotification;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.Notification do
         Hr := this.m_IUserNotification.all.get_Notification (m_ComRetVal'Access);
         Retval.m_INotification := new Windows.UI.Notifications.INotification;
         Retval.m_INotification.all := m_ComRetVal;
      end return;
   end;

   function get_AppInfo
   (
      this : in out UserNotification
   )
   return WinRt.Windows.ApplicationModel.AppInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInfo do
         Hr := this.m_IUserNotification.all.get_AppInfo (m_ComRetVal'Access);
         Retval.m_IAppInfo := new Windows.ApplicationModel.IAppInfo;
         Retval.m_IAppInfo.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out UserNotification
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUserNotification.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CreationTime
   (
      this : in out UserNotification
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IUserNotification.all.get_CreationTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserNotificationChangedEventArgs

   procedure Initialize (this : in out UserNotificationChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserNotificationChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserNotificationChangedEventArgs, IUserNotificationChangedEventArgs_Ptr);
   begin
      if this.m_IUserNotificationChangedEventArgs /= null then
         if this.m_IUserNotificationChangedEventArgs.all /= null then
            RefCount := this.m_IUserNotificationChangedEventArgs.all.Release;
            Free (this.m_IUserNotificationChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserNotificationChangedEventArgs

   function get_ChangeKind
   (
      this : in out UserNotificationChangedEventArgs
   )
   return WinRt.Windows.UI.Notifications.UserNotificationChangedKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.UserNotificationChangedKind;
   begin
      Hr := this.m_IUserNotificationChangedEventArgs.all.get_ChangeKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UserNotificationId
   (
      this : in out UserNotificationChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUserNotificationChangedEventArgs.all.get_UserNotificationId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

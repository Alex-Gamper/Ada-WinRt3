--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.UI.Xaml.Media.Media3D is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type ICompositeTransform3D_Interface is interface and WinRt.IInspectable_Interface;
   type ICompositeTransform3D is access ICompositeTransform3D_Interface'Class;
   type ICompositeTransform3D_Ptr is access all ICompositeTransform3D;

   type ICompositeTransform3DStatics_Interface is interface and WinRt.IInspectable_Interface;
   type ICompositeTransform3DStatics is access ICompositeTransform3DStatics_Interface'Class;

   type IMatrix3DHelper_Interface is interface and WinRt.IInspectable_Interface;
   type IMatrix3DHelper is access IMatrix3DHelper_Interface'Class;
   type IMatrix3DHelper_Ptr is access all IMatrix3DHelper;

   type IMatrix3DHelperStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IMatrix3DHelperStatics is access IMatrix3DHelperStatics_Interface'Class;

   type IPerspectiveTransform3D_Interface is interface and WinRt.IInspectable_Interface;
   type IPerspectiveTransform3D is access IPerspectiveTransform3D_Interface'Class;
   type IPerspectiveTransform3D_Ptr is access all IPerspectiveTransform3D;

   type IPerspectiveTransform3DStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IPerspectiveTransform3DStatics is access IPerspectiveTransform3DStatics_Interface'Class;

   type ITransform3D_Interface is interface and WinRt.IInspectable_Interface;
   type ITransform3D is access ITransform3D_Interface'Class;
   type ITransform3D_Ptr is access all ITransform3D;

   type ITransform3DFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ITransform3DFactory is access ITransform3DFactory_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type Transform3D is new Ada.Finalization.Limited_Controlled with
      record
         m_ITransform3D : access Windows.UI.Xaml.Media.Media3D.ITransform3D;
      end record;
   type Transform3D_Ptr is access all Transform3D;

   type CompositeTransform3D is new Ada.Finalization.Limited_Controlled with
      record
         m_ICompositeTransform3D : access Windows.UI.Xaml.Media.Media3D.ICompositeTransform3D;
      end record;
   type CompositeTransform3D_Ptr is access all CompositeTransform3D;

   type Matrix3DHelper is new Ada.Finalization.Limited_Controlled with
      record
         m_IMatrix3DHelper : access Windows.UI.Xaml.Media.Media3D.IMatrix3DHelper;
      end record;
   type Matrix3DHelper_Ptr is access all Matrix3DHelper;

   type PerspectiveTransform3D is new Ada.Finalization.Limited_Controlled with
      record
         m_IPerspectiveTransform3D : access Windows.UI.Xaml.Media.Media3D.IPerspectiveTransform3D;
      end record;
   type PerspectiveTransform3D_Ptr is access all PerspectiveTransform3D;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type Matrix3D is record
      M11 : WinRt.Double;
      M12 : WinRt.Double;
      M13 : WinRt.Double;
      M14 : WinRt.Double;
      M21 : WinRt.Double;
      M22 : WinRt.Double;
      M23 : WinRt.Double;
      M24 : WinRt.Double;
      M31 : WinRt.Double;
      M32 : WinRt.Double;
      M33 : WinRt.Double;
      M34 : WinRt.Double;
      OffsetX : WinRt.Double;
      OffsetY : WinRt.Double;
      OffsetZ : WinRt.Double;
      M44 : WinRt.Double;
   end record with Convention => C_Pass_By_Copy;
   type Matrix3D_Ptr is access all Matrix3D;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type ICompositeTransform3D is interface and WinRt.IInspectable;

      function get_CenterX
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_CenterX
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_CenterY
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_CenterY
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_CenterZ
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_CenterZ
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_RotationX
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_RotationX
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_RotationY
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_RotationY
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_RotationZ
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_RotationZ
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_ScaleX
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_ScaleX
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_ScaleY
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_ScaleY
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_ScaleZ
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_ScaleZ
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_TranslateX
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_TranslateX
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_TranslateY
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_TranslateY
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_TranslateZ
      (
         this : access ICompositeTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_TranslateZ
      (
         this : access ICompositeTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      IID_ICompositeTransform3D : aliased WinRt.IID := (2306329345, 44941, 19189, (176, 132, 192, 142, 185, 112, 74, 190 ));

   -----------------------------------------------------------------------------
   -- type ICompositeTransform3DStatics is interface and WinRt.IInspectable;

      function get_CenterXProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_CenterYProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_CenterZProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_RotationXProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_RotationYProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_RotationZProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_ScaleXProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_ScaleYProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_ScaleZProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_TranslateXProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_TranslateYProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_TranslateZProperty
      (
         this : access ICompositeTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      IID_ICompositeTransform3DStatics : aliased WinRt.IID := (3720301927, 10789, 18675, (152, 8, 197, 30, 195, 213, 91, 236 ));

   -----------------------------------------------------------------------------
   -- type IMatrix3DHelper is interface and WinRt.IInspectable;

      IID_IMatrix3DHelper : aliased WinRt.IID := (3834384623, 39207, 19611, (130, 19, 7, 119, 85, 18, 186, 4 ));

   -----------------------------------------------------------------------------
   -- type IMatrix3DHelperStatics is interface and WinRt.IInspectable;

      function get_Identity
      (
         this : access IMatrix3DHelperStatics_Interface;
         RetVal : access Windows.UI.Xaml.Media.Media3D.Matrix3D
      )
      return WinRt.Hresult is abstract;

      function Multiply
      (
         this : access IMatrix3DHelperStatics_Interface;
         matrix1 : Windows.UI.Xaml.Media.Media3D.Matrix3D;
         matrix2 : Windows.UI.Xaml.Media.Media3D.Matrix3D;
         RetVal : access Windows.UI.Xaml.Media.Media3D.Matrix3D
      )
      return WinRt.Hresult is abstract;

      function FromElements
      (
         this : access IMatrix3DHelperStatics_Interface;
         m11 : WinRt.Double;
         m12 : WinRt.Double;
         m13 : WinRt.Double;
         m14 : WinRt.Double;
         m21 : WinRt.Double;
         m22 : WinRt.Double;
         m23 : WinRt.Double;
         m24 : WinRt.Double;
         m31 : WinRt.Double;
         m32 : WinRt.Double;
         m33 : WinRt.Double;
         m34 : WinRt.Double;
         offsetX : WinRt.Double;
         offsetY : WinRt.Double;
         offsetZ : WinRt.Double;
         m44 : WinRt.Double;
         RetVal : access Windows.UI.Xaml.Media.Media3D.Matrix3D
      )
      return WinRt.Hresult is abstract;

      function GetHasInverse
      (
         this : access IMatrix3DHelperStatics_Interface;
         target : Windows.UI.Xaml.Media.Media3D.Matrix3D;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function GetIsIdentity
      (
         this : access IMatrix3DHelperStatics_Interface;
         target : Windows.UI.Xaml.Media.Media3D.Matrix3D;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function Invert
      (
         this : access IMatrix3DHelperStatics_Interface;
         target : Windows.UI.Xaml.Media.Media3D.Matrix3D;
         RetVal : access Windows.UI.Xaml.Media.Media3D.Matrix3D
      )
      return WinRt.Hresult is abstract;

      IID_IMatrix3DHelperStatics : aliased WinRt.IID := (2456048734, 57688, 20084, (136, 153, 104, 145, 96, 189, 47, 140 ));

   -----------------------------------------------------------------------------
   -- type IPerspectiveTransform3D is interface and WinRt.IInspectable;

      function get_Depth
      (
         this : access IPerspectiveTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_Depth
      (
         this : access IPerspectiveTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_OffsetX
      (
         this : access IPerspectiveTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_OffsetX
      (
         this : access IPerspectiveTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_OffsetY
      (
         this : access IPerspectiveTransform3D_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_OffsetY
      (
         this : access IPerspectiveTransform3D_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      IID_IPerspectiveTransform3D : aliased WinRt.IID := (2591773482, 12537, 16545, (150, 201, 197, 157, 135, 249, 90, 195 ));

   -----------------------------------------------------------------------------
   -- type IPerspectiveTransform3DStatics is interface and WinRt.IInspectable;

      function get_DepthProperty
      (
         this : access IPerspectiveTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_OffsetXProperty
      (
         this : access IPerspectiveTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      function get_OffsetYProperty
      (
         this : access IPerspectiveTransform3DStatics_Interface;
         RetVal : access Windows.UI.Xaml.IDependencyProperty
      )
      return WinRt.Hresult is abstract;

      IID_IPerspectiveTransform3DStatics : aliased WinRt.IID := (2389664768, 25100, 18631, (132, 77, 63, 9, 132, 218, 91, 23 ));

   -----------------------------------------------------------------------------
   -- type ITransform3D is interface and WinRt.IInspectable;

      IID_ITransform3D : aliased WinRt.IID := (2923353146, 43516, 19505, (134, 205, 86, 217, 202, 37, 26, 105 ));

   -----------------------------------------------------------------------------
   -- type ITransform3DFactory is interface and WinRt.IInspectable;

      function CreateInstance
      (
         this : access ITransform3DFactory_Interface;
         baseInterface : WinRt.IInspectable;
         innerInterface : access WinRt.IInspectable;
         RetVal : access Windows.UI.Xaml.Media.Media3D.ITransform3D
      )
      return WinRt.Hresult is abstract;

      IID_ITransform3DFactory : aliased WinRt.IID := (86777722, 36211, 18637, (187, 184, 208, 4, 52, 202, 174, 93 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Transform3D

   overriding procedure Initialize (this : in out Transform3D);
   overriding procedure Finalize (this : in out Transform3D);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Transform3D

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Transform3D;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Transform3D

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositeTransform3D

   overriding procedure Initialize (this : in out CompositeTransform3D);
   overriding procedure Finalize (this : in out CompositeTransform3D);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositeTransform3D

   function Constructor return CompositeTransform3D;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositeTransform3D

   function get_CenterXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_CenterYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_CenterZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_RotationXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_RotationYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_RotationZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_ScaleXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_ScaleYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_ScaleZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_TranslateXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_TranslateYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_TranslateZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositeTransform3D

   function get_CenterX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_CenterX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_CenterY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_CenterY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_CenterZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_CenterZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_RotationX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_RotationX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_RotationY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_RotationY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_RotationZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_RotationZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_ScaleX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_ScaleX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_ScaleY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_ScaleY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_ScaleZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_ScaleZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_TranslateX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_TranslateX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_TranslateY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_TranslateY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   function get_TranslateZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double;

   procedure put_TranslateZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Matrix3DHelper

   overriding procedure Initialize (this : in out Matrix3DHelper);
   overriding procedure Finalize (this : in out Matrix3DHelper);

   -----------------------------------------------------------------------------
   -- Static Interfaces for Matrix3DHelper

   function get_Identity
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D;

   function Multiply
   (
      matrix1 : Windows.UI.Xaml.Media.Media3D.Matrix3D;
      matrix2 : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D;

   function FromElements
   (
      m11 : WinRt.Double;
      m12 : WinRt.Double;
      m13 : WinRt.Double;
      m14 : WinRt.Double;
      m21 : WinRt.Double;
      m22 : WinRt.Double;
      m23 : WinRt.Double;
      m24 : WinRt.Double;
      m31 : WinRt.Double;
      m32 : WinRt.Double;
      m33 : WinRt.Double;
      m34 : WinRt.Double;
      offsetX : WinRt.Double;
      offsetY : WinRt.Double;
      offsetZ : WinRt.Double;
      m44 : WinRt.Double
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D;

   function GetHasInverse
   (
      target : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Boolean;

   function GetIsIdentity
   (
      target : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Boolean;

   function Invert
   (
      target : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Matrix3DHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerspectiveTransform3D

   overriding procedure Initialize (this : in out PerspectiveTransform3D);
   overriding procedure Finalize (this : in out PerspectiveTransform3D);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerspectiveTransform3D

   function Constructor return PerspectiveTransform3D;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PerspectiveTransform3D

   function get_DepthProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_OffsetXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   function get_OffsetYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerspectiveTransform3D

   function get_Depth
   (
      this : in out PerspectiveTransform3D
   )
   return WinRt.Double;

   procedure put_Depth
   (
      this : in out PerspectiveTransform3D;
      value : WinRt.Double
   );

   function get_OffsetX
   (
      this : in out PerspectiveTransform3D
   )
   return WinRt.Double;

   procedure put_OffsetX
   (
      this : in out PerspectiveTransform3D;
      value : WinRt.Double
   );

   function get_OffsetY
   (
      this : in out PerspectiveTransform3D
   )
   return WinRt.Double;

   procedure put_OffsetY
   (
      this : in out PerspectiveTransform3D;
      value : WinRt.Double
   );

end;

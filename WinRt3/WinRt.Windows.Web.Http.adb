--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Security.Cryptography.Certificates;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.Web.Http.Filters;
with WinRt.Windows.Web.Http.Headers;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.Http is

   package IAsyncOperation_UInt64 is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.UInt64, GenericObject);
   package AsyncOperationCompletedHandler_UInt64 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt64, GenericObject);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);

   package IAsyncOperation_IInputStream is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IInputStream, GenericObject);
   package AsyncOperationCompletedHandler_IInputStream is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IInputStream, GenericObject);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.HString, GenericObject);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.HString, GenericObject);

   package IAsyncOperation_HttpResponseMessage is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Http.IHttpResponseMessage, GenericObject);
   package AsyncOperationCompletedHandler_HttpResponseMessage is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Http.IHttpResponseMessage, GenericObject);

   package IAsyncOperation_HttpRequestResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Http.IHttpRequestResult, GenericObject);
   package AsyncOperationCompletedHandler_HttpRequestResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Http.IHttpRequestResult, GenericObject);

   package IAsyncOperation_HttpGetBufferResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Http.IHttpGetBufferResult, GenericObject);
   package AsyncOperationCompletedHandler_HttpGetBufferResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Http.IHttpGetBufferResult, GenericObject);

   package IAsyncOperation_HttpGetInputStreamResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Http.IHttpGetInputStreamResult, GenericObject);
   package AsyncOperationCompletedHandler_HttpGetInputStreamResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Http.IHttpGetInputStreamResult, GenericObject);

   package IAsyncOperation_HttpGetStringResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Http.IHttpGetStringResult, GenericObject);
   package AsyncOperationCompletedHandler_HttpGetStringResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Http.IHttpGetStringResult, GenericObject);

   package IVectorView_IHttpCookie is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Web.Http.IHttpCookie);
   package IIterable_IHttpCookie is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.IHttpCookie);
   package IIterable_IHttpContent is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.IHttpContent);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpBufferContent

   procedure Initialize (this : in out HttpBufferContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpBufferContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContent, IHttpContent_Ptr);
   begin
      if this.m_IHttpContent /= null then
         if this.m_IHttpContent.all /= null then
            RefCount := this.m_IHttpContent.all.Release;
            Free (this.m_IHttpContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpBufferContent

   function Constructor
   (
      content : Windows.Storage.Streams.IBuffer
   )
   return HttpBufferContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpBufferContent");
      m_Factory    : access IHttpBufferContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
   begin
      return RetVal : HttpBufferContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpBufferContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (content, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      content : Windows.Storage.Streams.IBuffer;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   )
   return HttpBufferContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpBufferContent");
      m_Factory    : access IHttpBufferContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
   begin
      return RetVal : HttpBufferContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpBufferContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBufferWithOffset (content, offset, count, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpBufferContent

   function get_Headers
   (
      this : in out HttpBufferContent
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection do
         Hr := this.m_IHttpContent.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
         Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function BufferAllAsync
   (
      this : in out HttpBufferContent
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.BufferAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsBufferAsync
   (
      this : in out HttpBufferContent
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2912292479, 55099, 22244, (165, 140, 110, 199, 103, 140, 253, 136 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2882015797, 14791, 22975, (153, 72, 45, 20, 169, 61, 64, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsBufferAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsInputStreamAsync
   (
      this : in out HttpBufferContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (1163568641, 61758, 24046, (185, 203, 22, 181, 49, 153, 99, 39 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (2377553670, 15825, 23080, (152, 106, 147, 190, 7, 118, 217, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsInputStreamAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsStringAsync
   (
      this : in out HttpBufferContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (3367750441, 27492, 23778, (168, 49, 3, 143, 110, 2, 25, 158 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3178622654, 59317, 23286, (132, 21, 164, 185, 201, 4, 82, 2 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsStringAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryComputeLength
   (
      this : in out HttpBufferContent;
      length : WinRt.UInt64_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpContent.all.TryComputeLength (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteToStreamAsync
   (
      this : in out HttpBufferContent;
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.WriteToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out HttpBufferContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpBufferContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpClient

   procedure Initialize (this : in out HttpClient) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpClient) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpClient, IHttpClient_Ptr);
   begin
      if this.m_IHttpClient /= null then
         if this.m_IHttpClient.all /= null then
            RefCount := this.m_IHttpClient.all.Release;
            Free (this.m_IHttpClient);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpClient

   function Constructor
   (
      filter : Windows.Web.Http.Filters.IHttpFilter
   )
   return HttpClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpClient");
      m_Factory    : access IHttpClientFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpClient;
   begin
      return RetVal : HttpClient do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpClientFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (filter, m_ComRetVal'Access);
            Retval.m_IHttpClient := new Windows.Web.Http.IHttpClient;
            Retval.m_IHttpClient.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return HttpClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpClient");
      m_ComRetVal  : aliased Windows.Web.Http.IHttpClient;
   begin
      return RetVal : HttpClient do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpClient := new Windows.Web.Http.IHttpClient;
            Retval.m_IHttpClient.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpClient

   function DeleteAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.DeleteAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.GetAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class;
      completionOption : Windows.Web.Http.HttpCompletionOption
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.GetAsync (uri.m_IUriRuntimeClass.all, completionOption, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetBufferAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2295970677, 44980, 24370, (157, 126, 211, 191, 55, 133, 53, 76 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2966368133, 27026, 21182, (143, 11, 147, 150, 75, 20, 217, 99 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpClient.all.GetBufferAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetInputStreamAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (194496388, 57111, 22303, (131, 55, 68, 125, 255, 6, 138, 156 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (1347040492, 21657, 23062, (191, 252, 60, 203, 100, 163, 84, 122 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpClient.all.GetInputStreamAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetStringAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (2448211525, 59529, 21784, (189, 141, 197, 189, 225, 99, 16, 155 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (2561383115, 14555, 22671, (165, 249, 159, 72, 75, 34, 0, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpClient.all.GetStringAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function PostAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class;
      content : Windows.Web.Http.IHttpContent
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.PostAsync (uri.m_IUriRuntimeClass.all, content, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PutAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class;
      content : Windows.Web.Http.IHttpContent
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.PutAsync (uri.m_IUriRuntimeClass.all, content, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SendRequestAsync
   (
      this : in out HttpClient;
      request : Windows.Web.Http.HttpRequestMessage'Class
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.SendRequestAsync (request.m_IHttpRequestMessage.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SendRequestAsync
   (
      this : in out HttpClient;
      request : Windows.Web.Http.HttpRequestMessage'Class;
      completionOption : Windows.Web.Http.HttpCompletionOption
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpClient.all.SendRequestAsync (request.m_IHttpRequestMessage.all, completionOption, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_DefaultRequestHeaders
   (
      this : in out HttpClient
   )
   return WinRt.Windows.Web.Http.Headers.HttpRequestHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpRequestHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpRequestHeaderCollection do
         Hr := this.m_IHttpClient.all.get_DefaultRequestHeaders (m_ComRetVal'Access);
         Retval.m_IHttpRequestHeaderCollection := new Windows.Web.Http.Headers.IHttpRequestHeaderCollection;
         Retval.m_IHttpRequestHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function TryDeleteAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryDeleteAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryGetAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class;
      completionOption : Windows.Web.Http.HttpCompletionOption
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryGetAsync (uri.m_IUriRuntimeClass.all, completionOption, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetBufferAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpGetBufferResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpGetBufferResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpGetBufferResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpGetBufferResult;
      m_IID            : aliased WinRt.IID := (2972253124, 6592, 24545, (174, 198, 210, 230, 75, 210, 40, 98 )); -- Windows.Web.Http.HttpGetBufferResult;
      m_HandlerIID     : aliased WinRt.IID := (1810649930, 6401, 24482, (150, 134, 154, 81, 15, 107, 18, 23 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpGetBufferResult.Kind := new AsyncOperationCompletedHandler_HttpGetBufferResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpGetBufferResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpGetBufferResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpGetBufferResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpGetBufferResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpGetBufferResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryGetBufferAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpGetBufferResult := new Windows.Web.Http.IHttpGetBufferResult;
                  Retval.m_IHttpGetBufferResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetInputStreamAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpGetInputStreamResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpGetInputStreamResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpGetInputStreamResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpGetInputStreamResult;
      m_IID            : aliased WinRt.IID := (1847387564, 49419, 23817, (173, 67, 244, 221, 234, 218, 133, 122 )); -- Windows.Web.Http.HttpGetInputStreamResult;
      m_HandlerIID     : aliased WinRt.IID := (2023429401, 19169, 21621, (187, 1, 103, 52, 202, 212, 120, 255 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpGetInputStreamResult.Kind := new AsyncOperationCompletedHandler_HttpGetInputStreamResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpGetInputStreamResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpGetInputStreamResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpGetInputStreamResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpGetInputStreamResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpGetInputStreamResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryGetInputStreamAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpGetInputStreamResult := new Windows.Web.Http.IHttpGetInputStreamResult;
                  Retval.m_IHttpGetInputStreamResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetStringAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpGetStringResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpGetStringResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpGetStringResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpGetStringResult;
      m_IID            : aliased WinRt.IID := (1937961625, 48061, 23507, (177, 67, 136, 135, 198, 39, 146, 155 )); -- Windows.Web.Http.HttpGetStringResult;
      m_HandlerIID     : aliased WinRt.IID := (1650324405, 49143, 20858, (147, 89, 29, 194, 143, 176, 245, 134 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpGetStringResult.Kind := new AsyncOperationCompletedHandler_HttpGetStringResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpGetStringResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpGetStringResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpGetStringResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpGetStringResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpGetStringResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryGetStringAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpGetStringResult := new Windows.Web.Http.IHttpGetStringResult;
                  Retval.m_IHttpGetStringResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryPostAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class;
      content : Windows.Web.Http.IHttpContent
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryPostAsync (uri.m_IUriRuntimeClass.all, content, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryPutAsync
   (
      this : in out HttpClient;
      uri : Windows.Foundation.Uri'Class;
      content : Windows.Web.Http.IHttpContent
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TryPutAsync (uri.m_IUriRuntimeClass.all, content, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TrySendRequestAsync
   (
      this : in out HttpClient;
      request : Windows.Web.Http.HttpRequestMessage'Class
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TrySendRequestAsync (request.m_IHttpRequestMessage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TrySendRequestAsync
   (
      this : in out HttpClient;
      request : Windows.Web.Http.HttpRequestMessage'Class;
      completionOption : Windows.Web.Http.HttpCompletionOption
   )
   return WinRt.Windows.Web.Http.HttpRequestResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpClient2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpRequestResult;
      m_IID            : aliased WinRt.IID := (2537063222, 11948, 23926, (178, 40, 211, 46, 249, 163, 129, 117 )); -- Windows.Web.Http.HttpRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (4261166479, 2235, 23938, (191, 222, 174, 9, 46, 126, 63, 225 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpRequestResult.Kind := new AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_HttpRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Web.Http.IHttpClient2, WinRt.Windows.Web.Http.IID_IHttpClient2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestResult do
         m_Interface := QInterface (this.m_IHttpClient.all);
         Hr := m_Interface.TrySendRequestAsync (request.m_IHttpRequestMessage.all, completionOption, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpRequestResult := new Windows.Web.Http.IHttpRequestResult;
                  Retval.m_IHttpRequestResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Close
   (
      this : in out HttpClient
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpClient.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpClient
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpClient_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpClient.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCookie

   procedure Initialize (this : in out HttpCookie) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCookie) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCookie, IHttpCookie_Ptr);
   begin
      if this.m_IHttpCookie /= null then
         if this.m_IHttpCookie.all /= null then
            RefCount := this.m_IHttpCookie.all.Release;
            Free (this.m_IHttpCookie);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpCookie

   function Constructor
   (
      name : WinRt.WString;
      domain : WinRt.WString;
      path : WinRt.WString
   )
   return HttpCookie is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpCookie");
      m_Factory    : access IHttpCookieFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpCookie;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_domain : WinRt.HString := To_HString (domain);
      HStr_path : WinRt.HString := To_HString (path);
   begin
      return RetVal : HttpCookie do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCookieFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_name, HStr_domain, HStr_path, m_ComRetVal'Access);
            Retval.m_IHttpCookie := new Windows.Web.Http.IHttpCookie;
            Retval.m_IHttpCookie.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_domain);
         Hr := WindowsDeleteString (HStr_path);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCookie

   function get_Name
   (
      this : in out HttpCookie
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCookie.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Domain
   (
      this : in out HttpCookie
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCookie.all.get_Domain (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Path
   (
      this : in out HttpCookie
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCookie.all.get_Path (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Expires
   (
      this : in out HttpCookie
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpCookie.all.get_Expires (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Expires
   (
      this : in out HttpCookie;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCookie.all.put_Expires (value);
   end;

   function get_HttpOnly
   (
      this : in out HttpCookie
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpCookie.all.get_HttpOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HttpOnly
   (
      this : in out HttpCookie;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCookie.all.put_HttpOnly (value);
   end;

   function get_Secure
   (
      this : in out HttpCookie
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpCookie.all.get_Secure (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Secure
   (
      this : in out HttpCookie;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCookie.all.put_Secure (value);
   end;

   function get_Value
   (
      this : in out HttpCookie
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCookie.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out HttpCookie;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpCookie.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function ToString
   (
      this : in out HttpCookie
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpCookie_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookie.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCookieCollection

   procedure Initialize (this : in out HttpCookieCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCookieCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCookieCollection

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Web.Http.HttpCookie>
   function GetAt
   (
      this : in out HttpCookieCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.HttpCookie'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IHttpCookie.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpCookie;
      m_GenericIID     : aliased WinRt.IID := (6604022, 16330, 22563, (157, 146, 134, 196, 11, 40, 173, 188 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IHttpCookie.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpCookie do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpCookie := new Windows.Web.Http.IHttpCookie;
         Retval.m_IHttpCookie.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpCookieCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IHttpCookie.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (6604022, 16330, 22563, (157, 146, 134, 196, 11, 40, 173, 188 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IHttpCookie.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpCookieCollection;
      value : Windows.Web.Http.HttpCookie'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IHttpCookie.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (6604022, 16330, 22563, (157, 146, 134, 196, 11, 40, 173, 188 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IHttpCookie.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IHttpCookie.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out HttpCookieCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.IHttpCookie_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IHttpCookie.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (6604022, 16330, 22563, (157, 146, 134, 196, 11, 40, 173, 188 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IHttpCookie.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.HttpCookie>
   function First
   (
      this : in out HttpCookieCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpCookie.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (247069238, 35038, 22797, (142, 160, 182, 19, 208, 171, 1, 95 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IHttpCookie.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCookieManager

   procedure Initialize (this : in out HttpCookieManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCookieManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCookieManager, IHttpCookieManager_Ptr);
   begin
      if this.m_IHttpCookieManager /= null then
         if this.m_IHttpCookieManager.all /= null then
            RefCount := this.m_IHttpCookieManager.all.Release;
            Free (this.m_IHttpCookieManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCookieManager

   function SetCookie
   (
      this : in out HttpCookieManager;
      cookie : Windows.Web.Http.HttpCookie'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpCookieManager.all.SetCookie (cookie.m_IHttpCookie.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function SetCookie
   (
      this : in out HttpCookieManager;
      cookie : Windows.Web.Http.HttpCookie'Class;
      thirdParty : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpCookieManager.all.SetCookie (cookie.m_IHttpCookie.all, thirdParty, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure DeleteCookie
   (
      this : in out HttpCookieManager;
      cookie : Windows.Web.Http.HttpCookie'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCookieManager.all.DeleteCookie (cookie.m_IHttpCookie.all);
   end;

   function GetCookies
   (
      this : in out HttpCookieManager;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Http.HttpCookieCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpCookieCollection do
         Hr := this.m_IHttpCookieManager.all.GetCookies (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpFormUrlEncodedContent

   procedure Initialize (this : in out HttpFormUrlEncodedContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpFormUrlEncodedContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContent, IHttpContent_Ptr);
   begin
      if this.m_IHttpContent /= null then
         if this.m_IHttpContent.all /= null then
            RefCount := this.m_IHttpContent.all.Release;
            Free (this.m_IHttpContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpFormUrlEncodedContent

   function Constructor
   (
      content : GenericObject
   )
   return HttpFormUrlEncodedContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpFormUrlEncodedContent");
      m_Factory    : access IHttpFormUrlEncodedContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
   begin
      return RetVal : HttpFormUrlEncodedContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpFormUrlEncodedContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (content, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpFormUrlEncodedContent

   function get_Headers
   (
      this : in out HttpFormUrlEncodedContent
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection do
         Hr := this.m_IHttpContent.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
         Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function BufferAllAsync
   (
      this : in out HttpFormUrlEncodedContent
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.BufferAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsBufferAsync
   (
      this : in out HttpFormUrlEncodedContent
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2912292479, 55099, 22244, (165, 140, 110, 199, 103, 140, 253, 136 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2882015797, 14791, 22975, (153, 72, 45, 20, 169, 61, 64, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsBufferAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsInputStreamAsync
   (
      this : in out HttpFormUrlEncodedContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (1163568641, 61758, 24046, (185, 203, 22, 181, 49, 153, 99, 39 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (2377553670, 15825, 23080, (152, 106, 147, 190, 7, 118, 217, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsInputStreamAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsStringAsync
   (
      this : in out HttpFormUrlEncodedContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (3367750441, 27492, 23778, (168, 49, 3, 143, 110, 2, 25, 158 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3178622654, 59317, 23286, (132, 21, 164, 185, 201, 4, 82, 2 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsStringAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryComputeLength
   (
      this : in out HttpFormUrlEncodedContent;
      length : WinRt.UInt64_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpContent.all.TryComputeLength (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteToStreamAsync
   (
      this : in out HttpFormUrlEncodedContent;
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.WriteToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out HttpFormUrlEncodedContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpFormUrlEncodedContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpGetBufferResult

   procedure Initialize (this : in out HttpGetBufferResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpGetBufferResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpGetBufferResult, IHttpGetBufferResult_Ptr);
   begin
      if this.m_IHttpGetBufferResult /= null then
         if this.m_IHttpGetBufferResult.all /= null then
            RefCount := this.m_IHttpGetBufferResult.all.Release;
            Free (this.m_IHttpGetBufferResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpGetBufferResult

   function get_ExtendedError
   (
      this : in out HttpGetBufferResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IHttpGetBufferResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestMessage
   (
      this : in out HttpGetBufferResult
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IHttpGetBufferResult.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ResponseMessage
   (
      this : in out HttpGetBufferResult
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpGetBufferResult.all.get_ResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_Succeeded
   (
      this : in out HttpGetBufferResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpGetBufferResult.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out HttpGetBufferResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHttpGetBufferResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out HttpGetBufferResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpGetBufferResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpGetBufferResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpGetBufferResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpGetBufferResult_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpGetBufferResult.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpGetInputStreamResult

   procedure Initialize (this : in out HttpGetInputStreamResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpGetInputStreamResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpGetInputStreamResult, IHttpGetInputStreamResult_Ptr);
   begin
      if this.m_IHttpGetInputStreamResult /= null then
         if this.m_IHttpGetInputStreamResult.all /= null then
            RefCount := this.m_IHttpGetInputStreamResult.all.Release;
            Free (this.m_IHttpGetInputStreamResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpGetInputStreamResult

   function get_ExtendedError
   (
      this : in out HttpGetInputStreamResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IHttpGetInputStreamResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestMessage
   (
      this : in out HttpGetInputStreamResult
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IHttpGetInputStreamResult.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ResponseMessage
   (
      this : in out HttpGetInputStreamResult
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpGetInputStreamResult.all.get_ResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_Succeeded
   (
      this : in out HttpGetInputStreamResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpGetInputStreamResult.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out HttpGetInputStreamResult
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IHttpGetInputStreamResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out HttpGetInputStreamResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpGetInputStreamResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpGetInputStreamResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpGetInputStreamResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpGetInputStreamResult_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpGetInputStreamResult.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpGetStringResult

   procedure Initialize (this : in out HttpGetStringResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpGetStringResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpGetStringResult, IHttpGetStringResult_Ptr);
   begin
      if this.m_IHttpGetStringResult /= null then
         if this.m_IHttpGetStringResult.all /= null then
            RefCount := this.m_IHttpGetStringResult.all.Release;
            Free (this.m_IHttpGetStringResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpGetStringResult

   function get_ExtendedError
   (
      this : in out HttpGetStringResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IHttpGetStringResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestMessage
   (
      this : in out HttpGetStringResult
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IHttpGetStringResult.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ResponseMessage
   (
      this : in out HttpGetStringResult
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpGetStringResult.all.get_ResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_Succeeded
   (
      this : in out HttpGetStringResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpGetStringResult.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out HttpGetStringResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpGetStringResult.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out HttpGetStringResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpGetStringResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpGetStringResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpGetStringResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpGetStringResult_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpGetStringResult.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMethod

   procedure Initialize (this : in out HttpMethod) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMethod) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpMethod, IHttpMethod_Ptr);
   begin
      if this.m_IHttpMethod /= null then
         if this.m_IHttpMethod.all /= null then
            RefCount := this.m_IHttpMethod.all.Release;
            Free (this.m_IHttpMethod);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpMethod

   function Constructor
   (
      method : WinRt.WString
   )
   return HttpMethod is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory    : access IHttpMethodFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpMethod;
      HStr_method : WinRt.HString := To_HString (method);
   begin
      return RetVal : HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_method, m_ComRetVal'Access);
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_method);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpMethod

   function get_Delete
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Delete (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Get
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Get (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Head
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Head (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Options
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Options (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Patch
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Patch (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Post
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Post (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Put
   return WinRt.Windows.Web.Http.HttpMethod is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.HttpMethod");
      m_Factory        : access WinRt.Windows.Web.Http.IHttpMethodStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMethodStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Put (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
            Retval.m_IHttpMethod.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMethod

   function get_Method
   (
      this : in out HttpMethod
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpMethod.all.get_Method (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpMethod
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpMethod_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethod.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMultipartContent

   procedure Initialize (this : in out HttpMultipartContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMultipartContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContent, IHttpContent_Ptr);
   begin
      if this.m_IHttpContent /= null then
         if this.m_IHttpContent.all /= null then
            RefCount := this.m_IHttpContent.all.Release;
            Free (this.m_IHttpContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpMultipartContent

   function Constructor return HttpMultipartContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpMultipartContent");
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
   begin
      return RetVal : HttpMultipartContent do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      subtype_x : WinRt.WString
   )
   return HttpMultipartContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpMultipartContent");
      m_Factory    : access IHttpMultipartContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
   begin
      return RetVal : HttpMultipartContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMultipartContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSubtype (HStr_subtype_x, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_subtype_x);
      end return;
   end;

   function Constructor
   (
      subtype_x : WinRt.WString;
      boundary : WinRt.WString
   )
   return HttpMultipartContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpMultipartContent");
      m_Factory    : access IHttpMultipartContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
      HStr_boundary : WinRt.HString := To_HString (boundary);
   begin
      return RetVal : HttpMultipartContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMultipartContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSubtypeAndBoundary (HStr_subtype_x, HStr_boundary, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_subtype_x);
         Hr := WindowsDeleteString (HStr_boundary);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMultipartContent

   procedure Add
   (
      this : in out HttpMultipartContent;
      content : Windows.Web.Http.IHttpContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpMultipartContent := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Web.Http.IHttpMultipartContent, WinRt.Windows.Web.Http.IID_IHttpMultipartContent'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Add (content);
      m_RefCount := m_Interface.Release;
   end;

   function get_Headers
   (
      this : in out HttpMultipartContent
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection do
         Hr := this.m_IHttpContent.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
         Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function BufferAllAsync
   (
      this : in out HttpMultipartContent
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.BufferAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsBufferAsync
   (
      this : in out HttpMultipartContent
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2912292479, 55099, 22244, (165, 140, 110, 199, 103, 140, 253, 136 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2882015797, 14791, 22975, (153, 72, 45, 20, 169, 61, 64, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsBufferAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsInputStreamAsync
   (
      this : in out HttpMultipartContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (1163568641, 61758, 24046, (185, 203, 22, 181, 49, 153, 99, 39 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (2377553670, 15825, 23080, (152, 106, 147, 190, 7, 118, 217, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsInputStreamAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsStringAsync
   (
      this : in out HttpMultipartContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (3367750441, 27492, 23778, (168, 49, 3, 143, 110, 2, 25, 158 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3178622654, 59317, 23286, (132, 21, 164, 185, 201, 4, 82, 2 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsStringAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryComputeLength
   (
      this : in out HttpMultipartContent;
      length : WinRt.UInt64_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpContent.all.TryComputeLength (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteToStreamAsync
   (
      this : in out HttpMultipartContent;
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.WriteToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out HttpMultipartContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.IHttpContent>
   function First
   (
      this : in out HttpMultipartContent
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpContent.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4043445631, 46210, 22326, (157, 18, 198, 131, 188, 73, 73, 66 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, IIterable_IHttpContent.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpMultipartContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMultipartFormDataContent

   procedure Initialize (this : in out HttpMultipartFormDataContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMultipartFormDataContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContent, IHttpContent_Ptr);
   begin
      if this.m_IHttpContent /= null then
         if this.m_IHttpContent.all /= null then
            RefCount := this.m_IHttpContent.all.Release;
            Free (this.m_IHttpContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpMultipartFormDataContent

   function Constructor return HttpMultipartFormDataContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpMultipartFormDataContent");
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
   begin
      return RetVal : HttpMultipartFormDataContent do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      boundary : WinRt.WString
   )
   return HttpMultipartFormDataContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpMultipartFormDataContent");
      m_Factory    : access IHttpMultipartFormDataContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
      HStr_boundary : WinRt.HString := To_HString (boundary);
   begin
      return RetVal : HttpMultipartFormDataContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMultipartFormDataContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithBoundary (HStr_boundary, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_boundary);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMultipartFormDataContent

   procedure Add
   (
      this : in out HttpMultipartFormDataContent;
      content : Windows.Web.Http.IHttpContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpMultipartFormDataContent := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Web.Http.IHttpMultipartFormDataContent, WinRt.Windows.Web.Http.IID_IHttpMultipartFormDataContent'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Add (content);
      m_RefCount := m_Interface.Release;
   end;

   procedure Add
   (
      this : in out HttpMultipartFormDataContent;
      content : Windows.Web.Http.IHttpContent;
      name : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpMultipartFormDataContent := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Web.Http.IHttpMultipartFormDataContent, WinRt.Windows.Web.Http.IID_IHttpMultipartFormDataContent'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Add (content, HStr_name);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure Add
   (
      this : in out HttpMultipartFormDataContent;
      content : Windows.Web.Http.IHttpContent;
      name : WinRt.WString;
      fileName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.IHttpMultipartFormDataContent := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_fileName : WinRt.HString := To_HString (fileName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Web.Http.IHttpMultipartFormDataContent, WinRt.Windows.Web.Http.IID_IHttpMultipartFormDataContent'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Add (content, HStr_name, HStr_fileName);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_fileName);
   end;

   function get_Headers
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection do
         Hr := this.m_IHttpContent.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
         Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function BufferAllAsync
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.BufferAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsBufferAsync
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2912292479, 55099, 22244, (165, 140, 110, 199, 103, 140, 253, 136 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2882015797, 14791, 22975, (153, 72, 45, 20, 169, 61, 64, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsBufferAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsInputStreamAsync
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (1163568641, 61758, 24046, (185, 203, 22, 181, 49, 153, 99, 39 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (2377553670, 15825, 23080, (152, 106, 147, 190, 7, 118, 217, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsInputStreamAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsStringAsync
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (3367750441, 27492, 23778, (168, 49, 3, 143, 110, 2, 25, 158 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3178622654, 59317, 23286, (132, 21, 164, 185, 201, 4, 82, 2 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsStringAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryComputeLength
   (
      this : in out HttpMultipartFormDataContent;
      length : WinRt.UInt64_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpContent.all.TryComputeLength (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteToStreamAsync
   (
      this : in out HttpMultipartFormDataContent;
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.WriteToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out HttpMultipartFormDataContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.IHttpContent>
   function First
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpContent.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4043445631, 46210, 22326, (157, 18, 198, 131, 188, 73, 73, 66 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, IIterable_IHttpContent.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpMultipartFormDataContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpRequestMessage

   procedure Initialize (this : in out HttpRequestMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpRequestMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpRequestMessage, IHttpRequestMessage_Ptr);
   begin
      if this.m_IHttpRequestMessage /= null then
         if this.m_IHttpRequestMessage.all /= null then
            RefCount := this.m_IHttpRequestMessage.all.Release;
            Free (this.m_IHttpRequestMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpRequestMessage

   function Constructor
   (
      method : Windows.Web.Http.HttpMethod'Class;
      uri : Windows.Foundation.Uri'Class
   )
   return HttpRequestMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpRequestMessage");
      m_Factory    : access IHttpRequestMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : HttpRequestMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpRequestMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (method.m_IHttpMethod.all, uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
            Retval.m_IHttpRequestMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return HttpRequestMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpRequestMessage");
      m_ComRetVal  : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : HttpRequestMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
            Retval.m_IHttpRequestMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpRequestMessage

   function get_Content
   (
      this : in out HttpRequestMessage
   )
   return WinRt.Windows.Web.Http.IHttpContent is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpContent;
   begin
      Hr := this.m_IHttpRequestMessage.all.get_Content (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Content
   (
      this : in out HttpRequestMessage;
      value : Windows.Web.Http.IHttpContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestMessage.all.put_Content (value);
   end;

   function get_Headers
   (
      this : in out HttpRequestMessage
   )
   return WinRt.Windows.Web.Http.Headers.HttpRequestHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpRequestHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpRequestHeaderCollection do
         Hr := this.m_IHttpRequestMessage.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpRequestHeaderCollection := new Windows.Web.Http.Headers.IHttpRequestHeaderCollection;
         Retval.m_IHttpRequestHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Method
   (
      this : in out HttpRequestMessage
   )
   return WinRt.Windows.Web.Http.HttpMethod'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         Hr := this.m_IHttpRequestMessage.all.get_Method (m_ComRetVal'Access);
         Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
         Retval.m_IHttpMethod.all := m_ComRetVal;
      end return;
   end;

   procedure put_Method
   (
      this : in out HttpRequestMessage;
      value : Windows.Web.Http.HttpMethod'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestMessage.all.put_Method (value.m_IHttpMethod.all);
   end;

   function get_Properties
   (
      this : in out HttpRequestMessage
   )
   return IMap_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_IInspectable.Kind;
   begin
      Hr := this.m_IHttpRequestMessage.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RequestUri
   (
      this : in out HttpRequestMessage
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHttpRequestMessage.all.get_RequestUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_RequestUri
   (
      this : in out HttpRequestMessage;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestMessage.all.put_RequestUri (value.m_IUriRuntimeClass.all);
   end;

   function get_TransportInformation
   (
      this : in out HttpRequestMessage
   )
   return WinRt.Windows.Web.Http.HttpTransportInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpTransportInformation;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpTransportInformation do
         Hr := this.m_IHttpRequestMessage.all.get_TransportInformation (m_ComRetVal'Access);
         Retval.m_IHttpTransportInformation := new Windows.Web.Http.IHttpTransportInformation;
         Retval.m_IHttpTransportInformation.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out HttpRequestMessage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpRequestMessage_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestMessage.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpRequestMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpRequestMessage_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestMessage.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpRequestResult

   procedure Initialize (this : in out HttpRequestResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpRequestResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpRequestResult, IHttpRequestResult_Ptr);
   begin
      if this.m_IHttpRequestResult /= null then
         if this.m_IHttpRequestResult.all /= null then
            RefCount := this.m_IHttpRequestResult.all.Release;
            Free (this.m_IHttpRequestResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpRequestResult

   function get_ExtendedError
   (
      this : in out HttpRequestResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IHttpRequestResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestMessage
   (
      this : in out HttpRequestResult
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IHttpRequestResult.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ResponseMessage
   (
      this : in out HttpRequestResult
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpRequestResult.all.get_ResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_Succeeded
   (
      this : in out HttpRequestResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpRequestResult.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out HttpRequestResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpRequestResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpRequestResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpRequestResult_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestResult.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpResponseMessage

   procedure Initialize (this : in out HttpResponseMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpResponseMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpResponseMessage, IHttpResponseMessage_Ptr);
   begin
      if this.m_IHttpResponseMessage /= null then
         if this.m_IHttpResponseMessage.all /= null then
            RefCount := this.m_IHttpResponseMessage.all.Release;
            Free (this.m_IHttpResponseMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpResponseMessage

   function Constructor
   (
      statusCode : Windows.Web.Http.HttpStatusCode
   )
   return HttpResponseMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpResponseMessage");
      m_Factory    : access IHttpResponseMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : HttpResponseMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpResponseMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (statusCode, m_ComRetVal'Access);
            Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
            Retval.m_IHttpResponseMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return HttpResponseMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpResponseMessage");
      m_ComRetVal  : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : HttpResponseMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
            Retval.m_IHttpResponseMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpResponseMessage

   function get_Content
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.IHttpContent is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpContent;
   begin
      Hr := this.m_IHttpResponseMessage.all.get_Content (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Content
   (
      this : in out HttpResponseMessage;
      value : Windows.Web.Http.IHttpContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseMessage.all.put_Content (value);
   end;

   function get_Headers
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.Headers.HttpResponseHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpResponseHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpResponseHeaderCollection do
         Hr := this.m_IHttpResponseMessage.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpResponseHeaderCollection := new Windows.Web.Http.Headers.IHttpResponseHeaderCollection;
         Retval.m_IHttpResponseHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function get_IsSuccessStatusCode
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpResponseMessage.all.get_IsSuccessStatusCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReasonPhrase
   (
      this : in out HttpResponseMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpResponseMessage.all.get_ReasonPhrase (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ReasonPhrase
   (
      this : in out HttpResponseMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpResponseMessage.all.put_ReasonPhrase (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RequestMessage
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IHttpResponseMessage.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   procedure put_RequestMessage
   (
      this : in out HttpResponseMessage;
      value : Windows.Web.Http.HttpRequestMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseMessage.all.put_RequestMessage (value.m_IHttpRequestMessage.all);
   end;

   function get_Source
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.HttpResponseMessageSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.HttpResponseMessageSource;
   begin
      Hr := this.m_IHttpResponseMessage.all.get_Source (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Source
   (
      this : in out HttpResponseMessage;
      value : Windows.Web.Http.HttpResponseMessageSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseMessage.all.put_Source (value);
   end;

   function get_StatusCode
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.HttpStatusCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.HttpStatusCode;
   begin
      Hr := this.m_IHttpResponseMessage.all.get_StatusCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StatusCode
   (
      this : in out HttpResponseMessage;
      value : Windows.Web.Http.HttpStatusCode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseMessage.all.put_StatusCode (value);
   end;

   function get_Version
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.HttpVersion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.HttpVersion;
   begin
      Hr := this.m_IHttpResponseMessage.all.get_Version (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Version
   (
      this : in out HttpResponseMessage;
      value : Windows.Web.Http.HttpVersion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseMessage.all.put_Version (value);
   end;

   function EnsureSuccessStatusCode
   (
      this : in out HttpResponseMessage
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IHttpResponseMessage.all.EnsureSuccessStatusCode (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out HttpResponseMessage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpResponseMessage_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseMessage.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpResponseMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpResponseMessage_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseMessage.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpStreamContent

   procedure Initialize (this : in out HttpStreamContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpStreamContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContent, IHttpContent_Ptr);
   begin
      if this.m_IHttpContent /= null then
         if this.m_IHttpContent.all /= null then
            RefCount := this.m_IHttpContent.all.Release;
            Free (this.m_IHttpContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpStreamContent

   function Constructor
   (
      content : Windows.Storage.Streams.IInputStream
   )
   return HttpStreamContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpStreamContent");
      m_Factory    : access IHttpStreamContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
   begin
      return RetVal : HttpStreamContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpStreamContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromInputStream (content, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpStreamContent

   function get_Headers
   (
      this : in out HttpStreamContent
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection do
         Hr := this.m_IHttpContent.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
         Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function BufferAllAsync
   (
      this : in out HttpStreamContent
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.BufferAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsBufferAsync
   (
      this : in out HttpStreamContent
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2912292479, 55099, 22244, (165, 140, 110, 199, 103, 140, 253, 136 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2882015797, 14791, 22975, (153, 72, 45, 20, 169, 61, 64, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsBufferAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsInputStreamAsync
   (
      this : in out HttpStreamContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (1163568641, 61758, 24046, (185, 203, 22, 181, 49, 153, 99, 39 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (2377553670, 15825, 23080, (152, 106, 147, 190, 7, 118, 217, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsInputStreamAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsStringAsync
   (
      this : in out HttpStreamContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (3367750441, 27492, 23778, (168, 49, 3, 143, 110, 2, 25, 158 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3178622654, 59317, 23286, (132, 21, 164, 185, 201, 4, 82, 2 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsStringAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryComputeLength
   (
      this : in out HttpStreamContent;
      length : WinRt.UInt64_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpContent.all.TryComputeLength (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteToStreamAsync
   (
      this : in out HttpStreamContent;
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.WriteToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out HttpStreamContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpStreamContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpStringContent

   procedure Initialize (this : in out HttpStringContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpStringContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContent, IHttpContent_Ptr);
   begin
      if this.m_IHttpContent /= null then
         if this.m_IHttpContent.all /= null then
            RefCount := this.m_IHttpContent.all.Release;
            Free (this.m_IHttpContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpStringContent

   function Constructor
   (
      content : WinRt.WString
   )
   return HttpStringContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpStringContent");
      m_Factory    : access IHttpStringContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
      HStr_content : WinRt.HString := To_HString (content);
   begin
      return RetVal : HttpStringContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpStringContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromString (HStr_content, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_content);
      end return;
   end;

   function Constructor
   (
      content : WinRt.WString;
      encoding : Windows.Storage.Streams.UnicodeEncoding
   )
   return HttpStringContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpStringContent");
      m_Factory    : access IHttpStringContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
      HStr_content : WinRt.HString := To_HString (content);
   begin
      return RetVal : HttpStringContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpStringContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStringWithEncoding (HStr_content, encoding, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_content);
      end return;
   end;

   function Constructor
   (
      content : WinRt.WString;
      encoding : Windows.Storage.Streams.UnicodeEncoding;
      mediaType : WinRt.WString
   )
   return HttpStringContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.HttpStringContent");
      m_Factory    : access IHttpStringContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.IHttpContent;
      HStr_content : WinRt.HString := To_HString (content);
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
   begin
      return RetVal : HttpStringContent do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpStringContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStringWithEncodingAndMediaType (HStr_content, encoding, HStr_mediaType, m_ComRetVal'Access);
            Retval.m_IHttpContent := new Windows.Web.Http.IHttpContent;
            Retval.m_IHttpContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_content);
         Hr := WindowsDeleteString (HStr_mediaType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpStringContent

   function get_Headers
   (
      this : in out HttpStringContent
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentHeaderCollection do
         Hr := this.m_IHttpContent.all.get_Headers (m_ComRetVal'Access);
         Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
         Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
      end return;
   end;

   function BufferAllAsync
   (
      this : in out HttpStringContent
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.BufferAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsBufferAsync
   (
      this : in out HttpStringContent
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (2912292479, 55099, 22244, (165, 140, 110, 199, 103, 140, 253, 136 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (2882015797, 14791, 22975, (153, 72, 45, 20, 169, 61, 64, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsBufferAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsInputStreamAsync
   (
      this : in out HttpStringContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (1163568641, 61758, 24046, (185, 203, 22, 181, 49, 153, 99, 39 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (2377553670, 15825, 23080, (152, 106, 147, 190, 7, 118, 217, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsInputStreamAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadAsStringAsync
   (
      this : in out HttpStringContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (3367750441, 27492, 23778, (168, 49, 3, 143, 110, 2, 25, 158 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3178622654, 59317, 23286, (132, 21, 164, 185, 201, 4, 82, 2 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.ReadAsStringAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryComputeLength
   (
      this : in out HttpStringContent;
      length : WinRt.UInt64_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpContent.all.TryComputeLength (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteToStreamAsync
   (
      this : in out HttpStringContent;
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt64.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt64;
      m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
      m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHttpContent.all.WriteToStreamAsync (outputStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out HttpStringContent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpStringContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpContent_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContent.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpTransportInformation

   procedure Initialize (this : in out HttpTransportInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpTransportInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpTransportInformation, IHttpTransportInformation_Ptr);
   begin
      if this.m_IHttpTransportInformation /= null then
         if this.m_IHttpTransportInformation.all /= null then
            RefCount := this.m_IHttpTransportInformation.all.Release;
            Free (this.m_IHttpTransportInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpTransportInformation

   function get_ServerCertificate
   (
      this : in out HttpTransportInformation
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IHttpTransportInformation.all.get_ServerCertificate (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_ServerCertificateErrorSeverity
   (
      this : in out HttpTransportInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
   begin
      Hr := this.m_IHttpTransportInformation.all.get_ServerCertificateErrorSeverity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrors
   (
      this : in out HttpTransportInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHttpTransportInformation.all.get_ServerCertificateErrors (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerIntermediateCertificates
   (
      this : in out HttpTransportInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHttpTransportInformation.all.get_ServerIntermediateCertificates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpTransportInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.IHttpTransportInformation_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransportInformation.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

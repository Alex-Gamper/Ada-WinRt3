--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Transcoding is

   package IAsyncOperation_PrepareTranscodeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Transcoding.IPrepareTranscodeResult);
   package AsyncOperationCompletedHandler_PrepareTranscodeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Transcoding.IPrepareTranscodeResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaTranscoder

   procedure Initialize (this : in out MediaTranscoder) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaTranscoder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTranscoder, IMediaTranscoder_Ptr);
   begin
      if this.m_IMediaTranscoder /= null then
         if this.m_IMediaTranscoder.all /= null then
            RefCount := this.m_IMediaTranscoder.all.Release;
            Free (this.m_IMediaTranscoder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaTranscoder

   function Constructor return MediaTranscoder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Transcoding.MediaTranscoder");
      m_ComRetVal  : aliased Windows.Media.Transcoding.IMediaTranscoder;
   begin
      return RetVal : MediaTranscoder do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaTranscoder := new Windows.Media.Transcoding.IMediaTranscoder;
            Retval.m_IMediaTranscoder.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaTranscoder

   procedure put_TrimStartTime
   (
      this : in out MediaTranscoder;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTranscoder.all.put_TrimStartTime (value);
   end;

   function get_TrimStartTime
   (
      this : in out MediaTranscoder
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaTranscoder.all.get_TrimStartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimStopTime
   (
      this : in out MediaTranscoder;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTranscoder.all.put_TrimStopTime (value);
   end;

   function get_TrimStopTime
   (
      this : in out MediaTranscoder
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaTranscoder.all.get_TrimStopTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AlwaysReencode
   (
      this : in out MediaTranscoder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTranscoder.all.put_AlwaysReencode (value);
   end;

   function get_AlwaysReencode
   (
      this : in out MediaTranscoder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaTranscoder.all.get_AlwaysReencode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HardwareAccelerationEnabled
   (
      this : in out MediaTranscoder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTranscoder.all.put_HardwareAccelerationEnabled (value);
   end;

   function get_HardwareAccelerationEnabled
   (
      this : in out MediaTranscoder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaTranscoder.all.get_HardwareAccelerationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AddAudioEffect
   (
      this : in out MediaTranscoder;
      activatableClassId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaTranscoder.all.AddAudioEffect (HStr_activatableClassId);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure AddAudioEffect
   (
      this : in out MediaTranscoder;
      activatableClassId : WinRt.WString;
      effectRequired : WinRt.Boolean;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaTranscoder.all.AddAudioEffect (HStr_activatableClassId, effectRequired, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure AddVideoEffect
   (
      this : in out MediaTranscoder;
      activatableClassId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaTranscoder.all.AddVideoEffect (HStr_activatableClassId);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure AddVideoEffect
   (
      this : in out MediaTranscoder;
      activatableClassId : WinRt.WString;
      effectRequired : WinRt.Boolean;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaTranscoder.all.AddVideoEffect (HStr_activatableClassId, effectRequired, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure ClearEffects
   (
      this : in out MediaTranscoder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTranscoder.all.ClearEffects;
   end;

   function PrepareFileTranscodeAsync
   (
      this : in out MediaTranscoder;
      source : Windows.Storage.IStorageFile;
      destination : Windows.Storage.IStorageFile;
      profile : Windows.Media.MediaProperties.MediaEncodingProfile'Class
   )
   return WinRt.Windows.Media.Transcoding.PrepareTranscodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PrepareTranscodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PrepareTranscodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.IPrepareTranscodeResult;
      m_IID            : aliased WinRt.IID := (4126178323, 12359, 23467, (142, 183, 110, 93, 125, 20, 175, 174 )); -- Windows.Media.Transcoding.PrepareTranscodeResult;
      m_HandlerIID     : aliased WinRt.IID := (2756541703, 36724, 21230, (159, 2, 194, 178, 68, 180, 255, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind := new AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PrepareTranscodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind_Delegate, AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Transcoding.PrepareTranscodeResult do
         Hr := this.m_IMediaTranscoder.all.PrepareFileTranscodeAsync (source, destination, profile.m_IMediaEncodingProfile.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPrepareTranscodeResult := new Windows.Media.Transcoding.IPrepareTranscodeResult;
                  Retval.m_IPrepareTranscodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PrepareStreamTranscodeAsync
   (
      this : in out MediaTranscoder;
      source : Windows.Storage.Streams.IRandomAccessStream;
      destination : Windows.Storage.Streams.IRandomAccessStream;
      profile : Windows.Media.MediaProperties.MediaEncodingProfile'Class
   )
   return WinRt.Windows.Media.Transcoding.PrepareTranscodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PrepareTranscodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PrepareTranscodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.IPrepareTranscodeResult;
      m_IID            : aliased WinRt.IID := (4126178323, 12359, 23467, (142, 183, 110, 93, 125, 20, 175, 174 )); -- Windows.Media.Transcoding.PrepareTranscodeResult;
      m_HandlerIID     : aliased WinRt.IID := (2756541703, 36724, 21230, (159, 2, 194, 178, 68, 180, 255, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind := new AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PrepareTranscodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind_Delegate, AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Transcoding.PrepareTranscodeResult do
         Hr := this.m_IMediaTranscoder.all.PrepareStreamTranscodeAsync (source, destination, profile.m_IMediaEncodingProfile.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPrepareTranscodeResult := new Windows.Media.Transcoding.IPrepareTranscodeResult;
                  Retval.m_IPrepareTranscodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PrepareMediaStreamSourceTranscodeAsync
   (
      this : in out MediaTranscoder;
      source : Windows.Media.Core.IMediaSource;
      destination : Windows.Storage.Streams.IRandomAccessStream;
      profile : Windows.Media.MediaProperties.MediaEncodingProfile'Class
   )
   return WinRt.Windows.Media.Transcoding.PrepareTranscodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Transcoding.IMediaTranscoder2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PrepareTranscodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PrepareTranscodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.IPrepareTranscodeResult;
      m_IID            : aliased WinRt.IID := (4126178323, 12359, 23467, (142, 183, 110, 93, 125, 20, 175, 174 )); -- Windows.Media.Transcoding.PrepareTranscodeResult;
      m_HandlerIID     : aliased WinRt.IID := (2756541703, 36724, 21230, (159, 2, 194, 178, 68, 180, 255, 42 ));
      m_Handler        : AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind := new AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PrepareTranscodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind_Delegate, AsyncOperationCompletedHandler_PrepareTranscodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Transcoding.IMediaTranscoder_Interface, WinRt.Windows.Media.Transcoding.IMediaTranscoder2, WinRt.Windows.Media.Transcoding.IID_IMediaTranscoder2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Transcoding.PrepareTranscodeResult do
         m_Interface := QInterface (this.m_IMediaTranscoder.all);
         Hr := m_Interface.PrepareMediaStreamSourceTranscodeAsync (source, destination, profile.m_IMediaEncodingProfile.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPrepareTranscodeResult := new Windows.Media.Transcoding.IPrepareTranscodeResult;
                  Retval.m_IPrepareTranscodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure put_VideoProcessingAlgorithm
   (
      this : in out MediaTranscoder;
      value : Windows.Media.Transcoding.MediaVideoProcessingAlgorithm
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Transcoding.IMediaTranscoder2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Transcoding.IMediaTranscoder_Interface, WinRt.Windows.Media.Transcoding.IMediaTranscoder2, WinRt.Windows.Media.Transcoding.IID_IMediaTranscoder2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTranscoder.all);
      Hr := m_Interface.put_VideoProcessingAlgorithm (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_VideoProcessingAlgorithm
   (
      this : in out MediaTranscoder
   )
   return WinRt.Windows.Media.Transcoding.MediaVideoProcessingAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Transcoding.IMediaTranscoder2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Transcoding.MediaVideoProcessingAlgorithm;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Transcoding.IMediaTranscoder_Interface, WinRt.Windows.Media.Transcoding.IMediaTranscoder2, WinRt.Windows.Media.Transcoding.IID_IMediaTranscoder2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTranscoder.all);
      Hr := m_Interface.get_VideoProcessingAlgorithm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrepareTranscodeResult

   procedure Initialize (this : in out PrepareTranscodeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrepareTranscodeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrepareTranscodeResult, IPrepareTranscodeResult_Ptr);
   begin
      if this.m_IPrepareTranscodeResult /= null then
         if this.m_IPrepareTranscodeResult.all /= null then
            RefCount := this.m_IPrepareTranscodeResult.all.Release;
            Free (this.m_IPrepareTranscodeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrepareTranscodeResult

   function get_CanTranscode
   (
      this : in out PrepareTranscodeResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPrepareTranscodeResult.all.get_CanTranscode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FailureReason
   (
      this : in out PrepareTranscodeResult
   )
   return WinRt.Windows.Media.Transcoding.TranscodeFailureReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Transcoding.TranscodeFailureReason;
   begin
      Hr := this.m_IPrepareTranscodeResult.all.get_FailureReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure TranscodeAsync
   (
      this : in out PrepareTranscodeResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPrepareTranscodeResult.all.TranscodeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

end;

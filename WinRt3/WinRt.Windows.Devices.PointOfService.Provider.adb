--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.PointOfService.Provider is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_BarcodeScannerVideoFrame is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerVideoFrame);
   package AsyncOperationCompletedHandler_BarcodeScannerVideoFrame is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerVideoFrame);

   package IAsyncOperation_BarcodeScannerFrameReader is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader);
   package AsyncOperationCompletedHandler_BarcodeScannerFrameReader is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerDisableScannerRequest

   procedure Initialize (this : in out BarcodeScannerDisableScannerRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerDisableScannerRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerDisableScannerRequest, IBarcodeScannerDisableScannerRequest_Ptr);
   begin
      if this.m_IBarcodeScannerDisableScannerRequest /= null then
         if this.m_IBarcodeScannerDisableScannerRequest.all /= null then
            RefCount := this.m_IBarcodeScannerDisableScannerRequest.all.Release;
            Free (this.m_IBarcodeScannerDisableScannerRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerDisableScannerRequest

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerDisableScannerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerDisableScannerRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerDisableScannerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerDisableScannerRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerDisableScannerRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerDisableScannerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerDisableScannerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerDisableScannerRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerDisableScannerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerDisableScannerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerDisableScannerRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerDisableScannerRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerDisableScannerRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerDisableScannerRequestEventArgs, IBarcodeScannerDisableScannerRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerDisableScannerRequestEventArgs /= null then
         if this.m_IBarcodeScannerDisableScannerRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerDisableScannerRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerDisableScannerRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerDisableScannerRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerDisableScannerRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerDisableScannerRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerDisableScannerRequest do
         Hr := this.m_IBarcodeScannerDisableScannerRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerDisableScannerRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerDisableScannerRequest;
         Retval.m_IBarcodeScannerDisableScannerRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerDisableScannerRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerDisableScannerRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerEnableScannerRequest

   procedure Initialize (this : in out BarcodeScannerEnableScannerRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerEnableScannerRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerEnableScannerRequest, IBarcodeScannerEnableScannerRequest_Ptr);
   begin
      if this.m_IBarcodeScannerEnableScannerRequest /= null then
         if this.m_IBarcodeScannerEnableScannerRequest.all /= null then
            RefCount := this.m_IBarcodeScannerEnableScannerRequest.all.Release;
            Free (this.m_IBarcodeScannerEnableScannerRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerEnableScannerRequest

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerEnableScannerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerEnableScannerRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerEnableScannerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerEnableScannerRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerEnableScannerRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerEnableScannerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerEnableScannerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerEnableScannerRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerEnableScannerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerEnableScannerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerEnableScannerRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerEnableScannerRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerEnableScannerRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerEnableScannerRequestEventArgs, IBarcodeScannerEnableScannerRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerEnableScannerRequestEventArgs /= null then
         if this.m_IBarcodeScannerEnableScannerRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerEnableScannerRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerEnableScannerRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerEnableScannerRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerEnableScannerRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerEnableScannerRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerEnableScannerRequest do
         Hr := this.m_IBarcodeScannerEnableScannerRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerEnableScannerRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerEnableScannerRequest;
         Retval.m_IBarcodeScannerEnableScannerRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerEnableScannerRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerEnableScannerRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerFrameReader

   procedure Initialize (this : in out BarcodeScannerFrameReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerFrameReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerFrameReader, IBarcodeScannerFrameReader_Ptr);
   begin
      if this.m_IBarcodeScannerFrameReader /= null then
         if this.m_IBarcodeScannerFrameReader.all /= null then
            RefCount := this.m_IBarcodeScannerFrameReader.all.Release;
            Free (this.m_IBarcodeScannerFrameReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerFrameReader

   function StartAsync
   (
      this : in out BarcodeScannerFrameReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IBarcodeScannerFrameReader.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure StopAsync
   (
      this : in out BarcodeScannerFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerFrameReader.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function TryAcquireLatestFrameAsync
   (
      this : in out BarcodeScannerFrameReader
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerVideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeScannerVideoFrame.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeScannerVideoFrame.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerVideoFrame;
      m_IID            : aliased WinRt.IID := (870855067, 11221, 20526, (150, 244, 100, 101, 69, 108, 161, 58 )); -- Windows.Devices.PointOfService.Provider.BarcodeScannerVideoFrame;
      m_HandlerIID     : aliased WinRt.IID := (537188479, 28279, 22104, (144, 146, 146, 163, 241, 204, 228, 196 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeScannerVideoFrame.Kind := new AsyncOperationCompletedHandler_BarcodeScannerVideoFrame.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeScannerVideoFrame.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeScannerVideoFrame.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeScannerVideoFrame.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeScannerVideoFrame.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerVideoFrame do
         Hr := this.m_IBarcodeScannerFrameReader.all.TryAcquireLatestFrameAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBarcodeScannerVideoFrame := new Windows.Devices.PointOfService.Provider.IBarcodeScannerVideoFrame;
                  Retval.m_IBarcodeScannerVideoFrame.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Connection
   (
      this : in out BarcodeScannerFrameReader
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection do
         Hr := this.m_IBarcodeScannerFrameReader.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerProviderConnection := new Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection;
         Retval.m_IBarcodeScannerProviderConnection.all := m_ComRetVal;
      end return;
   end;

   function add_FrameArrived
   (
      this : in out BarcodeScannerFrameReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerFrameReader.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out BarcodeScannerFrameReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerFrameReader.all.remove_FrameArrived (token);
   end;

   procedure Close
   (
      this : in out BarcodeScannerFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerFrameReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerFrameReaderFrameArrivedEventArgs

   procedure Initialize (this : in out BarcodeScannerFrameReaderFrameArrivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerFrameReaderFrameArrivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerFrameReaderFrameArrivedEventArgs, IBarcodeScannerFrameReaderFrameArrivedEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerFrameReaderFrameArrivedEventArgs /= null then
         if this.m_IBarcodeScannerFrameReaderFrameArrivedEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerFrameReaderFrameArrivedEventArgs.all.Release;
            Free (this.m_IBarcodeScannerFrameReaderFrameArrivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerFrameReaderFrameArrivedEventArgs

   function GetDeferral
   (
      this : in out BarcodeScannerFrameReaderFrameArrivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerFrameReaderFrameArrivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerGetSymbologyAttributesRequest

   procedure Initialize (this : in out BarcodeScannerGetSymbologyAttributesRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerGetSymbologyAttributesRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerGetSymbologyAttributesRequest, IBarcodeScannerGetSymbologyAttributesRequest_Ptr);
   begin
      if this.m_IBarcodeScannerGetSymbologyAttributesRequest /= null then
         if this.m_IBarcodeScannerGetSymbologyAttributesRequest.all /= null then
            RefCount := this.m_IBarcodeScannerGetSymbologyAttributesRequest.all.Release;
            Free (this.m_IBarcodeScannerGetSymbologyAttributesRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerGetSymbologyAttributesRequest

   function get_Symbology
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeScannerGetSymbologyAttributesRequest.all.get_Symbology (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequest;
      attributes : Windows.Devices.PointOfService.BarcodeSymbologyAttributes'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerGetSymbologyAttributesRequest.all.ReportCompletedAsync (attributes.m_IBarcodeSymbologyAttributes.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerGetSymbologyAttributesRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerGetSymbologyAttributesRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerGetSymbologyAttributesRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerGetSymbologyAttributesRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerGetSymbologyAttributesRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerGetSymbologyAttributesRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerGetSymbologyAttributesRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerGetSymbologyAttributesRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerGetSymbologyAttributesRequestEventArgs, IBarcodeScannerGetSymbologyAttributesRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerGetSymbologyAttributesRequestEventArgs /= null then
         if this.m_IBarcodeScannerGetSymbologyAttributesRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerGetSymbologyAttributesRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerGetSymbologyAttributesRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerGetSymbologyAttributesRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerGetSymbologyAttributesRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerGetSymbologyAttributesRequest do
         Hr := this.m_IBarcodeScannerGetSymbologyAttributesRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerGetSymbologyAttributesRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerGetSymbologyAttributesRequest;
         Retval.m_IBarcodeScannerGetSymbologyAttributesRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerGetSymbologyAttributesRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerGetSymbologyAttributesRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerHideVideoPreviewRequest

   procedure Initialize (this : in out BarcodeScannerHideVideoPreviewRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerHideVideoPreviewRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerHideVideoPreviewRequest, IBarcodeScannerHideVideoPreviewRequest_Ptr);
   begin
      if this.m_IBarcodeScannerHideVideoPreviewRequest /= null then
         if this.m_IBarcodeScannerHideVideoPreviewRequest.all /= null then
            RefCount := this.m_IBarcodeScannerHideVideoPreviewRequest.all.Release;
            Free (this.m_IBarcodeScannerHideVideoPreviewRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerHideVideoPreviewRequest

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerHideVideoPreviewRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerHideVideoPreviewRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerHideVideoPreviewRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerHideVideoPreviewRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerHideVideoPreviewRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerHideVideoPreviewRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerHideVideoPreviewRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerHideVideoPreviewRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerHideVideoPreviewRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerHideVideoPreviewRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerHideVideoPreviewRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerHideVideoPreviewRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerHideVideoPreviewRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerHideVideoPreviewRequestEventArgs, IBarcodeScannerHideVideoPreviewRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerHideVideoPreviewRequestEventArgs /= null then
         if this.m_IBarcodeScannerHideVideoPreviewRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerHideVideoPreviewRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerHideVideoPreviewRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerHideVideoPreviewRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerHideVideoPreviewRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerHideVideoPreviewRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerHideVideoPreviewRequest do
         Hr := this.m_IBarcodeScannerHideVideoPreviewRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerHideVideoPreviewRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerHideVideoPreviewRequest;
         Retval.m_IBarcodeScannerHideVideoPreviewRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerHideVideoPreviewRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerHideVideoPreviewRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerProviderConnection

   procedure Initialize (this : in out BarcodeScannerProviderConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerProviderConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerProviderConnection, IBarcodeScannerProviderConnection_Ptr);
   begin
      if this.m_IBarcodeScannerProviderConnection /= null then
         if this.m_IBarcodeScannerProviderConnection.all /= null then
            RefCount := this.m_IBarcodeScannerProviderConnection.all.Release;
            Free (this.m_IBarcodeScannerProviderConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerProviderConnection

   function get_Id
   (
      this : in out BarcodeScannerProviderConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_VideoDeviceId
   (
      this : in out BarcodeScannerProviderConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.get_VideoDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportedSymbologies
   (
      this : in out BarcodeScannerProviderConnection
   )
   return IVector_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_UInt32.Kind;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.get_SupportedSymbologies (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CompanyName
   (
      this : in out BarcodeScannerProviderConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.get_CompanyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CompanyName
   (
      this : in out BarcodeScannerProviderConnection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.put_CompanyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out BarcodeScannerProviderConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out BarcodeScannerProviderConnection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Version
   (
      this : in out BarcodeScannerProviderConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.get_Version (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Version
   (
      this : in out BarcodeScannerProviderConnection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.put_Version (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure Start
   (
      this : in out BarcodeScannerProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.Start;
   end;

   procedure ReportScannedDataAsync
   (
      this : in out BarcodeScannerProviderConnection;
      report : Windows.Devices.PointOfService.BarcodeScannerReport'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.ReportScannedDataAsync (report.m_IBarcodeScannerReport.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportTriggerStateAsync
   (
      this : in out BarcodeScannerProviderConnection;
      state : Windows.Devices.PointOfService.Provider.BarcodeScannerTriggerState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.ReportTriggerStateAsync (state, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportErrorAsync
   (
      this : in out BarcodeScannerProviderConnection;
      errorData : Windows.Devices.PointOfService.UnifiedPosErrorData'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.ReportErrorAsync (errorData.m_IUnifiedPosErrorData.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportErrorAsync
   (
      this : in out BarcodeScannerProviderConnection;
      errorData : Windows.Devices.PointOfService.UnifiedPosErrorData'Class;
      isRetriable : WinRt.Boolean;
      scanReport : Windows.Devices.PointOfService.BarcodeScannerReport'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.ReportErrorAsync (errorData.m_IUnifiedPosErrorData.all, isRetriable, scanReport.m_IBarcodeScannerReport.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_EnableScannerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_EnableScannerRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnableScannerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_EnableScannerRequested (token);
   end;

   function add_DisableScannerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_DisableScannerRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DisableScannerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_DisableScannerRequested (token);
   end;

   function add_SetActiveSymbologiesRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_SetActiveSymbologiesRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SetActiveSymbologiesRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_SetActiveSymbologiesRequested (token);
   end;

   function add_StartSoftwareTriggerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_StartSoftwareTriggerRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StartSoftwareTriggerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_StartSoftwareTriggerRequested (token);
   end;

   function add_StopSoftwareTriggerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_StopSoftwareTriggerRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StopSoftwareTriggerRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_StopSoftwareTriggerRequested (token);
   end;

   function add_GetBarcodeSymbologyAttributesRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_GetBarcodeSymbologyAttributesRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GetBarcodeSymbologyAttributesRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_GetBarcodeSymbologyAttributesRequested (token);
   end;

   function add_SetBarcodeSymbologyAttributesRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_SetBarcodeSymbologyAttributesRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SetBarcodeSymbologyAttributesRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_SetBarcodeSymbologyAttributesRequested (token);
   end;

   function add_HideVideoPreviewRequested
   (
      this : in out BarcodeScannerProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.add_HideVideoPreviewRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HideVideoPreviewRequested
   (
      this : in out BarcodeScannerProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeScannerProviderConnection.all.remove_HideVideoPreviewRequested (token);
   end;

   function CreateFrameReaderAsync
   (
      this : in out BarcodeScannerProviderConnection
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeScannerFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeScannerFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader;
      m_IID            : aliased WinRt.IID := (3218880293, 63376, 21666, (131, 5, 137, 148, 176, 151, 158, 10 )); -- Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (673898014, 57341, 24176, (162, 158, 122, 81, 79, 194, 215, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind := new AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeScannerFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerProviderConnection2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader do
         m_Interface := QInterface (this.m_IBarcodeScannerProviderConnection.all);
         Hr := m_Interface.CreateFrameReaderAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBarcodeScannerFrameReader := new Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader;
                  Retval.m_IBarcodeScannerFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFrameReaderAsync
   (
      this : in out BarcodeScannerProviderConnection;
      preferredFormat : Windows.Graphics.Imaging.BitmapPixelFormat
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeScannerFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeScannerFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader;
      m_IID            : aliased WinRt.IID := (3218880293, 63376, 21666, (131, 5, 137, 148, 176, 151, 158, 10 )); -- Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (673898014, 57341, 24176, (162, 158, 122, 81, 79, 194, 215, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind := new AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeScannerFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerProviderConnection2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader do
         m_Interface := QInterface (this.m_IBarcodeScannerProviderConnection.all);
         Hr := m_Interface.CreateFrameReaderAsync (preferredFormat, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBarcodeScannerFrameReader := new Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader;
                  Retval.m_IBarcodeScannerFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFrameReaderAsync
   (
      this : in out BarcodeScannerProviderConnection;
      preferredFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      preferredSize : Windows.Graphics.Imaging.BitmapSize
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BarcodeScannerFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BarcodeScannerFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader;
      m_IID            : aliased WinRt.IID := (3218880293, 63376, 21666, (131, 5, 137, 148, 176, 151, 158, 10 )); -- Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (673898014, 57341, 24176, (162, 158, 122, 81, 79, 194, 215, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind := new AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BarcodeScannerFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_BarcodeScannerFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerProviderConnection2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerFrameReader do
         m_Interface := QInterface (this.m_IBarcodeScannerProviderConnection.all);
         Hr := m_Interface.CreateFrameReaderAsync (preferredFormat, preferredSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBarcodeScannerFrameReader := new Windows.Devices.PointOfService.Provider.IBarcodeScannerFrameReader;
                  Retval.m_IBarcodeScannerFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Close
   (
      this : in out BarcodeScannerProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerProviderConnection.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerProviderTriggerDetails

   procedure Initialize (this : in out BarcodeScannerProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerProviderTriggerDetails, IBarcodeScannerProviderTriggerDetails_Ptr);
   begin
      if this.m_IBarcodeScannerProviderTriggerDetails /= null then
         if this.m_IBarcodeScannerProviderTriggerDetails.all /= null then
            RefCount := this.m_IBarcodeScannerProviderTriggerDetails.all.Release;
            Free (this.m_IBarcodeScannerProviderTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerProviderTriggerDetails

   function get_Connection
   (
      this : in out BarcodeScannerProviderTriggerDetails
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerProviderConnection do
         Hr := this.m_IBarcodeScannerProviderTriggerDetails.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerProviderConnection := new Windows.Devices.PointOfService.Provider.IBarcodeScannerProviderConnection;
         Retval.m_IBarcodeScannerProviderConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerSetActiveSymbologiesRequest

   procedure Initialize (this : in out BarcodeScannerSetActiveSymbologiesRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerSetActiveSymbologiesRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerSetActiveSymbologiesRequest, IBarcodeScannerSetActiveSymbologiesRequest_Ptr);
   begin
      if this.m_IBarcodeScannerSetActiveSymbologiesRequest /= null then
         if this.m_IBarcodeScannerSetActiveSymbologiesRequest.all /= null then
            RefCount := this.m_IBarcodeScannerSetActiveSymbologiesRequest.all.Release;
            Free (this.m_IBarcodeScannerSetActiveSymbologiesRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerSetActiveSymbologiesRequest

   function get_Symbologies
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequest
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IBarcodeScannerSetActiveSymbologiesRequest.all.get_Symbologies (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerSetActiveSymbologiesRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerSetActiveSymbologiesRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerSetActiveSymbologiesRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerSetActiveSymbologiesRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerSetActiveSymbologiesRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerSetActiveSymbologiesRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerSetActiveSymbologiesRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerSetActiveSymbologiesRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerSetActiveSymbologiesRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerSetActiveSymbologiesRequestEventArgs, IBarcodeScannerSetActiveSymbologiesRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerSetActiveSymbologiesRequestEventArgs /= null then
         if this.m_IBarcodeScannerSetActiveSymbologiesRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerSetActiveSymbologiesRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerSetActiveSymbologiesRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerSetActiveSymbologiesRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerSetActiveSymbologiesRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerSetActiveSymbologiesRequest do
         Hr := this.m_IBarcodeScannerSetActiveSymbologiesRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerSetActiveSymbologiesRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerSetActiveSymbologiesRequest;
         Retval.m_IBarcodeScannerSetActiveSymbologiesRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerSetActiveSymbologiesRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerSetActiveSymbologiesRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerSetSymbologyAttributesRequest

   procedure Initialize (this : in out BarcodeScannerSetSymbologyAttributesRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerSetSymbologyAttributesRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerSetSymbologyAttributesRequest, IBarcodeScannerSetSymbologyAttributesRequest_Ptr);
   begin
      if this.m_IBarcodeScannerSetSymbologyAttributesRequest /= null then
         if this.m_IBarcodeScannerSetSymbologyAttributesRequest.all /= null then
            RefCount := this.m_IBarcodeScannerSetSymbologyAttributesRequest.all.Release;
            Free (this.m_IBarcodeScannerSetSymbologyAttributesRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerSetSymbologyAttributesRequest

   function get_Symbology
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeScannerSetSymbologyAttributesRequest.all.get_Symbology (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequest
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeSymbologyAttributes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IBarcodeSymbologyAttributes;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeSymbologyAttributes do
         Hr := this.m_IBarcodeScannerSetSymbologyAttributesRequest.all.get_Attributes (m_ComRetVal'Access);
         Retval.m_IBarcodeSymbologyAttributes := new Windows.Devices.PointOfService.IBarcodeSymbologyAttributes;
         Retval.m_IBarcodeSymbologyAttributes.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerSetSymbologyAttributesRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerSetSymbologyAttributesRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerSetSymbologyAttributesRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerSetSymbologyAttributesRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerSetSymbologyAttributesRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerSetSymbologyAttributesRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerSetSymbologyAttributesRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerSetSymbologyAttributesRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerSetSymbologyAttributesRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerSetSymbologyAttributesRequestEventArgs, IBarcodeScannerSetSymbologyAttributesRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerSetSymbologyAttributesRequestEventArgs /= null then
         if this.m_IBarcodeScannerSetSymbologyAttributesRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerSetSymbologyAttributesRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerSetSymbologyAttributesRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerSetSymbologyAttributesRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerSetSymbologyAttributesRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerSetSymbologyAttributesRequest do
         Hr := this.m_IBarcodeScannerSetSymbologyAttributesRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerSetSymbologyAttributesRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerSetSymbologyAttributesRequest;
         Retval.m_IBarcodeScannerSetSymbologyAttributesRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerSetSymbologyAttributesRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerSetSymbologyAttributesRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerStartSoftwareTriggerRequest

   procedure Initialize (this : in out BarcodeScannerStartSoftwareTriggerRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerStartSoftwareTriggerRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerStartSoftwareTriggerRequest, IBarcodeScannerStartSoftwareTriggerRequest_Ptr);
   begin
      if this.m_IBarcodeScannerStartSoftwareTriggerRequest /= null then
         if this.m_IBarcodeScannerStartSoftwareTriggerRequest.all /= null then
            RefCount := this.m_IBarcodeScannerStartSoftwareTriggerRequest.all.Release;
            Free (this.m_IBarcodeScannerStartSoftwareTriggerRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerStartSoftwareTriggerRequest

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerStartSoftwareTriggerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerStartSoftwareTriggerRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerStartSoftwareTriggerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerStartSoftwareTriggerRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerStartSoftwareTriggerRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerStartSoftwareTriggerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerStartSoftwareTriggerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerStartSoftwareTriggerRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerStartSoftwareTriggerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerStartSoftwareTriggerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerStartSoftwareTriggerRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerStartSoftwareTriggerRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerStartSoftwareTriggerRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerStartSoftwareTriggerRequestEventArgs, IBarcodeScannerStartSoftwareTriggerRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerStartSoftwareTriggerRequestEventArgs /= null then
         if this.m_IBarcodeScannerStartSoftwareTriggerRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerStartSoftwareTriggerRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerStartSoftwareTriggerRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerStartSoftwareTriggerRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerStartSoftwareTriggerRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerStartSoftwareTriggerRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerStartSoftwareTriggerRequest do
         Hr := this.m_IBarcodeScannerStartSoftwareTriggerRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerStartSoftwareTriggerRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerStartSoftwareTriggerRequest;
         Retval.m_IBarcodeScannerStartSoftwareTriggerRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerStartSoftwareTriggerRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerStartSoftwareTriggerRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerStopSoftwareTriggerRequest

   procedure Initialize (this : in out BarcodeScannerStopSoftwareTriggerRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerStopSoftwareTriggerRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerStopSoftwareTriggerRequest, IBarcodeScannerStopSoftwareTriggerRequest_Ptr);
   begin
      if this.m_IBarcodeScannerStopSoftwareTriggerRequest /= null then
         if this.m_IBarcodeScannerStopSoftwareTriggerRequest.all /= null then
            RefCount := this.m_IBarcodeScannerStopSoftwareTriggerRequest.all.Release;
            Free (this.m_IBarcodeScannerStopSoftwareTriggerRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerStopSoftwareTriggerRequest

   procedure ReportCompletedAsync
   (
      this : in out BarcodeScannerStopSoftwareTriggerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerStopSoftwareTriggerRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerStopSoftwareTriggerRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBarcodeScannerStopSoftwareTriggerRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerStopSoftwareTriggerRequest;
      reason : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerStopSoftwareTriggerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerStopSoftwareTriggerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out BarcodeScannerStopSoftwareTriggerRequest;
      reason : WinRt.Int32;
      failedReasonDescription : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_failedReasonDescription : WinRt.HString := To_HString (failedReasonDescription);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest_Interface, WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest2, WinRt.Windows.Devices.PointOfService.Provider.IID_IBarcodeScannerStopSoftwareTriggerRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerStopSoftwareTriggerRequest.all);
      Hr := m_Interface.ReportFailedAsync (reason, HStr_failedReasonDescription, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_failedReasonDescription);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerStopSoftwareTriggerRequestEventArgs

   procedure Initialize (this : in out BarcodeScannerStopSoftwareTriggerRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerStopSoftwareTriggerRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerStopSoftwareTriggerRequestEventArgs, IBarcodeScannerStopSoftwareTriggerRequestEventArgs_Ptr);
   begin
      if this.m_IBarcodeScannerStopSoftwareTriggerRequestEventArgs /= null then
         if this.m_IBarcodeScannerStopSoftwareTriggerRequestEventArgs.all /= null then
            RefCount := this.m_IBarcodeScannerStopSoftwareTriggerRequestEventArgs.all.Release;
            Free (this.m_IBarcodeScannerStopSoftwareTriggerRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerStopSoftwareTriggerRequestEventArgs

   function get_Request
   (
      this : in out BarcodeScannerStopSoftwareTriggerRequestEventArgs
   )
   return WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerStopSoftwareTriggerRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.Provider.BarcodeScannerStopSoftwareTriggerRequest do
         Hr := this.m_IBarcodeScannerStopSoftwareTriggerRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IBarcodeScannerStopSoftwareTriggerRequest := new Windows.Devices.PointOfService.Provider.IBarcodeScannerStopSoftwareTriggerRequest;
         Retval.m_IBarcodeScannerStopSoftwareTriggerRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out BarcodeScannerStopSoftwareTriggerRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBarcodeScannerStopSoftwareTriggerRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeScannerVideoFrame

   procedure Initialize (this : in out BarcodeScannerVideoFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeScannerVideoFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeScannerVideoFrame, IBarcodeScannerVideoFrame_Ptr);
   begin
      if this.m_IBarcodeScannerVideoFrame /= null then
         if this.m_IBarcodeScannerVideoFrame.all /= null then
            RefCount := this.m_IBarcodeScannerVideoFrame.all.Release;
            Free (this.m_IBarcodeScannerVideoFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeScannerVideoFrame

   function get_Format
   (
      this : in out BarcodeScannerVideoFrame
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_IBarcodeScannerVideoFrame.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Width
   (
      this : in out BarcodeScannerVideoFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeScannerVideoFrame.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out BarcodeScannerVideoFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBarcodeScannerVideoFrame.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelData
   (
      this : in out BarcodeScannerVideoFrame
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBarcodeScannerVideoFrame.all.get_PixelData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out BarcodeScannerVideoFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.PointOfService.Provider.IBarcodeScannerVideoFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBarcodeScannerVideoFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BarcodeSymbologyAttributesBuilder

   procedure Initialize (this : in out BarcodeSymbologyAttributesBuilder) is
   begin
      null;
   end;

   procedure Finalize (this : in out BarcodeSymbologyAttributesBuilder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBarcodeSymbologyAttributesBuilder, IBarcodeSymbologyAttributesBuilder_Ptr);
   begin
      if this.m_IBarcodeSymbologyAttributesBuilder /= null then
         if this.m_IBarcodeSymbologyAttributesBuilder.all /= null then
            RefCount := this.m_IBarcodeSymbologyAttributesBuilder.all.Release;
            Free (this.m_IBarcodeSymbologyAttributesBuilder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BarcodeSymbologyAttributesBuilder

   function Constructor return BarcodeSymbologyAttributesBuilder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.PointOfService.Provider.BarcodeSymbologyAttributesBuilder");
      m_ComRetVal  : aliased Windows.Devices.PointOfService.Provider.IBarcodeSymbologyAttributesBuilder;
   begin
      return RetVal : BarcodeSymbologyAttributesBuilder do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBarcodeSymbologyAttributesBuilder := new Windows.Devices.PointOfService.Provider.IBarcodeSymbologyAttributesBuilder;
            Retval.m_IBarcodeSymbologyAttributesBuilder.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BarcodeSymbologyAttributesBuilder

   function get_IsCheckDigitValidationSupported
   (
      this : in out BarcodeSymbologyAttributesBuilder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.get_IsCheckDigitValidationSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCheckDigitValidationSupported
   (
      this : in out BarcodeSymbologyAttributesBuilder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.put_IsCheckDigitValidationSupported (value);
   end;

   function get_IsCheckDigitTransmissionSupported
   (
      this : in out BarcodeSymbologyAttributesBuilder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.get_IsCheckDigitTransmissionSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCheckDigitTransmissionSupported
   (
      this : in out BarcodeSymbologyAttributesBuilder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.put_IsCheckDigitTransmissionSupported (value);
   end;

   function get_IsDecodeLengthSupported
   (
      this : in out BarcodeSymbologyAttributesBuilder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.get_IsDecodeLengthSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDecodeLengthSupported
   (
      this : in out BarcodeSymbologyAttributesBuilder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.put_IsDecodeLengthSupported (value);
   end;

   function CreateAttributes
   (
      this : in out BarcodeSymbologyAttributesBuilder
   )
   return WinRt.Windows.Devices.PointOfService.BarcodeSymbologyAttributes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.PointOfService.IBarcodeSymbologyAttributes;
   begin
      return RetVal : WinRt.Windows.Devices.PointOfService.BarcodeSymbologyAttributes do
         Hr := this.m_IBarcodeSymbologyAttributesBuilder.all.CreateAttributes (m_ComRetVal'Access);
         Retval.m_IBarcodeSymbologyAttributes := new Windows.Devices.PointOfService.IBarcodeSymbologyAttributes;
         Retval.m_IBarcodeSymbologyAttributes.all := m_ComRetVal;
      end return;
   end;

end;

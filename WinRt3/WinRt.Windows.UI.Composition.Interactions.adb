--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.UI.Input;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Composition.Interactions is

   package IIterable_ICompositionInteractionSource is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.Interactions.ICompositionInteractionSource);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionConditionalValue

   procedure Initialize (this : in out CompositionConditionalValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionConditionalValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionConditionalValue, ICompositionConditionalValue_Ptr);
   begin
      if this.m_ICompositionConditionalValue /= null then
         if this.m_ICompositionConditionalValue.all /= null then
            RefCount := this.m_ICompositionConditionalValue.all.Release;
            Free (this.m_ICompositionConditionalValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositionConditionalValue

   function Create
   (
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.CompositionConditionalValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.CompositionConditionalValue");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.ICompositionConditionalValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.ICompositionConditionalValue;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.CompositionConditionalValue do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositionConditionalValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (compositor.m_ICompositor.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICompositionConditionalValue := new Windows.UI.Composition.Interactions.ICompositionConditionalValue;
            Retval.m_ICompositionConditionalValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionConditionalValue

   function get_Condition
   (
      this : in out CompositionConditionalValue
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_ICompositionConditionalValue.all.get_Condition (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Condition
   (
      this : in out CompositionConditionalValue;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionConditionalValue.all.put_Condition (value.m_IExpressionAnimation.all);
   end;

   function get_Value
   (
      this : in out CompositionConditionalValue
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_ICompositionConditionalValue.all.get_Value (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Value
   (
      this : in out CompositionConditionalValue;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionConditionalValue.all.put_Value (value.m_IExpressionAnimation.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionInteractionSourceCollection

   procedure Initialize (this : in out CompositionInteractionSourceCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionInteractionSourceCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionInteractionSourceCollection, ICompositionInteractionSourceCollection_Ptr);
   begin
      if this.m_ICompositionInteractionSourceCollection /= null then
         if this.m_ICompositionInteractionSourceCollection.all /= null then
            RefCount := this.m_ICompositionInteractionSourceCollection.all.Release;
            Free (this.m_ICompositionInteractionSourceCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionInteractionSourceCollection

   function get_Count
   (
      this : in out CompositionInteractionSourceCollection
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICompositionInteractionSourceCollection.all.get_Count (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Add
   (
      this : in out CompositionInteractionSourceCollection;
      value : Windows.UI.Composition.Interactions.ICompositionInteractionSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionInteractionSourceCollection.all.Add (value);
   end;

   procedure Remove
   (
      this : in out CompositionInteractionSourceCollection;
      value : Windows.UI.Composition.Interactions.ICompositionInteractionSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionInteractionSourceCollection.all.Remove (value);
   end;

   procedure RemoveAll
   (
      this : in out CompositionInteractionSourceCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionInteractionSourceCollection.all.RemoveAll;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.Interactions.ICompositionInteractionSource>
   function First
   (
      this : in out CompositionInteractionSourceCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICompositionInteractionSource.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (398790177, 52080, 23083, (183, 151, 168, 220, 1, 169, 145, 19 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.ICompositionInteractionSourceCollection_Interface, IIterable_ICompositionInteractionSource.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionInteractionSourceCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionSourceConfiguration

   procedure Initialize (this : in out InteractionSourceConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionSourceConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionSourceConfiguration, IInteractionSourceConfiguration_Ptr);
   begin
      if this.m_IInteractionSourceConfiguration /= null then
         if this.m_IInteractionSourceConfiguration.all /= null then
            RefCount := this.m_IInteractionSourceConfiguration.all.Release;
            Free (this.m_IInteractionSourceConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionSourceConfiguration

   function get_PositionXSourceMode
   (
      this : in out InteractionSourceConfiguration
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode;
   begin
      Hr := this.m_IInteractionSourceConfiguration.all.get_PositionXSourceMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionXSourceMode
   (
      this : in out InteractionSourceConfiguration;
      value : Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionSourceConfiguration.all.put_PositionXSourceMode (value);
   end;

   function get_PositionYSourceMode
   (
      this : in out InteractionSourceConfiguration
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode;
   begin
      Hr := this.m_IInteractionSourceConfiguration.all.get_PositionYSourceMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionYSourceMode
   (
      this : in out InteractionSourceConfiguration;
      value : Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionSourceConfiguration.all.put_PositionYSourceMode (value);
   end;

   function get_ScaleSourceMode
   (
      this : in out InteractionSourceConfiguration
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode;
   begin
      Hr := this.m_IInteractionSourceConfiguration.all.get_ScaleSourceMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleSourceMode
   (
      this : in out InteractionSourceConfiguration;
      value : Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionSourceConfiguration.all.put_ScaleSourceMode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTracker

   procedure Initialize (this : in out InteractionTracker) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTracker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTracker, IInteractionTracker_Ptr);
   begin
      if this.m_IInteractionTracker /= null then
         if this.m_IInteractionTracker.all /= null then
            RefCount := this.m_IInteractionTracker.all.Release;
            Free (this.m_IInteractionTracker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for InteractionTracker

   function Create
   (
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionTracker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTracker");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTracker;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionTracker do
         Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (compositor.m_ICompositor.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInteractionTracker := new Windows.UI.Composition.Interactions.IInteractionTracker;
            Retval.m_IInteractionTracker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWithOwner
   (
      compositor : Windows.UI.Composition.Compositor'Class;
      owner : Windows.UI.Composition.Interactions.IInteractionTrackerOwner
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionTracker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTracker");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTracker;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionTracker do
         Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithOwner (compositor.m_ICompositor.all, owner, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInteractionTracker := new Windows.UI.Composition.Interactions.IInteractionTracker;
            Retval.m_IInteractionTracker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetBindingMode
   (
      boundTracker1 : Windows.UI.Composition.Interactions.InteractionTracker'Class;
      boundTracker2 : Windows.UI.Composition.Interactions.InteractionTracker'Class;
      axisMode : Windows.UI.Composition.Interactions.InteractionBindingAxisModes
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTracker");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetBindingMode (boundTracker1.m_IInteractionTracker.all, boundTracker2.m_IInteractionTracker.all, axisMode);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetBindingMode
   (
      boundTracker1 : Windows.UI.Composition.Interactions.InteractionTracker'Class;
      boundTracker2 : Windows.UI.Composition.Interactions.InteractionTracker'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionBindingAxisModes is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTracker");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionBindingAxisModes;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetBindingMode (boundTracker1.m_IInteractionTracker.all, boundTracker2.m_IInteractionTracker.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTracker

   function get_InteractionSources
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.UI.Composition.Interactions.CompositionInteractionSourceCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.ICompositionInteractionSourceCollection;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.CompositionInteractionSourceCollection do
         Hr := this.m_IInteractionTracker.all.get_InteractionSources (m_ComRetVal'Access);
         Retval.m_ICompositionInteractionSourceCollection := new Windows.UI.Composition.Interactions.ICompositionInteractionSourceCollection;
         Retval.m_ICompositionInteractionSourceCollection.all := m_ComRetVal;
      end return;
   end;

   function get_IsPositionRoundingSuggested
   (
      this : in out InteractionTracker
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInteractionTracker.all.get_IsPositionRoundingSuggested (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPosition
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTracker.all.get_MaxPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxPosition
   (
      this : in out InteractionTracker;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.put_MaxPosition (value);
   end;

   function get_MaxScale
   (
      this : in out InteractionTracker
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTracker.all.get_MaxScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxScale
   (
      this : in out InteractionTracker;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.put_MaxScale (value);
   end;

   function get_MinPosition
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTracker.all.get_MinPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinPosition
   (
      this : in out InteractionTracker;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.put_MinPosition (value);
   end;

   function get_MinScale
   (
      this : in out InteractionTracker
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTracker.all.get_MinScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinScale
   (
      this : in out InteractionTracker;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.put_MinScale (value);
   end;

   function get_NaturalRestingPosition
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTracker.all.get_NaturalRestingPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NaturalRestingScale
   (
      this : in out InteractionTracker
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTracker.all.get_NaturalRestingScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Owner
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerOwner is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTrackerOwner;
   begin
      Hr := this.m_IInteractionTracker.all.get_Owner (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTracker.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PositionInertiaDecayRate
   (
      this : in out InteractionTracker
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_IInteractionTracker.all.get_PositionInertiaDecayRate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_PositionInertiaDecayRate
   (
      this : in out InteractionTracker;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.put_PositionInertiaDecayRate (value);
   end;

   function get_PositionVelocityInPixelsPerSecond
   (
      this : in out InteractionTracker
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTracker.all.get_PositionVelocityInPixelsPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Scale
   (
      this : in out InteractionTracker
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTracker.all.get_Scale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScaleInertiaDecayRate
   (
      this : in out InteractionTracker
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IInteractionTracker.all.get_ScaleInertiaDecayRate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ScaleInertiaDecayRate
   (
      this : in out InteractionTracker;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.put_ScaleInertiaDecayRate (value);
   end;

   function get_ScaleVelocityInPercentPerSecond
   (
      this : in out InteractionTracker
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTracker.all.get_ScaleVelocityInPercentPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AdjustPositionXIfGreaterThanThreshold
   (
      this : in out InteractionTracker;
      adjustment : WinRt.Single;
      positionThreshold : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.AdjustPositionXIfGreaterThanThreshold (adjustment, positionThreshold);
   end;

   procedure AdjustPositionYIfGreaterThanThreshold
   (
      this : in out InteractionTracker;
      adjustment : WinRt.Single;
      positionThreshold : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.AdjustPositionYIfGreaterThanThreshold (adjustment, positionThreshold);
   end;

   procedure ConfigurePositionXInertiaModifiers
   (
      this : in out InteractionTracker;
      modifiers : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.ConfigurePositionXInertiaModifiers (modifiers);
   end;

   procedure ConfigurePositionYInertiaModifiers
   (
      this : in out InteractionTracker;
      modifiers : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.ConfigurePositionYInertiaModifiers (modifiers);
   end;

   procedure ConfigureScaleInertiaModifiers
   (
      this : in out InteractionTracker;
      modifiers : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTracker.all.ConfigureScaleInertiaModifiers (modifiers);
   end;

   function TryUpdatePosition
   (
      this : in out InteractionTracker;
      value : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdatePosition (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryUpdatePositionBy
   (
      this : in out InteractionTracker;
      amount : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdatePositionBy (amount, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryUpdatePositionWithAnimation
   (
      this : in out InteractionTracker;
      animation : Windows.UI.Composition.CompositionAnimation'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdatePositionWithAnimation (animation.m_ICompositionAnimation.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryUpdatePositionWithAdditionalVelocity
   (
      this : in out InteractionTracker;
      velocityInPixelsPerSecond : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdatePositionWithAdditionalVelocity (velocityInPixelsPerSecond, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryUpdateScale
   (
      this : in out InteractionTracker;
      value : WinRt.Single;
      centerPoint : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdateScale (value, centerPoint, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryUpdateScaleWithAnimation
   (
      this : in out InteractionTracker;
      animation : Windows.UI.Composition.CompositionAnimation'Class;
      centerPoint : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdateScaleWithAnimation (animation.m_ICompositionAnimation.all, centerPoint, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryUpdateScaleWithAdditionalVelocity
   (
      this : in out InteractionTracker;
      velocityInPercentPerSecond : WinRt.Single;
      centerPoint : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTracker.all.TryUpdateScaleWithAdditionalVelocity (velocityInPercentPerSecond, centerPoint, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ConfigureCenterPointXInertiaModifiers
   (
      this : in out InteractionTracker;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker2, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.ConfigureCenterPointXInertiaModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   procedure ConfigureCenterPointYInertiaModifiers
   (
      this : in out InteractionTracker;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker2, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.ConfigureCenterPointYInertiaModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   procedure ConfigureVector2PositionInertiaModifiers
   (
      this : in out InteractionTracker;
      modifiers : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker3, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.ConfigureVector2PositionInertiaModifiers (modifiers);
      m_RefCount := m_Interface.Release;
   end;

   function TryUpdatePosition
   (
      this : in out InteractionTracker;
      value : Windows.Foundation.Numerics.Vector3;
      option : Windows.UI.Composition.Interactions.InteractionTrackerClampingOption
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker4, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.TryUpdatePosition (value, option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryUpdatePositionBy
   (
      this : in out InteractionTracker;
      amount : Windows.Foundation.Numerics.Vector3;
      option : Windows.UI.Composition.Interactions.InteractionTrackerClampingOption
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker4, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.TryUpdatePositionBy (amount, option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsInertiaFromImpulse
   (
      this : in out InteractionTracker
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker4, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.get_IsInertiaFromImpulse (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryUpdatePosition
   (
      this : in out InteractionTracker;
      value : Windows.Foundation.Numerics.Vector3;
      option : Windows.UI.Composition.Interactions.InteractionTrackerClampingOption;
      posUpdateOption : Windows.UI.Composition.Interactions.InteractionTrackerPositionUpdateOption
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTracker5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTracker_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTracker5, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTracker5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTracker.all);
      Hr := m_Interface.TryUpdatePosition (value, option, posUpdateOption, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerCustomAnimationStateEnteredArgs

   procedure Initialize (this : in out InteractionTrackerCustomAnimationStateEnteredArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerCustomAnimationStateEnteredArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerCustomAnimationStateEnteredArgs, IInteractionTrackerCustomAnimationStateEnteredArgs_Ptr);
   begin
      if this.m_IInteractionTrackerCustomAnimationStateEnteredArgs /= null then
         if this.m_IInteractionTrackerCustomAnimationStateEnteredArgs.all /= null then
            RefCount := this.m_IInteractionTrackerCustomAnimationStateEnteredArgs.all.Release;
            Free (this.m_IInteractionTrackerCustomAnimationStateEnteredArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerCustomAnimationStateEnteredArgs

   function get_RequestId
   (
      this : in out InteractionTrackerCustomAnimationStateEnteredArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTrackerCustomAnimationStateEnteredArgs.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsFromBinding
   (
      this : in out InteractionTrackerCustomAnimationStateEnteredArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTrackerCustomAnimationStateEnteredArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTrackerCustomAnimationStateEnteredArgs.all);
      Hr := m_Interface.get_IsFromBinding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerIdleStateEnteredArgs

   procedure Initialize (this : in out InteractionTrackerIdleStateEnteredArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerIdleStateEnteredArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerIdleStateEnteredArgs, IInteractionTrackerIdleStateEnteredArgs_Ptr);
   begin
      if this.m_IInteractionTrackerIdleStateEnteredArgs /= null then
         if this.m_IInteractionTrackerIdleStateEnteredArgs.all /= null then
            RefCount := this.m_IInteractionTrackerIdleStateEnteredArgs.all.Release;
            Free (this.m_IInteractionTrackerIdleStateEnteredArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerIdleStateEnteredArgs

   function get_RequestId
   (
      this : in out InteractionTrackerIdleStateEnteredArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTrackerIdleStateEnteredArgs.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsFromBinding
   (
      this : in out InteractionTrackerIdleStateEnteredArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTrackerIdleStateEnteredArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTrackerIdleStateEnteredArgs.all);
      Hr := m_Interface.get_IsFromBinding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerInertiaModifier

   procedure Initialize (this : in out InteractionTrackerInertiaModifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerInertiaModifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerInertiaModifier, IInteractionTrackerInertiaModifier_Ptr);
   begin
      if this.m_IInteractionTrackerInertiaModifier /= null then
         if this.m_IInteractionTrackerInertiaModifier.all /= null then
            RefCount := this.m_IInteractionTrackerInertiaModifier.all.Release;
            Free (this.m_IInteractionTrackerInertiaModifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InteractionTrackerInertiaModifier

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerInertiaModifier

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerInertiaMotion

   procedure Initialize (this : in out InteractionTrackerInertiaMotion) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerInertiaMotion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerInertiaMotion, IInteractionTrackerInertiaMotion_Ptr);
   begin
      if this.m_IInteractionTrackerInertiaMotion /= null then
         if this.m_IInteractionTrackerInertiaMotion.all /= null then
            RefCount := this.m_IInteractionTrackerInertiaMotion.all.Release;
            Free (this.m_IInteractionTrackerInertiaMotion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for InteractionTrackerInertiaMotion

   function Create
   (
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTrackerInertiaMotion;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion do
         Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerInertiaMotionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (compositor.m_ICompositor.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInteractionTrackerInertiaMotion := new Windows.UI.Composition.Interactions.IInteractionTrackerInertiaMotion;
            Retval.m_IInteractionTrackerInertiaMotion.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerInertiaMotion

   function get_Condition
   (
      this : in out InteractionTrackerInertiaMotion
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_IInteractionTrackerInertiaMotion.all.get_Condition (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Condition
   (
      this : in out InteractionTrackerInertiaMotion;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerInertiaMotion.all.put_Condition (value.m_IExpressionAnimation.all);
   end;

   function get_Motion
   (
      this : in out InteractionTrackerInertiaMotion
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_IInteractionTrackerInertiaMotion.all.get_Motion (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Motion
   (
      this : in out InteractionTrackerInertiaMotion;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerInertiaMotion.all.put_Motion (value.m_IExpressionAnimation.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerInertiaNaturalMotion

   procedure Initialize (this : in out InteractionTrackerInertiaNaturalMotion) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerInertiaNaturalMotion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerInertiaNaturalMotion, IInteractionTrackerInertiaNaturalMotion_Ptr);
   begin
      if this.m_IInteractionTrackerInertiaNaturalMotion /= null then
         if this.m_IInteractionTrackerInertiaNaturalMotion.all /= null then
            RefCount := this.m_IInteractionTrackerInertiaNaturalMotion.all.Release;
            Free (this.m_IInteractionTrackerInertiaNaturalMotion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for InteractionTrackerInertiaNaturalMotion

   function Create
   (
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion do
         Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerInertiaNaturalMotionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (compositor.m_ICompositor.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInteractionTrackerInertiaNaturalMotion := new Windows.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion;
            Retval.m_IInteractionTrackerInertiaNaturalMotion.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerInertiaNaturalMotion

   function get_Condition
   (
      this : in out InteractionTrackerInertiaNaturalMotion
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_IInteractionTrackerInertiaNaturalMotion.all.get_Condition (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Condition
   (
      this : in out InteractionTrackerInertiaNaturalMotion;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerInertiaNaturalMotion.all.put_Condition (value.m_IExpressionAnimation.all);
   end;

   function get_NaturalMotion
   (
      this : in out InteractionTrackerInertiaNaturalMotion
   )
   return WinRt.Windows.UI.Composition.ScalarNaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IScalarNaturalMotionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ScalarNaturalMotionAnimation do
         Hr := this.m_IInteractionTrackerInertiaNaturalMotion.all.get_NaturalMotion (m_ComRetVal'Access);
         Retval.m_IScalarNaturalMotionAnimation := new Windows.UI.Composition.IScalarNaturalMotionAnimation;
         Retval.m_IScalarNaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_NaturalMotion
   (
      this : in out InteractionTrackerInertiaNaturalMotion;
      value : Windows.UI.Composition.ScalarNaturalMotionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerInertiaNaturalMotion.all.put_NaturalMotion (value.m_IScalarNaturalMotionAnimation.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerInertiaRestingValue

   procedure Initialize (this : in out InteractionTrackerInertiaRestingValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerInertiaRestingValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerInertiaRestingValue, IInteractionTrackerInertiaRestingValue_Ptr);
   begin
      if this.m_IInteractionTrackerInertiaRestingValue /= null then
         if this.m_IInteractionTrackerInertiaRestingValue.all /= null then
            RefCount := this.m_IInteractionTrackerInertiaRestingValue.all.Release;
            Free (this.m_IInteractionTrackerInertiaRestingValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for InteractionTrackerInertiaRestingValue

   function Create
   (
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue do
         Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerInertiaRestingValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (compositor.m_ICompositor.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInteractionTrackerInertiaRestingValue := new Windows.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue;
            Retval.m_IInteractionTrackerInertiaRestingValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerInertiaRestingValue

   function get_Condition
   (
      this : in out InteractionTrackerInertiaRestingValue
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_IInteractionTrackerInertiaRestingValue.all.get_Condition (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Condition
   (
      this : in out InteractionTrackerInertiaRestingValue;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerInertiaRestingValue.all.put_Condition (value.m_IExpressionAnimation.all);
   end;

   function get_RestingValue
   (
      this : in out InteractionTrackerInertiaRestingValue
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_IInteractionTrackerInertiaRestingValue.all.get_RestingValue (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_RestingValue
   (
      this : in out InteractionTrackerInertiaRestingValue;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerInertiaRestingValue.all.put_RestingValue (value.m_IExpressionAnimation.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerInertiaStateEnteredArgs

   procedure Initialize (this : in out InteractionTrackerInertiaStateEnteredArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerInertiaStateEnteredArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerInertiaStateEnteredArgs, IInteractionTrackerInertiaStateEnteredArgs_Ptr);
   begin
      if this.m_IInteractionTrackerInertiaStateEnteredArgs /= null then
         if this.m_IInteractionTrackerInertiaStateEnteredArgs.all /= null then
            RefCount := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.Release;
            Free (this.m_IInteractionTrackerInertiaStateEnteredArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerInertiaStateEnteredArgs

   function get_ModifiedRestingPosition
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_ModifiedRestingPosition (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ModifiedRestingScale
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_ModifiedRestingScale (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NaturalRestingPosition
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_NaturalRestingPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NaturalRestingScale
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_NaturalRestingScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PositionVelocityInPixelsPerSecond
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_PositionVelocityInPixelsPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestId
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScaleVelocityInPercentPerSecond
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTrackerInertiaStateEnteredArgs.all.get_ScaleVelocityInPercentPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsInertiaFromImpulse
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTrackerInertiaStateEnteredArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTrackerInertiaStateEnteredArgs.all);
      Hr := m_Interface.get_IsInertiaFromImpulse (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsFromBinding
   (
      this : in out InteractionTrackerInertiaStateEnteredArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTrackerInertiaStateEnteredArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTrackerInertiaStateEnteredArgs.all);
      Hr := m_Interface.get_IsFromBinding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerInteractingStateEnteredArgs

   procedure Initialize (this : in out InteractionTrackerInteractingStateEnteredArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerInteractingStateEnteredArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerInteractingStateEnteredArgs, IInteractionTrackerInteractingStateEnteredArgs_Ptr);
   begin
      if this.m_IInteractionTrackerInteractingStateEnteredArgs /= null then
         if this.m_IInteractionTrackerInteractingStateEnteredArgs.all /= null then
            RefCount := this.m_IInteractionTrackerInteractingStateEnteredArgs.all.Release;
            Free (this.m_IInteractionTrackerInteractingStateEnteredArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerInteractingStateEnteredArgs

   function get_RequestId
   (
      this : in out InteractionTrackerInteractingStateEnteredArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTrackerInteractingStateEnteredArgs.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsFromBinding
   (
      this : in out InteractionTrackerInteractingStateEnteredArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs_Interface, WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2, WinRt.Windows.UI.Composition.Interactions.IID_IInteractionTrackerInteractingStateEnteredArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInteractionTrackerInteractingStateEnteredArgs.all);
      Hr := m_Interface.get_IsFromBinding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerRequestIgnoredArgs

   procedure Initialize (this : in out InteractionTrackerRequestIgnoredArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerRequestIgnoredArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerRequestIgnoredArgs, IInteractionTrackerRequestIgnoredArgs_Ptr);
   begin
      if this.m_IInteractionTrackerRequestIgnoredArgs /= null then
         if this.m_IInteractionTrackerRequestIgnoredArgs.all /= null then
            RefCount := this.m_IInteractionTrackerRequestIgnoredArgs.all.Release;
            Free (this.m_IInteractionTrackerRequestIgnoredArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerRequestIgnoredArgs

   function get_RequestId
   (
      this : in out InteractionTrackerRequestIgnoredArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTrackerRequestIgnoredArgs.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerValuesChangedArgs

   procedure Initialize (this : in out InteractionTrackerValuesChangedArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerValuesChangedArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerValuesChangedArgs, IInteractionTrackerValuesChangedArgs_Ptr);
   begin
      if this.m_IInteractionTrackerValuesChangedArgs /= null then
         if this.m_IInteractionTrackerValuesChangedArgs.all /= null then
            RefCount := this.m_IInteractionTrackerValuesChangedArgs.all.Release;
            Free (this.m_IInteractionTrackerValuesChangedArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerValuesChangedArgs

   function get_Position
   (
      this : in out InteractionTrackerValuesChangedArgs
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IInteractionTrackerValuesChangedArgs.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequestId
   (
      this : in out InteractionTrackerValuesChangedArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInteractionTrackerValuesChangedArgs.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Scale
   (
      this : in out InteractionTrackerValuesChangedArgs
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInteractionTrackerValuesChangedArgs.all.get_Scale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerVector2InertiaModifier

   procedure Initialize (this : in out InteractionTrackerVector2InertiaModifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerVector2InertiaModifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerVector2InertiaModifier, IInteractionTrackerVector2InertiaModifier_Ptr);
   begin
      if this.m_IInteractionTrackerVector2InertiaModifier /= null then
         if this.m_IInteractionTrackerVector2InertiaModifier.all /= null then
            RefCount := this.m_IInteractionTrackerVector2InertiaModifier.all.Release;
            Free (this.m_IInteractionTrackerVector2InertiaModifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InteractionTrackerVector2InertiaModifier

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerVector2InertiaModifier

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InteractionTrackerVector2InertiaNaturalMotion

   procedure Initialize (this : in out InteractionTrackerVector2InertiaNaturalMotion) is
   begin
      null;
   end;

   procedure Finalize (this : in out InteractionTrackerVector2InertiaNaturalMotion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInteractionTrackerVector2InertiaNaturalMotion, IInteractionTrackerVector2InertiaNaturalMotion_Ptr);
   begin
      if this.m_IInteractionTrackerVector2InertiaNaturalMotion /= null then
         if this.m_IInteractionTrackerVector2InertiaNaturalMotion.all /= null then
            RefCount := this.m_IInteractionTrackerVector2InertiaNaturalMotion.all.Release;
            Free (this.m_IInteractionTrackerVector2InertiaNaturalMotion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for InteractionTrackerVector2InertiaNaturalMotion

   function Create
   (
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion do
         Hr := RoGetActivationFactory (m_hString, IID_IInteractionTrackerVector2InertiaNaturalMotionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (compositor.m_ICompositor.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInteractionTrackerVector2InertiaNaturalMotion := new Windows.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion;
            Retval.m_IInteractionTrackerVector2InertiaNaturalMotion.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InteractionTrackerVector2InertiaNaturalMotion

   function get_Condition
   (
      this : in out InteractionTrackerVector2InertiaNaturalMotion
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_IInteractionTrackerVector2InertiaNaturalMotion.all.get_Condition (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_Condition
   (
      this : in out InteractionTrackerVector2InertiaNaturalMotion;
      value : Windows.UI.Composition.ExpressionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerVector2InertiaNaturalMotion.all.put_Condition (value.m_IExpressionAnimation.all);
   end;

   function get_NaturalMotion
   (
      this : in out InteractionTrackerVector2InertiaNaturalMotion
   )
   return WinRt.Windows.UI.Composition.Vector2NaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVector2NaturalMotionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Vector2NaturalMotionAnimation do
         Hr := this.m_IInteractionTrackerVector2InertiaNaturalMotion.all.get_NaturalMotion (m_ComRetVal'Access);
         Retval.m_IVector2NaturalMotionAnimation := new Windows.UI.Composition.IVector2NaturalMotionAnimation;
         Retval.m_IVector2NaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   procedure put_NaturalMotion
   (
      this : in out InteractionTrackerVector2InertiaNaturalMotion;
      value : Windows.UI.Composition.Vector2NaturalMotionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInteractionTrackerVector2InertiaNaturalMotion.all.put_NaturalMotion (value.m_IVector2NaturalMotionAnimation.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VisualInteractionSource

   procedure Initialize (this : in out VisualInteractionSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out VisualInteractionSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVisualInteractionSource, IVisualInteractionSource_Ptr);
   begin
      if this.m_IVisualInteractionSource /= null then
         if this.m_IVisualInteractionSource.all /= null then
            RefCount := this.m_IVisualInteractionSource.all.Release;
            Free (this.m_IVisualInteractionSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VisualInteractionSource

   -----------------------------------------------------------------------------
   -- Static Interfaces for VisualInteractionSource

   function CreateFromIVisualElement
   (
      source : Windows.UI.Composition.IVisualElement
   )
   return WinRt.Windows.UI.Composition.Interactions.VisualInteractionSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.VisualInteractionSource");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSourceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IVisualInteractionSource;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.VisualInteractionSource do
         Hr := RoGetActivationFactory (m_hString, IID_IVisualInteractionSourceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIVisualElement (source, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVisualInteractionSource := new Windows.UI.Composition.Interactions.IVisualInteractionSource;
            Retval.m_IVisualInteractionSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Create
   (
      source : Windows.UI.Composition.Visual'Class
   )
   return WinRt.Windows.UI.Composition.Interactions.VisualInteractionSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Interactions.VisualInteractionSource");
      m_Factory        : access WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IVisualInteractionSource;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.VisualInteractionSource do
         Hr := RoGetActivationFactory (m_hString, IID_IVisualInteractionSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (source.m_IVisual.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVisualInteractionSource := new Windows.UI.Composition.Interactions.IVisualInteractionSource;
            Retval.m_IVisualInteractionSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VisualInteractionSource

   function get_IsPositionXRailsEnabled
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_IsPositionXRailsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPositionXRailsEnabled
   (
      this : in out VisualInteractionSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_IsPositionXRailsEnabled (value);
   end;

   function get_IsPositionYRailsEnabled
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_IsPositionYRailsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPositionYRailsEnabled
   (
      this : in out VisualInteractionSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_IsPositionYRailsEnabled (value);
   end;

   function get_ManipulationRedirectionMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_ManipulationRedirectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ManipulationRedirectionMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_ManipulationRedirectionMode (value);
   end;

   function get_PositionXChainingMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionChainingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionChainingMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_PositionXChainingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionXChainingMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.InteractionChainingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_PositionXChainingMode (value);
   end;

   function get_PositionXSourceMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionSourceMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_PositionXSourceMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionXSourceMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.InteractionSourceMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_PositionXSourceMode (value);
   end;

   function get_PositionYChainingMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionChainingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionChainingMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_PositionYChainingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionYChainingMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.InteractionChainingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_PositionYChainingMode (value);
   end;

   function get_PositionYSourceMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionSourceMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_PositionYSourceMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionYSourceMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.InteractionSourceMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_PositionYSourceMode (value);
   end;

   function get_ScaleChainingMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionChainingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionChainingMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_ScaleChainingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleChainingMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.InteractionChainingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_ScaleChainingMode (value);
   end;

   function get_ScaleSourceMode
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.InteractionSourceMode;
   begin
      Hr := this.m_IVisualInteractionSource.all.get_ScaleSourceMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleSourceMode
   (
      this : in out VisualInteractionSource;
      value : Windows.UI.Composition.Interactions.InteractionSourceMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.put_ScaleSourceMode (value);
   end;

   function get_Source
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_IVisualInteractionSource.all.get_Source (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure TryRedirectForManipulation
   (
      this : in out VisualInteractionSource;
      pointerPoint : Windows.UI.Input.PointerPoint'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualInteractionSource.all.TryRedirectForManipulation (pointerPoint.m_IPointerPoint.all);
   end;

   function get_DeltaPosition
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.get_DeltaPosition (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DeltaScale
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.get_DeltaScale (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PositionVelocity
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.get_PositionVelocity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Scale
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.get_Scale (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ScaleVelocity
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.get_ScaleVelocity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ConfigureCenterPointXModifiers
   (
      this : in out VisualInteractionSource;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.ConfigureCenterPointXModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   procedure ConfigureCenterPointYModifiers
   (
      this : in out VisualInteractionSource;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.ConfigureCenterPointYModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   procedure ConfigureDeltaPositionXModifiers
   (
      this : in out VisualInteractionSource;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.ConfigureDeltaPositionXModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   procedure ConfigureDeltaPositionYModifiers
   (
      this : in out VisualInteractionSource;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.ConfigureDeltaPositionYModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   procedure ConfigureDeltaScaleModifiers
   (
      this : in out VisualInteractionSource;
      conditionalValues : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource2, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualInteractionSource.all);
      Hr := m_Interface.ConfigureDeltaScaleModifiers (conditionalValues);
      m_RefCount := m_Interface.Release;
   end;

   function get_PointerWheelConfig
   (
      this : in out VisualInteractionSource
   )
   return WinRt.Windows.UI.Composition.Interactions.InteractionSourceConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.Interactions.IInteractionSourceConfiguration;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource_Interface, WinRt.Windows.UI.Composition.Interactions.IVisualInteractionSource3, WinRt.Windows.UI.Composition.Interactions.IID_IVisualInteractionSource3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.Interactions.InteractionSourceConfiguration do
         m_Interface := QInterface (this.m_IVisualInteractionSource.all);
         Hr := m_Interface.get_PointerWheelConfig (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IInteractionSourceConfiguration := new Windows.UI.Composition.Interactions.IInteractionSourceConfiguration;
         Retval.m_IInteractionSourceConfiguration.all := m_ComRetVal;
      end return;
   end;

end;

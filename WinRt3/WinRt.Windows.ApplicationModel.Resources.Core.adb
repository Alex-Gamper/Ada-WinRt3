--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Resources.Core is

   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   package IAsyncOperation_IRandomAccessStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStream);
   package AsyncOperationCompletedHandler_IRandomAccessStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStream);

   package IIterable_IResourceCandidate is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate);
   package IIterable_HString is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.HString);
   package IMapView_HString_INamedResource is new WinRt.Windows.Foundation.Collections.IMapView (WinRt.HString, WinRt.Windows.ApplicationModel.Resources.Core.INamedResource);
   package IMapView_HString_HString is new WinRt.Windows.Foundation.Collections.IMapView (WinRt.HString, WinRt.HString);
   package IMap_HString_HString is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.HString);
   package IIterable_IResourceQualifier is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.ApplicationModel.Resources.Core.IResourceQualifier);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NamedResource

   procedure Initialize (this : in out NamedResource) is
   begin
      null;
   end;

   procedure Finalize (this : in out NamedResource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INamedResource, INamedResource_Ptr);
   begin
      if this.m_INamedResource /= null then
         if this.m_INamedResource.all /= null then
            RefCount := this.m_INamedResource.all.Release;
            Free (this.m_INamedResource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NamedResource

   function get_Uri
   (
      this : in out NamedResource
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_INamedResource.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Candidates
   (
      this : in out NamedResource
   )
   return IVectorView_IResourceCandidate.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IResourceCandidate.Kind;
   begin
      Hr := this.m_INamedResource.all.get_Candidates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IResourceCandidate (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function Resolve
   (
      this : in out NamedResource
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceCandidate;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate do
         Hr := this.m_INamedResource.all.Resolve (m_ComRetVal'Access);
         Retval.m_IResourceCandidate := new Windows.ApplicationModel.Resources.Core.IResourceCandidate;
         Retval.m_IResourceCandidate.all := m_ComRetVal;
      end return;
   end;

   function Resolve
   (
      this : in out NamedResource;
      resourceContext_p : Windows.ApplicationModel.Resources.Core.ResourceContext'Class
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceCandidate;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate do
         Hr := this.m_INamedResource.all.Resolve (resourceContext_p.m_IResourceContext.all, m_ComRetVal'Access);
         Retval.m_IResourceCandidate := new Windows.ApplicationModel.Resources.Core.IResourceCandidate;
         Retval.m_IResourceCandidate.all := m_ComRetVal;
      end return;
   end;

   function ResolveAll
   (
      this : in out NamedResource
   )
   return IVectorView_IResourceCandidate.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IResourceCandidate.Kind;
   begin
      Hr := this.m_INamedResource.all.ResolveAll (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IResourceCandidate (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ResolveAll
   (
      this : in out NamedResource;
      resourceContext_p : Windows.ApplicationModel.Resources.Core.ResourceContext'Class
   )
   return IVectorView_IResourceCandidate.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IResourceCandidate.Kind;
   begin
      Hr := this.m_INamedResource.all.ResolveAll (resourceContext_p.m_IResourceContext.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IResourceCandidate (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceCandidate

   procedure Initialize (this : in out ResourceCandidate) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceCandidate) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResourceCandidate, IResourceCandidate_Ptr);
   begin
      if this.m_IResourceCandidate /= null then
         if this.m_IResourceCandidate.all /= null then
            RefCount := this.m_IResourceCandidate.all.Release;
            Free (this.m_IResourceCandidate);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceCandidate

   function get_Qualifiers
   (
      this : in out ResourceCandidate
   )
   return IVectorView_IResourceQualifier.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IResourceQualifier.Kind;
   begin
      Hr := this.m_IResourceCandidate.all.get_Qualifiers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IResourceQualifier (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsMatch
   (
      this : in out ResourceCandidate
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IResourceCandidate.all.get_IsMatch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsMatchAsDefault
   (
      this : in out ResourceCandidate
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IResourceCandidate.all.get_IsMatchAsDefault (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDefault
   (
      this : in out ResourceCandidate
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IResourceCandidate.all.get_IsDefault (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ValueAsString
   (
      this : in out ResourceCandidate
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IResourceCandidate.all.get_ValueAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetValueAsFileAsync
   (
      this : in out ResourceCandidate
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IResourceCandidate.all.GetValueAsFileAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetQualifierValue
   (
      this : in out ResourceCandidate;
      qualifierName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_qualifierName : WinRt.HString := To_HString (qualifierName);
   begin
      Hr := this.m_IResourceCandidate.all.GetQualifierValue (HStr_qualifierName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_qualifierName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetValueAsStreamAsync
   (
      this : in out ResourceCandidate
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate_Interface, WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate2, WinRt.Windows.ApplicationModel.Resources.Core.IID_IResourceCandidate2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCandidate.all);
      Hr := m_Interface.GetValueAsStreamAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Kind
   (
      this : in out ResourceCandidate
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidateKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.ResourceCandidateKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate_Interface, WinRt.Windows.ApplicationModel.Resources.Core.IResourceCandidate3, WinRt.Windows.ApplicationModel.Resources.Core.IID_IResourceCandidate3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCandidate.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceCandidateVectorView

   procedure Initialize (this : in out ResourceCandidateVectorView) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceCandidateVectorView) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceCandidateVectorView

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceCandidate>
   function GetAt
   (
      this : in out ResourceCandidateVectorView;
      index : WinRt.UInt32
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceCandidate.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceCandidate;
      m_GenericIID     : aliased WinRt.IID := (3800994544, 40955, 24231, (159, 201, 167, 59, 218, 71, 24, 134 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceCandidate.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IResourceCandidate := new Windows.ApplicationModel.Resources.Core.IResourceCandidate;
         Retval.m_IResourceCandidate.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out ResourceCandidateVectorView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceCandidate.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3800994544, 40955, 24231, (159, 201, 167, 59, 218, 71, 24, 134 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceCandidate.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out ResourceCandidateVectorView;
      value : Windows.ApplicationModel.Resources.Core.ResourceCandidate'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceCandidate.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3800994544, 40955, 24231, (159, 201, 167, 59, 218, 71, 24, 134 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceCandidate.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IResourceCandidate.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out ResourceCandidateVectorView;
      startIndex : WinRt.UInt32;
      items : Windows.ApplicationModel.Resources.Core.IResourceCandidate_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceCandidate.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3800994544, 40955, 24231, (159, 201, 167, 59, 218, 71, 24, 134 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceCandidate.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Resources.Core.ResourceCandidate>
   function First
   (
      this : in out ResourceCandidateVectorView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IResourceCandidate.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3634140312, 34921, 22520, (168, 131, 156, 45, 254, 236, 182, 198 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IResourceCandidate.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceContext

   procedure Initialize (this : in out ResourceContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResourceContext, IResourceContext_Ptr);
   begin
      if this.m_IResourceContext /= null then
         if this.m_IResourceContext.all /= null then
            RefCount := this.m_IResourceContext.all.Release;
            Free (this.m_IResourceContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ResourceContext

   function Constructor return ResourceContext is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_ComRetVal  : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : ResourceContext do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
            Retval.m_IResourceContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ResourceContext

   function CreateMatchingContext
   (
      result : GenericObject
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext do
         Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMatchingContext (result, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
            Retval.m_IResourceContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetGlobalQualifierValue
   (
      key : WinRt.WString;
      value : WinRt.WString;
      persistence : Windows.ApplicationModel.Resources.Core.ResourceQualifierPersistence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetGlobalQualifierValue (HStr_key, HStr_value, persistence);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetForUIContext
   (
      context : Windows.UI.UIContext'Class
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext do
         Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUIContext (context.m_IUIContext.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
            Retval.m_IResourceContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForCurrentView
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext do
         Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
            Retval.m_IResourceContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetGlobalQualifierValue
   (
      key : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetGlobalQualifierValue (HStr_key, HStr_value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure ResetGlobalQualifierValues is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ResetGlobalQualifierValues;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ResetGlobalQualifierValues
   (
      qualifierNames : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ResetGlobalQualifierValues (qualifierNames);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetForViewIndependentUse
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceContext");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceContextStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext do
         Hr := RoGetActivationFactory (m_hString, IID_IResourceContextStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForViewIndependentUse (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
            Retval.m_IResourceContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceContext

   function get_QualifierValues
   (
      this : in out ResourceContext
   )
   return IObservableMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IObservableMap_HString_HString.Kind;
   begin
      Hr := this.m_IResourceContext.all.get_QualifierValues (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IObservableMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Reset
   (
      this : in out ResourceContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IResourceContext.all.Reset;
   end;

   procedure Reset
   (
      this : in out ResourceContext;
      qualifierNames : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IResourceContext.all.Reset (qualifierNames);
   end;

   procedure OverrideToMatch
   (
      this : in out ResourceContext;
      result : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IResourceContext.all.OverrideToMatch (result);
   end;

   function Clone
   (
      this : in out ResourceContext
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext do
         Hr := this.m_IResourceContext.all.Clone (m_ComRetVal'Access);
         Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
         Retval.m_IResourceContext.all := m_ComRetVal;
      end return;
   end;

   function get_Languages
   (
      this : in out ResourceContext
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IResourceContext.all.get_Languages (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Languages
   (
      this : in out ResourceContext;
      languages : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IResourceContext.all.put_Languages (languages);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceContextLanguagesVectorView

   procedure Initialize (this : in out ResourceContextLanguagesVectorView) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceContextLanguagesVectorView) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceContextLanguagesVectorView

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<System.String>
   function GetAt
   (
      this : in out ResourceContextLanguagesVectorView;
      index : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      m_GenericIID     : aliased WinRt.IID := (789823494, 41018, 24425, (176, 144, 117, 164, 62, 51, 66, 62 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out ResourceContextLanguagesVectorView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (789823494, 41018, 24425, (176, 144, 117, 164, 62, 51, 66, 62 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out ResourceContextLanguagesVectorView;
      value : WinRt.WString;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (789823494, 41018, 24425, (176, 144, 117, 164, 62, 51, 66, 62 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (HStr_value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out ResourceContextLanguagesVectorView;
      startIndex : WinRt.UInt32;
      items : WinRt.HString_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (789823494, 41018, 24425, (176, 144, 117, 164, 62, 51, 66, 62 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_HString.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<System.String>
   function First
   (
      this : in out ResourceContextLanguagesVectorView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3808217025, 15356, 23051, (178, 176, 114, 231, 105, 209, 203, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceManager

   procedure Initialize (this : in out ResourceManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResourceManager, IResourceManager_Ptr);
   begin
      if this.m_IResourceManager /= null then
         if this.m_IResourceManager.all /= null then
            RefCount := this.m_IResourceManager.all.Release;
            Free (this.m_IResourceManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ResourceManager

   function get_Current
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceManager do
         Hr := RoGetActivationFactory (m_hString, IID_IResourceManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IResourceManager := new Windows.ApplicationModel.Resources.Core.IResourceManager;
            Retval.m_IResourceManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function IsResourceReference
   (
      resourceReference : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Resources.Core.ResourceManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.Resources.Core.IResourceManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_resourceReference : WinRt.HString := To_HString (resourceReference);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IResourceManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsResourceReference (HStr_resourceReference, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_resourceReference);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceManager

   function get_MainResourceMap
   (
      this : in out ResourceManager
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceMap;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceMap do
         Hr := this.m_IResourceManager.all.get_MainResourceMap (m_ComRetVal'Access);
         Retval.m_IResourceMap := new Windows.ApplicationModel.Resources.Core.IResourceMap;
         Retval.m_IResourceMap.all := m_ComRetVal;
      end return;
   end;

   function get_AllResourceMaps
   (
      this : in out ResourceManager
   )
   return IMapView_HString_IResourceMap.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IResourceMap.Kind;
   begin
      Hr := this.m_IResourceManager.all.get_AllResourceMaps (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IResourceMap (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DefaultContext
   (
      this : in out ResourceManager
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceContext;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceContext do
         Hr := this.m_IResourceManager.all.get_DefaultContext (m_ComRetVal'Access);
         Retval.m_IResourceContext := new Windows.ApplicationModel.Resources.Core.IResourceContext;
         Retval.m_IResourceContext.all := m_ComRetVal;
      end return;
   end;

   procedure LoadPriFiles
   (
      this : in out ResourceManager;
      files : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IResourceManager.all.LoadPriFiles (files);
   end;

   procedure UnloadPriFiles
   (
      this : in out ResourceManager;
      files : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IResourceManager.all.UnloadPriFiles (files);
   end;

   function GetAllNamedResourcesForPackage
   (
      this : in out ResourceManager;
      packageName : WinRt.WString;
      resourceLayoutInfo : Windows.ApplicationModel.Resources.Core.ResourceLayoutInfo
   )
   return IVectorView_INamedResource.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Resources.Core.IResourceManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_INamedResource.Kind;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceManager_Interface, WinRt.Windows.ApplicationModel.Resources.Core.IResourceManager2, WinRt.Windows.ApplicationModel.Resources.Core.IID_IResourceManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceManager.all);
      Hr := m_Interface.GetAllNamedResourcesForPackage (HStr_packageName, resourceLayoutInfo, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageName);
      m_GenericRetVal := QInterface_IVectorView_INamedResource (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetAllSubtreesForPackage
   (
      this : in out ResourceManager;
      packageName : WinRt.WString;
      resourceLayoutInfo : Windows.ApplicationModel.Resources.Core.ResourceLayoutInfo
   )
   return IVectorView_IResourceMap.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Resources.Core.IResourceManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IResourceMap.Kind;
      HStr_packageName : WinRt.HString := To_HString (packageName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceManager_Interface, WinRt.Windows.ApplicationModel.Resources.Core.IResourceManager2, WinRt.Windows.ApplicationModel.Resources.Core.IID_IResourceManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceManager.all);
      Hr := m_Interface.GetAllSubtreesForPackage (HStr_packageName, resourceLayoutInfo, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_packageName);
      m_GenericRetVal := QInterface_IVectorView_IResourceMap (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceMap

   procedure Initialize (this : in out ResourceMap) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceMap) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResourceMap, IResourceMap_Ptr);
   begin
      if this.m_IResourceMap /= null then
         if this.m_IResourceMap.all /= null then
            RefCount := this.m_IResourceMap.all.Release;
            Free (this.m_IResourceMap);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceMap

   function get_Uri
   (
      this : in out ResourceMap
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IResourceMap.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function GetValue
   (
      this : in out ResourceMap;
      resource : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceCandidate;
      HStr_resource : WinRt.HString := To_HString (resource);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate do
         Hr := this.m_IResourceMap.all.GetValue (HStr_resource, m_ComRetVal'Access);
         Retval.m_IResourceCandidate := new Windows.ApplicationModel.Resources.Core.IResourceCandidate;
         Retval.m_IResourceCandidate.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_resource);
      end return;
   end;

   function GetValue
   (
      this : in out ResourceMap;
      resource : WinRt.WString;
      context : Windows.ApplicationModel.Resources.Core.ResourceContext'Class
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceCandidate;
      HStr_resource : WinRt.HString := To_HString (resource);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceCandidate do
         Hr := this.m_IResourceMap.all.GetValue (HStr_resource, context.m_IResourceContext.all, m_ComRetVal'Access);
         Retval.m_IResourceCandidate := new Windows.ApplicationModel.Resources.Core.IResourceCandidate;
         Retval.m_IResourceCandidate.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_resource);
      end return;
   end;

   function GetSubtree
   (
      this : in out ResourceMap;
      reference : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceMap;
      HStr_reference : WinRt.HString := To_HString (reference);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceMap do
         Hr := this.m_IResourceMap.all.GetSubtree (HStr_reference, m_ComRetVal'Access);
         Retval.m_IResourceMap := new Windows.ApplicationModel.Resources.Core.IResourceMap;
         Retval.m_IResourceMap.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_reference);
      end return;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.NamedResource>
   function Lookup
   (
      this : in out ResourceMap;
      key : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.NamedResource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_INamedResource.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.INamedResource;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (1210439364, 33626, 23969, (155, 221, 18, 233, 126, 22, 251, 122 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceMap_Interface, IMapView_HString_INamedResource.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.NamedResource do
         m_Interface := QInterface (this.m_IResourceMap.all);
         Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_INamedResource := new Windows.ApplicationModel.Resources.Core.INamedResource;
         Retval.m_INamedResource.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_key);
      end return;
   end;

   function get_Size
   (
      this : in out ResourceMap
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_INamedResource.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1210439364, 33626, 23969, (155, 221, 18, 233, 126, 22, 251, 122 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceMap_Interface, IMapView_HString_INamedResource.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceMap.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out ResourceMap;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_INamedResource.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (1210439364, 33626, 23969, (155, 221, 18, 233, 126, 22, 251, 122 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceMap_Interface, IMapView_HString_INamedResource.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceMap.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Split
   (
      this : in out ResourceMap;
      first : access GenericObject_Ptr;
      second : access GenericObject_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_INamedResource.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1210439364, 33626, 23969, (155, 221, 18, 233, 126, 22, 251, 122 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Resources.Core.IResourceMap_Interface, IMapView_HString_INamedResource.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceMap.all);
      Hr := m_Interface.Split (first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceMapIterator

   procedure Initialize (this : in out ResourceMapIterator) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceMapIterator) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceMapIterator

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceMapMapView

   procedure Initialize (this : in out ResourceMapMapView) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceMapMapView) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceMapMapView

   -- Generic Interface Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap>
   function Lookup
   (
      this : in out ResourceMapMapView;
      key : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IResourceMap.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceMap;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3560217310, 37809, 21285, (186, 92, 5, 243, 94, 239, 252, 85 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_IResourceMap.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceMap do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IResourceMap := new Windows.ApplicationModel.Resources.Core.IResourceMap;
         Retval.m_IResourceMap.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_key);
      end return;
   end;

   function get_Size
   (
      this : in out ResourceMapMapView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IResourceMap.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3560217310, 37809, 21285, (186, 92, 5, 243, 94, 239, 252, 85 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_IResourceMap.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out ResourceMapMapView;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IResourceMap.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3560217310, 37809, 21285, (186, 92, 5, 243, 94, 239, 252, 85 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_IResourceMap.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Split
   (
      this : in out ResourceMapMapView;
      first : access GenericObject_Ptr;
      second : access GenericObject_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IResourceMap.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3560217310, 37809, 21285, (186, 92, 5, 243, 94, 239, 252, 85 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_IResourceMap.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Split (first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceMapMapViewIterator

   procedure Initialize (this : in out ResourceMapMapViewIterator) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceMapMapViewIterator) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceMapMapViewIterator

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceQualifier

   procedure Initialize (this : in out ResourceQualifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceQualifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResourceQualifier, IResourceQualifier_Ptr);
   begin
      if this.m_IResourceQualifier /= null then
         if this.m_IResourceQualifier.all /= null then
            RefCount := this.m_IResourceQualifier.all.Release;
            Free (this.m_IResourceQualifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceQualifier

   function get_QualifierName
   (
      this : in out ResourceQualifier
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IResourceQualifier.all.get_QualifierName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_QualifierValue
   (
      this : in out ResourceQualifier
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IResourceQualifier.all.get_QualifierValue (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsDefault
   (
      this : in out ResourceQualifier
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IResourceQualifier.all.get_IsDefault (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsMatch
   (
      this : in out ResourceQualifier
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IResourceQualifier.all.get_IsMatch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Score
   (
      this : in out ResourceQualifier
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IResourceQualifier.all.get_Score (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceQualifierMapView

   procedure Initialize (this : in out ResourceQualifierMapView) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceQualifierMapView) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceQualifierMapView

   -- Generic Interface Windows.Foundation.Collections.IMapView`2<System.String,System.String>
   function Lookup
   (
      this : in out ResourceQualifierMapView;
      key : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (2894014194, 65207, 23338, (138, 196, 52, 91, 198, 44, 174, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out ResourceQualifierMapView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2894014194, 65207, 23338, (138, 196, 52, 91, 198, 44, 174, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out ResourceQualifierMapView;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (2894014194, 65207, 23338, (138, 196, 52, 91, 198, 44, 174, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Split
   (
      this : in out ResourceQualifierMapView;
      first : access GenericObject_Ptr;
      second : access GenericObject_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2894014194, 65207, 23338, (138, 196, 52, 91, 198, 44, 174, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMapView_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Split (first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceQualifierObservableMap

   procedure Initialize (this : in out ResourceQualifierObservableMap) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceQualifierObservableMap) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceQualifierObservableMap

   -- Generic Interface Windows.Foundation.Collections.IObservableMap`2<System.String,System.String>
   function add_MapChanged
   (
      this : in out ResourceQualifierObservableMap;
      vhnd : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IObservableMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      m_GenericIID     : aliased WinRt.IID := (503538294, 12128, 22006, (183, 243, 248, 96, 121, 230, 144, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IObservableMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.add_MapChanged (vhnd, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_MapChanged
   (
      this : in out ResourceQualifierObservableMap;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IObservableMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (503538294, 12128, 22006, (183, 243, 248, 96, 121, 230, 144, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IObservableMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.remove_MapChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.String>
   function Lookup
   (
      this : in out ResourceQualifierObservableMap;
      key : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out ResourceQualifierObservableMap
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out ResourceQualifierObservableMap;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out ResourceQualifierObservableMap
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out ResourceQualifierObservableMap;
      key : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Insert (HStr_key, HStr_value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out ResourceQualifierObservableMap;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out ResourceQualifierObservableMap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceQualifierVectorView

   procedure Initialize (this : in out ResourceQualifierVectorView) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceQualifierVectorView) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceQualifierVectorView

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceQualifier>
   function GetAt
   (
      this : in out ResourceQualifierVectorView;
      index : WinRt.UInt32
   )
   return WinRt.Windows.ApplicationModel.Resources.Core.ResourceQualifier'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceQualifier.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Resources.Core.IResourceQualifier;
      m_GenericIID     : aliased WinRt.IID := (3089914076, 7360, 21488, (176, 244, 102, 239, 57, 168, 28, 214 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceQualifier.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Resources.Core.ResourceQualifier do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IResourceQualifier := new Windows.ApplicationModel.Resources.Core.IResourceQualifier;
         Retval.m_IResourceQualifier.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out ResourceQualifierVectorView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceQualifier.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3089914076, 7360, 21488, (176, 244, 102, 239, 57, 168, 28, 214 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceQualifier.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out ResourceQualifierVectorView;
      value : Windows.ApplicationModel.Resources.Core.ResourceQualifier'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceQualifier.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3089914076, 7360, 21488, (176, 244, 102, 239, 57, 168, 28, 214 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceQualifier.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IResourceQualifier.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out ResourceQualifierVectorView;
      startIndex : WinRt.UInt32;
      items : Windows.ApplicationModel.Resources.Core.IResourceQualifier_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IResourceQualifier.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3089914076, 7360, 21488, (176, 244, 102, 239, 57, 168, 28, 214 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IResourceQualifier.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Resources.Core.ResourceQualifier>
   function First
   (
      this : in out ResourceQualifierVectorView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IResourceQualifier.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (787376354, 26748, 24442, (161, 78, 88, 140, 77, 48, 137, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IResourceQualifier.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

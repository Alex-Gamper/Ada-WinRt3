--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Display is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IRandomAccessStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStream);
   package AsyncOperationCompletedHandler_IRandomAccessStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStream);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdvancedColorInfo

   procedure Initialize (this : in out AdvancedColorInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdvancedColorInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdvancedColorInfo, IAdvancedColorInfo_Ptr);
   begin
      if this.m_IAdvancedColorInfo /= null then
         if this.m_IAdvancedColorInfo.all /= null then
            RefCount := this.m_IAdvancedColorInfo.all.Release;
            Free (this.m_IAdvancedColorInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdvancedColorInfo

   function get_CurrentAdvancedColorKind
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Windows.Graphics.Display.AdvancedColorKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.AdvancedColorKind;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_CurrentAdvancedColorKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RedPrimary
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_RedPrimary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GreenPrimary
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_GreenPrimary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BluePrimary
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_BluePrimary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WhitePoint
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_WhitePoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxLuminanceInNits
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_MaxLuminanceInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinLuminanceInNits
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_MinLuminanceInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxAverageFullFrameLuminanceInNits
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_MaxAverageFullFrameLuminanceInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SdrWhiteLevelInNits
   (
      this : in out AdvancedColorInfo
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAdvancedColorInfo.all.get_SdrWhiteLevelInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsHdrMetadataFormatCurrentlySupported
   (
      this : in out AdvancedColorInfo;
      format : Windows.Graphics.Display.HdrMetadataFormat
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdvancedColorInfo.all.IsHdrMetadataFormatCurrentlySupported (format, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsAdvancedColorKindAvailable
   (
      this : in out AdvancedColorInfo;
      kind : Windows.Graphics.Display.AdvancedColorKind
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdvancedColorInfo.all.IsAdvancedColorKindAvailable (kind, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BrightnessOverride

   procedure Initialize (this : in out BrightnessOverride) is
   begin
      null;
   end;

   procedure Finalize (this : in out BrightnessOverride) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBrightnessOverride, IBrightnessOverride_Ptr);
   begin
      if this.m_IBrightnessOverride /= null then
         if this.m_IBrightnessOverride.all /= null then
            RefCount := this.m_IBrightnessOverride.all.Release;
            Free (this.m_IBrightnessOverride);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BrightnessOverride

   function GetDefaultForSystem
   return WinRt.Windows.Graphics.Display.BrightnessOverride is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.BrightnessOverride");
      m_Factory        : access WinRt.Windows.Graphics.Display.IBrightnessOverrideStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IBrightnessOverride;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.BrightnessOverride do
         Hr := RoGetActivationFactory (m_hString, IID_IBrightnessOverrideStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultForSystem (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBrightnessOverride := new Windows.Graphics.Display.IBrightnessOverride;
            Retval.m_IBrightnessOverride.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForCurrentView
   return WinRt.Windows.Graphics.Display.BrightnessOverride is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.BrightnessOverride");
      m_Factory        : access WinRt.Windows.Graphics.Display.IBrightnessOverrideStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IBrightnessOverride;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.BrightnessOverride do
         Hr := RoGetActivationFactory (m_hString, IID_IBrightnessOverrideStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBrightnessOverride := new Windows.Graphics.Display.IBrightnessOverride;
            Retval.m_IBrightnessOverride.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function SaveForSystemAsync
   (
      value : Windows.Graphics.Display.BrightnessOverride'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.BrightnessOverride");
      m_Factory        : access WinRt.Windows.Graphics.Display.IBrightnessOverrideStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBrightnessOverrideStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SaveForSystemAsync (value.m_IBrightnessOverride.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BrightnessOverride

   function get_IsSupported
   (
      this : in out BrightnessOverride
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBrightnessOverride.all.get_IsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsOverrideActive
   (
      this : in out BrightnessOverride
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBrightnessOverride.all.get_IsOverrideActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BrightnessLevel
   (
      this : in out BrightnessOverride
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBrightnessOverride.all.get_BrightnessLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetBrightnessLevel
   (
      this : in out BrightnessOverride;
      brightnessLevel : WinRt.Double;
      options : Windows.Graphics.Display.DisplayBrightnessOverrideOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.SetBrightnessLevel (brightnessLevel, options);
   end;

   procedure SetBrightnessScenario
   (
      this : in out BrightnessOverride;
      scenario : Windows.Graphics.Display.DisplayBrightnessScenario;
      options : Windows.Graphics.Display.DisplayBrightnessOverrideOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.SetBrightnessScenario (scenario, options);
   end;

   function GetLevelForScenario
   (
      this : in out BrightnessOverride;
      scenario : Windows.Graphics.Display.DisplayBrightnessScenario
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBrightnessOverride.all.GetLevelForScenario (scenario, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StartOverride
   (
      this : in out BrightnessOverride
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.StartOverride;
   end;

   procedure StopOverride
   (
      this : in out BrightnessOverride
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.StopOverride;
   end;

   function add_IsSupportedChanged
   (
      this : in out BrightnessOverride;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBrightnessOverride.all.add_IsSupportedChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsSupportedChanged
   (
      this : in out BrightnessOverride;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.remove_IsSupportedChanged (token);
   end;

   function add_IsOverrideActiveChanged
   (
      this : in out BrightnessOverride;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBrightnessOverride.all.add_IsOverrideActiveChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsOverrideActiveChanged
   (
      this : in out BrightnessOverride;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.remove_IsOverrideActiveChanged (token);
   end;

   function add_BrightnessLevelChanged
   (
      this : in out BrightnessOverride;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBrightnessOverride.all.add_BrightnessLevelChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BrightnessLevelChanged
   (
      this : in out BrightnessOverride;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBrightnessOverride.all.remove_BrightnessLevelChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BrightnessOverrideSettings

   procedure Initialize (this : in out BrightnessOverrideSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out BrightnessOverrideSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBrightnessOverrideSettings, IBrightnessOverrideSettings_Ptr);
   begin
      if this.m_IBrightnessOverrideSettings /= null then
         if this.m_IBrightnessOverrideSettings.all /= null then
            RefCount := this.m_IBrightnessOverrideSettings.all.Release;
            Free (this.m_IBrightnessOverrideSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BrightnessOverrideSettings

   function CreateFromLevel
   (
      level : WinRt.Double
   )
   return WinRt.Windows.Graphics.Display.BrightnessOverrideSettings is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.BrightnessOverrideSettings");
      m_Factory        : access WinRt.Windows.Graphics.Display.IBrightnessOverrideSettingsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IBrightnessOverrideSettings;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.BrightnessOverrideSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IBrightnessOverrideSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromLevel (level, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBrightnessOverrideSettings := new Windows.Graphics.Display.IBrightnessOverrideSettings;
            Retval.m_IBrightnessOverrideSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromNits
   (
      nits : WinRt.Single
   )
   return WinRt.Windows.Graphics.Display.BrightnessOverrideSettings is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.BrightnessOverrideSettings");
      m_Factory        : access WinRt.Windows.Graphics.Display.IBrightnessOverrideSettingsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IBrightnessOverrideSettings;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.BrightnessOverrideSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IBrightnessOverrideSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNits (nits, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBrightnessOverrideSettings := new Windows.Graphics.Display.IBrightnessOverrideSettings;
            Retval.m_IBrightnessOverrideSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromDisplayBrightnessOverrideScenario
   (
      overrideScenario : Windows.Graphics.Display.DisplayBrightnessOverrideScenario
   )
   return WinRt.Windows.Graphics.Display.BrightnessOverrideSettings is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.BrightnessOverrideSettings");
      m_Factory        : access WinRt.Windows.Graphics.Display.IBrightnessOverrideSettingsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IBrightnessOverrideSettings;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.BrightnessOverrideSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IBrightnessOverrideSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDisplayBrightnessOverrideScenario (overrideScenario, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBrightnessOverrideSettings := new Windows.Graphics.Display.IBrightnessOverrideSettings;
            Retval.m_IBrightnessOverrideSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BrightnessOverrideSettings

   function get_DesiredLevel
   (
      this : in out BrightnessOverrideSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBrightnessOverrideSettings.all.get_DesiredLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DesiredNits
   (
      this : in out BrightnessOverrideSettings
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBrightnessOverrideSettings.all.get_DesiredNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorOverrideSettings

   procedure Initialize (this : in out ColorOverrideSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorOverrideSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorOverrideSettings, IColorOverrideSettings_Ptr);
   begin
      if this.m_IColorOverrideSettings /= null then
         if this.m_IColorOverrideSettings.all /= null then
            RefCount := this.m_IColorOverrideSettings.all.Release;
            Free (this.m_IColorOverrideSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ColorOverrideSettings

   function CreateFromDisplayColorOverrideScenario
   (
      overrideScenario : Windows.Graphics.Display.DisplayColorOverrideScenario
   )
   return WinRt.Windows.Graphics.Display.ColorOverrideSettings is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.ColorOverrideSettings");
      m_Factory        : access WinRt.Windows.Graphics.Display.IColorOverrideSettingsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IColorOverrideSettings;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.ColorOverrideSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IColorOverrideSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDisplayColorOverrideScenario (overrideScenario, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IColorOverrideSettings := new Windows.Graphics.Display.IColorOverrideSettings;
            Retval.m_IColorOverrideSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorOverrideSettings

   function get_DesiredDisplayColorOverrideScenario
   (
      this : in out ColorOverrideSettings
   )
   return WinRt.Windows.Graphics.Display.DisplayColorOverrideScenario is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.DisplayColorOverrideScenario;
   begin
      Hr := this.m_IColorOverrideSettings.all.get_DesiredDisplayColorOverrideScenario (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DisplayEnhancementOverride

   procedure Initialize (this : in out DisplayEnhancementOverride) is
   begin
      null;
   end;

   procedure Finalize (this : in out DisplayEnhancementOverride) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDisplayEnhancementOverride, IDisplayEnhancementOverride_Ptr);
   begin
      if this.m_IDisplayEnhancementOverride /= null then
         if this.m_IDisplayEnhancementOverride.all /= null then
            RefCount := this.m_IDisplayEnhancementOverride.all.Release;
            Free (this.m_IDisplayEnhancementOverride);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DisplayEnhancementOverride

   function GetForCurrentView
   return WinRt.Windows.Graphics.Display.DisplayEnhancementOverride is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayEnhancementOverride");
      m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayEnhancementOverrideStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IDisplayEnhancementOverride;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.DisplayEnhancementOverride do
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayEnhancementOverrideStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDisplayEnhancementOverride := new Windows.Graphics.Display.IDisplayEnhancementOverride;
            Retval.m_IDisplayEnhancementOverride.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DisplayEnhancementOverride

   function get_ColorOverrideSettings
   (
      this : in out DisplayEnhancementOverride
   )
   return WinRt.Windows.Graphics.Display.ColorOverrideSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IColorOverrideSettings;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.ColorOverrideSettings do
         Hr := this.m_IDisplayEnhancementOverride.all.get_ColorOverrideSettings (m_ComRetVal'Access);
         Retval.m_IColorOverrideSettings := new Windows.Graphics.Display.IColorOverrideSettings;
         Retval.m_IColorOverrideSettings.all := m_ComRetVal;
      end return;
   end;

   procedure put_ColorOverrideSettings
   (
      this : in out DisplayEnhancementOverride;
      value : Windows.Graphics.Display.ColorOverrideSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.put_ColorOverrideSettings (value.m_IColorOverrideSettings.all);
   end;

   function get_BrightnessOverrideSettings
   (
      this : in out DisplayEnhancementOverride
   )
   return WinRt.Windows.Graphics.Display.BrightnessOverrideSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IBrightnessOverrideSettings;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.BrightnessOverrideSettings do
         Hr := this.m_IDisplayEnhancementOverride.all.get_BrightnessOverrideSettings (m_ComRetVal'Access);
         Retval.m_IBrightnessOverrideSettings := new Windows.Graphics.Display.IBrightnessOverrideSettings;
         Retval.m_IBrightnessOverrideSettings.all := m_ComRetVal;
      end return;
   end;

   procedure put_BrightnessOverrideSettings
   (
      this : in out DisplayEnhancementOverride;
      value : Windows.Graphics.Display.BrightnessOverrideSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.put_BrightnessOverrideSettings (value.m_IBrightnessOverrideSettings.all);
   end;

   function get_CanOverride
   (
      this : in out DisplayEnhancementOverride
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.get_CanOverride (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsOverrideActive
   (
      this : in out DisplayEnhancementOverride
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.get_IsOverrideActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCurrentDisplayEnhancementOverrideCapabilities
   (
      this : in out DisplayEnhancementOverride
   )
   return WinRt.Windows.Graphics.Display.DisplayEnhancementOverrideCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IDisplayEnhancementOverrideCapabilities;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.DisplayEnhancementOverrideCapabilities do
         Hr := this.m_IDisplayEnhancementOverride.all.GetCurrentDisplayEnhancementOverrideCapabilities (m_ComRetVal'Access);
         Retval.m_IDisplayEnhancementOverrideCapabilities := new Windows.Graphics.Display.IDisplayEnhancementOverrideCapabilities;
         Retval.m_IDisplayEnhancementOverrideCapabilities.all := m_ComRetVal;
      end return;
   end;

   procedure RequestOverride
   (
      this : in out DisplayEnhancementOverride
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.RequestOverride;
   end;

   procedure StopOverride
   (
      this : in out DisplayEnhancementOverride
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.StopOverride;
   end;

   function add_CanOverrideChanged
   (
      this : in out DisplayEnhancementOverride;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.add_CanOverrideChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CanOverrideChanged
   (
      this : in out DisplayEnhancementOverride;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.remove_CanOverrideChanged (token);
   end;

   function add_IsOverrideActiveChanged
   (
      this : in out DisplayEnhancementOverride;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.add_IsOverrideActiveChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsOverrideActiveChanged
   (
      this : in out DisplayEnhancementOverride;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.remove_IsOverrideActiveChanged (token);
   end;

   function add_DisplayEnhancementOverrideCapabilitiesChanged
   (
      this : in out DisplayEnhancementOverride;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.add_DisplayEnhancementOverrideCapabilitiesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DisplayEnhancementOverrideCapabilitiesChanged
   (
      this : in out DisplayEnhancementOverride;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayEnhancementOverride.all.remove_DisplayEnhancementOverrideCapabilitiesChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DisplayEnhancementOverrideCapabilities

   procedure Initialize (this : in out DisplayEnhancementOverrideCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out DisplayEnhancementOverrideCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDisplayEnhancementOverrideCapabilities, IDisplayEnhancementOverrideCapabilities_Ptr);
   begin
      if this.m_IDisplayEnhancementOverrideCapabilities /= null then
         if this.m_IDisplayEnhancementOverrideCapabilities.all /= null then
            RefCount := this.m_IDisplayEnhancementOverrideCapabilities.all.Release;
            Free (this.m_IDisplayEnhancementOverrideCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DisplayEnhancementOverrideCapabilities

   function get_IsBrightnessControlSupported
   (
      this : in out DisplayEnhancementOverrideCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDisplayEnhancementOverrideCapabilities.all.get_IsBrightnessControlSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsBrightnessNitsControlSupported
   (
      this : in out DisplayEnhancementOverrideCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDisplayEnhancementOverrideCapabilities.all.get_IsBrightnessNitsControlSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetSupportedNitRanges
   (
      this : in out DisplayEnhancementOverrideCapabilities
   )
   return IVectorView_NitRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_NitRange.Kind;
   begin
      Hr := this.m_IDisplayEnhancementOverrideCapabilities.all.GetSupportedNitRanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_NitRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DisplayEnhancementOverrideCapabilitiesChangedEventArgs

   procedure Initialize (this : in out DisplayEnhancementOverrideCapabilitiesChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DisplayEnhancementOverrideCapabilitiesChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDisplayEnhancementOverrideCapabilitiesChangedEventArgs, IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_Ptr);
   begin
      if this.m_IDisplayEnhancementOverrideCapabilitiesChangedEventArgs /= null then
         if this.m_IDisplayEnhancementOverrideCapabilitiesChangedEventArgs.all /= null then
            RefCount := this.m_IDisplayEnhancementOverrideCapabilitiesChangedEventArgs.all.Release;
            Free (this.m_IDisplayEnhancementOverrideCapabilitiesChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DisplayEnhancementOverrideCapabilitiesChangedEventArgs

   function get_Capabilities
   (
      this : in out DisplayEnhancementOverrideCapabilitiesChangedEventArgs
   )
   return WinRt.Windows.Graphics.Display.DisplayEnhancementOverrideCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IDisplayEnhancementOverrideCapabilities;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.DisplayEnhancementOverrideCapabilities do
         Hr := this.m_IDisplayEnhancementOverrideCapabilitiesChangedEventArgs.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_IDisplayEnhancementOverrideCapabilities := new Windows.Graphics.Display.IDisplayEnhancementOverrideCapabilities;
         Retval.m_IDisplayEnhancementOverrideCapabilities.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DisplayInformation

   procedure Initialize (this : in out DisplayInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DisplayInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDisplayInformation, IDisplayInformation_Ptr);
   begin
      if this.m_IDisplayInformation /= null then
         if this.m_IDisplayInformation.all /= null then
            RefCount := this.m_IDisplayInformation.all.Release;
            Free (this.m_IDisplayInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DisplayInformation

   function GetForCurrentView
   return WinRt.Windows.Graphics.Display.DisplayInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayInformation");
      m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IDisplayInformation;
   begin
      return RetVal : WinRt.Windows.Graphics.Display.DisplayInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDisplayInformation := new Windows.Graphics.Display.IDisplayInformation;
            Retval.m_IDisplayInformation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AutoRotationPreferences
   return WinRt.Windows.Graphics.Display.DisplayOrientations is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayInformation");
      m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.DisplayOrientations;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDisplayInformationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AutoRotationPreferences (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_AutoRotationPreferences
   (
      value : Windows.Graphics.Display.DisplayOrientations
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayInformation");
      m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDisplayInformationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_AutoRotationPreferences (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function add_DisplayContentsInvalidated
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayInformation");
      m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDisplayInformationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_DisplayContentsInvalidated (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_DisplayContentsInvalidated
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayInformation");
      m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDisplayInformationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_DisplayContentsInvalidated (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DisplayInformation

   function get_CurrentOrientation
   (
      this : in out DisplayInformation
   )
   return WinRt.Windows.Graphics.Display.DisplayOrientations is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.DisplayOrientations;
   begin
      Hr := this.m_IDisplayInformation.all.get_CurrentOrientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NativeOrientation
   (
      this : in out DisplayInformation
   )
   return WinRt.Windows.Graphics.Display.DisplayOrientations is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.DisplayOrientations;
   begin
      Hr := this.m_IDisplayInformation.all.get_NativeOrientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_OrientationChanged
   (
      this : in out DisplayInformation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayInformation.all.add_OrientationChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_OrientationChanged
   (
      this : in out DisplayInformation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayInformation.all.remove_OrientationChanged (token);
   end;

   function get_ResolutionScale
   (
      this : in out DisplayInformation
   )
   return WinRt.Windows.Graphics.Display.ResolutionScale is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.ResolutionScale;
   begin
      Hr := this.m_IDisplayInformation.all.get_ResolutionScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LogicalDpi
   (
      this : in out DisplayInformation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayInformation.all.get_LogicalDpi (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawDpiX
   (
      this : in out DisplayInformation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayInformation.all.get_RawDpiX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawDpiY
   (
      this : in out DisplayInformation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayInformation.all.get_RawDpiY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_DpiChanged
   (
      this : in out DisplayInformation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayInformation.all.add_DpiChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DpiChanged
   (
      this : in out DisplayInformation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayInformation.all.remove_DpiChanged (token);
   end;

   function get_StereoEnabled
   (
      this : in out DisplayInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDisplayInformation.all.get_StereoEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_StereoEnabledChanged
   (
      this : in out DisplayInformation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayInformation.all.add_StereoEnabledChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StereoEnabledChanged
   (
      this : in out DisplayInformation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayInformation.all.remove_StereoEnabledChanged (token);
   end;

   function GetColorProfileAsync
   (
      this : in out DisplayInformation
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDisplayInformation.all.GetColorProfileAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_ColorProfileChanged
   (
      this : in out DisplayInformation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDisplayInformation.all.add_ColorProfileChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ColorProfileChanged
   (
      this : in out DisplayInformation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayInformation.all.remove_ColorProfileChanged (token);
   end;

   function get_RawPixelsPerViewPixel
   (
      this : in out DisplayInformation
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation2, WinRt.Windows.Graphics.Display.IID_IDisplayInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayInformation.all);
      Hr := m_Interface.get_RawPixelsPerViewPixel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DiagonalSizeInInches
   (
      this : in out DisplayInformation
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation3, WinRt.Windows.Graphics.Display.IID_IDisplayInformation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayInformation.all);
      Hr := m_Interface.get_DiagonalSizeInInches (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ScreenWidthInRawPixels
   (
      this : in out DisplayInformation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation4, WinRt.Windows.Graphics.Display.IID_IDisplayInformation4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayInformation.all);
      Hr := m_Interface.get_ScreenWidthInRawPixels (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ScreenHeightInRawPixels
   (
      this : in out DisplayInformation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation4, WinRt.Windows.Graphics.Display.IID_IDisplayInformation4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayInformation.all);
      Hr := m_Interface.get_ScreenHeightInRawPixels (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetAdvancedColorInfo
   (
      this : in out DisplayInformation
   )
   return WinRt.Windows.Graphics.Display.AdvancedColorInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Display.IAdvancedColorInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation5, WinRt.Windows.Graphics.Display.IID_IDisplayInformation5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Display.AdvancedColorInfo do
         m_Interface := QInterface (this.m_IDisplayInformation.all);
         Hr := m_Interface.GetAdvancedColorInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdvancedColorInfo := new Windows.Graphics.Display.IAdvancedColorInfo;
         Retval.m_IAdvancedColorInfo.all := m_ComRetVal;
      end return;
   end;

   function add_AdvancedColorInfoChanged
   (
      this : in out DisplayInformation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation5, WinRt.Windows.Graphics.Display.IID_IDisplayInformation5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayInformation.all);
      Hr := m_Interface.add_AdvancedColorInfoChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AdvancedColorInfoChanged
   (
      this : in out DisplayInformation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Display.IDisplayInformation5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Display.IDisplayInformation_Interface, WinRt.Windows.Graphics.Display.IDisplayInformation5, WinRt.Windows.Graphics.Display.IID_IDisplayInformation5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayInformation.all);
      Hr := m_Interface.remove_AdvancedColorInfoChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body DisplayProperties is

      function get_CurrentOrientation
      return WinRt.Windows.Graphics.Display.DisplayOrientations is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Graphics.Display.DisplayOrientations;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CurrentOrientation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_NativeOrientation
      return WinRt.Windows.Graphics.Display.DisplayOrientations is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Graphics.Display.DisplayOrientations;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NativeOrientation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AutoRotationPreferences_DisplayProperties
      return WinRt.Windows.Graphics.Display.DisplayOrientations is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Graphics.Display.DisplayOrientations;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AutoRotationPreferences (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_AutoRotationPreferences_DisplayProperties
      (
         value : Windows.Graphics.Display.DisplayOrientations
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_AutoRotationPreferences (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_OrientationChanged
      (
         handler : Windows.Graphics.Display.DisplayPropertiesEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_OrientationChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_OrientationChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_OrientationChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_ResolutionScale
      return WinRt.Windows.Graphics.Display.ResolutionScale is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Graphics.Display.ResolutionScale;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ResolutionScale (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LogicalDpi
      return WinRt.Single is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Single;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LogicalDpi (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_LogicalDpiChanged
      (
         handler : Windows.Graphics.Display.DisplayPropertiesEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_LogicalDpiChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_LogicalDpiChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_LogicalDpiChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_StereoEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StereoEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_StereoEnabledChanged
      (
         handler : Windows.Graphics.Display.DisplayPropertiesEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_StereoEnabledChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_StereoEnabledChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_StereoEnabledChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetColorProfileAsync
      return WinRt.Windows.Storage.Streams.IRandomAccessStream is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_IRandomAccessStream.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
         m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
         m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
         m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetColorProfileAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function add_ColorProfileChanged
      (
         handler : Windows.Graphics.Display.DisplayPropertiesEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ColorProfileChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ColorProfileChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ColorProfileChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_DisplayContentsInvalidated
      (
         handler : Windows.Graphics.Display.DisplayPropertiesEventHandler
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_DisplayContentsInvalidated (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_DisplayContentsInvalidated_DisplayProperties
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Display.DisplayProperties");
         m_Factory        : access WinRt.Windows.Graphics.Display.IDisplayPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_DisplayContentsInvalidated (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end DisplayProperties;

   -----------------------------------------------------------------------------
   -- Delegate DisplayPropertiesEventHandler

   function Invoke
   (
      this : access DisplayPropertiesEventHandler_Delegate;
      sender : WinRt.IInspectable
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

end;

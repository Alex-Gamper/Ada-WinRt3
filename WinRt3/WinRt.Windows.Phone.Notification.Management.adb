--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Appointments;
with WinRt.Windows.ApplicationModel.Email;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Phone.Notification.Management is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AccessoryManager is

      procedure RingDevice is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RingDevice;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_SpeedDialList
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SpeedDialList (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ClearToast
      (
         instanceId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_instanceId : WinRt.HString := To_HString (instanceId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ClearToast (HStr_instanceId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_instanceId);
      end;

      function get_IsPhonePinLocked
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsPhonePinLocked (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure IncreaseVolume
      (
         step : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IncreaseVolume (step);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure DecreaseVolume
      (
         step : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DecreaseVolume (step);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SetMute
      (
         mute : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetMute (mute);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SetRingerVibrate
      (
         ringer : WinRt.Boolean;
         vibrate : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetRingerVibrate (ringer, vibrate);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_VolumeInfo
      return WinRt.Windows.Phone.Notification.Management.VolumeInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.IVolumeInfo;
      begin
         return RetVal : WinRt.Windows.Phone.Notification.Management.VolumeInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_VolumeInfo (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IVolumeInfo := new Windows.Phone.Notification.Management.IVolumeInfo;
               Retval.m_IVolumeInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetAllEmailAccounts
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAllEmailAccounts (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetFolders
      (
         emailAccount : WinRt.WString
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         HStr_emailAccount : WinRt.HString := To_HString (emailAccount);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFolders (HStr_emailAccount, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_emailAccount);
         return m_ComRetVal;
      end;

      procedure EnableEmailNotificationEmailAccount
      (
         emailAccount : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_emailAccount : WinRt.HString := To_HString (emailAccount);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnableEmailNotificationEmailAccount (HStr_emailAccount);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_emailAccount);
      end;

      procedure DisableEmailNotificationEmailAccount
      (
         emailAccount : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_emailAccount : WinRt.HString := To_HString (emailAccount);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DisableEmailNotificationEmailAccount (HStr_emailAccount);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_emailAccount);
      end;

      procedure EnableEmailNotificationFolderFilter
      (
         emailAccount : WinRt.WString;
         folders : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_emailAccount : WinRt.HString := To_HString (emailAccount);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnableEmailNotificationFolderFilter (HStr_emailAccount, folders);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_emailAccount);
      end;

      procedure UpdateEmailReadStatus
      (
         messageEntryId : Windows.Phone.Notification.Management.BinaryId'Class;
         isRead : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UpdateEmailReadStatus (messageEntryId.m_IBinaryId.all, isRead);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RegisterAccessoryApp
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterAccessoryApp (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetNextTriggerDetails
      return WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetNextTriggerDetails (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ProcessTriggerDetails
      (
         pDetails : Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ProcessTriggerDetails (pDetails);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_PhoneLineDetails
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneLineDetails (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetPhoneLineDetails
      (
         phoneLine : WinRt.Guid
      )
      return WinRt.Windows.Phone.Notification.Management.PhoneLineDetails is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.IPhoneLineDetails;
      begin
         return RetVal : WinRt.Windows.Phone.Notification.Management.PhoneLineDetails do
            Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetPhoneLineDetails (phoneLine, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPhoneLineDetails := new Windows.Phone.Notification.Management.IPhoneLineDetails;
               Retval.m_IPhoneLineDetails.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure AcceptPhoneCall
      (
         phoneCallId : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AcceptPhoneCall (phoneCallId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure AcceptPhoneCall
      (
         phoneCallId : WinRt.UInt32;
         endPoint : Windows.Phone.Notification.Management.PhoneCallAudioEndpoint
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AcceptPhoneCall (phoneCallId, endPoint);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure AcceptPhoneCallWithVideo
      (
         phoneCallId : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AcceptPhoneCallWithVideo (phoneCallId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure AcceptPhoneCallWithVideo
      (
         phoneCallId : WinRt.UInt32;
         endPoint : Windows.Phone.Notification.Management.PhoneCallAudioEndpoint
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AcceptPhoneCallWithVideo (phoneCallId, endPoint);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RejectPhoneCall
      (
         phoneCallId : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RejectPhoneCall (phoneCallId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RejectPhoneCall
      (
         phoneCallId : WinRt.UInt32;
         textResponseID : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RejectPhoneCall (phoneCallId, textResponseID);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure MakePhoneCall
      (
         phoneLine : WinRt.Guid;
         phoneNumber : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.MakePhoneCall (phoneLine, HStr_phoneNumber);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_phoneNumber);
      end;

      procedure MakePhoneCall
      (
         phoneLine : WinRt.Guid;
         phoneNumber : WinRt.WString;
         endPoint : Windows.Phone.Notification.Management.PhoneCallAudioEndpoint
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.MakePhoneCall (phoneLine, HStr_phoneNumber, endPoint);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_phoneNumber);
      end;

      procedure MakePhoneCallWithVideo
      (
         phoneLine : WinRt.Guid;
         phoneNumber : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.MakePhoneCallWithVideo (phoneLine, HStr_phoneNumber);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_phoneNumber);
      end;

      procedure MakePhoneCallWithVideo
      (
         phoneLine : WinRt.Guid;
         phoneNumber : WinRt.WString;
         endPoint : Windows.Phone.Notification.Management.PhoneCallAudioEndpoint
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.MakePhoneCallWithVideo (phoneLine, HStr_phoneNumber, endPoint);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_phoneNumber);
      end;

      procedure SwapPhoneCalls
      (
         phoneCallIdToHold : WinRt.UInt32;
         phoneCallIdOnHold : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SwapPhoneCalls (phoneCallIdToHold, phoneCallIdOnHold);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure HoldPhoneCall
      (
         phoneCallId : WinRt.UInt32;
         holdCall : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.HoldPhoneCall (phoneCallId, holdCall);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure EndPhoneCall
      (
         phoneCallId : WinRt.UInt32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EndPhoneCall (phoneCallId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure put_PhoneMute
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_PhoneMute (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_PhoneMute
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneMute (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_PhoneCallAudioEndpoint
      (
         value : Windows.Phone.Notification.Management.PhoneCallAudioEndpoint
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_PhoneCallAudioEndpoint (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_PhoneCallAudioEndpoint
      return WinRt.Windows.Phone.Notification.Management.PhoneCallAudioEndpoint is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneCallAudioEndpoint;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneCallAudioEndpoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure SnoozeAlarm
      (
         alarmId : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SnoozeAlarm (alarmId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SnoozeAlarm
      (
         alarmId : WinRt.Guid;
         timeSpan : Windows.Foundation.TimeSpan
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SnoozeAlarm (alarmId, timeSpan);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure DismissAlarm
      (
         alarmId : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DismissAlarm (alarmId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SnoozeReminder
      (
         reminderId : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SnoozeReminder (reminderId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SnoozeReminder
      (
         reminderId : WinRt.Guid;
         timeSpan : Windows.Foundation.TimeSpan
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SnoozeReminder (reminderId, timeSpan);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure DismissReminder
      (
         reminderId : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DismissReminder (reminderId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetMediaMetadata
      return WinRt.Windows.Phone.Notification.Management.MediaMetadata is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.IMediaMetadata;
      begin
         return RetVal : WinRt.Windows.Phone.Notification.Management.MediaMetadata do
            Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetMediaMetadata (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IMediaMetadata := new Windows.Phone.Notification.Management.IMediaMetadata;
               Retval.m_IMediaMetadata.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_MediaPlaybackCapabilities
      return WinRt.Windows.Phone.Notification.Management.PlaybackCapability is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.PlaybackCapability;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MediaPlaybackCapabilities (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MediaPlaybackStatus
      return WinRt.Windows.Phone.Notification.Management.PlaybackStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Notification.Management.PlaybackStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MediaPlaybackStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure PerformMediaPlaybackCommand
      (
         command : Windows.Phone.Notification.Management.PlaybackCommand
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PerformMediaPlaybackCommand (command);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_DoNotDisturbEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DoNotDisturbEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DrivingModeEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DrivingModeEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BatterySaverState
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BatterySaverState (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetApps
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetApps (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure EnableNotificationsForApplication
      (
         appId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appId : WinRt.HString := To_HString (appId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnableNotificationsForApplication (HStr_appId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appId);
      end;

      procedure DisableNotificationsForApplication
      (
         appId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_appId : WinRt.HString := To_HString (appId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DisableNotificationsForApplication (HStr_appId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appId);
      end;

      function IsNotificationEnabledForApplication
      (
         appId : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
         HStr_appId : WinRt.HString := To_HString (appId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsNotificationEnabledForApplication (HStr_appId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appId);
         return m_ComRetVal;
      end;

      function GetEnabledAccessoryNotificationTypes
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetEnabledAccessoryNotificationTypes (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure EnableAccessoryNotificationTypes
      (
         accessoryNotificationTypes : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.EnableAccessoryNotificationTypes (accessoryNotificationTypes);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure DisableAllAccessoryNotificationTypes is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DisableAllAccessoryNotificationTypes;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetUserConsent
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetUserConsent (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetAppIcon
      (
         appId : WinRt.WString
      )
      return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
         HStr_appId : WinRt.HString := To_HString (appId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAppIcon (HStr_appId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appId);
         return m_ComRetVal;
      end;

      procedure SnoozeAlarmByInstanceId
      (
         instanceId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_instanceId : WinRt.HString := To_HString (instanceId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SnoozeAlarmByInstanceId (HStr_instanceId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_instanceId);
      end;

      procedure DismissAlarmByInstanceId
      (
         instanceId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_instanceId : WinRt.HString := To_HString (instanceId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DismissAlarmByInstanceId (HStr_instanceId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_instanceId);
      end;

      procedure SnoozeReminderByInstanceId
      (
         instanceId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_instanceId : WinRt.HString := To_HString (instanceId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SnoozeReminderByInstanceId (HStr_instanceId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_instanceId);
      end;

      procedure DismissReminderByInstanceId
      (
         instanceId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Notification.Management.AccessoryManager");
         m_Factory        : access WinRt.Windows.Phone.Notification.Management.IAccessoryManager3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_instanceId : WinRt.HString := To_HString (instanceId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAccessoryManager3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DismissReminderByInstanceId (HStr_instanceId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_instanceId);
      end;

   end AccessoryManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AlarmNotificationTriggerDetails

   procedure Initialize (this : in out AlarmNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out AlarmNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAlarmNotificationTriggerDetails, IAlarmNotificationTriggerDetails_Ptr);
   begin
      if this.m_IAlarmNotificationTriggerDetails /= null then
         if this.m_IAlarmNotificationTriggerDetails.all /= null then
            RefCount := this.m_IAlarmNotificationTriggerDetails.all.Release;
            Free (this.m_IAlarmNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AlarmNotificationTriggerDetails

   function get_AlarmId
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IAlarmNotificationTriggerDetails.all.get_AlarmId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Title
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAlarmNotificationTriggerDetails.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Timestamp
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAlarmNotificationTriggerDetails.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReminderState
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.ReminderState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.ReminderState;
   begin
      Hr := this.m_IAlarmNotificationTriggerDetails.all.get_ReminderState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeCreated
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out AlarmNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InstanceId
   (
      this : in out AlarmNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAlarmNotificationTriggerDetails2, WinRt.Windows.Phone.Notification.Management.IID_IAlarmNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAlarmNotificationTriggerDetails.all);
      Hr := m_Interface.get_InstanceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppNotificationInfo

   procedure Initialize (this : in out AppNotificationInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppNotificationInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppNotificationInfo, IAppNotificationInfo_Ptr);
   begin
      if this.m_IAppNotificationInfo /= null then
         if this.m_IAppNotificationInfo.all /= null then
            RefCount := this.m_IAppNotificationInfo.all.Release;
            Free (this.m_IAppNotificationInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppNotificationInfo

   function get_Id
   (
      this : in out AppNotificationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppNotificationInfo.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out AppNotificationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppNotificationInfo.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BinaryId

   procedure Initialize (this : in out BinaryId) is
   begin
      null;
   end;

   procedure Finalize (this : in out BinaryId) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBinaryId, IBinaryId_Ptr);
   begin
      if this.m_IBinaryId /= null then
         if this.m_IBinaryId.all /= null then
            RefCount := this.m_IBinaryId.all.Release;
            Free (this.m_IBinaryId);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BinaryId

   function get_Id
   (
      this : in out BinaryId
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IBinaryId.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Length
   (
      this : in out BinaryId
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBinaryId.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CalendarChangedNotificationTriggerDetails

   procedure Initialize (this : in out CalendarChangedNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out CalendarChangedNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICalendarChangedNotificationTriggerDetails, ICalendarChangedNotificationTriggerDetails_Ptr);
   begin
      if this.m_ICalendarChangedNotificationTriggerDetails /= null then
         if this.m_ICalendarChangedNotificationTriggerDetails.all /= null then
            RefCount := this.m_ICalendarChangedNotificationTriggerDetails.all.Release;
            Free (this.m_ICalendarChangedNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CalendarChangedNotificationTriggerDetails

   function get_EventType
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.CalendarChangedEvent is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.CalendarChangedEvent;
   begin
      Hr := this.m_ICalendarChangedNotificationTriggerDetails.all.get_EventType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ItemId
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarChangedNotificationTriggerDetails.all.get_ItemId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TimeCreated
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICalendarChangedNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarChangedNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICalendarChangedNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarChangedNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICalendarChangedNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarChangedNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICalendarChangedNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarChangedNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out CalendarChangedNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICalendarChangedNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarChangedNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out CalendarChangedNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICalendarChangedNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarChangedNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CortanaTileNotificationTriggerDetails

   procedure Initialize (this : in out CortanaTileNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out CortanaTileNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICortanaTileNotificationTriggerDetails, ICortanaTileNotificationTriggerDetails_Ptr);
   begin
      if this.m_ICortanaTileNotificationTriggerDetails /= null then
         if this.m_ICortanaTileNotificationTriggerDetails.all /= null then
            RefCount := this.m_ICortanaTileNotificationTriggerDetails.all.Release;
            Free (this.m_ICortanaTileNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CortanaTileNotificationTriggerDetails

   function get_TileId
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_TileId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Content
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_Content (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LargeContent1
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_LargeContent1 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LargeContent2
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_LargeContent2 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmphasizedText
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_EmphasizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NonWrappedSmallContent1
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_NonWrappedSmallContent1 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NonWrappedSmallContent2
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_NonWrappedSmallContent2 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NonWrappedSmallContent3
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_NonWrappedSmallContent3 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NonWrappedSmallContent4
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_NonWrappedSmallContent4 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Source
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICortanaTileNotificationTriggerDetails.all.get_Source (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TimeCreated
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICortanaTileNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICortanaTileNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICortanaTileNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICortanaTileNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICortanaTileNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICortanaTileNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICortanaTileNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICortanaTileNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out CortanaTileNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICortanaTileNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICortanaTileNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out CortanaTileNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.ICortanaTileNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICortanaTileNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailAccountInfo

   procedure Initialize (this : in out EmailAccountInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailAccountInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailAccountInfo, IEmailAccountInfo_Ptr);
   begin
      if this.m_IEmailAccountInfo /= null then
         if this.m_IEmailAccountInfo.all /= null then
            RefCount := this.m_IEmailAccountInfo.all.Release;
            Free (this.m_IEmailAccountInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailAccountInfo

   function get_DisplayName
   (
      this : in out EmailAccountInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailAccountInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsNotificationEnabled
   (
      this : in out EmailAccountInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEmailAccountInfo.all.get_IsNotificationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailFolderInfo

   procedure Initialize (this : in out EmailFolderInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailFolderInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailFolderInfo, IEmailFolderInfo_Ptr);
   begin
      if this.m_IEmailFolderInfo /= null then
         if this.m_IEmailFolderInfo.all /= null then
            RefCount := this.m_IEmailFolderInfo.all.Release;
            Free (this.m_IEmailFolderInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailFolderInfo

   function get_DisplayName
   (
      this : in out EmailFolderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailFolderInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsNotificationEnabled
   (
      this : in out EmailFolderInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEmailFolderInfo.all.get_IsNotificationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailNotificationTriggerDetails

   procedure Initialize (this : in out EmailNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailNotificationTriggerDetails, IEmailNotificationTriggerDetails_Ptr);
   begin
      if this.m_IEmailNotificationTriggerDetails /= null then
         if this.m_IEmailNotificationTriggerDetails.all /= null then
            RefCount := this.m_IEmailNotificationTriggerDetails.all.Release;
            Free (this.m_IEmailNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailNotificationTriggerDetails

   function get_AccountName
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailNotificationTriggerDetails.all.get_AccountName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentFolderName
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailNotificationTriggerDetails.all.get_ParentFolderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SenderName
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailNotificationTriggerDetails.all.get_SenderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SenderAddress
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailNotificationTriggerDetails.all.get_SenderAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMessage
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Email.EmailMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.IEmailMessage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.EmailMessage do
         Hr := this.m_IEmailNotificationTriggerDetails.all.get_EmailMessage (m_ComRetVal'Access);
         Retval.m_IEmailMessage := new Windows.ApplicationModel.Email.IEmailMessage;
         Retval.m_IEmailMessage.all := m_ComRetVal;
      end return;
   end;

   function get_Timestamp
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IEmailNotificationTriggerDetails.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeCreated
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out EmailNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MessageEntryId
   (
      this : in out EmailNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.BinaryId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.IBinaryId;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IEmailNotificationTriggerDetails2, WinRt.Windows.Phone.Notification.Management.IID_IEmailNotificationTriggerDetails2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Phone.Notification.Management.BinaryId do
         m_Interface := QInterface (this.m_IEmailNotificationTriggerDetails.all);
         Hr := m_Interface.get_MessageEntryId (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBinaryId := new Windows.Phone.Notification.Management.IBinaryId;
         Retval.m_IBinaryId.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailReadNotificationTriggerDetails

   procedure Initialize (this : in out EmailReadNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailReadNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailReadNotificationTriggerDetails, IEmailReadNotificationTriggerDetails_Ptr);
   begin
      if this.m_IEmailReadNotificationTriggerDetails /= null then
         if this.m_IEmailReadNotificationTriggerDetails.all /= null then
            RefCount := this.m_IEmailReadNotificationTriggerDetails.all.Release;
            Free (this.m_IEmailReadNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailReadNotificationTriggerDetails

   function get_AccountName
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailReadNotificationTriggerDetails.all.get_AccountName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentFolderName
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailReadNotificationTriggerDetails.all.get_ParentFolderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MessageEntryId
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.BinaryId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.IBinaryId;
   begin
      return RetVal : WinRt.Windows.Phone.Notification.Management.BinaryId do
         Hr := this.m_IEmailReadNotificationTriggerDetails.all.get_MessageEntryId (m_ComRetVal'Access);
         Retval.m_IBinaryId := new Windows.Phone.Notification.Management.IBinaryId;
         Retval.m_IBinaryId.all := m_ComRetVal;
      end return;
   end;

   function get_IsRead
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEmailReadNotificationTriggerDetails.all.get_IsRead (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeCreated
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailReadNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailReadNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailReadNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailReadNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailReadNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailReadNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailReadNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailReadNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out EmailReadNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailReadNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailReadNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out EmailReadNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IEmailReadNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEmailReadNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaControlsTriggerDetails

   procedure Initialize (this : in out MediaControlsTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaControlsTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaControlsTriggerDetails, IMediaControlsTriggerDetails_Ptr);
   begin
      if this.m_IMediaControlsTriggerDetails /= null then
         if this.m_IMediaControlsTriggerDetails.all /= null then
            RefCount := this.m_IMediaControlsTriggerDetails.all.Release;
            Free (this.m_IMediaControlsTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaControlsTriggerDetails

   function get_PlaybackStatus
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PlaybackStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PlaybackStatus;
   begin
      Hr := this.m_IMediaControlsTriggerDetails.all.get_PlaybackStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaMetadata
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.MediaMetadata'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.IMediaMetadata;
   begin
      return RetVal : WinRt.Windows.Phone.Notification.Management.MediaMetadata do
         Hr := this.m_IMediaControlsTriggerDetails.all.get_MediaMetadata (m_ComRetVal'Access);
         Retval.m_IMediaMetadata := new Windows.Phone.Notification.Management.IMediaMetadata;
         Retval.m_IMediaMetadata.all := m_ComRetVal;
      end return;
   end;

   function get_TimeCreated
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IMediaControlsTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaControlsTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IMediaControlsTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaControlsTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IMediaControlsTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaControlsTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IMediaControlsTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaControlsTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out MediaControlsTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IMediaControlsTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaControlsTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out MediaControlsTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IMediaControlsTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaControlsTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaMetadata

   procedure Initialize (this : in out MediaMetadata) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaMetadata) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaMetadata, IMediaMetadata_Ptr);
   begin
      if this.m_IMediaMetadata /= null then
         if this.m_IMediaMetadata.all /= null then
            RefCount := this.m_IMediaMetadata.all.Release;
            Free (this.m_IMediaMetadata);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaMetadata

   function get_Title
   (
      this : in out MediaMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaMetadata.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Subtitle
   (
      this : in out MediaMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaMetadata.all.get_Subtitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Artist
   (
      this : in out MediaMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaMetadata.all.get_Artist (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Album
   (
      this : in out MediaMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaMetadata.all.get_Album (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Track
   (
      this : in out MediaMetadata
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaMetadata.all.get_Track (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out MediaMetadata
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaMetadata.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Thumbnail
   (
      this : in out MediaMetadata
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IMediaMetadata.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallDetails

   procedure Initialize (this : in out PhoneCallDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallDetails, IPhoneCallDetails_Ptr);
   begin
      if this.m_IPhoneCallDetails /= null then
         if this.m_IPhoneCallDetails.all /= null then
            RefCount := this.m_IPhoneCallDetails.all.Release;
            Free (this.m_IPhoneCallDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallDetails

   function get_PhoneLine
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_PhoneLine (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallId
   (
      this : in out PhoneCallDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_CallId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallTransport
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneCallTransport is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneCallTransport;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_CallTransport (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallMediaType
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneMediaType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneMediaType;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_CallMediaType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallDirection
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneCallDirection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneCallDirection;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_CallDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_State
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneCallState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneCallState;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConferenceCallId
   (
      this : in out PhoneCallDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_ConferenceCallId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StartTime
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EndTime
   (
      this : in out PhoneCallDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_EndTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhoneNumber
   (
      this : in out PhoneCallDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContactName
   (
      this : in out PhoneCallDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_ContactName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PresetTextResponses
   (
      this : in out PhoneCallDetails
   )
   return IVectorView_ITextResponse.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITextResponse.Kind;
   begin
      Hr := this.m_IPhoneCallDetails.all.get_PresetTextResponses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITextResponse (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineDetails

   procedure Initialize (this : in out PhoneLineDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineDetails, IPhoneLineDetails_Ptr);
   begin
      if this.m_IPhoneLineDetails /= null then
         if this.m_IPhoneLineDetails.all /= null then
            RefCount := this.m_IPhoneLineDetails.all.Release;
            Free (this.m_IPhoneLineDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineDetails

   function get_LineId
   (
      this : in out PhoneLineDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneLineDetails.all.get_LineId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayName
   (
      this : in out PhoneLineDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneLineDetails.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LineNumber
   (
      this : in out PhoneLineDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneLineDetails.all.get_LineNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DefaultOutgoingLine
   (
      this : in out PhoneLineDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLineDetails.all.get_DefaultOutgoingLine (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VoicemailCount
   (
      this : in out PhoneLineDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhoneLineDetails.all.get_VoicemailCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RegistrationState
   (
      this : in out PhoneLineDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneLineRegistrationState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneLineRegistrationState;
   begin
      Hr := this.m_IPhoneLineDetails.all.get_RegistrationState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MissedCallCount
   (
      this : in out PhoneLineDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IPhoneLineDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneLineDetails_Interface, WinRt.Windows.Phone.Notification.Management.IPhoneLineDetails2, WinRt.Windows.Phone.Notification.Management.IID_IPhoneLineDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneLineDetails.all);
      Hr := m_Interface.get_MissedCallCount (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneNotificationTriggerDetails

   procedure Initialize (this : in out PhoneNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneNotificationTriggerDetails, IPhoneNotificationTriggerDetails_Ptr);
   begin
      if this.m_IPhoneNotificationTriggerDetails /= null then
         if this.m_IPhoneNotificationTriggerDetails.all /= null then
            RefCount := this.m_IPhoneNotificationTriggerDetails.all.Release;
            Free (this.m_IPhoneNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneNotificationTriggerDetails

   function get_PhoneNotificationType
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.PhoneNotificationType;
   begin
      Hr := this.m_IPhoneNotificationTriggerDetails.all.get_PhoneNotificationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallDetails
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.PhoneCallDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.IPhoneCallDetails;
   begin
      return RetVal : WinRt.Windows.Phone.Notification.Management.PhoneCallDetails do
         Hr := this.m_IPhoneNotificationTriggerDetails.all.get_CallDetails (m_ComRetVal'Access);
         Retval.m_IPhoneCallDetails := new Windows.Phone.Notification.Management.IPhoneCallDetails;
         Retval.m_IPhoneCallDetails.all := m_ComRetVal;
      end return;
   end;

   function get_PhoneLineChangedId
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneNotificationTriggerDetails.all.get_PhoneLineChangedId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeCreated
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out PhoneNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out PhoneNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IPhoneNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ReminderNotificationTriggerDetails

   procedure Initialize (this : in out ReminderNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ReminderNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IReminderNotificationTriggerDetails, IReminderNotificationTriggerDetails_Ptr);
   begin
      if this.m_IReminderNotificationTriggerDetails /= null then
         if this.m_IReminderNotificationTriggerDetails.all /= null then
            RefCount := this.m_IReminderNotificationTriggerDetails.all.Release;
            Free (this.m_IReminderNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ReminderNotificationTriggerDetails

   function get_ReminderId
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IReminderNotificationTriggerDetails.all.get_ReminderId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Title
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IReminderNotificationTriggerDetails.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IReminderNotificationTriggerDetails.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Details
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IReminderNotificationTriggerDetails.all.get_Details (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Timestamp
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IReminderNotificationTriggerDetails.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Appointment
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IReminderNotificationTriggerDetails.all.get_Appointment (m_ComRetVal'Access);
         Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
         Retval.m_IAppointment.all := m_ComRetVal;
      end return;
   end;

   function get_ReminderState
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.ReminderState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.ReminderState;
   begin
      Hr := this.m_IReminderNotificationTriggerDetails.all.get_ReminderState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeCreated
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out ReminderNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InstanceId
   (
      this : in out ReminderNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IReminderNotificationTriggerDetails2, WinRt.Windows.Phone.Notification.Management.IID_IReminderNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReminderNotificationTriggerDetails.all);
      Hr := m_Interface.get_InstanceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeedDialEntry

   procedure Initialize (this : in out SpeedDialEntry) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeedDialEntry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeedDialEntry, ISpeedDialEntry_Ptr);
   begin
      if this.m_ISpeedDialEntry /= null then
         if this.m_ISpeedDialEntry.all /= null then
            RefCount := this.m_ISpeedDialEntry.all.Release;
            Free (this.m_ISpeedDialEntry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeedDialEntry

   function get_PhoneNumber
   (
      this : in out SpeedDialEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeedDialEntry.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NumberType
   (
      this : in out SpeedDialEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeedDialEntry.all.get_NumberType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContactName
   (
      this : in out SpeedDialEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeedDialEntry.all.get_ContactName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextResponse

   procedure Initialize (this : in out TextResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextResponse, ITextResponse_Ptr);
   begin
      if this.m_ITextResponse /= null then
         if this.m_ITextResponse.all /= null then
            RefCount := this.m_ITextResponse.all.Release;
            Free (this.m_ITextResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextResponse

   function get_Id
   (
      this : in out TextResponse
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITextResponse.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Content
   (
      this : in out TextResponse
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITextResponse.all.get_Content (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationTriggerDetails

   procedure Initialize (this : in out ToastNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToastNotificationTriggerDetails, IToastNotificationTriggerDetails_Ptr);
   begin
      if this.m_IToastNotificationTriggerDetails /= null then
         if this.m_IToastNotificationTriggerDetails.all /= null then
            RefCount := this.m_IToastNotificationTriggerDetails.all.Release;
            Free (this.m_IToastNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationTriggerDetails

   function get_Text1
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationTriggerDetails.all.get_Text1 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Text2
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationTriggerDetails.all.get_Text2 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Text3
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationTriggerDetails.all.get_Text3 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Text4
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IToastNotificationTriggerDetails.all.get_Text4 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SuppressPopup
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IToastNotificationTriggerDetails.all.get_SuppressPopup (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TimeCreated
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.get_TimeCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AppDisplayName
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.get_AppId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AccessoryNotificationType
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.Windows.Phone.Notification.Management.AccessoryNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.AccessoryNotificationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.get_AccessoryNotificationType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StartedProcessing
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.get_StartedProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StartedProcessing
   (
      this : in out ToastNotificationTriggerDetails;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IAccessoryNotificationTriggerDetails, WinRt.Windows.Phone.Notification.Management.IID_IAccessoryNotificationTriggerDetails'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.put_StartedProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InstanceId
   (
      this : in out ToastNotificationTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails_Interface, WinRt.Windows.Phone.Notification.Management.IToastNotificationTriggerDetails2, WinRt.Windows.Phone.Notification.Management.IID_IToastNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToastNotificationTriggerDetails.all);
      Hr := m_Interface.get_InstanceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VolumeInfo

   procedure Initialize (this : in out VolumeInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out VolumeInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVolumeInfo, IVolumeInfo_Ptr);
   begin
      if this.m_IVolumeInfo /= null then
         if this.m_IVolumeInfo.all /= null then
            RefCount := this.m_IVolumeInfo.all.Release;
            Free (this.m_IVolumeInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VolumeInfo

   function get_SystemVolume
   (
      this : in out VolumeInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVolumeInfo.all.get_SystemVolume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallVolume
   (
      this : in out VolumeInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVolumeInfo.all.get_CallVolume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaVolume
   (
      this : in out VolumeInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVolumeInfo.all.get_MediaVolume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsMuted
   (
      this : in out VolumeInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVolumeInfo.all.get_IsMuted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVibrateEnabled
   (
      this : in out VolumeInfo
   )
   return WinRt.Windows.Phone.Notification.Management.VibrateState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Notification.Management.VibrateState;
   begin
      Hr := this.m_IVolumeInfo.all.get_IsVibrateEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

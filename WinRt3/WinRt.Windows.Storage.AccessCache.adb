--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Storage.AccessCache is

   package IVectorView_AccessListEntry is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Storage.AccessCache.AccessListEntry);
   package IIterable_AccessListEntry is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Storage.AccessCache.AccessListEntry);
   package IAsyncOperation_IStorageItem is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageItem);
   package AsyncOperationCompletedHandler_IStorageItem is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageItem);

   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   package IAsyncOperation_StorageFolder is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFolder);
   package AsyncOperationCompletedHandler_StorageFolder is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFolder);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AccessListEntryView

   procedure Initialize (this : in out AccessListEntryView) is
   begin
      null;
   end;

   procedure Finalize (this : in out AccessListEntryView) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AccessListEntryView

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Storage.AccessCache.AccessListEntry>
   function GetAt
   (
      this : in out AccessListEntryView;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Storage.AccessCache.AccessListEntry is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_AccessListEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.AccessCache.AccessListEntry;
      m_GenericIID     : aliased WinRt.IID := (1119132554, 12308, 23847, (143, 44, 30, 245, 238, 137, 236, 0 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_AccessListEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out AccessListEntryView
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_AccessListEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1119132554, 12308, 23847, (143, 44, 30, 245, 238, 137, 236, 0 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_AccessListEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out AccessListEntryView;
      value : Windows.Storage.AccessCache.AccessListEntry;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_AccessListEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1119132554, 12308, 23847, (143, 44, 30, 245, 238, 137, 236, 0 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_AccessListEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out AccessListEntryView;
      startIndex : WinRt.UInt32;
      items : Windows.Storage.AccessCache.AccessListEntry_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_AccessListEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1119132554, 12308, 23847, (143, 44, 30, 245, 238, 137, 236, 0 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_AccessListEntry.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Storage.AccessCache.AccessListEntry>
   function First
   (
      this : in out AccessListEntryView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_AccessListEntry.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1234551472, 29547, 22669, (174, 66, 111, 105, 176, 37, 179, 136 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_AccessListEntry.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ItemRemovedEventArgs

   procedure Initialize (this : in out ItemRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ItemRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IItemRemovedEventArgs, IItemRemovedEventArgs_Ptr);
   begin
      if this.m_IItemRemovedEventArgs /= null then
         if this.m_IItemRemovedEventArgs.all /= null then
            RefCount := this.m_IItemRemovedEventArgs.all.Release;
            Free (this.m_IItemRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ItemRemovedEventArgs

   function get_RemovedEntry
   (
      this : in out ItemRemovedEventArgs
   )
   return WinRt.Windows.Storage.AccessCache.AccessListEntry is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.AccessCache.AccessListEntry;
   begin
      Hr := this.m_IItemRemovedEventArgs.all.get_RemovedEntry (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StorageApplicationPermissions is

      function GetFutureAccessListForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.Storage.AccessCache.StorageItemAccessList is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.AccessCache.StorageApplicationPermissions");
         m_Factory        : access WinRt.Windows.Storage.AccessCache.IStorageApplicationPermissionsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.AccessCache.IStorageItemAccessList;
      begin
         return RetVal : WinRt.Windows.Storage.AccessCache.StorageItemAccessList do
            Hr := RoGetActivationFactory (m_hString, IID_IStorageApplicationPermissionsStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetFutureAccessListForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStorageItemAccessList := new Windows.Storage.AccessCache.IStorageItemAccessList;
               Retval.m_IStorageItemAccessList.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetMostRecentlyUsedListForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.AccessCache.StorageApplicationPermissions");
         m_Factory        : access WinRt.Windows.Storage.AccessCache.IStorageApplicationPermissionsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList;
      begin
         return RetVal : WinRt.Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList do
            Hr := RoGetActivationFactory (m_hString, IID_IStorageApplicationPermissionsStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetMostRecentlyUsedListForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStorageItemMostRecentlyUsedList := new Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList;
               Retval.m_IStorageItemMostRecentlyUsedList.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_FutureAccessList
      return WinRt.Windows.Storage.AccessCache.StorageItemAccessList is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.AccessCache.StorageApplicationPermissions");
         m_Factory        : access WinRt.Windows.Storage.AccessCache.IStorageApplicationPermissionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.AccessCache.IStorageItemAccessList;
      begin
         return RetVal : WinRt.Windows.Storage.AccessCache.StorageItemAccessList do
            Hr := RoGetActivationFactory (m_hString, IID_IStorageApplicationPermissionsStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_FutureAccessList (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStorageItemAccessList := new Windows.Storage.AccessCache.IStorageItemAccessList;
               Retval.m_IStorageItemAccessList.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_MostRecentlyUsedList
      return WinRt.Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.AccessCache.StorageApplicationPermissions");
         m_Factory        : access WinRt.Windows.Storage.AccessCache.IStorageApplicationPermissionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList;
      begin
         return RetVal : WinRt.Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList do
            Hr := RoGetActivationFactory (m_hString, IID_IStorageApplicationPermissionsStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_MostRecentlyUsedList (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStorageItemMostRecentlyUsedList := new Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList;
               Retval.m_IStorageItemMostRecentlyUsedList.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end StorageApplicationPermissions;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageItemAccessList

   procedure Initialize (this : in out StorageItemAccessList) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageItemAccessList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageItemAccessList, IStorageItemAccessList_Ptr);
   begin
      if this.m_IStorageItemAccessList /= null then
         if this.m_IStorageItemAccessList.all /= null then
            RefCount := this.m_IStorageItemAccessList.all.Release;
            Free (this.m_IStorageItemAccessList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageItemAccessList

   function Add
   (
      this : in out StorageItemAccessList;
      file : Windows.Storage.IStorageItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageItemAccessList.all.Add (file, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Add
   (
      this : in out StorageItemAccessList;
      file : Windows.Storage.IStorageItem;
      metadata : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_metadata : WinRt.HString := To_HString (metadata);
   begin
      Hr := this.m_IStorageItemAccessList.all.Add (file, HStr_metadata, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_metadata);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AddOrReplace
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString;
      file : Windows.Storage.IStorageItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      Hr := this.m_IStorageItemAccessList.all.AddOrReplace (HStr_token, file);
      Hr := WindowsDeleteString (HStr_token);
   end;

   procedure AddOrReplace
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString;
      file : Windows.Storage.IStorageItem;
      metadata : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      HStr_metadata : WinRt.HString := To_HString (metadata);
   begin
      Hr := this.m_IStorageItemAccessList.all.AddOrReplace (HStr_token, file, HStr_metadata);
      Hr := WindowsDeleteString (HStr_token);
      Hr := WindowsDeleteString (HStr_metadata);
   end;

   function GetItemAsync
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString
   )
   return WinRt.Windows.Storage.IStorageItem is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IStorageItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IStorageItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageItem;
      m_IID            : aliased WinRt.IID := (1607057719, 60343, 24172, (156, 186, 104, 111, 46, 194, 176, 187 )); -- Windows.Storage.IStorageItem;
      m_HandlerIID     : aliased WinRt.IID := (2462257199, 41767, 21272, (166, 193, 118, 246, 178, 160, 171, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_IStorageItem.Kind := new AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IStorageItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IStorageItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate, AsyncOperationCompletedHandler_IStorageItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStorageItemAccessList.all.GetItemAsync (HStr_token, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_token);
      return m_RetVal;
   end;

   function GetFileAsync
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IStorageItemAccessList.all.GetFileAsync (HStr_token, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function GetFolderAsync
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IStorageItemAccessList.all.GetFolderAsync (HStr_token, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function GetItemAsync
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString;
      options : Windows.Storage.AccessCache.AccessCacheOptions
   )
   return WinRt.Windows.Storage.IStorageItem is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IStorageItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IStorageItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageItem;
      m_IID            : aliased WinRt.IID := (1607057719, 60343, 24172, (156, 186, 104, 111, 46, 194, 176, 187 )); -- Windows.Storage.IStorageItem;
      m_HandlerIID     : aliased WinRt.IID := (2462257199, 41767, 21272, (166, 193, 118, 246, 178, 160, 171, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_IStorageItem.Kind := new AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IStorageItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IStorageItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate, AsyncOperationCompletedHandler_IStorageItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStorageItemAccessList.all.GetItemAsync (HStr_token, options, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_token);
      return m_RetVal;
   end;

   function GetFileAsync
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString;
      options : Windows.Storage.AccessCache.AccessCacheOptions
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IStorageItemAccessList.all.GetFileAsync (HStr_token, options, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function GetFolderAsync
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString;
      options : Windows.Storage.AccessCache.AccessCacheOptions
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IStorageItemAccessList.all.GetFolderAsync (HStr_token, options, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   procedure Remove
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      Hr := this.m_IStorageItemAccessList.all.Remove (HStr_token);
      Hr := WindowsDeleteString (HStr_token);
   end;

   function ContainsItem
   (
      this : in out StorageItemAccessList;
      token : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      Hr := this.m_IStorageItemAccessList.all.ContainsItem (HStr_token, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_token);
      return m_ComRetVal;
   end;

   procedure Clear
   (
      this : in out StorageItemAccessList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageItemAccessList.all.Clear;
   end;

   function CheckAccess
   (
      this : in out StorageItemAccessList;
      file : Windows.Storage.IStorageItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorageItemAccessList.all.CheckAccess (file, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Entries
   (
      this : in out StorageItemAccessList
   )
   return WinRt.Windows.Storage.AccessCache.AccessListEntryView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Storage.AccessCache.AccessListEntryView do
         Hr := this.m_IStorageItemAccessList.all.get_Entries (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_MaximumItemsAllowed
   (
      this : in out StorageItemAccessList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStorageItemAccessList.all.get_MaximumItemsAllowed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageItemMostRecentlyUsedList

   procedure Initialize (this : in out StorageItemMostRecentlyUsedList) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageItemMostRecentlyUsedList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageItemMostRecentlyUsedList, IStorageItemMostRecentlyUsedList_Ptr);
   begin
      if this.m_IStorageItemMostRecentlyUsedList /= null then
         if this.m_IStorageItemMostRecentlyUsedList.all /= null then
            RefCount := this.m_IStorageItemMostRecentlyUsedList.all.Release;
            Free (this.m_IStorageItemMostRecentlyUsedList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageItemMostRecentlyUsedList

   function add_ItemRemoved
   (
      this : in out StorageItemMostRecentlyUsedList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStorageItemMostRecentlyUsedList.all.add_ItemRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ItemRemoved
   (
      this : in out StorageItemMostRecentlyUsedList;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageItemMostRecentlyUsedList.all.remove_ItemRemoved (eventCookie);
   end;

   function Add
   (
      this : in out StorageItemMostRecentlyUsedList;
      file : Windows.Storage.IStorageItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.Add (file, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Add
   (
      this : in out StorageItemMostRecentlyUsedList;
      file : Windows.Storage.IStorageItem;
      metadata : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_metadata : WinRt.HString := To_HString (metadata);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.Add (file, HStr_metadata, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_metadata);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AddOrReplace
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString;
      file : Windows.Storage.IStorageItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.AddOrReplace (HStr_token, file);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_token);
   end;

   procedure AddOrReplace
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString;
      file : Windows.Storage.IStorageItem;
      metadata : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      HStr_metadata : WinRt.HString := To_HString (metadata);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.AddOrReplace (HStr_token, file, HStr_metadata);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_token);
      Hr := WindowsDeleteString (HStr_metadata);
   end;

   function GetItemAsync
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString
   )
   return WinRt.Windows.Storage.IStorageItem is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IStorageItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IStorageItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageItem;
      m_IID            : aliased WinRt.IID := (1607057719, 60343, 24172, (156, 186, 104, 111, 46, 194, 176, 187 )); -- Windows.Storage.IStorageItem;
      m_HandlerIID     : aliased WinRt.IID := (2462257199, 41767, 21272, (166, 193, 118, 246, 178, 160, 171, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_IStorageItem.Kind := new AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IStorageItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IStorageItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate, AsyncOperationCompletedHandler_IStorageItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.GetItemAsync (HStr_token, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_token);
      return m_RetVal;
   end;

   function GetFileAsync
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
         Hr := m_Interface.GetFileAsync (HStr_token, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function GetFolderAsync
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
         Hr := m_Interface.GetFolderAsync (HStr_token, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function GetItemAsync
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString;
      options : Windows.Storage.AccessCache.AccessCacheOptions
   )
   return WinRt.Windows.Storage.IStorageItem is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IStorageItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IStorageItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageItem;
      m_IID            : aliased WinRt.IID := (1607057719, 60343, 24172, (156, 186, 104, 111, 46, 194, 176, 187 )); -- Windows.Storage.IStorageItem;
      m_HandlerIID     : aliased WinRt.IID := (2462257199, 41767, 21272, (166, 193, 118, 246, 178, 160, 171, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_IStorageItem.Kind := new AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IStorageItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IStorageItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate, AsyncOperationCompletedHandler_IStorageItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.GetItemAsync (HStr_token, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_token);
      return m_RetVal;
   end;

   function GetFileAsync
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString;
      options : Windows.Storage.AccessCache.AccessCacheOptions
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
         Hr := m_Interface.GetFileAsync (HStr_token, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function GetFolderAsync
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString;
      options : Windows.Storage.AccessCache.AccessCacheOptions
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
         Hr := m_Interface.GetFolderAsync (HStr_token, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   procedure Remove
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.Remove (HStr_token);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_token);
   end;

   function ContainsItem
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_token : WinRt.HString := To_HString (token);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.ContainsItem (HStr_token, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_token);
      return m_ComRetVal;
   end;

   procedure Clear
   (
      this : in out StorageItemMostRecentlyUsedList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function CheckAccess
   (
      this : in out StorageItemMostRecentlyUsedList;
      file : Windows.Storage.IStorageItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.CheckAccess (file, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Entries
   (
      this : in out StorageItemMostRecentlyUsedList
   )
   return WinRt.Windows.Storage.AccessCache.AccessListEntryView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.AccessCache.AccessListEntryView do
         m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
         Hr := m_Interface.get_Entries (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_MaximumItemsAllowed
   (
      this : in out StorageItemMostRecentlyUsedList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemAccessList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemAccessList, WinRt.Windows.Storage.AccessCache.IID_IStorageItemAccessList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.get_MaximumItemsAllowed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Add
   (
      this : in out StorageItemMostRecentlyUsedList;
      file : Windows.Storage.IStorageItem;
      metadata : WinRt.WString;
      visibility : Windows.Storage.AccessCache.RecentStorageItemVisibility
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_metadata : WinRt.HString := To_HString (metadata);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList2, WinRt.Windows.Storage.AccessCache.IID_IStorageItemMostRecentlyUsedList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.Add (file, HStr_metadata, visibility, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_metadata);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AddOrReplace
   (
      this : in out StorageItemMostRecentlyUsedList;
      token : WinRt.WString;
      file : Windows.Storage.IStorageItem;
      metadata : WinRt.WString;
      visibility : Windows.Storage.AccessCache.RecentStorageItemVisibility
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_token : WinRt.HString := To_HString (token);
      HStr_metadata : WinRt.HString := To_HString (metadata);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList_Interface, WinRt.Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList2, WinRt.Windows.Storage.AccessCache.IID_IStorageItemMostRecentlyUsedList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemMostRecentlyUsedList.all);
      Hr := m_Interface.AddOrReplace (HStr_token, file, HStr_metadata, visibility);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_token);
      Hr := WindowsDeleteString (HStr_metadata);
   end;

end;

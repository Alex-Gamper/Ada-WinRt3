--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Core;
with WinRt.Windows.System;
with WinRt.Windows.UI.Core;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Input.Core is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RadialControllerIndependentInputSource

   procedure Initialize (this : in out RadialControllerIndependentInputSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out RadialControllerIndependentInputSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRadialControllerIndependentInputSource, IRadialControllerIndependentInputSource_Ptr);
   begin
      if this.m_IRadialControllerIndependentInputSource /= null then
         if this.m_IRadialControllerIndependentInputSource.all /= null then
            RefCount := this.m_IRadialControllerIndependentInputSource.all.Release;
            Free (this.m_IRadialControllerIndependentInputSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RadialControllerIndependentInputSource

   function CreateForView
   (
      view : Windows.ApplicationModel.Core.CoreApplicationView'Class
   )
   return WinRt.Windows.UI.Input.Core.RadialControllerIndependentInputSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Input.Core.RadialControllerIndependentInputSource");
      m_Factory        : access WinRt.Windows.UI.Input.Core.IRadialControllerIndependentInputSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Core.IRadialControllerIndependentInputSource;
   begin
      return RetVal : WinRt.Windows.UI.Input.Core.RadialControllerIndependentInputSource do
         Hr := RoGetActivationFactory (m_hString, IID_IRadialControllerIndependentInputSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForView (view.m_ICoreApplicationView.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRadialControllerIndependentInputSource := new Windows.UI.Input.Core.IRadialControllerIndependentInputSource;
            Retval.m_IRadialControllerIndependentInputSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RadialControllerIndependentInputSource

   function get_Controller
   (
      this : in out RadialControllerIndependentInputSource
   )
   return WinRt.Windows.UI.Input.RadialController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.IRadialController;
   begin
      return RetVal : WinRt.Windows.UI.Input.RadialController do
         Hr := this.m_IRadialControllerIndependentInputSource.all.get_Controller (m_ComRetVal'Access);
         Retval.m_IRadialController := new Windows.UI.Input.IRadialController;
         Retval.m_IRadialController.all := m_ComRetVal;
      end return;
   end;

   function get_Dispatcher
   (
      this : in out RadialControllerIndependentInputSource
   )
   return WinRt.Windows.UI.Core.CoreDispatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.ICoreDispatcher;
   begin
      return RetVal : WinRt.Windows.UI.Core.CoreDispatcher do
         Hr := this.m_IRadialControllerIndependentInputSource.all.get_Dispatcher (m_ComRetVal'Access);
         Retval.m_ICoreDispatcher := new Windows.UI.Core.ICoreDispatcher;
         Retval.m_ICoreDispatcher.all := m_ComRetVal;
      end return;
   end;

   function get_DispatcherQueue
   (
      this : in out RadialControllerIndependentInputSource
   )
   return WinRt.Windows.System.DispatcherQueue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Core.IRadialControllerIndependentInputSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueue;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Core.IRadialControllerIndependentInputSource_Interface, WinRt.Windows.UI.Input.Core.IRadialControllerIndependentInputSource2, WinRt.Windows.UI.Input.Core.IID_IRadialControllerIndependentInputSource2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueue do
         m_Interface := QInterface (this.m_IRadialControllerIndependentInputSource.all);
         Hr := m_Interface.get_DispatcherQueue (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDispatcherQueue := new Windows.System.IDispatcherQueue;
         Retval.m_IDispatcherQueue.all := m_ComRetVal;
      end return;
   end;

end;

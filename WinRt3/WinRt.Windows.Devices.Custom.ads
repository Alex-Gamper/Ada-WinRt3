--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
limited with WinRt.Windows.Storage.Streams;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Devices.Custom is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type ICustomDevice_Interface is interface and WinRt.IInspectable_Interface;
   type ICustomDevice is access all ICustomDevice_Interface'Class;
   type ICustomDevice_Ptr is access all ICustomDevice;

   type ICustomDeviceStatics_Interface is interface and WinRt.IInspectable_Interface;
   type ICustomDeviceStatics is access all ICustomDeviceStatics_Interface'Class;

   type IIOControlCode_Interface is interface and WinRt.IInspectable_Interface;
   type IIOControlCode is access all IIOControlCode_Interface'Class;
   type IIOControlCode_Ptr is access all IIOControlCode;

   type IIOControlCodeFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IIOControlCodeFactory is access all IIOControlCodeFactory_Interface'Class;

   type IKnownDeviceTypesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IKnownDeviceTypesStatics is access all IKnownDeviceTypesStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type CustomDevice is new Ada.Finalization.Limited_Controlled with
      record
         m_ICustomDevice : access Windows.Devices.Custom.ICustomDevice;
      end record;
   type CustomDevice_Ptr is access all CustomDevice;

   type IOControlCode is new Ada.Finalization.Limited_Controlled with
      record
         m_IIOControlCode : access Windows.Devices.Custom.IIOControlCode;
      end record;
   type IOControlCode_Ptr is access all IOControlCode;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type DeviceAccessMode is (
      Read_e,
      Write_e,
      ReadWrite_e
   );
   for DeviceAccessMode use (
      Read_e => 0,
      Write_e => 1,
      ReadWrite_e => 2
   );
   type DeviceAccessMode_Ptr is access all DeviceAccessMode;

   type DeviceSharingMode is (
      Shared_e,
      Exclusive_e
   );
   for DeviceSharingMode use (
      Shared_e => 0,
      Exclusive_e => 1
   );
   type DeviceSharingMode_Ptr is access all DeviceSharingMode;

   type IOControlAccessMode is (
      Any_e,
      Read_e,
      Write_e,
      ReadWrite_e
   );
   for IOControlAccessMode use (
      Any_e => 0,
      Read_e => 1,
      Write_e => 2,
      ReadWrite_e => 3
   );
   type IOControlAccessMode_Ptr is access all IOControlAccessMode;

   type IOControlBufferingMethod is (
      Buffered_e,
      DirectInput_e,
      DirectOutput_e,
      Neither_e
   );
   for IOControlBufferingMethod use (
      Buffered_e => 0,
      DirectInput_e => 1,
      DirectOutput_e => 2,
      Neither_e => 3
   );
   type IOControlBufferingMethod_Ptr is access all IOControlBufferingMethod;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type CustomDeviceContract is record
      null;
   end record with Convention => C_Pass_By_Copy;
   type CustomDeviceContract_Ptr is access all CustomDeviceContract;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type ICustomDevice is interface and WinRt.IInspectable;

      function get_InputStream
      (
         this : access ICustomDevice_Interface;
         RetVal : access Windows.Storage.Streams.IInputStream
      )
      return WinRt.Hresult is abstract;

      function get_OutputStream
      (
         this : access ICustomDevice_Interface;
         RetVal : access Windows.Storage.Streams.IOutputStream
      )
      return WinRt.Hresult is abstract;

      function SendIOControlAsync
      (
         this : access ICustomDevice_Interface;
         ioControlCode_p : Windows.Devices.Custom.IIOControlCode;
         inputBuffer : Windows.Storage.Streams.IBuffer;
         outputBuffer : Windows.Storage.Streams.IBuffer;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function TrySendIOControlAsync
      (
         this : access ICustomDevice_Interface;
         ioControlCode_p : Windows.Devices.Custom.IIOControlCode;
         inputBuffer : Windows.Storage.Streams.IBuffer;
         outputBuffer : Windows.Storage.Streams.IBuffer;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ICustomDevice : aliased WinRt.IID := (3710919967, 50315, 17341, (188, 177, 222, 200, 143, 21, 20, 62 ));

   -----------------------------------------------------------------------------
   -- type ICustomDeviceStatics is interface and WinRt.IInspectable;

      function GetDeviceSelector
      (
         this : access ICustomDeviceStatics_Interface;
         classGuid : WinRt.Guid;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function FromIdAsync
      (
         this : access ICustomDeviceStatics_Interface;
         deviceId : WinRt.HString;
         desiredAccess : Windows.Devices.Custom.DeviceAccessMode;
         sharingMode : Windows.Devices.Custom.DeviceSharingMode;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ICustomDeviceStatics : aliased WinRt.IID := (3357672210, 61260, 18097, (165, 142, 238, 179, 8, 220, 137, 23 ));

   -----------------------------------------------------------------------------
   -- type IIOControlCode is interface and WinRt.IInspectable;

      function get_AccessMode
      (
         this : access IIOControlCode_Interface;
         RetVal : access Windows.Devices.Custom.IOControlAccessMode
      )
      return WinRt.Hresult is abstract;

      function get_BufferingMethod
      (
         this : access IIOControlCode_Interface;
         RetVal : access Windows.Devices.Custom.IOControlBufferingMethod
      )
      return WinRt.Hresult is abstract;

      function get_Function
      (
         this : access IIOControlCode_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_DeviceType
      (
         this : access IIOControlCode_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_ControlCode
      (
         this : access IIOControlCode_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IIOControlCode : aliased WinRt.IID := (244668903, 24776, 17269, (167, 97, 127, 136, 8, 6, 108, 96 ));

   -----------------------------------------------------------------------------
   -- type IIOControlCodeFactory is interface and WinRt.IInspectable;

      function CreateIOControlCode
      (
         this : access IIOControlCodeFactory_Interface;
         deviceType : WinRt.UInt16;
         function_x : WinRt.UInt16;
         accessMode : Windows.Devices.Custom.IOControlAccessMode;
         bufferingMethod : Windows.Devices.Custom.IOControlBufferingMethod;
         RetVal : access Windows.Devices.Custom.IIOControlCode
      )
      return WinRt.Hresult is abstract;

      IID_IIOControlCodeFactory : aliased WinRt.IID := (2238348528, 19473, 17582, (175, 198, 184, 212, 162, 18, 120, 143 ));

   -----------------------------------------------------------------------------
   -- type IKnownDeviceTypesStatics is interface and WinRt.IInspectable;

      function get_Unknown
      (
         this : access IKnownDeviceTypesStatics_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      IID_IKnownDeviceTypesStatics : aliased WinRt.IID := (3998513602, 21576, 17882, (173, 27, 36, 148, 140, 35, 144, 148 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CustomDevice

   overriding procedure Initialize (this : in out CustomDevice);
   overriding procedure Finalize (this : in out CustomDevice);

   -----------------------------------------------------------------------------
   -- Static Interfaces for CustomDevice

   function GetDeviceSelector
   (
      classGuid : WinRt.Guid
   )
   return WinRt.WString;

   function FromIdAsync
   (
      deviceId : WinRt.WString;
      desiredAccess : Windows.Devices.Custom.DeviceAccessMode;
      sharingMode : Windows.Devices.Custom.DeviceSharingMode
   )
   return WinRt.Windows.Devices.Custom.CustomDevice;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CustomDevice

   function get_InputStream
   (
      this : in out CustomDevice
   )
   return WinRt.Windows.Storage.Streams.IInputStream;

   function get_OutputStream
   (
      this : in out CustomDevice
   )
   return WinRt.Windows.Storage.Streams.IOutputStream;

   function SendIOControlAsync
   (
      this : in out CustomDevice;
      ioControlCode_p : Windows.Devices.Custom.IIOControlCode;
      inputBuffer : Windows.Storage.Streams.IBuffer;
      outputBuffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32;

   function TrySendIOControlAsync
   (
      this : in out CustomDevice;
      ioControlCode_p : Windows.Devices.Custom.IIOControlCode;
      inputBuffer : Windows.Storage.Streams.IBuffer;
      outputBuffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Boolean;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IOControlCode

   overriding procedure Initialize (this : in out IOControlCode);
   overriding procedure Finalize (this : in out IOControlCode);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for IOControlCode

   function Constructor
   (
      deviceType : WinRt.UInt16;
      function_x : WinRt.UInt16;
      accessMode : Windows.Devices.Custom.IOControlAccessMode;
      bufferingMethod : Windows.Devices.Custom.IOControlBufferingMethod
   )
   return IOControlCode;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IOControlCode

   function get_AccessMode
   (
      this : in out IOControlCode
   )
   return WinRt.Windows.Devices.Custom.IOControlAccessMode;

   function get_BufferingMethod
   (
      this : in out IOControlCode
   )
   return WinRt.Windows.Devices.Custom.IOControlBufferingMethod;

   function get_Function
   (
      this : in out IOControlCode
   )
   return WinRt.UInt16;

   function get_DeviceType
   (
      this : in out IOControlCode
   )
   return WinRt.UInt16;

   function get_ControlCode
   (
      this : in out IOControlCode
   )
   return WinRt.UInt32;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package KnownDeviceTypes is

      function get_Unknown
      return WinRt.UInt16;

   end KnownDeviceTypes;

end;

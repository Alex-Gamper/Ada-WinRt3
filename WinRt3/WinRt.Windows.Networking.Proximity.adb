--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.Proximity is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_StreamSocket is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.Sockets.IStreamSocket);
   package AsyncOperationCompletedHandler_StreamSocket is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.Sockets.IStreamSocket);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConnectionRequestedEventArgs

   procedure Initialize (this : in out ConnectionRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConnectionRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConnectionRequestedEventArgs, IConnectionRequestedEventArgs_Ptr);
   begin
      if this.m_IConnectionRequestedEventArgs /= null then
         if this.m_IConnectionRequestedEventArgs.all /= null then
            RefCount := this.m_IConnectionRequestedEventArgs.all.Release;
            Free (this.m_IConnectionRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConnectionRequestedEventArgs

   function get_PeerInformation
   (
      this : in out ConnectionRequestedEventArgs
   )
   return WinRt.Windows.Networking.Proximity.PeerInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Proximity.IPeerInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Proximity.PeerInformation do
         Hr := this.m_IConnectionRequestedEventArgs.all.get_PeerInformation (m_ComRetVal'Access);
         Retval.m_IPeerInformation := new Windows.Networking.Proximity.IPeerInformation;
         Retval.m_IPeerInformation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DeviceArrivedEventHandler

   function Invoke
   (
      this : access DeviceArrivedEventHandler_Delegate;
      sender : Windows.Networking.Proximity.IProximityDevice
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DeviceDepartedEventHandler

   function Invoke
   (
      this : access DeviceDepartedEventHandler_Delegate;
      sender : Windows.Networking.Proximity.IProximityDevice
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate MessageReceivedHandler

   function Invoke
   (
      this : access MessageReceivedHandler_Delegate;
      sender : Windows.Networking.Proximity.IProximityDevice;
      message : Windows.Networking.Proximity.IProximityMessage
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, message);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Delegate MessageTransmittedHandler

   function Invoke
   (
      this : access MessageTransmittedHandler_Delegate;
      sender : Windows.Networking.Proximity.IProximityDevice;
      messageId : WinRt.Int64
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, messageId);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PeerFinder is

      function get_AllowBluetooth
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowBluetooth (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_AllowBluetooth
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_AllowBluetooth (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_AllowInfrastructure
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowInfrastructure (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_AllowInfrastructure
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_AllowInfrastructure (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_AllowWiFiDirect
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowWiFiDirect (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_AllowWiFiDirect
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_AllowWiFiDirect (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_DisplayName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisplayName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      procedure put_DisplayName
      (
         value : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_value : WinRt.HString := To_HString (value);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_DisplayName (HStr_value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end;

      function get_SupportedDiscoveryTypes
      return WinRt.Windows.Networking.Proximity.PeerDiscoveryTypes is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.Proximity.PeerDiscoveryTypes;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SupportedDiscoveryTypes (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlternateIdentities
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlternateIdentities (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure Start is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Start;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure Start
      (
         peerMessage : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_peerMessage : WinRt.HString := To_HString (peerMessage);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Start (HStr_peerMessage);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_peerMessage);
      end;

      procedure Stop is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Stop;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_TriggeredConnectionStateChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_TriggeredConnectionStateChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_TriggeredConnectionStateChanged
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_TriggeredConnectionStateChanged (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_ConnectionRequested
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ConnectionRequested (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ConnectionRequested
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ConnectionRequested (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function FindAllPeersAsync
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (2741945532, 24698, 20864, (167, 133, 64, 66, 248, 121, 92, 139 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (3975745324, 58356, 23394, (160, 102, 139, 156, 129, 143, 212, 26 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllPeersAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function ConnectAsync
      (
         peerInformation_p : Windows.Networking.Proximity.PeerInformation'Class
      )
      return WinRt.Windows.Networking.Sockets.StreamSocket is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_StreamSocket.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_StreamSocket.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Networking.Sockets.IStreamSocket;
         m_IID            : aliased WinRt.IID := (4215160124, 28645, 24103, (161, 50, 144, 34, 71, 226, 169, 62 )); -- Windows.Networking.Sockets.StreamSocket;
         m_HandlerIID     : aliased WinRt.IID := (1907743134, 14420, 24218, (180, 220, 209, 181, 139, 241, 152, 252 ));
         m_Handler        : AsyncOperationCompletedHandler_StreamSocket.Kind := new AsyncOperationCompletedHandler_StreamSocket.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StreamSocket.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StreamSocket.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StreamSocket.Kind_Delegate, AsyncOperationCompletedHandler_StreamSocket.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Networking.Sockets.StreamSocket do
            Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ConnectAsync (peerInformation_p.m_IPeerInformation.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IStreamSocket := new Windows.Networking.Sockets.IStreamSocket;
                        Retval.m_IStreamSocket.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_Role
      return WinRt.Windows.Networking.Proximity.PeerRole is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.Proximity.PeerRole;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Role (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_Role
      (
         value : Windows.Networking.Proximity.PeerRole
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_Role (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_DiscoveryData
      return WinRt.Windows.Storage.Streams.IBuffer is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DiscoveryData (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_DiscoveryData
      (
         value : Windows.Storage.Streams.IBuffer
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_DiscoveryData (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function CreateWatcher
      return WinRt.Windows.Networking.Proximity.PeerWatcher is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.PeerFinder");
         m_Factory        : access WinRt.Windows.Networking.Proximity.IPeerFinderStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.Proximity.IPeerWatcher;
      begin
         return RetVal : WinRt.Windows.Networking.Proximity.PeerWatcher do
            Hr := RoGetActivationFactory (m_hString, IID_IPeerFinderStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPeerWatcher := new Windows.Networking.Proximity.IPeerWatcher;
               Retval.m_IPeerWatcher.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end PeerFinder;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PeerInformation

   procedure Initialize (this : in out PeerInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PeerInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPeerInformation, IPeerInformation_Ptr);
   begin
      if this.m_IPeerInformation /= null then
         if this.m_IPeerInformation.all /= null then
            RefCount := this.m_IPeerInformation.all.Release;
            Free (this.m_IPeerInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PeerInformation

   function get_DisplayName
   (
      this : in out PeerInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPeerInformation.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out PeerInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Proximity.IPeerInformation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Proximity.IPeerInformation_Interface, WinRt.Windows.Networking.Proximity.IPeerInformation3, WinRt.Windows.Networking.Proximity.IID_IPeerInformation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPeerInformation.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DiscoveryData
   (
      this : in out PeerInformation
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Proximity.IPeerInformation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Proximity.IPeerInformation_Interface, WinRt.Windows.Networking.Proximity.IPeerInformation3, WinRt.Windows.Networking.Proximity.IID_IPeerInformation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPeerInformation.all);
      Hr := m_Interface.get_DiscoveryData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HostName
   (
      this : in out PeerInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Proximity.IPeerInformationWithHostAndService := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Proximity.IPeerInformation_Interface, WinRt.Windows.Networking.Proximity.IPeerInformationWithHostAndService, WinRt.Windows.Networking.Proximity.IID_IPeerInformationWithHostAndService'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         m_Interface := QInterface (this.m_IPeerInformation.all);
         Hr := m_Interface.get_HostName (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_ServiceName
   (
      this : in out PeerInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Proximity.IPeerInformationWithHostAndService := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Proximity.IPeerInformation_Interface, WinRt.Windows.Networking.Proximity.IPeerInformationWithHostAndService, WinRt.Windows.Networking.Proximity.IID_IPeerInformationWithHostAndService'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPeerInformation.all);
      Hr := m_Interface.get_ServiceName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PeerWatcher

   procedure Initialize (this : in out PeerWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out PeerWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPeerWatcher, IPeerWatcher_Ptr);
   begin
      if this.m_IPeerWatcher /= null then
         if this.m_IPeerWatcher.all /= null then
            RefCount := this.m_IPeerWatcher.all.Release;
            Free (this.m_IPeerWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PeerWatcher

   function add_Added
   (
      this : in out PeerWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPeerWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out PeerWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.remove_Added (token);
   end;

   function add_Removed
   (
      this : in out PeerWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPeerWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out PeerWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.remove_Removed (token);
   end;

   function add_Updated
   (
      this : in out PeerWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPeerWatcher.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out PeerWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.remove_Updated (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out PeerWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPeerWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out PeerWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out PeerWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPeerWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out PeerWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.remove_Stopped (token);
   end;

   function get_Status
   (
      this : in out PeerWatcher
   )
   return WinRt.Windows.Networking.Proximity.PeerWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Proximity.PeerWatcherStatus;
   begin
      Hr := this.m_IPeerWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PeerWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out PeerWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPeerWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProximityDevice

   procedure Initialize (this : in out ProximityDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProximityDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProximityDevice, IProximityDevice_Ptr);
   begin
      if this.m_IProximityDevice /= null then
         if this.m_IProximityDevice.all /= null then
            RefCount := this.m_IProximityDevice.all.Release;
            Free (this.m_IProximityDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ProximityDevice

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.ProximityDevice");
      m_Factory        : access WinRt.Windows.Networking.Proximity.IProximityDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProximityDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDefault
   return WinRt.Windows.Networking.Proximity.ProximityDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.ProximityDevice");
      m_Factory        : access WinRt.Windows.Networking.Proximity.IProximityDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Proximity.IProximityDevice;
   begin
      return RetVal : WinRt.Windows.Networking.Proximity.ProximityDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IProximityDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IProximityDevice := new Windows.Networking.Proximity.IProximityDevice;
            Retval.m_IProximityDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Networking.Proximity.ProximityDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Proximity.ProximityDevice");
      m_Factory        : access WinRt.Windows.Networking.Proximity.IProximityDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Proximity.IProximityDevice;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Networking.Proximity.ProximityDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IProximityDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IProximityDevice := new Windows.Networking.Proximity.IProximityDevice;
            Retval.m_IProximityDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProximityDevice

   function SubscribeForMessage
   (
      this : in out ProximityDevice;
      messageType : WinRt.WString;
      messageReceivedHandler : Windows.Networking.Proximity.MessageReceivedHandler
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
      HStr_messageType : WinRt.HString := To_HString (messageType);
   begin
      Hr := this.m_IProximityDevice.all.SubscribeForMessage (HStr_messageType, messageReceivedHandler, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_messageType);
      return m_ComRetVal;
   end;

   function PublishMessage
   (
      this : in out ProximityDevice;
      messageType : WinRt.WString;
      message : WinRt.WString
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
      HStr_messageType : WinRt.HString := To_HString (messageType);
      HStr_message : WinRt.HString := To_HString (message);
   begin
      Hr := this.m_IProximityDevice.all.PublishMessage (HStr_messageType, HStr_message, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_messageType);
      Hr := WindowsDeleteString (HStr_message);
      return m_ComRetVal;
   end;

   function PublishMessage
   (
      this : in out ProximityDevice;
      messageType : WinRt.WString;
      message : WinRt.WString;
      messageTransmittedHandler : Windows.Networking.Proximity.MessageTransmittedHandler
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
      HStr_messageType : WinRt.HString := To_HString (messageType);
      HStr_message : WinRt.HString := To_HString (message);
   begin
      Hr := this.m_IProximityDevice.all.PublishMessage (HStr_messageType, HStr_message, messageTransmittedHandler, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_messageType);
      Hr := WindowsDeleteString (HStr_message);
      return m_ComRetVal;
   end;

   function PublishBinaryMessage
   (
      this : in out ProximityDevice;
      messageType : WinRt.WString;
      message : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
      HStr_messageType : WinRt.HString := To_HString (messageType);
   begin
      Hr := this.m_IProximityDevice.all.PublishBinaryMessage (HStr_messageType, message, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_messageType);
      return m_ComRetVal;
   end;

   function PublishBinaryMessage
   (
      this : in out ProximityDevice;
      messageType : WinRt.WString;
      message : Windows.Storage.Streams.IBuffer;
      messageTransmittedHandler : Windows.Networking.Proximity.MessageTransmittedHandler
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
      HStr_messageType : WinRt.HString := To_HString (messageType);
   begin
      Hr := this.m_IProximityDevice.all.PublishBinaryMessage (HStr_messageType, message, messageTransmittedHandler, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_messageType);
      return m_ComRetVal;
   end;

   function PublishUriMessage
   (
      this : in out ProximityDevice;
      message : Windows.Foundation.Uri'Class
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProximityDevice.all.PublishUriMessage (message.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function PublishUriMessage
   (
      this : in out ProximityDevice;
      message : Windows.Foundation.Uri'Class;
      messageTransmittedHandler : Windows.Networking.Proximity.MessageTransmittedHandler
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProximityDevice.all.PublishUriMessage (message.m_IUriRuntimeClass.all, messageTransmittedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StopSubscribingForMessage
   (
      this : in out ProximityDevice;
      subscriptionId : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProximityDevice.all.StopSubscribingForMessage (subscriptionId);
   end;

   procedure StopPublishingMessage
   (
      this : in out ProximityDevice;
      messageId : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProximityDevice.all.StopPublishingMessage (messageId);
   end;

   function add_DeviceArrived
   (
      this : in out ProximityDevice;
      arrivedHandler : Windows.Networking.Proximity.DeviceArrivedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IProximityDevice.all.add_DeviceArrived (arrivedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DeviceArrived
   (
      this : in out ProximityDevice;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProximityDevice.all.remove_DeviceArrived (cookie);
   end;

   function add_DeviceDeparted
   (
      this : in out ProximityDevice;
      departedHandler : Windows.Networking.Proximity.DeviceDepartedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IProximityDevice.all.add_DeviceDeparted (departedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DeviceDeparted
   (
      this : in out ProximityDevice;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProximityDevice.all.remove_DeviceDeparted (cookie);
   end;

   function get_MaxMessageBytes
   (
      this : in out ProximityDevice
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IProximityDevice.all.get_MaxMessageBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BitsPerSecond
   (
      this : in out ProximityDevice
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProximityDevice.all.get_BitsPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out ProximityDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProximityDevice.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProximityMessage

   procedure Initialize (this : in out ProximityMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProximityMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProximityMessage, IProximityMessage_Ptr);
   begin
      if this.m_IProximityMessage /= null then
         if this.m_IProximityMessage.all /= null then
            RefCount := this.m_IProximityMessage.all.Release;
            Free (this.m_IProximityMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProximityMessage

   function get_MessageType
   (
      this : in out ProximityMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProximityMessage.all.get_MessageType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SubscriptionId
   (
      this : in out ProximityMessage
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProximityMessage.all.get_SubscriptionId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out ProximityMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IProximityMessage.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DataAsString
   (
      this : in out ProximityMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProximityMessage.all.get_DataAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TriggeredConnectionStateChangedEventArgs

   procedure Initialize (this : in out TriggeredConnectionStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TriggeredConnectionStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITriggeredConnectionStateChangedEventArgs, ITriggeredConnectionStateChangedEventArgs_Ptr);
   begin
      if this.m_ITriggeredConnectionStateChangedEventArgs /= null then
         if this.m_ITriggeredConnectionStateChangedEventArgs.all /= null then
            RefCount := this.m_ITriggeredConnectionStateChangedEventArgs.all.Release;
            Free (this.m_ITriggeredConnectionStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TriggeredConnectionStateChangedEventArgs

   function get_State
   (
      this : in out TriggeredConnectionStateChangedEventArgs
   )
   return WinRt.Windows.Networking.Proximity.TriggeredConnectState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Proximity.TriggeredConnectState;
   begin
      Hr := this.m_ITriggeredConnectionStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out TriggeredConnectionStateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITriggeredConnectionStateChangedEventArgs.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Socket
   (
      this : in out TriggeredConnectionStateChangedEventArgs
   )
   return WinRt.Windows.Networking.Sockets.StreamSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocket;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocket do
         Hr := this.m_ITriggeredConnectionStateChangedEventArgs.all.get_Socket (m_ComRetVal'Access);
         Retval.m_IStreamSocket := new Windows.Networking.Sockets.IStreamSocket;
         Retval.m_IStreamSocket.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Data.Xml.Dom;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.Web.Syndication;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.AtomPub is

   package IAsyncOperation_ServiceDocument is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.AtomPub.IServiceDocument, GenericObject);
   package AsyncOperationCompletedHandler_ServiceDocument is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.AtomPub.IServiceDocument, GenericObject);

   package IAsyncOperation_IInputStream is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IInputStream, GenericObject);
   package AsyncOperationCompletedHandler_IInputStream is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IInputStream, GenericObject);

   package IAsyncOperation_SyndicationItem is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Syndication.ISyndicationItem, GenericObject);
   package AsyncOperationCompletedHandler_SyndicationItem is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Syndication.ISyndicationItem, GenericObject);

   package IAsyncOperation_SyndicationFeed is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Syndication.ISyndicationFeed, GenericObject);
   package AsyncOperationCompletedHandler_SyndicationFeed is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Syndication.ISyndicationFeed, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AtomPubClient

   procedure Initialize (this : in out AtomPubClient) is
   begin
      null;
   end;

   procedure Finalize (this : in out AtomPubClient) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAtomPubClient, IAtomPubClient_Ptr);
   begin
      if this.m_IAtomPubClient /= null then
         if this.m_IAtomPubClient.all /= null then
            RefCount := this.m_IAtomPubClient.all.Release;
            Free (this.m_IAtomPubClient);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AtomPubClient

   function Constructor
   (
      serverCredential : Windows.Security.Credentials.PasswordCredential'Class
   )
   return AtomPubClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.AtomPub.AtomPubClient");
      m_Factory    : access IAtomPubClientFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.AtomPub.IAtomPubClient;
   begin
      return RetVal : AtomPubClient do
         Hr := RoGetActivationFactory (m_hString, IID_IAtomPubClientFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAtomPubClientWithCredentials (serverCredential.m_IPasswordCredential.all, m_ComRetVal'Access);
            Retval.m_IAtomPubClient := new Windows.Web.AtomPub.IAtomPubClient;
            Retval.m_IAtomPubClient.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return AtomPubClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.AtomPub.AtomPubClient");
      m_ComRetVal  : aliased Windows.Web.AtomPub.IAtomPubClient;
   begin
      return RetVal : AtomPubClient do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAtomPubClient := new Windows.Web.AtomPub.IAtomPubClient;
            Retval.m_IAtomPubClient.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AtomPubClient

   function RetrieveServiceDocumentAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.AtomPub.ServiceDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ServiceDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ServiceDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.AtomPub.IServiceDocument;
      m_IID            : aliased WinRt.IID := (3657935860, 37370, 23702, (132, 203, 69, 158, 169, 123, 147, 77 )); -- Windows.Web.AtomPub.ServiceDocument;
      m_HandlerIID     : aliased WinRt.IID := (1594077651, 18189, 23527, (129, 118, 28, 154, 70, 1, 9, 0 ));
      m_Handler        : AsyncOperationCompletedHandler_ServiceDocument.Kind := new AsyncOperationCompletedHandler_ServiceDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ServiceDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ServiceDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ServiceDocument.Kind_Delegate, AsyncOperationCompletedHandler_ServiceDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.AtomPub.ServiceDocument do
         Hr := this.m_IAtomPubClient.all.RetrieveServiceDocumentAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IServiceDocument := new Windows.Web.AtomPub.IServiceDocument;
                  Retval.m_IServiceDocument.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RetrieveMediaResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (4145872741, 59191, 21317, (179, 143, 253, 68, 93, 45, 199, 226 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (1987522241, 49775, 24430, (141, 59, 131, 20, 16, 124, 239, 235 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAtomPubClient.all.RetrieveMediaResourceAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RetrieveResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Syndication.SyndicationItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SyndicationItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SyndicationItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Syndication.ISyndicationItem;
      m_IID            : aliased WinRt.IID := (1157257749, 4612, 21020, (133, 229, 1, 37, 147, 1, 213, 39 )); -- Windows.Web.Syndication.SyndicationItem;
      m_HandlerIID     : aliased WinRt.IID := (2649178667, 19395, 21830, (135, 184, 46, 235, 253, 96, 190, 72 ));
      m_Handler        : AsyncOperationCompletedHandler_SyndicationItem.Kind := new AsyncOperationCompletedHandler_SyndicationItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SyndicationItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SyndicationItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SyndicationItem.Kind_Delegate, AsyncOperationCompletedHandler_SyndicationItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationItem do
         Hr := this.m_IAtomPubClient.all.RetrieveResourceAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISyndicationItem := new Windows.Web.Syndication.ISyndicationItem;
                  Retval.m_ISyndicationItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class;
      description : WinRt.WString;
      item : Windows.Web.Syndication.SyndicationItem'Class
   )
   return WinRt.Windows.Web.Syndication.SyndicationItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_description : WinRt.HString := To_HString (description);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SyndicationItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SyndicationItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Syndication.ISyndicationItem;
      m_IID            : aliased WinRt.IID := (3850176279, 10176, 22046, (180, 179, 114, 170, 43, 30, 63, 201 )); -- Windows.Web.Syndication.SyndicationItem;
      m_HandlerIID     : aliased WinRt.IID := (2323213993, 65429, 20719, (147, 234, 113, 27, 247, 148, 100, 115 ));
      m_Handler        : AsyncOperationCompletedHandler_SyndicationItem.Kind := new AsyncOperationCompletedHandler_SyndicationItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SyndicationItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SyndicationItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SyndicationItem.Kind_Delegate, AsyncOperationCompletedHandler_SyndicationItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationItem do
         Hr := this.m_IAtomPubClient.all.CreateResourceAsync (uri.m_IUriRuntimeClass.all, HStr_description, item.m_ISyndicationItem.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISyndicationItem := new Windows.Web.Syndication.ISyndicationItem;
                  Retval.m_ISyndicationItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_description);
      end return;
   end;

   function CreateMediaResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class;
      mediaType : WinRt.WString;
      description : WinRt.WString;
      mediaStream : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.Web.Syndication.SyndicationItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
      HStr_description : WinRt.HString := To_HString (description);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SyndicationItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SyndicationItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Syndication.ISyndicationItem;
      m_IID            : aliased WinRt.IID := (3850176279, 10176, 22046, (180, 179, 114, 170, 43, 30, 63, 201 )); -- Windows.Web.Syndication.SyndicationItem;
      m_HandlerIID     : aliased WinRt.IID := (2323213993, 65429, 20719, (147, 234, 113, 27, 247, 148, 100, 115 ));
      m_Handler        : AsyncOperationCompletedHandler_SyndicationItem.Kind := new AsyncOperationCompletedHandler_SyndicationItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SyndicationItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SyndicationItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SyndicationItem.Kind_Delegate, AsyncOperationCompletedHandler_SyndicationItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationItem do
         Hr := this.m_IAtomPubClient.all.CreateMediaResourceAsync (uri.m_IUriRuntimeClass.all, HStr_mediaType, HStr_description, mediaStream, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISyndicationItem := new Windows.Web.Syndication.ISyndicationItem;
                  Retval.m_ISyndicationItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_mediaType);
         Hr := WindowsDeleteString (HStr_description);
      end return;
   end;

   procedure UpdateMediaResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class;
      mediaType : WinRt.WString;
      mediaStream : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAtomPubClient.all.UpdateMediaResourceAsync (uri.m_IUriRuntimeClass.all, HStr_mediaType, mediaStream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_mediaType);
   end;

   procedure UpdateResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class;
      item : Windows.Web.Syndication.SyndicationItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAtomPubClient.all.UpdateResourceAsync (uri.m_IUriRuntimeClass.all, item.m_ISyndicationItem.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UpdateResourceItemAsync
   (
      this : in out AtomPubClient;
      item : Windows.Web.Syndication.SyndicationItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAtomPubClient.all.UpdateResourceItemAsync (item.m_ISyndicationItem.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteResourceAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAtomPubClient.all.DeleteResourceAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteResourceItemAsync
   (
      this : in out AtomPubClient;
      item : Windows.Web.Syndication.SyndicationItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAtomPubClient.all.DeleteResourceItemAsync (item.m_ISyndicationItem.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure CancelAsyncOperations
   (
      this : in out AtomPubClient
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAtomPubClient.all.CancelAsyncOperations;
   end;

   function get_ServerCredential
   (
      this : in out AtomPubClient
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IAtomPubClient.all);
         Hr := m_Interface.get_ServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out AtomPubClient;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.put_ServerCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProxyCredential
   (
      this : in out AtomPubClient
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IAtomPubClient.all);
         Hr := m_Interface.get_ProxyCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out AtomPubClient;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.put_ProxyCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxResponseBufferSize
   (
      this : in out AtomPubClient
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.get_MaxResponseBufferSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MaxResponseBufferSize
   (
      this : in out AtomPubClient;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.put_MaxResponseBufferSize (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Timeout
   (
      this : in out AtomPubClient
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.get_Timeout (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Timeout
   (
      this : in out AtomPubClient;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.put_Timeout (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_BypassCacheOnRetrieve
   (
      this : in out AtomPubClient
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.get_BypassCacheOnRetrieve (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_BypassCacheOnRetrieve
   (
      this : in out AtomPubClient;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.put_BypassCacheOnRetrieve (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetRequestHeader
   (
      this : in out AtomPubClient;
      name : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAtomPubClient.all);
      Hr := m_Interface.SetRequestHeader (HStr_name, HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function RetrieveFeedAsync
   (
      this : in out AtomPubClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Syndication.SyndicationFeed'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationClient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SyndicationFeed.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SyndicationFeed.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Syndication.ISyndicationFeed;
      m_IID            : aliased WinRt.IID := (2464870737, 16734, 24455, (128, 149, 120, 22, 35, 200, 137, 152 )); -- Windows.Web.Syndication.SyndicationFeed;
      m_HandlerIID     : aliased WinRt.IID := (238911344, 20108, 21088, (167, 229, 120, 110, 5, 189, 237, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_SyndicationFeed.Kind := new AsyncOperationCompletedHandler_SyndicationFeed.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SyndicationFeed.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SyndicationFeed.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SyndicationFeed.Kind_Delegate, AsyncOperationCompletedHandler_SyndicationFeed.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IAtomPubClient_Interface, WinRt.Windows.Web.Syndication.ISyndicationClient, WinRt.Windows.Web.Syndication.IID_ISyndicationClient'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationFeed do
         m_Interface := QInterface (this.m_IAtomPubClient.all);
         Hr := m_Interface.RetrieveFeedAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISyndicationFeed := new Windows.Web.Syndication.ISyndicationFeed;
                  Retval.m_ISyndicationFeed.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResourceCollection

   procedure Initialize (this : in out ResourceCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResourceCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResourceCollection, IResourceCollection_Ptr);
   begin
      if this.m_IResourceCollection /= null then
         if this.m_IResourceCollection.all /= null then
            RefCount := this.m_IResourceCollection.all.Release;
            Free (this.m_IResourceCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResourceCollection

   function get_Title
   (
      this : in out ResourceCollection
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_IResourceCollection.all.get_Title (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Uri
   (
      this : in out ResourceCollection
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IResourceCollection.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Categories
   (
      this : in out ResourceCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IResourceCollection.all.get_Categories (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Accepts
   (
      this : in out ResourceCollection
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IResourceCollection.all.get_Accepts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NodeName
   (
      this : in out ResourceCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out ResourceCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out ResourceCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out ResourceCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out ResourceCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out ResourceCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out ResourceCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out ResourceCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out ResourceCollection
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IResourceCollection.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out ResourceCollection;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out ResourceCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out ResourceCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IResourceCollection.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetXmlDocument
   (
      this : in out ResourceCollection;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IResourceCollection_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IResourceCollection.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServiceDocument

   procedure Initialize (this : in out ServiceDocument) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServiceDocument) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServiceDocument, IServiceDocument_Ptr);
   begin
      if this.m_IServiceDocument /= null then
         if this.m_IServiceDocument.all /= null then
            RefCount := this.m_IServiceDocument.all.Release;
            Free (this.m_IServiceDocument);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServiceDocument

   function get_Workspaces
   (
      this : in out ServiceDocument
   )
   return IVectorView_IWorkspace.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IWorkspace.Kind;
   begin
      Hr := this.m_IServiceDocument.all.get_Workspaces (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IWorkspace (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NodeName
   (
      this : in out ServiceDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out ServiceDocument;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out ServiceDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out ServiceDocument;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out ServiceDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out ServiceDocument;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out ServiceDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out ServiceDocument;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out ServiceDocument
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IServiceDocument.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out ServiceDocument;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out ServiceDocument
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out ServiceDocument
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServiceDocument.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetXmlDocument
   (
      this : in out ServiceDocument;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IServiceDocument_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IServiceDocument.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Workspace

   procedure Initialize (this : in out Workspace) is
   begin
      null;
   end;

   procedure Finalize (this : in out Workspace) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWorkspace, IWorkspace_Ptr);
   begin
      if this.m_IWorkspace /= null then
         if this.m_IWorkspace.all /= null then
            RefCount := this.m_IWorkspace.all.Release;
            Free (this.m_IWorkspace);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Workspace

   function get_Title
   (
      this : in out Workspace
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_IWorkspace.all.get_Title (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Collections
   (
      this : in out Workspace
   )
   return IVectorView_IResourceCollection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IResourceCollection.Kind;
   begin
      Hr := this.m_IWorkspace.all.get_Collections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IResourceCollection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NodeName
   (
      this : in out Workspace
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out Workspace;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out Workspace
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out Workspace;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out Workspace
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out Workspace;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out Workspace
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out Workspace;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out Workspace
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IWorkspace.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out Workspace;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out Workspace
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out Workspace
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWorkspace.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetXmlDocument
   (
      this : in out Workspace;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.AtomPub.IWorkspace_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IWorkspace.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

end;

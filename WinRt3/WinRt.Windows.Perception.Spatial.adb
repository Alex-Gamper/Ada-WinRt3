--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System.RemoteSystems;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Perception.Spatial is

   package IAsyncOperation_SpatialAnchorExportSufficiency is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.Spatial.ISpatialAnchorExportSufficiency);
   package AsyncOperationCompletedHandler_SpatialAnchorExportSufficiency is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.Spatial.ISpatialAnchorExportSufficiency);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_SpatialPerceptionAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus);
   package AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus);

   package IAsyncOperation_SpatialAnchorStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.Spatial.ISpatialAnchorStore);
   package AsyncOperationCompletedHandler_SpatialAnchorStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.Spatial.ISpatialAnchorStore);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_SpatialStageFrameOfReference is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReference);
   package AsyncOperationCompletedHandler_SpatialStageFrameOfReference is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReference);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAnchor

   procedure Initialize (this : in out SpatialAnchor) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAnchor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAnchor, ISpatialAnchor_Ptr);
   begin
      if this.m_ISpatialAnchor /= null then
         if this.m_ISpatialAnchor.all /= null then
            RefCount := this.m_ISpatialAnchor.all.Release;
            Free (this.m_ISpatialAnchor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialAnchor

   function TryCreateRelativeTo
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.Perception.Spatial.SpatialAnchor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchor");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialAnchor;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchor do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateRelativeTo (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialAnchor := new Windows.Perception.Spatial.ISpatialAnchor;
            Retval.m_ISpatialAnchor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function TryCreateRelativeTo
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      position : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Windows.Perception.Spatial.SpatialAnchor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchor");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialAnchor;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchor do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateRelativeTo (coordinateSystem.m_ISpatialCoordinateSystem.all, position, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialAnchor := new Windows.Perception.Spatial.ISpatialAnchor;
            Retval.m_ISpatialAnchor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function TryCreateRelativeTo
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      position : Windows.Foundation.Numerics.Vector3;
      orientation : Windows.Foundation.Numerics.Quaternion
   )
   return WinRt.Windows.Perception.Spatial.SpatialAnchor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchor");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialAnchor;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchor do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateRelativeTo (coordinateSystem.m_ISpatialCoordinateSystem.all, position, orientation, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialAnchor := new Windows.Perception.Spatial.ISpatialAnchor;
            Retval.m_ISpatialAnchor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAnchor

   function get_CoordinateSystem
   (
      this : in out SpatialAnchor
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialAnchor.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function get_RawCoordinateSystem
   (
      this : in out SpatialAnchor
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialAnchor.all.get_RawCoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function add_RawCoordinateSystemAdjusted
   (
      this : in out SpatialAnchor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialAnchor.all.add_RawCoordinateSystemAdjusted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RawCoordinateSystemAdjusted
   (
      this : in out SpatialAnchor;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialAnchor.all.remove_RawCoordinateSystemAdjusted (cookie);
   end;

   function get_RemovedByUser
   (
      this : in out SpatialAnchor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Perception.Spatial.ISpatialAnchor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Perception.Spatial.ISpatialAnchor_Interface, WinRt.Windows.Perception.Spatial.ISpatialAnchor2, WinRt.Windows.Perception.Spatial.IID_ISpatialAnchor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialAnchor.all);
      Hr := m_Interface.get_RemovedByUser (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAnchorExportSufficiency

   procedure Initialize (this : in out SpatialAnchorExportSufficiency) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAnchorExportSufficiency) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAnchorExportSufficiency, ISpatialAnchorExportSufficiency_Ptr);
   begin
      if this.m_ISpatialAnchorExportSufficiency /= null then
         if this.m_ISpatialAnchorExportSufficiency.all /= null then
            RefCount := this.m_ISpatialAnchorExportSufficiency.all.Release;
            Free (this.m_ISpatialAnchorExportSufficiency);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAnchorExportSufficiency

   function get_IsMinimallySufficient
   (
      this : in out SpatialAnchorExportSufficiency
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialAnchorExportSufficiency.all.get_IsMinimallySufficient (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SufficiencyLevel
   (
      this : in out SpatialAnchorExportSufficiency
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialAnchorExportSufficiency.all.get_SufficiencyLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RecommendedSufficiencyLevel
   (
      this : in out SpatialAnchorExportSufficiency
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpatialAnchorExportSufficiency.all.get_RecommendedSufficiencyLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAnchorExporter

   procedure Initialize (this : in out SpatialAnchorExporter) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAnchorExporter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAnchorExporter, ISpatialAnchorExporter_Ptr);
   begin
      if this.m_ISpatialAnchorExporter /= null then
         if this.m_ISpatialAnchorExporter.all /= null then
            RefCount := this.m_ISpatialAnchorExporter.all.Release;
            Free (this.m_ISpatialAnchorExporter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialAnchorExporter

   function GetDefault
   return WinRt.Windows.Perception.Spatial.SpatialAnchorExporter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchorExporter");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorExporterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialAnchorExporter;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchorExporter do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorExporterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialAnchorExporter := new Windows.Perception.Spatial.ISpatialAnchorExporter;
            Retval.m_ISpatialAnchorExporter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function RequestAccessAsync
   return WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchorExporter");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorExporterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpatialPerceptionAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpatialPerceptionAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus;
      m_IID            : aliased WinRt.IID := (3022377254, 4201, 22079, (168, 99, 68, 163, 10, 143, 7, 29 )); -- Windows.Perception.Spatial.SpatialPerceptionAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1827493064, 30345, 21082, (128, 225, 149, 106, 157, 133, 205, 131 ));
      m_Handler        : AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind := new AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialPerceptionAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorExporterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAnchorExporter

   function GetAnchorExportSufficiencyAsync
   (
      this : in out SpatialAnchorExporter;
      anchor : Windows.Perception.Spatial.SpatialAnchor'Class;
      purpose : Windows.Perception.Spatial.SpatialAnchorExportPurpose
   )
   return WinRt.Windows.Perception.Spatial.SpatialAnchorExportSufficiency'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpatialAnchorExportSufficiency.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpatialAnchorExportSufficiency.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.Spatial.ISpatialAnchorExportSufficiency;
      m_IID            : aliased WinRt.IID := (638146488, 23414, 20825, (141, 197, 224, 61, 116, 170, 95, 61 )); -- Windows.Perception.Spatial.SpatialAnchorExportSufficiency;
      m_HandlerIID     : aliased WinRt.IID := (1264948178, 4520, 20798, (131, 141, 66, 38, 251, 30, 60, 31 ));
      m_Handler        : AsyncOperationCompletedHandler_SpatialAnchorExportSufficiency.Kind := new AsyncOperationCompletedHandler_SpatialAnchorExportSufficiency.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialAnchorExportSufficiency.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialAnchorExportSufficiency.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialAnchorExportSufficiency.Kind_Delegate, AsyncOperationCompletedHandler_SpatialAnchorExportSufficiency.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchorExportSufficiency do
         Hr := this.m_ISpatialAnchorExporter.all.GetAnchorExportSufficiencyAsync (anchor.m_ISpatialAnchor.all, purpose, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpatialAnchorExportSufficiency := new Windows.Perception.Spatial.ISpatialAnchorExportSufficiency;
                  Retval.m_ISpatialAnchorExportSufficiency.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryExportAnchorAsync
   (
      this : in out SpatialAnchorExporter;
      anchor : Windows.Perception.Spatial.SpatialAnchor'Class;
      purpose : Windows.Perception.Spatial.SpatialAnchorExportPurpose;
      stream : Windows.Storage.Streams.IOutputStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISpatialAnchorExporter.all.TryExportAnchorAsync (anchor.m_ISpatialAnchor.all, purpose, stream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SpatialAnchorManager is

      function RequestStoreAsync
      return WinRt.Windows.Perception.Spatial.SpatialAnchorStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchorManager");
         m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_SpatialAnchorStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_SpatialAnchorStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Perception.Spatial.ISpatialAnchorStore;
         m_IID            : aliased WinRt.IID := (483417681, 5207, 20515, (143, 93, 254, 94, 90, 149, 52, 35 )); -- Windows.Perception.Spatial.SpatialAnchorStore;
         m_HandlerIID     : aliased WinRt.IID := (2227313210, 890, 20543, (128, 6, 171, 87, 123, 127, 111, 102 ));
         m_Handler        : AsyncOperationCompletedHandler_SpatialAnchorStore.Kind := new AsyncOperationCompletedHandler_SpatialAnchorStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialAnchorStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialAnchorStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialAnchorStore.Kind_Delegate, AsyncOperationCompletedHandler_SpatialAnchorStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchorStore do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ISpatialAnchorStore := new Windows.Perception.Spatial.ISpatialAnchorStore;
                        Retval.m_ISpatialAnchorStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end SpatialAnchorManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAnchorRawCoordinateSystemAdjustedEventArgs

   procedure Initialize (this : in out SpatialAnchorRawCoordinateSystemAdjustedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAnchorRawCoordinateSystemAdjustedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAnchorRawCoordinateSystemAdjustedEventArgs, ISpatialAnchorRawCoordinateSystemAdjustedEventArgs_Ptr);
   begin
      if this.m_ISpatialAnchorRawCoordinateSystemAdjustedEventArgs /= null then
         if this.m_ISpatialAnchorRawCoordinateSystemAdjustedEventArgs.all /= null then
            RefCount := this.m_ISpatialAnchorRawCoordinateSystemAdjustedEventArgs.all.Release;
            Free (this.m_ISpatialAnchorRawCoordinateSystemAdjustedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAnchorRawCoordinateSystemAdjustedEventArgs

   function get_OldRawCoordinateSystemToNewRawCoordinateSystemTransform
   (
      this : in out SpatialAnchorRawCoordinateSystemAdjustedEventArgs
   )
   return WinRt.Windows.Foundation.Numerics.Matrix4x4 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix4x4;
   begin
      Hr := this.m_ISpatialAnchorRawCoordinateSystemAdjustedEventArgs.all.get_OldRawCoordinateSystemToNewRawCoordinateSystemTransform (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAnchorStore

   procedure Initialize (this : in out SpatialAnchorStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAnchorStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAnchorStore, ISpatialAnchorStore_Ptr);
   begin
      if this.m_ISpatialAnchorStore /= null then
         if this.m_ISpatialAnchorStore.all /= null then
            RefCount := this.m_ISpatialAnchorStore.all.Release;
            Free (this.m_ISpatialAnchorStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAnchorStore

   function GetAllSavedAnchors
   (
      this : in out SpatialAnchorStore
   )
   return IMapView_HString_ISpatialAnchor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_ISpatialAnchor.Kind;
   begin
      Hr := this.m_ISpatialAnchorStore.all.GetAllSavedAnchors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_ISpatialAnchor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function TrySave
   (
      this : in out SpatialAnchorStore;
      id : WinRt.WString;
      anchor : Windows.Perception.Spatial.SpatialAnchor'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      Hr := this.m_ISpatialAnchorStore.all.TrySave (HStr_id, anchor.m_ISpatialAnchor.all, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_id);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out SpatialAnchorStore;
      id : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      Hr := this.m_ISpatialAnchorStore.all.Remove (HStr_id);
      Hr := WindowsDeleteString (HStr_id);
   end;

   procedure Clear
   (
      this : in out SpatialAnchorStore
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialAnchorStore.all.Clear;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SpatialAnchorTransferManager is

      function TryImportAnchorsAsync
      (
         stream : Windows.Storage.Streams.IInputStream
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchorTransferManager");
         m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorTransferManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (3152049960, 55859, 21189, (170, 224, 165, 231, 76, 223, 4, 113 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (982846115, 40037, 22638, (175, 117, 26, 207, 7, 25, 14, 144 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorTransferManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryImportAnchorsAsync (stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function TryExportAnchorsAsync
      (
         anchors : GenericObject;
         stream : Windows.Storage.Streams.IOutputStream
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchorTransferManager");
         m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorTransferManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorTransferManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryExportAnchorsAsync (anchors, stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function RequestAccessAsync_SpatialAnchorTransferManager
      return WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialAnchorTransferManager");
         m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialAnchorTransferManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_SpatialPerceptionAccessStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_SpatialPerceptionAccessStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Perception.Spatial.SpatialPerceptionAccessStatus;
         m_IID            : aliased WinRt.IID := (3022377254, 4201, 22079, (168, 99, 68, 163, 10, 143, 7, 29 )); -- Windows.Perception.Spatial.SpatialPerceptionAccessStatus;
         m_HandlerIID     : aliased WinRt.IID := (1827493064, 30345, 21082, (128, 225, 149, 106, 157, 133, 205, 131 ));
         m_Handler        : AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind := new AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialPerceptionAccessStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_SpatialPerceptionAccessStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAnchorTransferManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end SpatialAnchorTransferManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialBoundingVolume

   procedure Initialize (this : in out SpatialBoundingVolume) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialBoundingVolume) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialBoundingVolume, ISpatialBoundingVolume_Ptr);
   begin
      if this.m_ISpatialBoundingVolume /= null then
         if this.m_ISpatialBoundingVolume.all /= null then
            RefCount := this.m_ISpatialBoundingVolume.all.Release;
            Free (this.m_ISpatialBoundingVolume);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialBoundingVolume

   function FromBox
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      box : Windows.Perception.Spatial.SpatialBoundingBox
   )
   return WinRt.Windows.Perception.Spatial.SpatialBoundingVolume is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialBoundingVolume");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialBoundingVolumeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialBoundingVolume;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialBoundingVolume do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialBoundingVolumeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBox (coordinateSystem.m_ISpatialCoordinateSystem.all, box, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialBoundingVolume := new Windows.Perception.Spatial.ISpatialBoundingVolume;
            Retval.m_ISpatialBoundingVolume.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromOrientedBox
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      box : Windows.Perception.Spatial.SpatialBoundingOrientedBox
   )
   return WinRt.Windows.Perception.Spatial.SpatialBoundingVolume is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialBoundingVolume");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialBoundingVolumeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialBoundingVolume;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialBoundingVolume do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialBoundingVolumeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromOrientedBox (coordinateSystem.m_ISpatialCoordinateSystem.all, box, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialBoundingVolume := new Windows.Perception.Spatial.ISpatialBoundingVolume;
            Retval.m_ISpatialBoundingVolume.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromSphere
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      sphere : Windows.Perception.Spatial.SpatialBoundingSphere
   )
   return WinRt.Windows.Perception.Spatial.SpatialBoundingVolume is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialBoundingVolume");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialBoundingVolumeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialBoundingVolume;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialBoundingVolume do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialBoundingVolumeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromSphere (coordinateSystem.m_ISpatialCoordinateSystem.all, sphere, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialBoundingVolume := new Windows.Perception.Spatial.ISpatialBoundingVolume;
            Retval.m_ISpatialBoundingVolume.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromFrustum
   (
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      frustum : Windows.Perception.Spatial.SpatialBoundingFrustum
   )
   return WinRt.Windows.Perception.Spatial.SpatialBoundingVolume is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialBoundingVolume");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialBoundingVolumeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialBoundingVolume;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialBoundingVolume do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialBoundingVolumeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromFrustum (coordinateSystem.m_ISpatialCoordinateSystem.all, frustum, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialBoundingVolume := new Windows.Perception.Spatial.ISpatialBoundingVolume;
            Retval.m_ISpatialBoundingVolume.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialBoundingVolume

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialCoordinateSystem

   procedure Initialize (this : in out SpatialCoordinateSystem) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialCoordinateSystem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialCoordinateSystem, ISpatialCoordinateSystem_Ptr);
   begin
      if this.m_ISpatialCoordinateSystem /= null then
         if this.m_ISpatialCoordinateSystem.all /= null then
            RefCount := this.m_ISpatialCoordinateSystem.all.Release;
            Free (this.m_ISpatialCoordinateSystem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialCoordinateSystem

   function TryGetTransformTo
   (
      this : in out SpatialCoordinateSystem;
      target : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return IReference_Matrix4x4.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Matrix4x4.Kind;
   begin
      Hr := this.m_ISpatialCoordinateSystem.all.TryGetTransformTo (target.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Matrix4x4 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialEntity

   procedure Initialize (this : in out SpatialEntity) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialEntity) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialEntity, ISpatialEntity_Ptr);
   begin
      if this.m_ISpatialEntity /= null then
         if this.m_ISpatialEntity.all /= null then
            RefCount := this.m_ISpatialEntity.all.Release;
            Free (this.m_ISpatialEntity);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpatialEntity

   function Constructor
   (
      spatialAnchor_p : Windows.Perception.Spatial.SpatialAnchor'Class
   )
   return SpatialEntity is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialEntity");
      m_Factory    : access ISpatialEntityFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Perception.Spatial.ISpatialEntity;
   begin
      return RetVal : SpatialEntity do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialEntityFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSpatialAnchor (spatialAnchor_p.m_ISpatialAnchor.all, m_ComRetVal'Access);
            Retval.m_ISpatialEntity := new Windows.Perception.Spatial.ISpatialEntity;
            Retval.m_ISpatialEntity.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      spatialAnchor_p : Windows.Perception.Spatial.SpatialAnchor'Class;
      propertySet : Windows.Foundation.Collections.ValueSet'Class
   )
   return SpatialEntity is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialEntity");
      m_Factory    : access ISpatialEntityFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Perception.Spatial.ISpatialEntity;
   begin
      return RetVal : SpatialEntity do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialEntityFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSpatialAnchorAndProperties (spatialAnchor_p.m_ISpatialAnchor.all, propertySet.m_IPropertySet.all, m_ComRetVal'Access);
            Retval.m_ISpatialEntity := new Windows.Perception.Spatial.ISpatialEntity;
            Retval.m_ISpatialEntity.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialEntity

   function get_Id
   (
      this : in out SpatialEntity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpatialEntity.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Anchor
   (
      this : in out SpatialEntity
   )
   return WinRt.Windows.Perception.Spatial.SpatialAnchor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialAnchor;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialAnchor do
         Hr := this.m_ISpatialEntity.all.get_Anchor (m_ComRetVal'Access);
         Retval.m_ISpatialAnchor := new Windows.Perception.Spatial.ISpatialAnchor;
         Retval.m_ISpatialAnchor.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out SpatialEntity
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_ISpatialEntity.all.get_Properties (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialEntityAddedEventArgs

   procedure Initialize (this : in out SpatialEntityAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialEntityAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialEntityAddedEventArgs, ISpatialEntityAddedEventArgs_Ptr);
   begin
      if this.m_ISpatialEntityAddedEventArgs /= null then
         if this.m_ISpatialEntityAddedEventArgs.all /= null then
            RefCount := this.m_ISpatialEntityAddedEventArgs.all.Release;
            Free (this.m_ISpatialEntityAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialEntityAddedEventArgs

   function get_Entity
   (
      this : in out SpatialEntityAddedEventArgs
   )
   return WinRt.Windows.Perception.Spatial.SpatialEntity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialEntity;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialEntity do
         Hr := this.m_ISpatialEntityAddedEventArgs.all.get_Entity (m_ComRetVal'Access);
         Retval.m_ISpatialEntity := new Windows.Perception.Spatial.ISpatialEntity;
         Retval.m_ISpatialEntity.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialEntityRemovedEventArgs

   procedure Initialize (this : in out SpatialEntityRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialEntityRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialEntityRemovedEventArgs, ISpatialEntityRemovedEventArgs_Ptr);
   begin
      if this.m_ISpatialEntityRemovedEventArgs /= null then
         if this.m_ISpatialEntityRemovedEventArgs.all /= null then
            RefCount := this.m_ISpatialEntityRemovedEventArgs.all.Release;
            Free (this.m_ISpatialEntityRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialEntityRemovedEventArgs

   function get_Entity
   (
      this : in out SpatialEntityRemovedEventArgs
   )
   return WinRt.Windows.Perception.Spatial.SpatialEntity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialEntity;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialEntity do
         Hr := this.m_ISpatialEntityRemovedEventArgs.all.get_Entity (m_ComRetVal'Access);
         Retval.m_ISpatialEntity := new Windows.Perception.Spatial.ISpatialEntity;
         Retval.m_ISpatialEntity.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialEntityStore

   procedure Initialize (this : in out SpatialEntityStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialEntityStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialEntityStore, ISpatialEntityStore_Ptr);
   begin
      if this.m_ISpatialEntityStore /= null then
         if this.m_ISpatialEntityStore.all /= null then
            RefCount := this.m_ISpatialEntityStore.all.Release;
            Free (this.m_ISpatialEntityStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialEntityStore

   function get_IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialEntityStore");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialEntityStoreStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialEntityStoreStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function TryGet
   (
      session : Windows.System.RemoteSystems.RemoteSystemSession'Class
   )
   return WinRt.Windows.Perception.Spatial.SpatialEntityStore is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialEntityStore");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialEntityStoreStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialEntityStore;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialEntityStore do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialEntityStoreStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryGet (session.m_IRemoteSystemSession.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialEntityStore := new Windows.Perception.Spatial.ISpatialEntityStore;
            Retval.m_ISpatialEntityStore.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialEntityStore

   procedure SaveAsync
   (
      this : in out SpatialEntityStore;
      entity : Windows.Perception.Spatial.SpatialEntity'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpatialEntityStore.all.SaveAsync (entity.m_ISpatialEntity.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RemoveAsync
   (
      this : in out SpatialEntityStore;
      entity : Windows.Perception.Spatial.SpatialEntity'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpatialEntityStore.all.RemoveAsync (entity.m_ISpatialEntity.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function CreateEntityWatcher
   (
      this : in out SpatialEntityStore
   )
   return WinRt.Windows.Perception.Spatial.SpatialEntityWatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialEntityWatcher;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialEntityWatcher do
         Hr := this.m_ISpatialEntityStore.all.CreateEntityWatcher (m_ComRetVal'Access);
         Retval.m_ISpatialEntityWatcher := new Windows.Perception.Spatial.ISpatialEntityWatcher;
         Retval.m_ISpatialEntityWatcher.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialEntityUpdatedEventArgs

   procedure Initialize (this : in out SpatialEntityUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialEntityUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialEntityUpdatedEventArgs, ISpatialEntityUpdatedEventArgs_Ptr);
   begin
      if this.m_ISpatialEntityUpdatedEventArgs /= null then
         if this.m_ISpatialEntityUpdatedEventArgs.all /= null then
            RefCount := this.m_ISpatialEntityUpdatedEventArgs.all.Release;
            Free (this.m_ISpatialEntityUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialEntityUpdatedEventArgs

   function get_Entity
   (
      this : in out SpatialEntityUpdatedEventArgs
   )
   return WinRt.Windows.Perception.Spatial.SpatialEntity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialEntity;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialEntity do
         Hr := this.m_ISpatialEntityUpdatedEventArgs.all.get_Entity (m_ComRetVal'Access);
         Retval.m_ISpatialEntity := new Windows.Perception.Spatial.ISpatialEntity;
         Retval.m_ISpatialEntity.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialEntityWatcher

   procedure Initialize (this : in out SpatialEntityWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialEntityWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialEntityWatcher, ISpatialEntityWatcher_Ptr);
   begin
      if this.m_ISpatialEntityWatcher /= null then
         if this.m_ISpatialEntityWatcher.all /= null then
            RefCount := this.m_ISpatialEntityWatcher.all.Release;
            Free (this.m_ISpatialEntityWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialEntityWatcher

   function get_Status
   (
      this : in out SpatialEntityWatcher
   )
   return WinRt.Windows.Perception.Spatial.SpatialEntityWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.SpatialEntityWatcherStatus;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Added
   (
      this : in out SpatialEntityWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out SpatialEntityWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.remove_Added (token);
   end;

   function add_Updated
   (
      this : in out SpatialEntityWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out SpatialEntityWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.remove_Updated (token);
   end;

   function add_Removed
   (
      this : in out SpatialEntityWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out SpatialEntityWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.remove_Removed (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out SpatialEntityWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out SpatialEntityWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.remove_EnumerationCompleted (token);
   end;

   procedure Start
   (
      this : in out SpatialEntityWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out SpatialEntityWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialEntityWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialLocation

   procedure Initialize (this : in out SpatialLocation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialLocation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialLocation, ISpatialLocation_Ptr);
   begin
      if this.m_ISpatialLocation /= null then
         if this.m_ISpatialLocation.all /= null then
            RefCount := this.m_ISpatialLocation.all.Release;
            Free (this.m_ISpatialLocation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialLocation

   function get_Position
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialLocation.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Orientation
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_ISpatialLocation.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AbsoluteLinearVelocity
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialLocation.all.get_AbsoluteLinearVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AbsoluteLinearAcceleration
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialLocation.all.get_AbsoluteLinearAcceleration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AbsoluteAngularVelocity
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_ISpatialLocation.all.get_AbsoluteAngularVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AbsoluteAngularAcceleration
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_ISpatialLocation.all.get_AbsoluteAngularAcceleration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AbsoluteAngularVelocityAxisAngle
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Perception.Spatial.ISpatialLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Perception.Spatial.ISpatialLocation_Interface, WinRt.Windows.Perception.Spatial.ISpatialLocation2, WinRt.Windows.Perception.Spatial.IID_ISpatialLocation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialLocation.all);
      Hr := m_Interface.get_AbsoluteAngularVelocityAxisAngle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AbsoluteAngularAccelerationAxisAngle
   (
      this : in out SpatialLocation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Perception.Spatial.ISpatialLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Perception.Spatial.ISpatialLocation_Interface, WinRt.Windows.Perception.Spatial.ISpatialLocation2, WinRt.Windows.Perception.Spatial.IID_ISpatialLocation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpatialLocation.all);
      Hr := m_Interface.get_AbsoluteAngularAccelerationAxisAngle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialLocator

   procedure Initialize (this : in out SpatialLocator) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialLocator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialLocator, ISpatialLocator_Ptr);
   begin
      if this.m_ISpatialLocator /= null then
         if this.m_ISpatialLocator.all /= null then
            RefCount := this.m_ISpatialLocator.all.Release;
            Free (this.m_ISpatialLocator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialLocator

   function GetDefault
   return WinRt.Windows.Perception.Spatial.SpatialLocator is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialLocator");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialLocatorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocator;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocator do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialLocatorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialLocator := new Windows.Perception.Spatial.ISpatialLocator;
            Retval.m_ISpatialLocator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialLocator

   function get_Locatability
   (
      this : in out SpatialLocator
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocatability is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.SpatialLocatability;
   begin
      Hr := this.m_ISpatialLocator.all.get_Locatability (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_LocatabilityChanged
   (
      this : in out SpatialLocator;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialLocator.all.add_LocatabilityChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LocatabilityChanged
   (
      this : in out SpatialLocator;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialLocator.all.remove_LocatabilityChanged (cookie);
   end;

   function add_PositionalTrackingDeactivating
   (
      this : in out SpatialLocator;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialLocator.all.add_PositionalTrackingDeactivating (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PositionalTrackingDeactivating
   (
      this : in out SpatialLocator;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialLocator.all.remove_PositionalTrackingDeactivating (cookie);
   end;

   function TryLocateAtTimestamp
   (
      this : in out SpatialLocator;
      timestamp : Windows.Perception.PerceptionTimestamp'Class;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocation;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocation do
         Hr := this.m_ISpatialLocator.all.TryLocateAtTimestamp (timestamp.m_IPerceptionTimestamp.all, coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
         Retval.m_ISpatialLocation := new Windows.Perception.Spatial.ISpatialLocation;
         Retval.m_ISpatialLocation.all := m_ComRetVal;
      end return;
   end;

   function CreateAttachedFrameOfReferenceAtCurrentHeading
   (
      this : in out SpatialLocator
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateAttachedFrameOfReferenceAtCurrentHeading (m_ComRetVal'Access);
         Retval.m_ISpatialLocatorAttachedFrameOfReference := new Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
         Retval.m_ISpatialLocatorAttachedFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateAttachedFrameOfReferenceAtCurrentHeading
   (
      this : in out SpatialLocator;
      relativePosition : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateAttachedFrameOfReferenceAtCurrentHeading (relativePosition, m_ComRetVal'Access);
         Retval.m_ISpatialLocatorAttachedFrameOfReference := new Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
         Retval.m_ISpatialLocatorAttachedFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateAttachedFrameOfReferenceAtCurrentHeading
   (
      this : in out SpatialLocator;
      relativePosition : Windows.Foundation.Numerics.Vector3;
      relativeOrientation : Windows.Foundation.Numerics.Quaternion
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateAttachedFrameOfReferenceAtCurrentHeading (relativePosition, relativeOrientation, m_ComRetVal'Access);
         Retval.m_ISpatialLocatorAttachedFrameOfReference := new Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
         Retval.m_ISpatialLocatorAttachedFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateAttachedFrameOfReferenceAtCurrentHeading
   (
      this : in out SpatialLocator;
      relativePosition : Windows.Foundation.Numerics.Vector3;
      relativeOrientation : Windows.Foundation.Numerics.Quaternion;
      relativeHeadingInRadians : WinRt.Double
   )
   return WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocatorAttachedFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateAttachedFrameOfReferenceAtCurrentHeading (relativePosition, relativeOrientation, relativeHeadingInRadians, m_ComRetVal'Access);
         Retval.m_ISpatialLocatorAttachedFrameOfReference := new Windows.Perception.Spatial.ISpatialLocatorAttachedFrameOfReference;
         Retval.m_ISpatialLocatorAttachedFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateStationaryFrameOfReferenceAtCurrentLocation
   (
      this : in out SpatialLocator
   )
   return WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateStationaryFrameOfReferenceAtCurrentLocation (m_ComRetVal'Access);
         Retval.m_ISpatialStationaryFrameOfReference := new Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
         Retval.m_ISpatialStationaryFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateStationaryFrameOfReferenceAtCurrentLocation
   (
      this : in out SpatialLocator;
      relativePosition : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateStationaryFrameOfReferenceAtCurrentLocation (relativePosition, m_ComRetVal'Access);
         Retval.m_ISpatialStationaryFrameOfReference := new Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
         Retval.m_ISpatialStationaryFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateStationaryFrameOfReferenceAtCurrentLocation
   (
      this : in out SpatialLocator;
      relativePosition : Windows.Foundation.Numerics.Vector3;
      relativeOrientation : Windows.Foundation.Numerics.Quaternion
   )
   return WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateStationaryFrameOfReferenceAtCurrentLocation (relativePosition, relativeOrientation, m_ComRetVal'Access);
         Retval.m_ISpatialStationaryFrameOfReference := new Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
         Retval.m_ISpatialStationaryFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   function CreateStationaryFrameOfReferenceAtCurrentLocation
   (
      this : in out SpatialLocator;
      relativePosition : Windows.Foundation.Numerics.Vector3;
      relativeOrientation : Windows.Foundation.Numerics.Quaternion;
      relativeHeadingInRadians : WinRt.Double
   )
   return WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialStationaryFrameOfReference do
         Hr := this.m_ISpatialLocator.all.CreateStationaryFrameOfReferenceAtCurrentLocation (relativePosition, relativeOrientation, relativeHeadingInRadians, m_ComRetVal'Access);
         Retval.m_ISpatialStationaryFrameOfReference := new Windows.Perception.Spatial.ISpatialStationaryFrameOfReference;
         Retval.m_ISpatialStationaryFrameOfReference.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialLocatorAttachedFrameOfReference

   procedure Initialize (this : in out SpatialLocatorAttachedFrameOfReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialLocatorAttachedFrameOfReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialLocatorAttachedFrameOfReference, ISpatialLocatorAttachedFrameOfReference_Ptr);
   begin
      if this.m_ISpatialLocatorAttachedFrameOfReference /= null then
         if this.m_ISpatialLocatorAttachedFrameOfReference.all /= null then
            RefCount := this.m_ISpatialLocatorAttachedFrameOfReference.all.Release;
            Free (this.m_ISpatialLocatorAttachedFrameOfReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialLocatorAttachedFrameOfReference

   function get_RelativePosition
   (
      this : in out SpatialLocatorAttachedFrameOfReference
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.get_RelativePosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RelativePosition
   (
      this : in out SpatialLocatorAttachedFrameOfReference;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.put_RelativePosition (value);
   end;

   function get_RelativeOrientation
   (
      this : in out SpatialLocatorAttachedFrameOfReference
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.get_RelativeOrientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RelativeOrientation
   (
      this : in out SpatialLocatorAttachedFrameOfReference;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.put_RelativeOrientation (value);
   end;

   procedure AdjustHeading
   (
      this : in out SpatialLocatorAttachedFrameOfReference;
      headingOffsetInRadians : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.AdjustHeading (headingOffsetInRadians);
   end;

   function GetStationaryCoordinateSystemAtTimestamp
   (
      this : in out SpatialLocatorAttachedFrameOfReference;
      timestamp : Windows.Perception.PerceptionTimestamp'Class
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.GetStationaryCoordinateSystemAtTimestamp (timestamp.m_IPerceptionTimestamp.all, m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function TryGetRelativeHeadingAtTimestamp
   (
      this : in out SpatialLocatorAttachedFrameOfReference;
      timestamp : Windows.Perception.PerceptionTimestamp'Class
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_ISpatialLocatorAttachedFrameOfReference.all.TryGetRelativeHeadingAtTimestamp (timestamp.m_IPerceptionTimestamp.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialLocatorPositionalTrackingDeactivatingEventArgs

   procedure Initialize (this : in out SpatialLocatorPositionalTrackingDeactivatingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialLocatorPositionalTrackingDeactivatingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialLocatorPositionalTrackingDeactivatingEventArgs, ISpatialLocatorPositionalTrackingDeactivatingEventArgs_Ptr);
   begin
      if this.m_ISpatialLocatorPositionalTrackingDeactivatingEventArgs /= null then
         if this.m_ISpatialLocatorPositionalTrackingDeactivatingEventArgs.all /= null then
            RefCount := this.m_ISpatialLocatorPositionalTrackingDeactivatingEventArgs.all.Release;
            Free (this.m_ISpatialLocatorPositionalTrackingDeactivatingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialLocatorPositionalTrackingDeactivatingEventArgs

   function get_Canceled
   (
      this : in out SpatialLocatorPositionalTrackingDeactivatingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialLocatorPositionalTrackingDeactivatingEventArgs.all.get_Canceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Canceled
   (
      this : in out SpatialLocatorPositionalTrackingDeactivatingEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialLocatorPositionalTrackingDeactivatingEventArgs.all.put_Canceled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialStageFrameOfReference

   procedure Initialize (this : in out SpatialStageFrameOfReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialStageFrameOfReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialStageFrameOfReference, ISpatialStageFrameOfReference_Ptr);
   begin
      if this.m_ISpatialStageFrameOfReference /= null then
         if this.m_ISpatialStageFrameOfReference.all /= null then
            RefCount := this.m_ISpatialStageFrameOfReference.all.Release;
            Free (this.m_ISpatialStageFrameOfReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialStageFrameOfReference

   function get_Current
   return WinRt.Windows.Perception.Spatial.SpatialStageFrameOfReference is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialStageFrameOfReference");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialStageFrameOfReference;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialStageFrameOfReference do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialStageFrameOfReferenceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialStageFrameOfReference := new Windows.Perception.Spatial.ISpatialStageFrameOfReference;
            Retval.m_ISpatialStageFrameOfReference.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function add_CurrentChanged
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialStageFrameOfReference");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialStageFrameOfReferenceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_CurrentChanged (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_CurrentChanged
   (
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialStageFrameOfReference");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpatialStageFrameOfReferenceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_CurrentChanged (cookie);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function RequestNewStageAsync
   return WinRt.Windows.Perception.Spatial.SpatialStageFrameOfReference is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.SpatialStageFrameOfReference");
      m_Factory        : access WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpatialStageFrameOfReference.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpatialStageFrameOfReference.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Perception.Spatial.ISpatialStageFrameOfReference;
      m_IID            : aliased WinRt.IID := (3034100159, 7526, 21592, (165, 223, 63, 79, 108, 54, 108, 88 )); -- Windows.Perception.Spatial.SpatialStageFrameOfReference;
      m_HandlerIID     : aliased WinRt.IID := (4223134203, 58522, 21729, (140, 131, 209, 168, 126, 77, 35, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_SpatialStageFrameOfReference.Kind := new AsyncOperationCompletedHandler_SpatialStageFrameOfReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpatialStageFrameOfReference.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpatialStageFrameOfReference.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpatialStageFrameOfReference.Kind_Delegate, AsyncOperationCompletedHandler_SpatialStageFrameOfReference.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialStageFrameOfReference do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialStageFrameOfReferenceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestNewStageAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISpatialStageFrameOfReference := new Windows.Perception.Spatial.ISpatialStageFrameOfReference;
                     Retval.m_ISpatialStageFrameOfReference.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialStageFrameOfReference

   function get_CoordinateSystem
   (
      this : in out SpatialStageFrameOfReference
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialStageFrameOfReference.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function get_MovementRange
   (
      this : in out SpatialStageFrameOfReference
   )
   return WinRt.Windows.Perception.Spatial.SpatialMovementRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.SpatialMovementRange;
   begin
      Hr := this.m_ISpatialStageFrameOfReference.all.get_MovementRange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LookDirectionRange
   (
      this : in out SpatialStageFrameOfReference
   )
   return WinRt.Windows.Perception.Spatial.SpatialLookDirectionRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.SpatialLookDirectionRange;
   begin
      Hr := this.m_ISpatialStageFrameOfReference.all.get_LookDirectionRange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCoordinateSystemAtCurrentLocation
   (
      this : in out SpatialStageFrameOfReference;
      locator : Windows.Perception.Spatial.SpatialLocator'Class
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialStageFrameOfReference.all.GetCoordinateSystemAtCurrentLocation (locator.m_ISpatialLocator.all, m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function TryGetMovementBounds
   (
      this : in out SpatialStageFrameOfReference;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.Foundation.Numerics.Vector3_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialStageFrameOfReference.all.TryGetMovementBounds (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Windows.Foundation.Numerics.Vector3_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Vector3 is new To_Ada_Type (WinRt.Windows.Foundation.Numerics.Vector3, WinRt.Windows.Foundation.Numerics.Vector3_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Vector3 (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialStationaryFrameOfReference

   procedure Initialize (this : in out SpatialStationaryFrameOfReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialStationaryFrameOfReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialStationaryFrameOfReference, ISpatialStationaryFrameOfReference_Ptr);
   begin
      if this.m_ISpatialStationaryFrameOfReference /= null then
         if this.m_ISpatialStationaryFrameOfReference.all /= null then
            RefCount := this.m_ISpatialStationaryFrameOfReference.all.Release;
            Free (this.m_ISpatialStationaryFrameOfReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialStationaryFrameOfReference

   function get_CoordinateSystem
   (
      this : in out SpatialStationaryFrameOfReference
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialStationaryFrameOfReference.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Foundation.Diagnostics is

   package IAsyncOperation_ErrorDetails is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Foundation.Diagnostics.IErrorDetails);
   package AsyncOperationCompletedHandler_ErrorDetails is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Foundation.Diagnostics.IErrorDetails);

   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AsyncCausalityTracer is

      procedure TraceOperationCreation
      (
         traceLevel : Windows.Foundation.Diagnostics.CausalityTraceLevel;
         source : Windows.Foundation.Diagnostics.CausalitySource;
         platformId : WinRt.Guid;
         operationId : WinRt.UInt64;
         operationName : WinRt.WString;
         relatedContext : WinRt.UInt64
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_operationName : WinRt.HString := To_HString (operationName);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TraceOperationCreation (traceLevel, source, platformId, operationId, HStr_operationName, relatedContext);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_operationName);
      end;

      procedure TraceOperationCompletion
      (
         traceLevel : Windows.Foundation.Diagnostics.CausalityTraceLevel;
         source : Windows.Foundation.Diagnostics.CausalitySource;
         platformId : WinRt.Guid;
         operationId : WinRt.UInt64;
         status : Windows.Foundation.AsyncStatus
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TraceOperationCompletion (traceLevel, source, platformId, operationId, status);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure TraceOperationRelation
      (
         traceLevel : Windows.Foundation.Diagnostics.CausalityTraceLevel;
         source : Windows.Foundation.Diagnostics.CausalitySource;
         platformId : WinRt.Guid;
         operationId : WinRt.UInt64;
         relation : Windows.Foundation.Diagnostics.CausalityRelation
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TraceOperationRelation (traceLevel, source, platformId, operationId, relation);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure TraceSynchronousWorkStart
      (
         traceLevel : Windows.Foundation.Diagnostics.CausalityTraceLevel;
         source : Windows.Foundation.Diagnostics.CausalitySource;
         platformId : WinRt.Guid;
         operationId : WinRt.UInt64;
         work : Windows.Foundation.Diagnostics.CausalitySynchronousWork
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TraceSynchronousWorkStart (traceLevel, source, platformId, operationId, work);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure TraceSynchronousWorkCompletion
      (
         traceLevel : Windows.Foundation.Diagnostics.CausalityTraceLevel;
         source : Windows.Foundation.Diagnostics.CausalitySource;
         work : Windows.Foundation.Diagnostics.CausalitySynchronousWork
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TraceSynchronousWorkCompletion (traceLevel, source, work);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_TracingStatusChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_TracingStatusChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_TracingStatusChanged
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.AsyncCausalityTracer");
         m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAsyncCausalityTracerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_TracingStatusChanged (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end AsyncCausalityTracer;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ErrorDetails

   procedure Initialize (this : in out ErrorDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ErrorDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IErrorDetails, IErrorDetails_Ptr);
   begin
      if this.m_IErrorDetails /= null then
         if this.m_IErrorDetails.all /= null then
            RefCount := this.m_IErrorDetails.all.Release;
            Free (this.m_IErrorDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ErrorDetails

   function CreateFromHResultAsync
   (
      errorCode : WinRt.Int32
   )
   return WinRt.Windows.Foundation.Diagnostics.ErrorDetails is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.ErrorDetails");
      m_Factory        : access WinRt.Windows.Foundation.Diagnostics.IErrorDetailsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ErrorDetails.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ErrorDetails.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Foundation.Diagnostics.IErrorDetails;
      m_IID            : aliased WinRt.IID := (2600800365, 30688, 23588, (130, 176, 155, 45, 200, 247, 150, 113 )); -- Windows.Foundation.Diagnostics.ErrorDetails;
      m_HandlerIID     : aliased WinRt.IID := (2795077533, 29077, 22898, (142, 205, 28, 115, 170, 92, 179, 18 ));
      m_Handler        : AsyncOperationCompletedHandler_ErrorDetails.Kind := new AsyncOperationCompletedHandler_ErrorDetails.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ErrorDetails.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ErrorDetails.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ErrorDetails.Kind_Delegate, AsyncOperationCompletedHandler_ErrorDetails.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.ErrorDetails do
         Hr := RoGetActivationFactory (m_hString, IID_IErrorDetailsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromHResultAsync (errorCode, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IErrorDetails := new Windows.Foundation.Diagnostics.IErrorDetails;
                     Retval.m_IErrorDetails.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ErrorDetails

   function get_Description
   (
      this : in out ErrorDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IErrorDetails.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LongDescription
   (
      this : in out ErrorDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IErrorDetails.all.get_LongDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HelpUri
   (
      this : in out ErrorDetails
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IErrorDetails.all.get_HelpUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileLoggingSession

   procedure Initialize (this : in out FileLoggingSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileLoggingSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileLoggingSession, IFileLoggingSession_Ptr);
   begin
      if this.m_IFileLoggingSession /= null then
         if this.m_IFileLoggingSession.all /= null then
            RefCount := this.m_IFileLoggingSession.all.Release;
            Free (this.m_IFileLoggingSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FileLoggingSession

   function Constructor
   (
      name : WinRt.WString
   )
   return FileLoggingSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.FileLoggingSession");
      m_Factory    : access IFileLoggingSessionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.IFileLoggingSession;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : FileLoggingSession do
         Hr := RoGetActivationFactory (m_hString, IID_IFileLoggingSessionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_name, m_ComRetVal'Access);
            Retval.m_IFileLoggingSession := new Windows.Foundation.Diagnostics.IFileLoggingSession;
            Retval.m_IFileLoggingSession.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileLoggingSession

   function get_Name
   (
      this : in out FileLoggingSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileLoggingSession.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AddLoggingChannel
   (
      this : in out FileLoggingSession;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileLoggingSession.all.AddLoggingChannel (loggingChannel_p);
   end;

   procedure AddLoggingChannel
   (
      this : in out FileLoggingSession;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel;
      maxLevel : Windows.Foundation.Diagnostics.LoggingLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileLoggingSession.all.AddLoggingChannel (loggingChannel_p, maxLevel);
   end;

   procedure RemoveLoggingChannel
   (
      this : in out FileLoggingSession;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileLoggingSession.all.RemoveLoggingChannel (loggingChannel_p);
   end;

   function CloseAndSaveToFileAsync
   (
      this : in out FileLoggingSession
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileLoggingSession.all.CloseAndSaveToFileAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_LogFileGenerated
   (
      this : in out FileLoggingSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IFileLoggingSession.all.add_LogFileGenerated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LogFileGenerated
   (
      this : in out FileLoggingSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileLoggingSession.all.remove_LogFileGenerated (token);
   end;

   procedure Close
   (
      this : in out FileLoggingSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.IFileLoggingSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileLoggingSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LogFileGeneratedEventArgs

   procedure Initialize (this : in out LogFileGeneratedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LogFileGeneratedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILogFileGeneratedEventArgs, ILogFileGeneratedEventArgs_Ptr);
   begin
      if this.m_ILogFileGeneratedEventArgs /= null then
         if this.m_ILogFileGeneratedEventArgs.all /= null then
            RefCount := this.m_ILogFileGeneratedEventArgs.all.Release;
            Free (this.m_ILogFileGeneratedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LogFileGeneratedEventArgs

   function get_File
   (
      this : in out LogFileGeneratedEventArgs
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_ILogFileGeneratedEventArgs.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoggingActivity

   procedure Initialize (this : in out LoggingActivity) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoggingActivity) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoggingActivity, ILoggingActivity_Ptr);
   begin
      if this.m_ILoggingActivity /= null then
         if this.m_ILoggingActivity.all /= null then
            RefCount := this.m_ILoggingActivity.all.Release;
            Free (this.m_ILoggingActivity);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LoggingActivity

   function Constructor
   (
      activityName : WinRt.WString;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel
   )
   return LoggingActivity is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingActivity");
      m_Factory    : access ILoggingActivityFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_activityName : WinRt.HString := To_HString (activityName);
   begin
      return RetVal : LoggingActivity do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingActivityFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateLoggingActivity (HStr_activityName, loggingChannel_p, m_ComRetVal'Access);
            Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
            Retval.m_ILoggingActivity.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activityName);
      end return;
   end;

   function Constructor
   (
      activityName : WinRt.WString;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   )
   return LoggingActivity is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingActivity");
      m_Factory    : access ILoggingActivityFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_activityName : WinRt.HString := To_HString (activityName);
   begin
      return RetVal : LoggingActivity do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingActivityFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateLoggingActivityWithLevel (HStr_activityName, loggingChannel_p, level, m_ComRetVal'Access);
            Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
            Retval.m_ILoggingActivity.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activityName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoggingActivity

   function get_Name
   (
      this : in out LoggingActivity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILoggingActivity.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out LoggingActivity
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ILoggingActivity.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out LoggingActivity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Channel
   (
      this : in out LoggingActivity
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingChannel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingActivity2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingChannel do
         m_Interface := QInterface (this.m_ILoggingActivity.all);
         Hr := m_Interface.get_Channel (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingChannel := new Windows.Foundation.Diagnostics.ILoggingChannel;
         Retval.m_ILoggingChannel.all := m_ComRetVal;
      end return;
   end;

   procedure StopActivity
   (
      this : in out LoggingActivity;
      stopEventName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_stopEventName : WinRt.HString := To_HString (stopEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingActivity2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.StopActivity (HStr_stopEventName);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_stopEventName);
   end;

   procedure StopActivity
   (
      this : in out LoggingActivity;
      stopEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_stopEventName : WinRt.HString := To_HString (stopEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingActivity2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.StopActivity (HStr_stopEventName, fields.m_ILoggingFields.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_stopEventName);
   end;

   procedure StopActivity
   (
      this : in out LoggingActivity;
      stopEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      options : Windows.Foundation.Diagnostics.LoggingOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_stopEventName : WinRt.HString := To_HString (stopEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingActivity2, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingActivity2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.StopActivity (HStr_stopEventName, fields.m_ILoggingFields.all, options.m_ILoggingOptions.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_stopEventName);
   end;

   function IsEnabled
   (
      this : in out LoggingActivity
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsEnabled
   (
      this : in out LoggingActivity;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.IsEnabled (level, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsEnabled
   (
      this : in out LoggingActivity;
      level : Windows.Foundation.Diagnostics.LoggingLevel;
      keywords : WinRt.Int64
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.IsEnabled (level, keywords, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure LogEvent
   (
      this : in out LoggingActivity;
      eventName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.LogEvent (HStr_eventName);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   procedure LogEvent
   (
      this : in out LoggingActivity;
      eventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.LogEvent (HStr_eventName, fields.m_ILoggingFields.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   procedure LogEvent
   (
      this : in out LoggingActivity;
      eventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.LogEvent (HStr_eventName, fields.m_ILoggingFields.all, level);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   procedure LogEvent
   (
      this : in out LoggingActivity;
      eventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel;
      options : Windows.Foundation.Diagnostics.LoggingOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingActivity.all);
      Hr := m_Interface.LogEvent (HStr_eventName, fields.m_ILoggingFields.all, level, options.m_ILoggingOptions.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   function StartActivity
   (
      this : in out LoggingActivity;
      startEventName : WinRt.WString
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingActivity.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   function StartActivity
   (
      this : in out LoggingActivity;
      startEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingActivity.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, fields.m_ILoggingFields.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   function StartActivity
   (
      this : in out LoggingActivity;
      startEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingActivity.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, fields.m_ILoggingFields.all, level, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   function StartActivity
   (
      this : in out LoggingActivity;
      startEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel;
      options : Windows.Foundation.Diagnostics.LoggingOptions'Class
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingActivity_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingActivity.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, fields.m_ILoggingFields.all, level, options.m_ILoggingOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoggingChannel

   procedure Initialize (this : in out LoggingChannel) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoggingChannel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoggingChannel, ILoggingChannel_Ptr);
   begin
      if this.m_ILoggingChannel /= null then
         if this.m_ILoggingChannel.all /= null then
            RefCount := this.m_ILoggingChannel.all.Release;
            Free (this.m_ILoggingChannel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LoggingChannel

   function Constructor
   (
      name : WinRt.WString
   )
   return LoggingChannel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingChannel");
      m_Factory    : access ILoggingChannelFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingChannel;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : LoggingChannel do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingChannelFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_name, m_ComRetVal'Access);
            Retval.m_ILoggingChannel := new Windows.Foundation.Diagnostics.ILoggingChannel;
            Retval.m_ILoggingChannel.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      options : Windows.Foundation.Diagnostics.LoggingChannelOptions'Class
   )
   return LoggingChannel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingChannel");
      m_Factory    : access ILoggingChannelFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingChannel;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : LoggingChannel do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingChannelFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithOptions (HStr_name, options.m_ILoggingChannelOptions.all, m_ComRetVal'Access);
            Retval.m_ILoggingChannel := new Windows.Foundation.Diagnostics.ILoggingChannel;
            Retval.m_ILoggingChannel.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      options : Windows.Foundation.Diagnostics.LoggingChannelOptions'Class;
      id : WinRt.Guid
   )
   return LoggingChannel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingChannel");
      m_Factory    : access ILoggingChannelFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingChannel;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : LoggingChannel do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingChannelFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithOptionsAndId (HStr_name, options.m_ILoggingChannelOptions.all, id, m_ComRetVal'Access);
            Retval.m_ILoggingChannel := new Windows.Foundation.Diagnostics.ILoggingChannel;
            Retval.m_ILoggingChannel.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoggingChannel

   function get_Name
   (
      this : in out LoggingChannel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILoggingChannel.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Enabled
   (
      this : in out LoggingChannel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILoggingChannel.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Level
   (
      this : in out LoggingChannel
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.LoggingLevel;
   begin
      Hr := this.m_ILoggingChannel.all.get_Level (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure LogMessage
   (
      this : in out LoggingChannel;
      eventString : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventString : WinRt.HString := To_HString (eventString);
   begin
      Hr := this.m_ILoggingChannel.all.LogMessage (HStr_eventString);
      Hr := WindowsDeleteString (HStr_eventString);
   end;

   procedure LogMessage
   (
      this : in out LoggingChannel;
      eventString : WinRt.WString;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventString : WinRt.HString := To_HString (eventString);
   begin
      Hr := this.m_ILoggingChannel.all.LogMessage (HStr_eventString, level);
      Hr := WindowsDeleteString (HStr_eventString);
   end;

   procedure LogValuePair
   (
      this : in out LoggingChannel;
      value1 : WinRt.WString;
      value2 : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value1 : WinRt.HString := To_HString (value1);
   begin
      Hr := this.m_ILoggingChannel.all.LogValuePair (HStr_value1, value2);
      Hr := WindowsDeleteString (HStr_value1);
   end;

   procedure LogValuePair
   (
      this : in out LoggingChannel;
      value1 : WinRt.WString;
      value2 : WinRt.Int32;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value1 : WinRt.HString := To_HString (value1);
   begin
      Hr := this.m_ILoggingChannel.all.LogValuePair (HStr_value1, value2, level);
      Hr := WindowsDeleteString (HStr_value1);
   end;

   function add_LoggingEnabled
   (
      this : in out LoggingChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILoggingChannel.all.add_LoggingEnabled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LoggingEnabled
   (
      this : in out LoggingChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingChannel.all.remove_LoggingEnabled (token);
   end;

   procedure Close
   (
      this : in out LoggingChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Id
   (
      this : in out LoggingChannel
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingChannel2, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsEnabled
   (
      this : in out LoggingChannel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsEnabled
   (
      this : in out LoggingChannel;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.IsEnabled (level, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsEnabled
   (
      this : in out LoggingChannel;
      level : Windows.Foundation.Diagnostics.LoggingLevel;
      keywords : WinRt.Int64
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.IsEnabled (level, keywords, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure LogEvent
   (
      this : in out LoggingChannel;
      eventName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.LogEvent (HStr_eventName);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   procedure LogEvent
   (
      this : in out LoggingChannel;
      eventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.LogEvent (HStr_eventName, fields.m_ILoggingFields.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   procedure LogEvent
   (
      this : in out LoggingChannel;
      eventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.LogEvent (HStr_eventName, fields.m_ILoggingFields.all, level);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   procedure LogEvent
   (
      this : in out LoggingChannel;
      eventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel;
      options : Windows.Foundation.Diagnostics.LoggingOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_eventName : WinRt.HString := To_HString (eventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingChannel.all);
      Hr := m_Interface.LogEvent (HStr_eventName, fields.m_ILoggingFields.all, level, options.m_ILoggingOptions.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_eventName);
   end;

   function StartActivity
   (
      this : in out LoggingChannel;
      startEventName : WinRt.WString
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingChannel.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   function StartActivity
   (
      this : in out LoggingChannel;
      startEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingChannel.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, fields.m_ILoggingFields.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   function StartActivity
   (
      this : in out LoggingChannel;
      startEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingChannel.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, fields.m_ILoggingFields.all, level, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   function StartActivity
   (
      this : in out LoggingChannel;
      startEventName : WinRt.WString;
      fields : Windows.Foundation.Diagnostics.LoggingFields'Class;
      level : Windows.Foundation.Diagnostics.LoggingLevel;
      options : Windows.Foundation.Diagnostics.LoggingOptions'Class
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.Diagnostics.ILoggingTarget := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ILoggingActivity;
      HStr_startEventName : WinRt.HString := To_HString (startEventName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingChannel_Interface, WinRt.Windows.Foundation.Diagnostics.ILoggingTarget, WinRt.Windows.Foundation.Diagnostics.IID_ILoggingTarget'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Diagnostics.LoggingActivity do
         m_Interface := QInterface (this.m_ILoggingChannel.all);
         Hr := m_Interface.StartActivity (HStr_startEventName, fields.m_ILoggingFields.all, level, options.m_ILoggingOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILoggingActivity := new Windows.Foundation.Diagnostics.ILoggingActivity;
         Retval.m_ILoggingActivity.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_startEventName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoggingChannelOptions

   procedure Initialize (this : in out LoggingChannelOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoggingChannelOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoggingChannelOptions, ILoggingChannelOptions_Ptr);
   begin
      if this.m_ILoggingChannelOptions /= null then
         if this.m_ILoggingChannelOptions.all /= null then
            RefCount := this.m_ILoggingChannelOptions.all.Release;
            Free (this.m_ILoggingChannelOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LoggingChannelOptions

   function Constructor return LoggingChannelOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingChannelOptions");
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingChannelOptions;
   begin
      return RetVal : LoggingChannelOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILoggingChannelOptions := new Windows.Foundation.Diagnostics.ILoggingChannelOptions;
            Retval.m_ILoggingChannelOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      group : WinRt.Guid
   )
   return LoggingChannelOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingChannelOptions");
      m_Factory    : access ILoggingChannelOptionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingChannelOptions;
   begin
      return RetVal : LoggingChannelOptions do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingChannelOptionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (group, m_ComRetVal'Access);
            Retval.m_ILoggingChannelOptions := new Windows.Foundation.Diagnostics.ILoggingChannelOptions;
            Retval.m_ILoggingChannelOptions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoggingChannelOptions

   function get_Group
   (
      this : in out LoggingChannelOptions
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ILoggingChannelOptions.all.get_Group (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Group
   (
      this : in out LoggingChannelOptions;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingChannelOptions.all.put_Group (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoggingFields

   procedure Initialize (this : in out LoggingFields) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoggingFields) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoggingFields, ILoggingFields_Ptr);
   begin
      if this.m_ILoggingFields /= null then
         if this.m_ILoggingFields.all /= null then
            RefCount := this.m_ILoggingFields.all.Release;
            Free (this.m_ILoggingFields);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LoggingFields

   function Constructor return LoggingFields is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingFields");
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingFields;
   begin
      return RetVal : LoggingFields do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILoggingFields := new Windows.Foundation.Diagnostics.ILoggingFields;
            Retval.m_ILoggingFields.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoggingFields

   procedure Clear
   (
      this : in out LoggingFields
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingFields.all.Clear;
   end;

   procedure BeginStruct
   (
      this : in out LoggingFields;
      name : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.BeginStruct (HStr_name);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure BeginStruct
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.BeginStruct (HStr_name, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure EndStruct
   (
      this : in out LoggingFields
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingFields.all.EndStruct;
   end;

   procedure AddEmpty
   (
      this : in out LoggingFields;
      name : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddEmpty (HStr_name);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddEmpty
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddEmpty (HStr_name, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddEmpty
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddEmpty (HStr_name, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt8
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt8 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt8
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Byte;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt8 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt8
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Byte;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt8 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt8Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt8Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt8Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Byte_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt8Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt8Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Byte_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt8Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt16 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int16;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt16 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int16;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt16 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int16_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int16_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int16_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int16_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int16_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int16_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt16 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt16;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt16 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt16;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt16 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt16_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt16_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt16_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt32
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt32 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt32
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int32;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt32 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt32
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int32;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt32 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt32Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int32_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt32Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt32Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int32_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt32Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt32Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int32_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int32_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt32Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt32
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt32 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt32
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt32;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt32 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt32
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt32;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt32 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt32Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt32_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt32_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt32Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt32Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt32_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt32_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt32Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt32Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt32_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt32_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt32Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt64
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt64 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt64
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int64;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt64 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt64
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int64;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddInt64 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt64Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int64_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt64Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt64Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int64_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt64Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddInt64Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Int64_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Int64_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddInt64Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt64
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt64 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt64
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt64;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt64 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt64
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt64;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt64 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt64Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt64_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt64_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt64Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt64Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt64_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt64_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt64Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddUInt64Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.UInt64_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.UInt64_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddUInt64Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSingle
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddSingle (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSingle
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Single;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddSingle (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSingle
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Single;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddSingle (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSingleArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Single_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddSingleArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSingleArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Single_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddSingleArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSingleArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Single_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Single_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddSingleArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDouble
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddDouble (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDouble
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Double;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddDouble (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDouble
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Double;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddDouble (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDoubleArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Double_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Double_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddDoubleArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDoubleArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Double_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Double_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddDoubleArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDoubleArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Double_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Double_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddDoubleArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddChar16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Wide_Char
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddChar16 (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddChar16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Wide_Char;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddChar16 (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddChar16
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Wide_Char;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddChar16 (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddChar16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Wide_Char_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Wide_Char_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddChar16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddChar16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Wide_Char_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Wide_Char_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddChar16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddChar16Array
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Wide_Char_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Wide_Char_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddChar16Array (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddBoolean
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddBoolean (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddBoolean
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Boolean;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddBoolean (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddBoolean
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Boolean;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddBoolean (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddBooleanArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Boolean_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Boolean_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddBooleanArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddBooleanArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Boolean_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Boolean_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddBooleanArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddBooleanArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Boolean_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Boolean_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddBooleanArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddString
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILoggingFields.all.AddString (HStr_name, HStr_value);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure AddString
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.WString;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILoggingFields.all.AddString (HStr_name, HStr_value, format);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure AddString
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.WString;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILoggingFields.all.AddString (HStr_name, HStr_value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure AddStringArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.HString_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddStringArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddStringArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.HString_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddStringArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddStringArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.HString_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.HString_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddStringArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddGuid
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddGuid (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddGuid
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Guid;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddGuid (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddGuid
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Guid;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddGuid (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddGuidArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Guid_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Guid_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddGuidArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddGuidArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Guid_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Guid_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddGuidArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddGuidArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : WinRt.Guid_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Guid_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddGuidArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDateTime
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddDateTime (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDateTime
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.DateTime;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddDateTime (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDateTime
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.DateTime;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddDateTime (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDateTimeArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.DateTime_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.DateTime_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddDateTimeArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDateTimeArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.DateTime_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.DateTime_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddDateTimeArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDateTimeArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.DateTime_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.DateTime_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddDateTimeArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddTimeSpan
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddTimeSpan (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddTimeSpan
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.TimeSpan;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddTimeSpan (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddTimeSpan
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.TimeSpan;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddTimeSpan (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddTimeSpanArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.TimeSpan_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.TimeSpan_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddTimeSpanArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddTimeSpanArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.TimeSpan_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.TimeSpan_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddTimeSpanArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddTimeSpanArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.TimeSpan_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.TimeSpan_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddTimeSpanArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddPoint
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddPoint (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddPoint
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Point;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddPoint (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddPoint
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Point;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddPoint (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddPointArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddPointArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddPointArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Point_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddPointArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddPointArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Point_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddPointArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSize
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddSize (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSize
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Size;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddSize (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSize
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Size;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddSize (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSizeArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Size_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Size_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddSizeArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSizeArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Size_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Size_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddSizeArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddSizeArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Size_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Size_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddSizeArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddRect
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddRect (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddRect
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Rect;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddRect (HStr_name, value, format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddRect
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Rect;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILoggingFields.all.AddRect (HStr_name, value, format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddRectArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Rect_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Rect_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddRectArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddRectArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Rect_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Rect_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddRectArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddRectArray
   (
      this : in out LoggingFields;
      name : WinRt.WString;
      value : Windows.Foundation.Rect_Array;
      format : Windows.Foundation.Diagnostics.LoggingFieldFormat;
      tags : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Rect_Ptr);
   begin
      Hr := this.m_ILoggingFields.all.AddRectArray (HStr_name, WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address), format, tags);
      Hr := WindowsDeleteString (HStr_name);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoggingOptions

   procedure Initialize (this : in out LoggingOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoggingOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoggingOptions, ILoggingOptions_Ptr);
   begin
      if this.m_ILoggingOptions /= null then
         if this.m_ILoggingOptions.all /= null then
            RefCount := this.m_ILoggingOptions.all.Release;
            Free (this.m_ILoggingOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LoggingOptions

   function Constructor
   (
      keywords : WinRt.Int64
   )
   return LoggingOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingOptions");
      m_Factory    : access ILoggingOptionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingOptions;
   begin
      return RetVal : LoggingOptions do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingOptionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithKeywords (keywords, m_ComRetVal'Access);
            Retval.m_ILoggingOptions := new Windows.Foundation.Diagnostics.ILoggingOptions;
            Retval.m_ILoggingOptions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return LoggingOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingOptions");
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingOptions;
   begin
      return RetVal : LoggingOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILoggingOptions := new Windows.Foundation.Diagnostics.ILoggingOptions;
            Retval.m_ILoggingOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoggingOptions

   function get_Keywords
   (
      this : in out LoggingOptions
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_ILoggingOptions.all.get_Keywords (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Keywords
   (
      this : in out LoggingOptions;
      value : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingOptions.all.put_Keywords (value);
   end;

   function get_Tags
   (
      this : in out LoggingOptions
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILoggingOptions.all.get_Tags (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Tags
   (
      this : in out LoggingOptions;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingOptions.all.put_Tags (value);
   end;

   function get_Task
   (
      this : in out LoggingOptions
   )
   return WinRt.Int16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int16;
   begin
      Hr := this.m_ILoggingOptions.all.get_Task (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Task
   (
      this : in out LoggingOptions;
      value : WinRt.Int16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingOptions.all.put_Task (value);
   end;

   function get_Opcode
   (
      this : in out LoggingOptions
   )
   return WinRt.Windows.Foundation.Diagnostics.LoggingOpcode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.LoggingOpcode;
   begin
      Hr := this.m_ILoggingOptions.all.get_Opcode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Opcode
   (
      this : in out LoggingOptions;
      value : Windows.Foundation.Diagnostics.LoggingOpcode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingOptions.all.put_Opcode (value);
   end;

   function get_ActivityId
   (
      this : in out LoggingOptions
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ILoggingOptions.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ActivityId
   (
      this : in out LoggingOptions;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingOptions.all.put_ActivityId (value);
   end;

   function get_RelatedActivityId
   (
      this : in out LoggingOptions
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ILoggingOptions.all.get_RelatedActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RelatedActivityId
   (
      this : in out LoggingOptions;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingOptions.all.put_RelatedActivityId (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoggingSession

   procedure Initialize (this : in out LoggingSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoggingSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoggingSession, ILoggingSession_Ptr);
   begin
      if this.m_ILoggingSession /= null then
         if this.m_ILoggingSession.all /= null then
            RefCount := this.m_ILoggingSession.all.Release;
            Free (this.m_ILoggingSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LoggingSession

   function Constructor
   (
      name : WinRt.WString
   )
   return LoggingSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.LoggingSession");
      m_Factory    : access ILoggingSessionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.ILoggingSession;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : LoggingSession do
         Hr := RoGetActivationFactory (m_hString, IID_ILoggingSessionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_name, m_ComRetVal'Access);
            Retval.m_ILoggingSession := new Windows.Foundation.Diagnostics.ILoggingSession;
            Retval.m_ILoggingSession.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoggingSession

   function get_Name
   (
      this : in out LoggingSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILoggingSession.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function SaveToFileAsync
   (
      this : in out LoggingSession;
      folder : Windows.Storage.IStorageFolder;
      fileName : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_fileName : WinRt.HString := To_HString (fileName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_ILoggingSession.all.SaveToFileAsync (folder, HStr_fileName, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_fileName);
      end return;
   end;

   procedure AddLoggingChannel
   (
      this : in out LoggingSession;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingSession.all.AddLoggingChannel (loggingChannel_p);
   end;

   procedure AddLoggingChannel
   (
      this : in out LoggingSession;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel;
      maxLevel : Windows.Foundation.Diagnostics.LoggingLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingSession.all.AddLoggingChannel (loggingChannel_p, maxLevel);
   end;

   procedure RemoveLoggingChannel
   (
      this : in out LoggingSession;
      loggingChannel_p : Windows.Foundation.Diagnostics.ILoggingChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoggingSession.all.RemoveLoggingChannel (loggingChannel_p);
   end;

   procedure Close
   (
      this : in out LoggingSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Foundation.Diagnostics.ILoggingSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoggingSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RuntimeBrokerErrorSettings

   procedure Initialize (this : in out RuntimeBrokerErrorSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out RuntimeBrokerErrorSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IErrorReportingSettings, IErrorReportingSettings_Ptr);
   begin
      if this.m_IErrorReportingSettings /= null then
         if this.m_IErrorReportingSettings.all /= null then
            RefCount := this.m_IErrorReportingSettings.all.Release;
            Free (this.m_IErrorReportingSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RuntimeBrokerErrorSettings

   function Constructor return RuntimeBrokerErrorSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings");
      m_ComRetVal  : aliased Windows.Foundation.Diagnostics.IErrorReportingSettings;
   begin
      return RetVal : RuntimeBrokerErrorSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IErrorReportingSettings := new Windows.Foundation.Diagnostics.IErrorReportingSettings;
            Retval.m_IErrorReportingSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RuntimeBrokerErrorSettings

   procedure SetErrorOptions
   (
      this : in out RuntimeBrokerErrorSettings;
      value : Windows.Foundation.Diagnostics.ErrorOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IErrorReportingSettings.all.SetErrorOptions (value);
   end;

   function GetErrorOptions
   (
      this : in out RuntimeBrokerErrorSettings
   )
   return WinRt.Windows.Foundation.Diagnostics.ErrorOptions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.ErrorOptions;
   begin
      Hr := this.m_IErrorReportingSettings.all.GetErrorOptions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TracingStatusChangedEventArgs

   procedure Initialize (this : in out TracingStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TracingStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITracingStatusChangedEventArgs, ITracingStatusChangedEventArgs_Ptr);
   begin
      if this.m_ITracingStatusChangedEventArgs /= null then
         if this.m_ITracingStatusChangedEventArgs.all /= null then
            RefCount := this.m_ITracingStatusChangedEventArgs.all.Release;
            Free (this.m_ITracingStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TracingStatusChangedEventArgs

   function get_Enabled
   (
      this : in out TracingStatusChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITracingStatusChangedEventArgs.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TraceLevel
   (
      this : in out TracingStatusChangedEventArgs
   )
   return WinRt.Windows.Foundation.Diagnostics.CausalityTraceLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Diagnostics.CausalityTraceLevel;
   begin
      Hr := this.m_ITracingStatusChangedEventArgs.all.get_TraceLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

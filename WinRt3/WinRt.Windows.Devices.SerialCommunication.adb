--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.SerialCommunication is

   package IAsyncOperation_SerialDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SerialCommunication.ISerialDevice);
   package AsyncOperationCompletedHandler_SerialDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SerialCommunication.ISerialDevice);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ErrorReceivedEventArgs

   procedure Initialize (this : in out ErrorReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ErrorReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IErrorReceivedEventArgs, IErrorReceivedEventArgs_Ptr);
   begin
      if this.m_IErrorReceivedEventArgs /= null then
         if this.m_IErrorReceivedEventArgs.all /= null then
            RefCount := this.m_IErrorReceivedEventArgs.all.Release;
            Free (this.m_IErrorReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ErrorReceivedEventArgs

   function get_Error
   (
      this : in out ErrorReceivedEventArgs
   )
   return WinRt.Windows.Devices.SerialCommunication.SerialError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SerialCommunication.SerialError;
   begin
      Hr := this.m_IErrorReceivedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PinChangedEventArgs

   procedure Initialize (this : in out PinChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PinChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPinChangedEventArgs, IPinChangedEventArgs_Ptr);
   begin
      if this.m_IPinChangedEventArgs /= null then
         if this.m_IPinChangedEventArgs.all /= null then
            RefCount := this.m_IPinChangedEventArgs.all.Release;
            Free (this.m_IPinChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PinChangedEventArgs

   function get_PinChange
   (
      this : in out PinChangedEventArgs
   )
   return WinRt.Windows.Devices.SerialCommunication.SerialPinChange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SerialCommunication.SerialPinChange;
   begin
      Hr := this.m_IPinChangedEventArgs.all.get_PinChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SerialDevice

   procedure Initialize (this : in out SerialDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out SerialDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISerialDevice, ISerialDevice_Ptr);
   begin
      if this.m_ISerialDevice /= null then
         if this.m_ISerialDevice.all /= null then
            RefCount := this.m_ISerialDevice.all.Release;
            Free (this.m_ISerialDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SerialDevice

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SerialCommunication.SerialDevice");
      m_Factory        : access WinRt.Windows.Devices.SerialCommunication.ISerialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISerialDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector
   (
      portName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SerialCommunication.SerialDevice");
      m_Factory        : access WinRt.Windows.Devices.SerialCommunication.ISerialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_portName : WinRt.HString := To_HString (portName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISerialDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (HStr_portName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_portName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromUsbVidPid
   (
      vendorId : WinRt.UInt16;
      productId : WinRt.UInt16
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SerialCommunication.SerialDevice");
      m_Factory        : access WinRt.Windows.Devices.SerialCommunication.ISerialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISerialDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromUsbVidPid (vendorId, productId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.SerialCommunication.SerialDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SerialCommunication.SerialDevice");
      m_Factory        : access WinRt.Windows.Devices.SerialCommunication.ISerialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SerialDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SerialDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SerialCommunication.ISerialDevice;
      m_IID            : aliased WinRt.IID := (1156523757, 49663, 21610, (164, 107, 106, 55, 222, 145, 135, 251 )); -- Windows.Devices.SerialCommunication.SerialDevice;
      m_HandlerIID     : aliased WinRt.IID := (2225294131, 1788, 24163, (142, 226, 234, 180, 255, 105, 172, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_SerialDevice.Kind := new AsyncOperationCompletedHandler_SerialDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SerialDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SerialDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SerialDevice.Kind_Delegate, AsyncOperationCompletedHandler_SerialDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SerialCommunication.SerialDevice do
         Hr := RoGetActivationFactory (m_hString, IID_ISerialDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISerialDevice := new Windows.Devices.SerialCommunication.ISerialDevice;
                     Retval.m_ISerialDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SerialDevice

   function get_BaudRate
   (
      this : in out SerialDevice
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISerialDevice.all.get_BaudRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BaudRate
   (
      this : in out SerialDevice;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_BaudRate (value);
   end;

   function get_BreakSignalState
   (
      this : in out SerialDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISerialDevice.all.get_BreakSignalState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BreakSignalState
   (
      this : in out SerialDevice;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_BreakSignalState (value);
   end;

   function get_BytesReceived
   (
      this : in out SerialDevice
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISerialDevice.all.get_BytesReceived (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CarrierDetectState
   (
      this : in out SerialDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISerialDevice.all.get_CarrierDetectState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ClearToSendState
   (
      this : in out SerialDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISerialDevice.all.get_ClearToSendState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DataBits
   (
      this : in out SerialDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISerialDevice.all.get_DataBits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataBits
   (
      this : in out SerialDevice;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_DataBits (value);
   end;

   function get_DataSetReadyState
   (
      this : in out SerialDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISerialDevice.all.get_DataSetReadyState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Handshake
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Devices.SerialCommunication.SerialHandshake is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SerialCommunication.SerialHandshake;
   begin
      Hr := this.m_ISerialDevice.all.get_Handshake (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handshake
   (
      this : in out SerialDevice;
      value : Windows.Devices.SerialCommunication.SerialHandshake
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_Handshake (value);
   end;

   function get_IsDataTerminalReadyEnabled
   (
      this : in out SerialDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISerialDevice.all.get_IsDataTerminalReadyEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDataTerminalReadyEnabled
   (
      this : in out SerialDevice;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_IsDataTerminalReadyEnabled (value);
   end;

   function get_IsRequestToSendEnabled
   (
      this : in out SerialDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISerialDevice.all.get_IsRequestToSendEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsRequestToSendEnabled
   (
      this : in out SerialDevice;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_IsRequestToSendEnabled (value);
   end;

   function get_Parity
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Devices.SerialCommunication.SerialParity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SerialCommunication.SerialParity;
   begin
      Hr := this.m_ISerialDevice.all.get_Parity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Parity
   (
      this : in out SerialDevice;
      value : Windows.Devices.SerialCommunication.SerialParity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_Parity (value);
   end;

   function get_PortName
   (
      this : in out SerialDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISerialDevice.all.get_PortName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ReadTimeout
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISerialDevice.all.get_ReadTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReadTimeout
   (
      this : in out SerialDevice;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_ReadTimeout (value);
   end;

   function get_StopBits
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Devices.SerialCommunication.SerialStopBitCount is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SerialCommunication.SerialStopBitCount;
   begin
      Hr := this.m_ISerialDevice.all.get_StopBits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StopBits
   (
      this : in out SerialDevice;
      value : Windows.Devices.SerialCommunication.SerialStopBitCount
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_StopBits (value);
   end;

   function get_UsbVendorId
   (
      this : in out SerialDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISerialDevice.all.get_UsbVendorId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsbProductId
   (
      this : in out SerialDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_ISerialDevice.all.get_UsbProductId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WriteTimeout
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISerialDevice.all.get_WriteTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WriteTimeout
   (
      this : in out SerialDevice;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.put_WriteTimeout (value);
   end;

   function get_InputStream
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_ISerialDevice.all.get_InputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OutputStream
   (
      this : in out SerialDevice
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_ISerialDevice.all.get_OutputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ErrorReceived
   (
      this : in out SerialDevice;
      reportHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISerialDevice.all.add_ErrorReceived (reportHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ErrorReceived
   (
      this : in out SerialDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.remove_ErrorReceived (token);
   end;

   function add_PinChanged
   (
      this : in out SerialDevice;
      reportHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISerialDevice.all.add_PinChanged (reportHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PinChanged
   (
      this : in out SerialDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISerialDevice.all.remove_PinChanged (token);
   end;

   procedure Close
   (
      this : in out SerialDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SerialCommunication.ISerialDevice_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISerialDevice.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

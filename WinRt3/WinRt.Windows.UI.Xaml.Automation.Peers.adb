--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.UI.Xaml.Automation.Provider;
with WinRt.Windows.UI.Xaml.Controls;
with WinRt.Windows.UI.Xaml.Controls.Primitives;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Automation.Peers is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AutomationPeer

   procedure Initialize (this : in out AutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAutomationPeer, IAutomationPeer_Ptr);
   begin
      if this.m_IAutomationPeer /= null then
         if this.m_IAutomationPeer.all /= null then
            RefCount := this.m_IAutomationPeer.all.Release;
            Free (this.m_IAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AutomationPeer

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return AutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeer");
      m_Factory    : access IAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : AutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
            Retval.m_IAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AutomationPeer

   function ListenerExists
   (
      eventId : Windows.UI.Xaml.Automation.Peers.AutomationEvents
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeer");
      m_Factory        : access WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ListenerExists (eventId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GenerateRawElementProviderRuntimeId
   return WinRt.Windows.UI.Xaml.Automation.Peers.RawElementProviderRuntimeId is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeer");
      m_Factory        : access WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.RawElementProviderRuntimeId;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GenerateRawElementProviderRuntimeId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AutomationPeer

   function get_EventsSource
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := this.m_IAutomationPeer.all.get_EventsSource (m_ComRetVal'Access);
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   procedure put_EventsSource
   (
      this : in out AutomationPeer;
      value : Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeer.all.put_EventsSource (value.m_IAutomationPeer.all);
   end;

   function GetPattern
   (
      this : in out AutomationPeer;
      patternInterface : Windows.UI.Xaml.Automation.Peers.PatternInterface
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IAutomationPeer.all.GetPattern (patternInterface, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure RaiseAutomationEvent
   (
      this : in out AutomationPeer;
      eventId : Windows.UI.Xaml.Automation.Peers.AutomationEvents
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeer.all.RaiseAutomationEvent (eventId);
   end;

   procedure RaisePropertyChangedEvent
   (
      this : in out AutomationPeer;
      automationProperty : Windows.UI.Xaml.Automation.AutomationProperty'Class;
      oldValue : WinRt.IInspectable;
      newValue : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeer.all.RaisePropertyChangedEvent (automationProperty.m_IAutomationProperty.all, oldValue, newValue);
   end;

   function GetAcceleratorKey
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetAcceleratorKey (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetAccessKey
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetAccessKey (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetAutomationControlType
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationControlType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationControlType;
   begin
      Hr := this.m_IAutomationPeer.all.GetAutomationControlType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetAutomationId
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetAutomationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetBoundingRectangle
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IAutomationPeer.all.GetBoundingRectangle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetChildren
   (
      this : in out AutomationPeer
   )
   return IVector_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAutomationPeer.Kind;
   begin
      Hr := this.m_IAutomationPeer.all.GetChildren (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetClassName
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetClassName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetClickablePoint
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IAutomationPeer.all.GetClickablePoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetHelpText
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetHelpText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetItemStatus
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetItemStatus (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetItemType
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetItemType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetLabeledBy
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := this.m_IAutomationPeer.all.GetLabeledBy (m_ComRetVal'Access);
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function GetLocalizedControlType
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetLocalizedControlType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetName
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAutomationPeer.all.GetName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetOrientation
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationOrientation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationOrientation;
   begin
      Hr := this.m_IAutomationPeer.all.GetOrientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function HasKeyboardFocus
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.HasKeyboardFocus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsContentElement
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsContentElement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsControlElement
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsControlElement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsEnabled
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsKeyboardFocusable
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsKeyboardFocusable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsOffscreen
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsOffscreen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsPassword
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsPassword (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsRequiredForForm
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAutomationPeer.all.IsRequiredForForm (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetFocus
   (
      this : in out AutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeer.all.SetFocus;
   end;

   function GetParent
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := this.m_IAutomationPeer.all.GetParent (m_ComRetVal'Access);
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   procedure InvalidatePeer
   (
      this : in out AutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeer.all.InvalidatePeer;
   end;

   function GetPeerFromPoint
   (
      this : in out AutomationPeer;
      point : Windows.Foundation.Point
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := this.m_IAutomationPeer.all.GetPeerFromPoint (point, m_ComRetVal'Access);
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function GetLiveSetting
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting;
   begin
      Hr := this.m_IAutomationPeer.all.GetLiveSetting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Navigate
   (
      this : in out AutomationPeer;
      direction : Windows.UI.Xaml.Automation.Peers.AutomationNavigationDirection
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.Navigate (direction, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetElementFromPoint
   (
      this : in out AutomationPeer;
      pointInWindowCoordinates : Windows.Foundation.Point
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetElementFromPoint (pointInWindowCoordinates, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetFocusedElement
   (
      this : in out AutomationPeer
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetFocusedElement (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ShowContextMenu
   (
      this : in out AutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.ShowContextMenu;
      m_RefCount := m_Interface.Release;
   end;

   function GetControlledPeers
   (
      this : in out AutomationPeer
   )
   return IVectorView_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAutomationPeer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetControlledPeers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetAnnotations
   (
      this : in out AutomationPeer
   )
   return IVector_IAutomationPeerAnnotation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAutomationPeerAnnotation.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetAnnotations (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IAutomationPeerAnnotation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure SetParent
   (
      this : in out AutomationPeer;
      peer : Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.SetParent (peer.m_IAutomationPeer.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RaiseTextEditTextChangedEvent
   (
      this : in out AutomationPeer;
      automationTextEditChangeType : Windows.UI.Xaml.Automation.AutomationTextEditChangeType;
      changedData : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.RaiseTextEditTextChangedEvent (automationTextEditChangeType, changedData);
      m_RefCount := m_Interface.Release;
   end;

   function GetPositionInSet
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetPositionInSet (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetSizeOfSet
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetSizeOfSet (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetLevel
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure RaiseStructureChangedEvent
   (
      this : in out AutomationPeer;
      structureChangeType : Windows.UI.Xaml.Automation.Peers.AutomationStructureChangeType;
      child : Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.RaiseStructureChangedEvent (structureChangeType, child.m_IAutomationPeer.all);
      m_RefCount := m_Interface.Release;
   end;

   function GetLandmarkType
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer4, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLandmarkType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetLocalizedLandmarkType
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer4, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLocalizedLandmarkType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function IsPeripheral
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsPeripheral (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsDataValidForForm
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsDataValidForForm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetFullDescription
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetFullDescription (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetCulture
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer6, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetCulture (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure RaiseNotificationEvent
   (
      this : in out AutomationPeer;
      notificationKind : Windows.UI.Xaml.Automation.Peers.AutomationNotificationKind;
      notificationProcessing : Windows.UI.Xaml.Automation.Peers.AutomationNotificationProcessing;
      displayString : WinRt.WString;
      activityId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_displayString : WinRt.HString := To_HString (displayString);
      HStr_activityId : WinRt.HString := To_HString (activityId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer7, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer7'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.RaiseNotificationEvent (notificationKind, notificationProcessing, HStr_displayString, HStr_activityId);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_displayString);
      Hr := WindowsDeleteString (HStr_activityId);
   end;

   function GetHeadingLevel
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer8, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetHeadingLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsDialog
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer9, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeer9'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsDialog (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function PeerFromProvider
   (
      this : in out AutomationPeer;
      provider : Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerProtected'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         m_Interface := QInterface (this.m_IAutomationPeer.all);
         Hr := m_Interface.PeerFromProvider (provider.m_IIRawElementProviderSimple.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function ProviderFromPeer
   (
      this : in out AutomationPeer;
      peer : Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerProtected'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_IAutomationPeer.all);
         Hr := m_Interface.ProviderFromPeer (peer.m_IAutomationPeer.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   function GetPatternCore
   (
      this : in out AutomationPeer;
      patternInterface : Windows.UI.Xaml.Automation.Peers.PatternInterface
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetPatternCore (patternInterface, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetAcceleratorKeyCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetAcceleratorKeyCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetAccessKeyCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetAccessKeyCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetAutomationControlTypeCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationControlType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationControlType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetAutomationControlTypeCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetAutomationIdCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetAutomationIdCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetBoundingRectangleCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetBoundingRectangleCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetChildrenCore
   (
      this : in out AutomationPeer
   )
   return IVector_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAutomationPeer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetChildrenCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetClassNameCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetClassNameCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetClickablePointCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetClickablePointCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetHelpTextCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetHelpTextCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetItemStatusCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetItemStatusCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetItemTypeCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetItemTypeCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetLabeledByCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         m_Interface := QInterface (this.m_IAutomationPeer.all);
         Hr := m_Interface.GetLabeledByCore (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function GetLocalizedControlTypeCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLocalizedControlTypeCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNameCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetNameCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetOrientationCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationOrientation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationOrientation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetOrientationCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKeyboardFocusCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.HasKeyboardFocusCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsContentElementCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsContentElementCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsControlElementCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsControlElementCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsEnabledCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsEnabledCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsKeyboardFocusableCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsKeyboardFocusableCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsOffscreenCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsOffscreenCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsPasswordCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsPasswordCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsRequiredForFormCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsRequiredForFormCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetFocusCore
   (
      this : in out AutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.SetFocusCore;
      m_RefCount := m_Interface.Release;
   end;

   function GetPeerFromPointCore
   (
      this : in out AutomationPeer;
      point : Windows.Foundation.Point
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         m_Interface := QInterface (this.m_IAutomationPeer.all);
         Hr := m_Interface.GetPeerFromPointCore (point, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function GetLiveSettingCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationLiveSetting;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLiveSettingCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ShowContextMenuCore
   (
      this : in out AutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.ShowContextMenuCore;
      m_RefCount := m_Interface.Release;
   end;

   function GetControlledPeersCore
   (
      this : in out AutomationPeer
   )
   return IVectorView_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAutomationPeer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetControlledPeersCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function NavigateCore
   (
      this : in out AutomationPeer;
      direction : Windows.UI.Xaml.Automation.Peers.AutomationNavigationDirection
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.NavigateCore (direction, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetElementFromPointCore
   (
      this : in out AutomationPeer;
      pointInWindowCoordinates : Windows.Foundation.Point
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetElementFromPointCore (pointInWindowCoordinates, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetFocusedElementCore
   (
      this : in out AutomationPeer
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetFocusedElementCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetAnnotationsCore
   (
      this : in out AutomationPeer
   )
   return IVector_IAutomationPeerAnnotation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAutomationPeerAnnotation.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetAnnotationsCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IAutomationPeerAnnotation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetPositionInSetCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetPositionInSetCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetSizeOfSetCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetSizeOfSetCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetLevelCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLevelCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetLandmarkTypeCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationLandmarkType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLandmarkTypeCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetLocalizedLandmarkTypeCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetLocalizedLandmarkTypeCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function IsPeripheralCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsPeripheralCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsDataValidForFormCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsDataValidForFormCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetFullDescriptionCore
   (
      this : in out AutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetFullDescriptionCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDescribedByCore
   (
      this : in out AutomationPeer
   )
   return IIterable_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_IAutomationPeer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetDescribedByCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IIterable_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetFlowsToCore
   (
      this : in out AutomationPeer
   )
   return IIterable_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_IAutomationPeer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetFlowsToCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IIterable_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetFlowsFromCore
   (
      this : in out AutomationPeer
   )
   return IIterable_IAutomationPeer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_IAutomationPeer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetFlowsFromCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IIterable_IAutomationPeer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetCultureCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetCultureCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetHeadingLevelCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.AutomationHeadingLevel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.GetHeadingLevelCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsDialogCore
   (
      this : in out AutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IAutomationPeerOverrides9'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutomationPeer.all);
      Hr := m_Interface.IsDialogCore (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameworkElementAutomationPeer

   procedure Initialize (this : in out FrameworkElementAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameworkElementAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameworkElementAutomationPeer, IFrameworkElementAutomationPeer_Ptr);
   begin
      if this.m_IFrameworkElementAutomationPeer /= null then
         if this.m_IFrameworkElementAutomationPeer.all /= null then
            RefCount := this.m_IFrameworkElementAutomationPeer.all.Release;
            Free (this.m_IFrameworkElementAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FrameworkElementAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.FrameworkElement'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FrameworkElementAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer");
      m_Factory    : access IFrameworkElementAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IFrameworkElementAutomationPeer;
   begin
      return RetVal : FrameworkElementAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFrameworkElementAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IFrameworkElement.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFrameworkElementAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IFrameworkElementAutomationPeer;
            Retval.m_IFrameworkElementAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FrameworkElementAutomationPeer

   function FromElement
   (
      element : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer");
      m_Factory        : access WinRt.Windows.UI.Xaml.Automation.Peers.IFrameworkElementAutomationPeerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFrameworkElementAutomationPeerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromElement (element.m_IUIElement.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
            Retval.m_IAutomationPeer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreatePeerForElement
   (
      element : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer");
      m_Factory        : access WinRt.Windows.UI.Xaml.Automation.Peers.IFrameworkElementAutomationPeerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFrameworkElementAutomationPeerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePeerForElement (element.m_IUIElement.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
            Retval.m_IAutomationPeer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameworkElementAutomationPeer

   function get_Owner
   (
      this : in out FrameworkElementAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.UIElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := this.m_IFrameworkElementAutomationPeer.all.get_Owner (m_ComRetVal'Access);
         Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
         Retval.m_IUIElement.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBarAutomationPeer

   procedure Initialize (this : in out AppBarAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBarAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBarAutomationPeer, IAppBarAutomationPeer_Ptr);
   begin
      if this.m_IAppBarAutomationPeer /= null then
         if this.m_IAppBarAutomationPeer.all /= null then
            RefCount := this.m_IAppBarAutomationPeer.all.Release;
            Free (this.m_IAppBarAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppBarAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.AppBar'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return AppBarAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AppBarAutomationPeer");
      m_Factory    : access IAppBarAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer;
   begin
      return RetVal : AppBarAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBarAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IAppBar.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IAppBarAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer;
            Retval.m_IAppBarAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBarAutomationPeer

   function get_ToggleState
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ToggleState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ToggleState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_ToggleState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Toggle
   (
      this : in out AppBarAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.Toggle;
      m_RefCount := m_Interface.Release;
   end;

   function get_ExpandCollapseState
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ExpandCollapseState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ExpandCollapseState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_ExpandCollapseState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Collapse
   (
      this : in out AppBarAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.Collapse;
      m_RefCount := m_Interface.Release;
   end;

   procedure Expand
   (
      this : in out AppBarAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.Expand;
      m_RefCount := m_Interface.Release;
   end;

   function get_IsModal
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_IsModal (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsTopmost
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_IsTopmost (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Maximizable
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_Maximizable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Minimizable
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_Minimizable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_InteractionState
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.WindowInteractionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.WindowInteractionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_InteractionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VisualState
   (
      this : in out AppBarAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.WindowVisualState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.WindowVisualState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.get_VisualState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out AppBarAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure SetVisualState
   (
      this : in out AppBarAutomationPeer;
      state : Windows.UI.Xaml.Automation.WindowVisualState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.SetVisualState (state);
      m_RefCount := m_Interface.Release;
   end;

   function WaitForInputIdle
   (
      this : in out AppBarAutomationPeer;
      milliseconds : WinRt.Int32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarAutomationPeer.all);
      Hr := m_Interface.WaitForInputIdle (milliseconds, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ButtonBaseAutomationPeer

   procedure Initialize (this : in out ButtonBaseAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ButtonBaseAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IButtonBaseAutomationPeer, IButtonBaseAutomationPeer_Ptr);
   begin
      if this.m_IButtonBaseAutomationPeer /= null then
         if this.m_IButtonBaseAutomationPeer.all /= null then
            RefCount := this.m_IButtonBaseAutomationPeer.all.Release;
            Free (this.m_IButtonBaseAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ButtonBaseAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.ButtonBase'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ButtonBaseAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ButtonBaseAutomationPeer");
      m_Factory    : access IButtonBaseAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IButtonBaseAutomationPeer;
   begin
      return RetVal : ButtonBaseAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IButtonBase.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IButtonBaseAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IButtonBaseAutomationPeer;
            Retval.m_IButtonBaseAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ButtonBaseAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ButtonAutomationPeer

   procedure Initialize (this : in out ButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IButtonAutomationPeer, IButtonAutomationPeer_Ptr);
   begin
      if this.m_IButtonAutomationPeer /= null then
         if this.m_IButtonAutomationPeer.all /= null then
            RefCount := this.m_IButtonAutomationPeer.all.Release;
            Free (this.m_IButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Button'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ButtonAutomationPeer");
      m_Factory    : access IButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IButtonAutomationPeer;
   begin
      return RetVal : ButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IButtonAutomationPeer;
            Retval.m_IButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ButtonAutomationPeer

   procedure Invoke
   (
      this : in out ButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IButtonAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBarButtonAutomationPeer

   procedure Initialize (this : in out AppBarButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBarButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBarButtonAutomationPeer, IAppBarButtonAutomationPeer_Ptr);
   begin
      if this.m_IAppBarButtonAutomationPeer /= null then
         if this.m_IAppBarButtonAutomationPeer.all /= null then
            RefCount := this.m_IAppBarButtonAutomationPeer.all.Release;
            Free (this.m_IAppBarButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppBarButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.AppBarButton'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return AppBarButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AppBarButtonAutomationPeer");
      m_Factory    : access IAppBarButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAppBarButtonAutomationPeer;
   begin
      return RetVal : AppBarButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBarButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IAppBarButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IAppBarButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAppBarButtonAutomationPeer;
            Retval.m_IAppBarButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBarButtonAutomationPeer

   function get_ExpandCollapseState
   (
      this : in out AppBarButtonAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ExpandCollapseState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ExpandCollapseState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarButtonAutomationPeer.all);
      Hr := m_Interface.get_ExpandCollapseState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Collapse
   (
      this : in out AppBarButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarButtonAutomationPeer.all);
      Hr := m_Interface.Collapse;
      m_RefCount := m_Interface.Release;
   end;

   procedure Expand
   (
      this : in out AppBarButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAppBarButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarButtonAutomationPeer.all);
      Hr := m_Interface.Expand;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToggleButtonAutomationPeer

   procedure Initialize (this : in out ToggleButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToggleButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToggleButtonAutomationPeer, IToggleButtonAutomationPeer_Ptr);
   begin
      if this.m_IToggleButtonAutomationPeer /= null then
         if this.m_IToggleButtonAutomationPeer.all /= null then
            RefCount := this.m_IToggleButtonAutomationPeer.all.Release;
            Free (this.m_IToggleButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToggleButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.ToggleButton'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ToggleButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ToggleButtonAutomationPeer");
      m_Factory    : access IToggleButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IToggleButtonAutomationPeer;
   begin
      return RetVal : ToggleButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IToggleButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IToggleButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IToggleButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IToggleButtonAutomationPeer;
            Retval.m_IToggleButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToggleButtonAutomationPeer

   function get_ToggleState
   (
      this : in out ToggleButtonAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ToggleState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ToggleState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IToggleButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleButtonAutomationPeer.all);
      Hr := m_Interface.get_ToggleState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Toggle
   (
      this : in out ToggleButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IToggleButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleButtonAutomationPeer.all);
      Hr := m_Interface.Toggle;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBarToggleButtonAutomationPeer

   procedure Initialize (this : in out AppBarToggleButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBarToggleButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBarToggleButtonAutomationPeer, IAppBarToggleButtonAutomationPeer_Ptr);
   begin
      if this.m_IAppBarToggleButtonAutomationPeer /= null then
         if this.m_IAppBarToggleButtonAutomationPeer.all /= null then
            RefCount := this.m_IAppBarToggleButtonAutomationPeer.all.Release;
            Free (this.m_IAppBarToggleButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppBarToggleButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.AppBarToggleButton'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return AppBarToggleButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AppBarToggleButtonAutomationPeer");
      m_Factory    : access IAppBarToggleButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAppBarToggleButtonAutomationPeer;
   begin
      return RetVal : AppBarToggleButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBarToggleButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IAppBarToggleButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IAppBarToggleButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAppBarToggleButtonAutomationPeer;
            Retval.m_IAppBarToggleButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBarToggleButtonAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AutoSuggestBoxAutomationPeer

   procedure Initialize (this : in out AutoSuggestBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AutoSuggestBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAutoSuggestBoxAutomationPeer, IAutoSuggestBoxAutomationPeer_Ptr);
   begin
      if this.m_IAutoSuggestBoxAutomationPeer /= null then
         if this.m_IAutoSuggestBoxAutomationPeer.all /= null then
            RefCount := this.m_IAutoSuggestBoxAutomationPeer.all.Release;
            Free (this.m_IAutoSuggestBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AutoSuggestBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.AutoSuggestBox'Class
   )
   return AutoSuggestBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutoSuggestBoxAutomationPeer");
      m_Factory    : access IAutoSuggestBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAutoSuggestBoxAutomationPeer;
   begin
      return RetVal : AutoSuggestBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IAutoSuggestBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IAutoSuggestBox.all, m_ComRetVal'Access);
            Retval.m_IAutoSuggestBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutoSuggestBoxAutomationPeer;
            Retval.m_IAutoSuggestBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AutoSuggestBoxAutomationPeer

   procedure Invoke
   (
      this : in out AutoSuggestBoxAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IAutoSuggestBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAutoSuggestBoxAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AutomationPeerAnnotation

   procedure Initialize (this : in out AutomationPeerAnnotation) is
   begin
      null;
   end;

   procedure Finalize (this : in out AutomationPeerAnnotation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAutomationPeerAnnotation, IAutomationPeerAnnotation_Ptr);
   begin
      if this.m_IAutomationPeerAnnotation /= null then
         if this.m_IAutomationPeerAnnotation.all /= null then
            RefCount := this.m_IAutomationPeerAnnotation.all.Release;
            Free (this.m_IAutomationPeerAnnotation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AutomationPeerAnnotation

   function Constructor
   (
      type_x : Windows.UI.Xaml.Automation.AnnotationType
   )
   return AutomationPeerAnnotation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation");
      m_Factory    : access IAutomationPeerAnnotationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation;
   begin
      return RetVal : AutomationPeerAnnotation do
         Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerAnnotationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (type_x, m_ComRetVal'Access);
            Retval.m_IAutomationPeerAnnotation := new Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation;
            Retval.m_IAutomationPeerAnnotation.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      type_x : Windows.UI.Xaml.Automation.AnnotationType;
      peer : Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class
   )
   return AutomationPeerAnnotation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation");
      m_Factory    : access IAutomationPeerAnnotationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation;
   begin
      return RetVal : AutomationPeerAnnotation do
         Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerAnnotationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPeerParameter (type_x, peer.m_IAutomationPeer.all, m_ComRetVal'Access);
            Retval.m_IAutomationPeerAnnotation := new Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation;
            Retval.m_IAutomationPeerAnnotation.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return AutomationPeerAnnotation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation");
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation;
   begin
      return RetVal : AutomationPeerAnnotation do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAutomationPeerAnnotation := new Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation;
            Retval.m_IAutomationPeerAnnotation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AutomationPeerAnnotation

   function get_TypeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation");
      m_Factory        : access WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerAnnotationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TypeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PeerProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation");
      m_Factory        : access WinRt.Windows.UI.Xaml.Automation.Peers.IAutomationPeerAnnotationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IAutomationPeerAnnotationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PeerProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AutomationPeerAnnotation

   function get_Type
   (
      this : in out AutomationPeerAnnotation
   )
   return WinRt.Windows.UI.Xaml.Automation.AnnotationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.AnnotationType;
   begin
      Hr := this.m_IAutomationPeerAnnotation.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Type
   (
      this : in out AutomationPeerAnnotation;
      value : Windows.UI.Xaml.Automation.AnnotationType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeerAnnotation.all.put_Type (value);
   end;

   function get_Peer
   (
      this : in out AutomationPeerAnnotation
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.AutomationPeer do
         Hr := this.m_IAutomationPeerAnnotation.all.get_Peer (m_ComRetVal'Access);
         Retval.m_IAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IAutomationPeer;
         Retval.m_IAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   procedure put_Peer
   (
      this : in out AutomationPeerAnnotation;
      value : Windows.UI.Xaml.Automation.Peers.AutomationPeer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAutomationPeerAnnotation.all.put_Peer (value.m_IAutomationPeer.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CalendarDatePickerAutomationPeer

   procedure Initialize (this : in out CalendarDatePickerAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out CalendarDatePickerAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICalendarDatePickerAutomationPeer, ICalendarDatePickerAutomationPeer_Ptr);
   begin
      if this.m_ICalendarDatePickerAutomationPeer /= null then
         if this.m_ICalendarDatePickerAutomationPeer.all /= null then
            RefCount := this.m_ICalendarDatePickerAutomationPeer.all.Release;
            Free (this.m_ICalendarDatePickerAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CalendarDatePickerAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.CalendarDatePicker'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CalendarDatePickerAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.CalendarDatePickerAutomationPeer");
      m_Factory    : access ICalendarDatePickerAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ICalendarDatePickerAutomationPeer;
   begin
      return RetVal : CalendarDatePickerAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarDatePickerAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ICalendarDatePicker.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICalendarDatePickerAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ICalendarDatePickerAutomationPeer;
            Retval.m_ICalendarDatePickerAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CalendarDatePickerAutomationPeer

   procedure Invoke
   (
      this : in out CalendarDatePickerAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ICalendarDatePickerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarDatePickerAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   function get_IsReadOnly
   (
      this : in out CalendarDatePickerAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ICalendarDatePickerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarDatePickerAutomationPeer.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out CalendarDatePickerAutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ICalendarDatePickerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarDatePickerAutomationPeer.all);
      Hr := m_Interface.get_Value (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetValue
   (
      this : in out CalendarDatePickerAutomationPeer;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ICalendarDatePickerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendarDatePickerAutomationPeer.all);
      Hr := m_Interface.SetValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CaptureElementAutomationPeer

   procedure Initialize (this : in out CaptureElementAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out CaptureElementAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICaptureElementAutomationPeer, ICaptureElementAutomationPeer_Ptr);
   begin
      if this.m_ICaptureElementAutomationPeer /= null then
         if this.m_ICaptureElementAutomationPeer.all /= null then
            RefCount := this.m_ICaptureElementAutomationPeer.all.Release;
            Free (this.m_ICaptureElementAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CaptureElementAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.CaptureElement'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CaptureElementAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.CaptureElementAutomationPeer");
      m_Factory    : access ICaptureElementAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ICaptureElementAutomationPeer;
   begin
      return RetVal : CaptureElementAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ICaptureElementAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ICaptureElement.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICaptureElementAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ICaptureElementAutomationPeer;
            Retval.m_ICaptureElementAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CaptureElementAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CheckBoxAutomationPeer

   procedure Initialize (this : in out CheckBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out CheckBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICheckBoxAutomationPeer, ICheckBoxAutomationPeer_Ptr);
   begin
      if this.m_ICheckBoxAutomationPeer /= null then
         if this.m_ICheckBoxAutomationPeer.all /= null then
            RefCount := this.m_ICheckBoxAutomationPeer.all.Release;
            Free (this.m_ICheckBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CheckBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.CheckBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CheckBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.CheckBoxAutomationPeer");
      m_Factory    : access ICheckBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ICheckBoxAutomationPeer;
   begin
      return RetVal : CheckBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ICheckBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ICheckBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICheckBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ICheckBoxAutomationPeer;
            Retval.m_ICheckBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CheckBoxAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RangeBaseAutomationPeer

   procedure Initialize (this : in out RangeBaseAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RangeBaseAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRangeBaseAutomationPeer, IRangeBaseAutomationPeer_Ptr);
   begin
      if this.m_IRangeBaseAutomationPeer /= null then
         if this.m_IRangeBaseAutomationPeer.all /= null then
            RefCount := this.m_IRangeBaseAutomationPeer.all.Release;
            Free (this.m_IRangeBaseAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RangeBaseAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.RangeBase'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RangeBaseAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RangeBaseAutomationPeer");
      m_Factory    : access IRangeBaseAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer;
   begin
      return RetVal : RangeBaseAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRangeBase.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRangeBaseAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer;
            Retval.m_IRangeBaseAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RangeBaseAutomationPeer

   function get_IsReadOnly
   (
      this : in out RangeBaseAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LargeChange
   (
      this : in out RangeBaseAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.get_LargeChange (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Maximum
   (
      this : in out RangeBaseAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.get_Maximum (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Minimum
   (
      this : in out RangeBaseAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.get_Minimum (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SmallChange
   (
      this : in out RangeBaseAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.get_SmallChange (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out RangeBaseAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.get_Value (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetValue
   (
      this : in out RangeBaseAutomationPeer;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IRangeValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IRangeValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBaseAutomationPeer.all);
      Hr := m_Interface.SetValue (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SliderAutomationPeer

   procedure Initialize (this : in out SliderAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SliderAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISliderAutomationPeer, ISliderAutomationPeer_Ptr);
   begin
      if this.m_ISliderAutomationPeer /= null then
         if this.m_ISliderAutomationPeer.all /= null then
            RefCount := this.m_ISliderAutomationPeer.all.Release;
            Free (this.m_ISliderAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SliderAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Slider'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SliderAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.SliderAutomationPeer");
      m_Factory    : access ISliderAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ISliderAutomationPeer;
   begin
      return RetVal : SliderAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ISliderAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ISlider.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISliderAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ISliderAutomationPeer;
            Retval.m_ISliderAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SliderAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorPickerSliderAutomationPeer

   procedure Initialize (this : in out ColorPickerSliderAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorPickerSliderAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorPickerSliderAutomationPeer, IColorPickerSliderAutomationPeer_Ptr);
   begin
      if this.m_IColorPickerSliderAutomationPeer /= null then
         if this.m_IColorPickerSliderAutomationPeer.all /= null then
            RefCount := this.m_IColorPickerSliderAutomationPeer.all.Release;
            Free (this.m_IColorPickerSliderAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ColorPickerSliderAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.ColorPickerSlider'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ColorPickerSliderAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ColorPickerSliderAutomationPeer");
      m_Factory    : access IColorPickerSliderAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IColorPickerSliderAutomationPeer;
   begin
      return RetVal : ColorPickerSliderAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IColorPickerSliderAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IColorPickerSlider.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IColorPickerSliderAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IColorPickerSliderAutomationPeer;
            Retval.m_IColorPickerSliderAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorPickerSliderAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorSpectrumAutomationPeer

   procedure Initialize (this : in out ColorSpectrumAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorSpectrumAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorSpectrumAutomationPeer, IColorSpectrumAutomationPeer_Ptr);
   begin
      if this.m_IColorSpectrumAutomationPeer /= null then
         if this.m_IColorSpectrumAutomationPeer.all /= null then
            RefCount := this.m_IColorSpectrumAutomationPeer.all.Release;
            Free (this.m_IColorSpectrumAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ColorSpectrumAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.ColorSpectrum'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ColorSpectrumAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ColorSpectrumAutomationPeer");
      m_Factory    : access IColorSpectrumAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IColorSpectrumAutomationPeer;
   begin
      return RetVal : ColorSpectrumAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IColorSpectrum.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IColorSpectrumAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IColorSpectrumAutomationPeer;
            Retval.m_IColorSpectrumAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorSpectrumAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ItemsControlAutomationPeer

   procedure Initialize (this : in out ItemsControlAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ItemsControlAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IItemsControlAutomationPeer, IItemsControlAutomationPeer_Ptr);
   begin
      if this.m_IItemsControlAutomationPeer /= null then
         if this.m_IItemsControlAutomationPeer.all /= null then
            RefCount := this.m_IItemsControlAutomationPeer.all.Release;
            Free (this.m_IItemsControlAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ItemsControlAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ItemsControl'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ItemsControlAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer");
      m_Factory    : access IItemsControlAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer;
   begin
      return RetVal : ItemsControlAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IItemsControlAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IItemsControl.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IItemsControlAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer;
            Retval.m_IItemsControlAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ItemsControlAutomationPeer

   function CreateItemAutomationPeer
   (
      this : in out ItemsControlAutomationPeer;
      item : WinRt.IInspectable
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.ItemAutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer2, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IItemsControlAutomationPeer2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.ItemAutomationPeer do
         m_Interface := QInterface (this.m_IItemsControlAutomationPeer.all);
         Hr := m_Interface.CreateItemAutomationPeer (item, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer;
         Retval.m_IItemAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function OnCreateItemAutomationPeer
   (
      this : in out ItemsControlAutomationPeer;
      item : WinRt.IInspectable
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.ItemAutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeerOverrides2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeerOverrides2, WinRt.Windows.UI.Xaml.Automation.Peers.IID_IItemsControlAutomationPeerOverrides2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.ItemAutomationPeer do
         m_Interface := QInterface (this.m_IItemsControlAutomationPeer.all);
         Hr := m_Interface.OnCreateItemAutomationPeer (item, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer;
         Retval.m_IItemAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   function FindItemByProperty
   (
      this : in out ItemsControlAutomationPeer;
      startAfter : Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class;
      automationProperty : Windows.UI.Xaml.Automation.AutomationProperty'Class;
      value : WinRt.IInspectable
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IItemContainerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IItemContainerProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IItemContainerProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_IItemsControlAutomationPeer.all);
         Hr := m_Interface.FindItemByProperty (startAfter.m_IIRawElementProviderSimple.all, automationProperty.m_IAutomationProperty.all, value, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SelectorAutomationPeer

   procedure Initialize (this : in out SelectorAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SelectorAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISelectorAutomationPeer, ISelectorAutomationPeer_Ptr);
   begin
      if this.m_ISelectorAutomationPeer /= null then
         if this.m_ISelectorAutomationPeer.all /= null then
            RefCount := this.m_ISelectorAutomationPeer.all.Release;
            Free (this.m_ISelectorAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SelectorAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.Selector'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SelectorAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.SelectorAutomationPeer");
      m_Factory    : access ISelectorAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ISelectorAutomationPeer;
   begin
      return RetVal : SelectorAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ISelector.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISelectorAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ISelectorAutomationPeer;
            Retval.m_ISelectorAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SelectorAutomationPeer

   function get_CanSelectMultiple
   (
      this : in out SelectorAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISelectorAutomationPeer.all);
      Hr := m_Interface.get_CanSelectMultiple (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSelectionRequired
   (
      this : in out SelectorAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISelectorAutomationPeer.all);
      Hr := m_Interface.get_IsSelectionRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- function GetSelection
   -- (
      -- this : in out SelectorAutomationPeer
   -- )
   -- return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple_Array'Class is
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ComboBoxAutomationPeer

   procedure Initialize (this : in out ComboBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ComboBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IComboBoxAutomationPeer, IComboBoxAutomationPeer_Ptr);
   begin
      if this.m_IComboBoxAutomationPeer /= null then
         if this.m_IComboBoxAutomationPeer.all /= null then
            RefCount := this.m_IComboBoxAutomationPeer.all.Release;
            Free (this.m_IComboBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ComboBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ComboBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ComboBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ComboBoxAutomationPeer");
      m_Factory    : access IComboBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer;
   begin
      return RetVal : ComboBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IComboBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IComboBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IComboBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer;
            Retval.m_IComboBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ComboBoxAutomationPeer

   function get_IsReadOnly
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_Value (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetValue
   (
      this : in out ComboBoxAutomationPeer;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IValueProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IValueProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.SetValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ExpandCollapseState
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ExpandCollapseState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ExpandCollapseState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_ExpandCollapseState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Collapse
   (
      this : in out ComboBoxAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.Collapse;
      m_RefCount := m_Interface.Release;
   end;

   procedure Expand
   (
      this : in out ComboBoxAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.Expand;
      m_RefCount := m_Interface.Release;
   end;

   function get_IsModal
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_IsModal (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsTopmost
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_IsTopmost (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Maximizable
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_Maximizable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Minimizable
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_Minimizable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_InteractionState
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.WindowInteractionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.WindowInteractionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_InteractionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VisualState
   (
      this : in out ComboBoxAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.WindowVisualState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.WindowVisualState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.get_VisualState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out ComboBoxAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure SetVisualState
   (
      this : in out ComboBoxAutomationPeer;
      state : Windows.UI.Xaml.Automation.WindowVisualState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.SetVisualState (state);
      m_RefCount := m_Interface.Release;
   end;

   function WaitForInputIdle
   (
      this : in out ComboBoxAutomationPeer;
      milliseconds : WinRt.Int32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IWindowProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IWindowProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxAutomationPeer.all);
      Hr := m_Interface.WaitForInputIdle (milliseconds, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ComboBoxItemAutomationPeer

   procedure Initialize (this : in out ComboBoxItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ComboBoxItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IComboBoxItemAutomationPeer, IComboBoxItemAutomationPeer_Ptr);
   begin
      if this.m_IComboBoxItemAutomationPeer /= null then
         if this.m_IComboBoxItemAutomationPeer.all /= null then
            RefCount := this.m_IComboBoxItemAutomationPeer.all.Release;
            Free (this.m_IComboBoxItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ComboBoxItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ComboBoxItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ComboBoxItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ComboBoxItemAutomationPeer");
      m_Factory    : access IComboBoxItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IComboBoxItemAutomationPeer;
   begin
      return RetVal : ComboBoxItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IComboBoxItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IComboBoxItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IComboBoxItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IComboBoxItemAutomationPeer;
            Retval.m_IComboBoxItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ComboBoxItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ItemAutomationPeer

   procedure Initialize (this : in out ItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IItemAutomationPeer, IItemAutomationPeer_Ptr);
   begin
      if this.m_IItemAutomationPeer /= null then
         if this.m_IItemAutomationPeer.all /= null then
            RefCount := this.m_IItemAutomationPeer.all.Release;
            Free (this.m_IItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ItemAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ItemAutomationPeer");
      m_Factory    : access IItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer;
   begin
      return RetVal : ItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IItemsControlAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer;
            Retval.m_IItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ItemAutomationPeer

   function get_Item
   (
      this : in out ItemAutomationPeer
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IItemAutomationPeer.all.get_Item (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ItemsControlAutomationPeer
   (
      this : in out ItemAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer do
         Hr := this.m_IItemAutomationPeer.all.get_ItemsControlAutomationPeer (m_ComRetVal'Access);
         Retval.m_IItemsControlAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IItemsControlAutomationPeer;
         Retval.m_IItemsControlAutomationPeer.all := m_ComRetVal;
      end return;
   end;

   procedure Realize
   (
      this : in out ItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IVirtualizedItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IVirtualizedItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IVirtualizedItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IItemAutomationPeer.all);
      Hr := m_Interface.Realize;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SelectorItemAutomationPeer

   procedure Initialize (this : in out SelectorItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SelectorItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISelectorItemAutomationPeer, ISelectorItemAutomationPeer_Ptr);
   begin
      if this.m_ISelectorItemAutomationPeer /= null then
         if this.m_ISelectorItemAutomationPeer.all /= null then
            RefCount := this.m_ISelectorItemAutomationPeer.all.Release;
            Free (this.m_ISelectorItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SelectorItemAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.SelectorAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SelectorItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.SelectorItemAutomationPeer");
      m_Factory    : access ISelectorItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer;
   begin
      return RetVal : SelectorItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_ISelectorAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISelectorItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer;
            Retval.m_ISelectorItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SelectorItemAutomationPeer

   function get_IsSelected
   (
      this : in out SelectorItemAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISelectorItemAutomationPeer.all);
      Hr := m_Interface.get_IsSelected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectionContainer
   (
      this : in out SelectorItemAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_ISelectorItemAutomationPeer.all);
         Hr := m_Interface.get_SelectionContainer (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   procedure AddToSelection
   (
      this : in out SelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISelectorItemAutomationPeer.all);
      Hr := m_Interface.AddToSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveFromSelection
   (
      this : in out SelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISelectorItemAutomationPeer.all);
      Hr := m_Interface.RemoveFromSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure Select_x
   (
      this : in out SelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISelectorItemAutomationPeer.all);
      Hr := m_Interface.Select_x;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ComboBoxItemDataAutomationPeer

   procedure Initialize (this : in out ComboBoxItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ComboBoxItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IComboBoxItemDataAutomationPeer, IComboBoxItemDataAutomationPeer_Ptr);
   begin
      if this.m_IComboBoxItemDataAutomationPeer /= null then
         if this.m_IComboBoxItemDataAutomationPeer.all /= null then
            RefCount := this.m_IComboBoxItemDataAutomationPeer.all.Release;
            Free (this.m_IComboBoxItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ComboBoxItemDataAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.ComboBoxAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ComboBoxItemDataAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ComboBoxItemDataAutomationPeer");
      m_Factory    : access IComboBoxItemDataAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IComboBoxItemDataAutomationPeer;
   begin
      return RetVal : ComboBoxItemDataAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IComboBoxItemDataAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IComboBoxAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IComboBoxItemDataAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IComboBoxItemDataAutomationPeer;
            Retval.m_IComboBoxItemDataAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ComboBoxItemDataAutomationPeer

   procedure ScrollIntoView
   (
      this : in out ComboBoxItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IComboBoxItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxItemDataAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DatePickerAutomationPeer

   procedure Initialize (this : in out DatePickerAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out DatePickerAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDatePickerAutomationPeer, IDatePickerAutomationPeer_Ptr);
   begin
      if this.m_IDatePickerAutomationPeer /= null then
         if this.m_IDatePickerAutomationPeer.all /= null then
            RefCount := this.m_IDatePickerAutomationPeer.all.Release;
            Free (this.m_IDatePickerAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DatePickerAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.DatePicker'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return DatePickerAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.DatePickerAutomationPeer");
      m_Factory    : access IDatePickerAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IDatePickerAutomationPeer;
   begin
      return RetVal : DatePickerAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IDatePickerAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IDatePicker.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IDatePickerAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IDatePickerAutomationPeer;
            Retval.m_IDatePickerAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DatePickerAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DatePickerFlyoutPresenterAutomationPeer

   procedure Initialize (this : in out DatePickerFlyoutPresenterAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out DatePickerFlyoutPresenterAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDatePickerFlyoutPresenterAutomationPeer, IDatePickerFlyoutPresenterAutomationPeer_Ptr);
   begin
      if this.m_IDatePickerFlyoutPresenterAutomationPeer /= null then
         if this.m_IDatePickerFlyoutPresenterAutomationPeer.all /= null then
            RefCount := this.m_IDatePickerFlyoutPresenterAutomationPeer.all.Release;
            Free (this.m_IDatePickerFlyoutPresenterAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DatePickerFlyoutPresenterAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlipViewAutomationPeer

   procedure Initialize (this : in out FlipViewAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlipViewAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlipViewAutomationPeer, IFlipViewAutomationPeer_Ptr);
   begin
      if this.m_IFlipViewAutomationPeer /= null then
         if this.m_IFlipViewAutomationPeer.all /= null then
            RefCount := this.m_IFlipViewAutomationPeer.all.Release;
            Free (this.m_IFlipViewAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FlipViewAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.FlipView'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FlipViewAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FlipViewAutomationPeer");
      m_Factory    : access IFlipViewAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IFlipViewAutomationPeer;
   begin
      return RetVal : FlipViewAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFlipViewAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IFlipView.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFlipViewAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IFlipViewAutomationPeer;
            Retval.m_IFlipViewAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlipViewAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlipViewItemAutomationPeer

   procedure Initialize (this : in out FlipViewItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlipViewItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlipViewItemAutomationPeer, IFlipViewItemAutomationPeer_Ptr);
   begin
      if this.m_IFlipViewItemAutomationPeer /= null then
         if this.m_IFlipViewItemAutomationPeer.all /= null then
            RefCount := this.m_IFlipViewItemAutomationPeer.all.Release;
            Free (this.m_IFlipViewItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FlipViewItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.FlipViewItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FlipViewItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FlipViewItemAutomationPeer");
      m_Factory    : access IFlipViewItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IFlipViewItemAutomationPeer;
   begin
      return RetVal : FlipViewItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFlipViewItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IFlipViewItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFlipViewItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IFlipViewItemAutomationPeer;
            Retval.m_IFlipViewItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlipViewItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlipViewItemDataAutomationPeer

   procedure Initialize (this : in out FlipViewItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlipViewItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlipViewItemDataAutomationPeer, IFlipViewItemDataAutomationPeer_Ptr);
   begin
      if this.m_IFlipViewItemDataAutomationPeer /= null then
         if this.m_IFlipViewItemDataAutomationPeer.all /= null then
            RefCount := this.m_IFlipViewItemDataAutomationPeer.all.Release;
            Free (this.m_IFlipViewItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FlipViewItemDataAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.FlipViewAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FlipViewItemDataAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FlipViewItemDataAutomationPeer");
      m_Factory    : access IFlipViewItemDataAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IFlipViewItemDataAutomationPeer;
   begin
      return RetVal : FlipViewItemDataAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFlipViewItemDataAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IFlipViewAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFlipViewItemDataAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IFlipViewItemDataAutomationPeer;
            Retval.m_IFlipViewItemDataAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlipViewItemDataAutomationPeer

   procedure ScrollIntoView
   (
      this : in out FlipViewItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IFlipViewItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlipViewItemDataAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlyoutPresenterAutomationPeer

   procedure Initialize (this : in out FlyoutPresenterAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlyoutPresenterAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlyoutPresenterAutomationPeer, IFlyoutPresenterAutomationPeer_Ptr);
   begin
      if this.m_IFlyoutPresenterAutomationPeer /= null then
         if this.m_IFlyoutPresenterAutomationPeer.all /= null then
            RefCount := this.m_IFlyoutPresenterAutomationPeer.all.Release;
            Free (this.m_IFlyoutPresenterAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FlyoutPresenterAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.FlyoutPresenter'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FlyoutPresenterAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.FlyoutPresenterAutomationPeer");
      m_Factory    : access IFlyoutPresenterAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IFlyoutPresenterAutomationPeer;
   begin
      return RetVal : FlyoutPresenterAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutPresenterAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IFlyoutPresenter.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFlyoutPresenterAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IFlyoutPresenterAutomationPeer;
            Retval.m_IFlyoutPresenterAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlyoutPresenterAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewBaseAutomationPeer

   procedure Initialize (this : in out ListViewBaseAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewBaseAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewBaseAutomationPeer, IListViewBaseAutomationPeer_Ptr);
   begin
      if this.m_IListViewBaseAutomationPeer /= null then
         if this.m_IListViewBaseAutomationPeer.all /= null then
            RefCount := this.m_IListViewBaseAutomationPeer.all.Release;
            Free (this.m_IListViewBaseAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewBaseAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListViewBase'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewBaseAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListViewBaseAutomationPeer");
      m_Factory    : access IListViewBaseAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListViewBaseAutomationPeer;
   begin
      return RetVal : ListViewBaseAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewBaseAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListViewBase.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewBaseAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListViewBaseAutomationPeer;
            Retval.m_IListViewBaseAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewBaseAutomationPeer

   function get_DropEffect
   (
      this : in out ListViewBaseAutomationPeer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IDropTargetProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IListViewBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IDropTargetProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IDropTargetProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewBaseAutomationPeer.all);
      Hr := m_Interface.get_DropEffect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DropEffects
   (
      this : in out ListViewBaseAutomationPeer
   )
   return WinRt.WString_Array is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IDropTargetProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IListViewBaseAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IDropTargetProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IDropTargetProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewBaseAutomationPeer.all);
      Hr := m_Interface.get_DropEffects (m_ComRetValSize'Access, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      declare
         ArrayRetVal : WinRt.WString_Array (1..Integer(m_ComRetValSize));
         function To_Ada_HString is new To_Ada_Type (WinRt.HString, WinRt.HString_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada (To_Ada_HString (m_ComRetVal, i));
         end loop;
         Hr := WindowsDeleteString (m_ComRetVal.all);
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GridViewAutomationPeer

   procedure Initialize (this : in out GridViewAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out GridViewAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGridViewAutomationPeer, IGridViewAutomationPeer_Ptr);
   begin
      if this.m_IGridViewAutomationPeer /= null then
         if this.m_IGridViewAutomationPeer.all /= null then
            RefCount := this.m_IGridViewAutomationPeer.all.Release;
            Free (this.m_IGridViewAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GridViewAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.GridView'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GridViewAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.GridViewAutomationPeer");
      m_Factory    : access IGridViewAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IGridViewAutomationPeer;
   begin
      return RetVal : GridViewAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IGridView.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGridViewAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IGridViewAutomationPeer;
            Retval.m_IGridViewAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GridViewAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewBaseHeaderItemAutomationPeer

   procedure Initialize (this : in out ListViewBaseHeaderItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewBaseHeaderItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewBaseHeaderItemAutomationPeer, IListViewBaseHeaderItemAutomationPeer_Ptr);
   begin
      if this.m_IListViewBaseHeaderItemAutomationPeer /= null then
         if this.m_IListViewBaseHeaderItemAutomationPeer.all /= null then
            RefCount := this.m_IListViewBaseHeaderItemAutomationPeer.all.Release;
            Free (this.m_IListViewBaseHeaderItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewBaseHeaderItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListViewBaseHeaderItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewBaseHeaderItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer");
      m_Factory    : access IListViewBaseHeaderItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListViewBaseHeaderItemAutomationPeer;
   begin
      return RetVal : ListViewBaseHeaderItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewBaseHeaderItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListViewBaseHeaderItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewBaseHeaderItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListViewBaseHeaderItemAutomationPeer;
            Retval.m_IListViewBaseHeaderItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewBaseHeaderItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GridViewHeaderItemAutomationPeer

   procedure Initialize (this : in out GridViewHeaderItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out GridViewHeaderItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGridViewHeaderItemAutomationPeer, IGridViewHeaderItemAutomationPeer_Ptr);
   begin
      if this.m_IGridViewHeaderItemAutomationPeer /= null then
         if this.m_IGridViewHeaderItemAutomationPeer.all /= null then
            RefCount := this.m_IGridViewHeaderItemAutomationPeer.all.Release;
            Free (this.m_IGridViewHeaderItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GridViewHeaderItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.GridViewHeaderItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GridViewHeaderItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.GridViewHeaderItemAutomationPeer");
      m_Factory    : access IGridViewHeaderItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IGridViewHeaderItemAutomationPeer;
   begin
      return RetVal : GridViewHeaderItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewHeaderItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IGridViewHeaderItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGridViewHeaderItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IGridViewHeaderItemAutomationPeer;
            Retval.m_IGridViewHeaderItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GridViewHeaderItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GridViewItemAutomationPeer

   procedure Initialize (this : in out GridViewItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out GridViewItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGridViewItemAutomationPeer, IGridViewItemAutomationPeer_Ptr);
   begin
      if this.m_IGridViewItemAutomationPeer /= null then
         if this.m_IGridViewItemAutomationPeer.all /= null then
            RefCount := this.m_IGridViewItemAutomationPeer.all.Release;
            Free (this.m_IGridViewItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GridViewItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.GridViewItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GridViewItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.GridViewItemAutomationPeer");
      m_Factory    : access IGridViewItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IGridViewItemAutomationPeer;
   begin
      return RetVal : GridViewItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IGridViewItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGridViewItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IGridViewItemAutomationPeer;
            Retval.m_IGridViewItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GridViewItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GridViewItemDataAutomationPeer

   procedure Initialize (this : in out GridViewItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out GridViewItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGridViewItemDataAutomationPeer, IGridViewItemDataAutomationPeer_Ptr);
   begin
      if this.m_IGridViewItemDataAutomationPeer /= null then
         if this.m_IGridViewItemDataAutomationPeer.all /= null then
            RefCount := this.m_IGridViewItemDataAutomationPeer.all.Release;
            Free (this.m_IGridViewItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GridViewItemDataAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.GridViewAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GridViewItemDataAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.GridViewItemDataAutomationPeer");
      m_Factory    : access IGridViewItemDataAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IGridViewItemDataAutomationPeer;
   begin
      return RetVal : GridViewItemDataAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemDataAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IGridViewAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGridViewItemDataAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IGridViewItemDataAutomationPeer;
            Retval.m_IGridViewItemDataAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GridViewItemDataAutomationPeer

   procedure ScrollIntoView
   (
      this : in out GridViewItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IGridViewItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGridViewItemDataAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GroupItemAutomationPeer

   procedure Initialize (this : in out GroupItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out GroupItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGroupItemAutomationPeer, IGroupItemAutomationPeer_Ptr);
   begin
      if this.m_IGroupItemAutomationPeer /= null then
         if this.m_IGroupItemAutomationPeer.all /= null then
            RefCount := this.m_IGroupItemAutomationPeer.all.Release;
            Free (this.m_IGroupItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GroupItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.GroupItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GroupItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.GroupItemAutomationPeer");
      m_Factory    : access IGroupItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IGroupItemAutomationPeer;
   begin
      return RetVal : GroupItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IGroupItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IGroupItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGroupItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IGroupItemAutomationPeer;
            Retval.m_IGroupItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GroupItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HubAutomationPeer

   procedure Initialize (this : in out HubAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out HubAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHubAutomationPeer, IHubAutomationPeer_Ptr);
   begin
      if this.m_IHubAutomationPeer /= null then
         if this.m_IHubAutomationPeer.all /= null then
            RefCount := this.m_IHubAutomationPeer.all.Release;
            Free (this.m_IHubAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HubAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Hub'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return HubAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.HubAutomationPeer");
      m_Factory    : access IHubAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IHubAutomationPeer;
   begin
      return RetVal : HubAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IHubAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IHub.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IHubAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IHubAutomationPeer;
            Retval.m_IHubAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HubAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HubSectionAutomationPeer

   procedure Initialize (this : in out HubSectionAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out HubSectionAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHubSectionAutomationPeer, IHubSectionAutomationPeer_Ptr);
   begin
      if this.m_IHubSectionAutomationPeer /= null then
         if this.m_IHubSectionAutomationPeer.all /= null then
            RefCount := this.m_IHubSectionAutomationPeer.all.Release;
            Free (this.m_IHubSectionAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HubSectionAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.HubSection'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return HubSectionAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.HubSectionAutomationPeer");
      m_Factory    : access IHubSectionAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IHubSectionAutomationPeer;
   begin
      return RetVal : HubSectionAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IHubSectionAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IHubSection.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IHubSectionAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IHubSectionAutomationPeer;
            Retval.m_IHubSectionAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HubSectionAutomationPeer

   procedure ScrollIntoView
   (
      this : in out HubSectionAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IHubSectionAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHubSectionAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HyperlinkButtonAutomationPeer

   procedure Initialize (this : in out HyperlinkButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out HyperlinkButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHyperlinkButtonAutomationPeer, IHyperlinkButtonAutomationPeer_Ptr);
   begin
      if this.m_IHyperlinkButtonAutomationPeer /= null then
         if this.m_IHyperlinkButtonAutomationPeer.all /= null then
            RefCount := this.m_IHyperlinkButtonAutomationPeer.all.Release;
            Free (this.m_IHyperlinkButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HyperlinkButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.HyperlinkButton'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return HyperlinkButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.HyperlinkButtonAutomationPeer");
      m_Factory    : access IHyperlinkButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IHyperlinkButtonAutomationPeer;
   begin
      return RetVal : HyperlinkButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IHyperlinkButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IHyperlinkButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IHyperlinkButtonAutomationPeer;
            Retval.m_IHyperlinkButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HyperlinkButtonAutomationPeer

   procedure Invoke
   (
      this : in out HyperlinkButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IHyperlinkButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlinkButtonAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageAutomationPeer

   procedure Initialize (this : in out ImageAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageAutomationPeer, IImageAutomationPeer_Ptr);
   begin
      if this.m_IImageAutomationPeer /= null then
         if this.m_IImageAutomationPeer.all /= null then
            RefCount := this.m_IImageAutomationPeer.all.Release;
            Free (this.m_IImageAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ImageAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Image'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ImageAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ImageAutomationPeer");
      m_Factory    : access IImageAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IImageAutomationPeer;
   begin
      return RetVal : ImageAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IImageAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IImage.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IImageAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IImageAutomationPeer;
            Retval.m_IImageAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkToolbarAutomationPeer

   procedure Initialize (this : in out InkToolbarAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkToolbarAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkToolbarAutomationPeer, IInkToolbarAutomationPeer_Ptr);
   begin
      if this.m_IInkToolbarAutomationPeer /= null then
         if this.m_IInkToolbarAutomationPeer.all /= null then
            RefCount := this.m_IInkToolbarAutomationPeer.all.Release;
            Free (this.m_IInkToolbarAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkToolbarAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListBoxAutomationPeer

   procedure Initialize (this : in out ListBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListBoxAutomationPeer, IListBoxAutomationPeer_Ptr);
   begin
      if this.m_IListBoxAutomationPeer /= null then
         if this.m_IListBoxAutomationPeer.all /= null then
            RefCount := this.m_IListBoxAutomationPeer.all.Release;
            Free (this.m_IListBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListBoxAutomationPeer");
      m_Factory    : access IListBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListBoxAutomationPeer;
   begin
      return RetVal : ListBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListBoxAutomationPeer;
            Retval.m_IListBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListBoxAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListBoxItemAutomationPeer

   procedure Initialize (this : in out ListBoxItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListBoxItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListBoxItemAutomationPeer, IListBoxItemAutomationPeer_Ptr);
   begin
      if this.m_IListBoxItemAutomationPeer /= null then
         if this.m_IListBoxItemAutomationPeer.all /= null then
            RefCount := this.m_IListBoxItemAutomationPeer.all.Release;
            Free (this.m_IListBoxItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListBoxItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListBoxItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListBoxItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListBoxItemAutomationPeer");
      m_Factory    : access IListBoxItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListBoxItemAutomationPeer;
   begin
      return RetVal : ListBoxItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListBoxItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListBoxItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListBoxItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListBoxItemAutomationPeer;
            Retval.m_IListBoxItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListBoxItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListBoxItemDataAutomationPeer

   procedure Initialize (this : in out ListBoxItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListBoxItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListBoxItemDataAutomationPeer, IListBoxItemDataAutomationPeer_Ptr);
   begin
      if this.m_IListBoxItemDataAutomationPeer /= null then
         if this.m_IListBoxItemDataAutomationPeer.all /= null then
            RefCount := this.m_IListBoxItemDataAutomationPeer.all.Release;
            Free (this.m_IListBoxItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListBoxItemDataAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.ListBoxAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListBoxItemDataAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListBoxItemDataAutomationPeer");
      m_Factory    : access IListBoxItemDataAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListBoxItemDataAutomationPeer;
   begin
      return RetVal : ListBoxItemDataAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListBoxItemDataAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IListBoxAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListBoxItemDataAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListBoxItemDataAutomationPeer;
            Retval.m_IListBoxItemDataAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListBoxItemDataAutomationPeer

   procedure ScrollIntoView
   (
      this : in out ListBoxItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IListBoxItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListBoxItemDataAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListPickerFlyoutPresenterAutomationPeer

   procedure Initialize (this : in out ListPickerFlyoutPresenterAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListPickerFlyoutPresenterAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListPickerFlyoutPresenterAutomationPeer, IListPickerFlyoutPresenterAutomationPeer_Ptr);
   begin
      if this.m_IListPickerFlyoutPresenterAutomationPeer /= null then
         if this.m_IListPickerFlyoutPresenterAutomationPeer.all /= null then
            RefCount := this.m_IListPickerFlyoutPresenterAutomationPeer.all.Release;
            Free (this.m_IListPickerFlyoutPresenterAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListPickerFlyoutPresenterAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewAutomationPeer

   procedure Initialize (this : in out ListViewAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewAutomationPeer, IListViewAutomationPeer_Ptr);
   begin
      if this.m_IListViewAutomationPeer /= null then
         if this.m_IListViewAutomationPeer.all /= null then
            RefCount := this.m_IListViewAutomationPeer.all.Release;
            Free (this.m_IListViewAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListView'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListViewAutomationPeer");
      m_Factory    : access IListViewAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListViewAutomationPeer;
   begin
      return RetVal : ListViewAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListView.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListViewAutomationPeer;
            Retval.m_IListViewAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewHeaderItemAutomationPeer

   procedure Initialize (this : in out ListViewHeaderItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewHeaderItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewHeaderItemAutomationPeer, IListViewHeaderItemAutomationPeer_Ptr);
   begin
      if this.m_IListViewHeaderItemAutomationPeer /= null then
         if this.m_IListViewHeaderItemAutomationPeer.all /= null then
            RefCount := this.m_IListViewHeaderItemAutomationPeer.all.Release;
            Free (this.m_IListViewHeaderItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewHeaderItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListViewHeaderItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewHeaderItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListViewHeaderItemAutomationPeer");
      m_Factory    : access IListViewHeaderItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListViewHeaderItemAutomationPeer;
   begin
      return RetVal : ListViewHeaderItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewHeaderItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListViewHeaderItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewHeaderItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListViewHeaderItemAutomationPeer;
            Retval.m_IListViewHeaderItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewHeaderItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewItemAutomationPeer

   procedure Initialize (this : in out ListViewItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewItemAutomationPeer, IListViewItemAutomationPeer_Ptr);
   begin
      if this.m_IListViewItemAutomationPeer /= null then
         if this.m_IListViewItemAutomationPeer.all /= null then
            RefCount := this.m_IListViewItemAutomationPeer.all.Release;
            Free (this.m_IListViewItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ListViewItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListViewItemAutomationPeer");
      m_Factory    : access IListViewItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListViewItemAutomationPeer;
   begin
      return RetVal : ListViewItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IListViewItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListViewItemAutomationPeer;
            Retval.m_IListViewItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewItemDataAutomationPeer

   procedure Initialize (this : in out ListViewItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewItemDataAutomationPeer, IListViewItemDataAutomationPeer_Ptr);
   begin
      if this.m_IListViewItemDataAutomationPeer /= null then
         if this.m_IListViewItemDataAutomationPeer.all /= null then
            RefCount := this.m_IListViewItemDataAutomationPeer.all.Release;
            Free (this.m_IListViewItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewItemDataAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.ListViewBaseAutomationPeer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewItemDataAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ListViewItemDataAutomationPeer");
      m_Factory    : access IListViewItemDataAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IListViewItemDataAutomationPeer;
   begin
      return RetVal : ListViewItemDataAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemDataAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IListViewBaseAutomationPeer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewItemDataAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IListViewItemDataAutomationPeer;
            Retval.m_IListViewItemDataAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewItemDataAutomationPeer

   procedure ScrollIntoView
   (
      this : in out ListViewItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IListViewItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemDataAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoopingSelectorAutomationPeer

   procedure Initialize (this : in out LoopingSelectorAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoopingSelectorAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoopingSelectorAutomationPeer, ILoopingSelectorAutomationPeer_Ptr);
   begin
      if this.m_ILoopingSelectorAutomationPeer /= null then
         if this.m_ILoopingSelectorAutomationPeer.all /= null then
            RefCount := this.m_ILoopingSelectorAutomationPeer.all.Release;
            Free (this.m_ILoopingSelectorAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoopingSelectorAutomationPeer

   function get_CanSelectMultiple
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_CanSelectMultiple (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSelectionRequired
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_IsSelectionRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- function GetSelection
   -- (
      -- this : in out LoopingSelectorAutomationPeer
   -- )
   -- return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple_Array'Class is
   function FindItemByProperty
   (
      this : in out LoopingSelectorAutomationPeer;
      startAfter : Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class;
      automationProperty : Windows.UI.Xaml.Automation.AutomationProperty'Class;
      value : WinRt.IInspectable
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IItemContainerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IItemContainerProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IItemContainerProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
         Hr := m_Interface.FindItemByProperty (startAfter.m_IIRawElementProviderSimple.all, automationProperty.m_IAutomationProperty.all, value, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   function get_ExpandCollapseState
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ExpandCollapseState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ExpandCollapseState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_ExpandCollapseState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Collapse
   (
      this : in out LoopingSelectorAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.Collapse;
      m_RefCount := m_Interface.Release;
   end;

   procedure Expand
   (
      this : in out LoopingSelectorAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.Expand;
      m_RefCount := m_Interface.Release;
   end;

   function get_HorizontallyScrollable
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_HorizontallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalScrollPercent
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_HorizontalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalViewSize
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_HorizontalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticallyScrollable
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_VerticallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalScrollPercent
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_VerticalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalViewSize
   (
      this : in out LoopingSelectorAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.get_VerticalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Scroll
   (
      this : in out LoopingSelectorAutomationPeer;
      horizontalAmount : Windows.UI.Xaml.Automation.ScrollAmount;
      verticalAmount : Windows.UI.Xaml.Automation.ScrollAmount
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.Scroll (horizontalAmount, verticalAmount);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetScrollPercent
   (
      this : in out LoopingSelectorAutomationPeer;
      horizontalPercent : WinRt.Double;
      verticalPercent : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorAutomationPeer.all);
      Hr := m_Interface.SetScrollPercent (horizontalPercent, verticalPercent);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoopingSelectorItemAutomationPeer

   procedure Initialize (this : in out LoopingSelectorItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoopingSelectorItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoopingSelectorItemAutomationPeer, ILoopingSelectorItemAutomationPeer_Ptr);
   begin
      if this.m_ILoopingSelectorItemAutomationPeer /= null then
         if this.m_ILoopingSelectorItemAutomationPeer.all /= null then
            RefCount := this.m_ILoopingSelectorItemAutomationPeer.all.Release;
            Free (this.m_ILoopingSelectorItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoopingSelectorItemAutomationPeer

   procedure ScrollIntoView
   (
      this : in out LoopingSelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorItemAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   function get_IsSelected
   (
      this : in out LoopingSelectorItemAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorItemAutomationPeer.all);
      Hr := m_Interface.get_IsSelected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectionContainer
   (
      this : in out LoopingSelectorItemAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_ILoopingSelectorItemAutomationPeer.all);
         Hr := m_Interface.get_SelectionContainer (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   procedure AddToSelection
   (
      this : in out LoopingSelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorItemAutomationPeer.all);
      Hr := m_Interface.AddToSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveFromSelection
   (
      this : in out LoopingSelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorItemAutomationPeer.all);
      Hr := m_Interface.RemoveFromSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure Select_x
   (
      this : in out LoopingSelectorItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorItemAutomationPeer.all);
      Hr := m_Interface.Select_x;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoopingSelectorItemDataAutomationPeer

   procedure Initialize (this : in out LoopingSelectorItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoopingSelectorItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoopingSelectorItemDataAutomationPeer, ILoopingSelectorItemDataAutomationPeer_Ptr);
   begin
      if this.m_ILoopingSelectorItemDataAutomationPeer /= null then
         if this.m_ILoopingSelectorItemDataAutomationPeer.all /= null then
            RefCount := this.m_ILoopingSelectorItemDataAutomationPeer.all.Release;
            Free (this.m_ILoopingSelectorItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoopingSelectorItemDataAutomationPeer

   procedure Realize
   (
      this : in out LoopingSelectorItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IVirtualizedItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ILoopingSelectorItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IVirtualizedItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IVirtualizedItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorItemDataAutomationPeer.all);
      Hr := m_Interface.Realize;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MapControlAutomationPeer

   procedure Initialize (this : in out MapControlAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MapControlAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMapControlAutomationPeer, IMapControlAutomationPeer_Ptr);
   begin
      if this.m_IMapControlAutomationPeer /= null then
         if this.m_IMapControlAutomationPeer.all /= null then
            RefCount := this.m_IMapControlAutomationPeer.all.Release;
            Free (this.m_IMapControlAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MapControlAutomationPeer

   function get_HorizontallyScrollable
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_HorizontallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalScrollPercent
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_HorizontalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalViewSize
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_HorizontalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticallyScrollable
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_VerticallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalScrollPercent
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_VerticalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalViewSize
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_VerticalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Scroll
   (
      this : in out MapControlAutomationPeer;
      horizontalAmount : Windows.UI.Xaml.Automation.ScrollAmount;
      verticalAmount : Windows.UI.Xaml.Automation.ScrollAmount
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.Scroll (horizontalAmount, verticalAmount);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetScrollPercent
   (
      this : in out MapControlAutomationPeer;
      horizontalPercent : WinRt.Double;
      verticalPercent : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.SetScrollPercent (horizontalPercent, verticalPercent);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanZoom
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_CanZoom (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ZoomLevel
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_ZoomLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxZoom
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_MaxZoom (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinZoom
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_MinZoom (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Zoom
   (
      this : in out MapControlAutomationPeer;
      zoom : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.Zoom (zoom);
      m_RefCount := m_Interface.Release;
   end;

   procedure ZoomByUnit
   (
      this : in out MapControlAutomationPeer;
      zoomUnit : Windows.UI.Xaml.Automation.ZoomUnit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider2, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.ZoomByUnit (zoomUnit);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanMove
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_CanMove (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanResize
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_CanResize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanRotate
   (
      this : in out MapControlAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.get_CanRotate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Move
   (
      this : in out MapControlAutomationPeer;
      x : WinRt.Double;
      y : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.Move (x, y);
      m_RefCount := m_Interface.Release;
   end;

   procedure Resize
   (
      this : in out MapControlAutomationPeer;
      width : WinRt.Double;
      height : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.Resize (width, height);
      m_RefCount := m_Interface.Release;
   end;

   procedure Rotate
   (
      this : in out MapControlAutomationPeer;
      degrees : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMapControlAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ITransformProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ITransformProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapControlAutomationPeer.all);
      Hr := m_Interface.Rotate (degrees);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaElementAutomationPeer

   procedure Initialize (this : in out MediaElementAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaElementAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaElementAutomationPeer, IMediaElementAutomationPeer_Ptr);
   begin
      if this.m_IMediaElementAutomationPeer /= null then
         if this.m_IMediaElementAutomationPeer.all /= null then
            RefCount := this.m_IMediaElementAutomationPeer.all.Release;
            Free (this.m_IMediaElementAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaElementAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MediaElement'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MediaElementAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MediaElementAutomationPeer");
      m_Factory    : access IMediaElementAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMediaElementAutomationPeer;
   begin
      return RetVal : MediaElementAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaElementAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IMediaElement.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMediaElementAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMediaElementAutomationPeer;
            Retval.m_IMediaElementAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaElementAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlayerElementAutomationPeer

   procedure Initialize (this : in out MediaPlayerElementAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlayerElementAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlayerElementAutomationPeer, IMediaPlayerElementAutomationPeer_Ptr);
   begin
      if this.m_IMediaPlayerElementAutomationPeer /= null then
         if this.m_IMediaPlayerElementAutomationPeer.all /= null then
            RefCount := this.m_IMediaPlayerElementAutomationPeer.all.Release;
            Free (this.m_IMediaPlayerElementAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaPlayerElementAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MediaPlayerElement'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MediaPlayerElementAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MediaPlayerElementAutomationPeer");
      m_Factory    : access IMediaPlayerElementAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMediaPlayerElementAutomationPeer;
   begin
      return RetVal : MediaPlayerElementAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaPlayerElementAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IMediaPlayerElement.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMediaPlayerElementAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMediaPlayerElementAutomationPeer;
            Retval.m_IMediaPlayerElementAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlayerElementAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaTransportControlsAutomationPeer

   procedure Initialize (this : in out MediaTransportControlsAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaTransportControlsAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTransportControlsAutomationPeer, IMediaTransportControlsAutomationPeer_Ptr);
   begin
      if this.m_IMediaTransportControlsAutomationPeer /= null then
         if this.m_IMediaTransportControlsAutomationPeer.all /= null then
            RefCount := this.m_IMediaTransportControlsAutomationPeer.all.Release;
            Free (this.m_IMediaTransportControlsAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaTransportControlsAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MediaTransportControls'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MediaTransportControlsAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MediaTransportControlsAutomationPeer");
      m_Factory    : access IMediaTransportControlsAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMediaTransportControlsAutomationPeer;
   begin
      return RetVal : MediaTransportControlsAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaTransportControlsAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IMediaTransportControls.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMediaTransportControlsAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMediaTransportControlsAutomationPeer;
            Retval.m_IMediaTransportControlsAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaTransportControlsAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MenuBarAutomationPeer

   procedure Initialize (this : in out MenuBarAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MenuBarAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMenuBarAutomationPeer, IMenuBarAutomationPeer_Ptr);
   begin
      if this.m_IMenuBarAutomationPeer /= null then
         if this.m_IMenuBarAutomationPeer.all /= null then
            RefCount := this.m_IMenuBarAutomationPeer.all.Release;
            Free (this.m_IMenuBarAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MenuBarAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MenuBar'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MenuBarAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MenuBarAutomationPeer");
      m_Factory    : access IMenuBarAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMenuBarAutomationPeer;
   begin
      return RetVal : MenuBarAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMenuBarAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (owner.m_IMenuBar.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMenuBarAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMenuBarAutomationPeer;
            Retval.m_IMenuBarAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MenuBarAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MenuBarItemAutomationPeer

   procedure Initialize (this : in out MenuBarItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MenuBarItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMenuBarItemAutomationPeer, IMenuBarItemAutomationPeer_Ptr);
   begin
      if this.m_IMenuBarItemAutomationPeer /= null then
         if this.m_IMenuBarItemAutomationPeer.all /= null then
            RefCount := this.m_IMenuBarItemAutomationPeer.all.Release;
            Free (this.m_IMenuBarItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MenuBarItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MenuBarItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MenuBarItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MenuBarItemAutomationPeer");
      m_Factory    : access IMenuBarItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMenuBarItemAutomationPeer;
   begin
      return RetVal : MenuBarItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMenuBarItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (owner.m_IMenuBarItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMenuBarItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMenuBarItemAutomationPeer;
            Retval.m_IMenuBarItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MenuBarItemAutomationPeer

   function get_ExpandCollapseState
   (
      this : in out MenuBarItemAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ExpandCollapseState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ExpandCollapseState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMenuBarItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMenuBarItemAutomationPeer.all);
      Hr := m_Interface.get_ExpandCollapseState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Collapse
   (
      this : in out MenuBarItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMenuBarItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMenuBarItemAutomationPeer.all);
      Hr := m_Interface.Collapse;
      m_RefCount := m_Interface.Release;
   end;

   procedure Expand
   (
      this : in out MenuBarItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMenuBarItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMenuBarItemAutomationPeer.all);
      Hr := m_Interface.Expand;
      m_RefCount := m_Interface.Release;
   end;

   procedure Invoke
   (
      this : in out MenuBarItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMenuBarItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMenuBarItemAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MenuFlyoutItemAutomationPeer

   procedure Initialize (this : in out MenuFlyoutItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MenuFlyoutItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMenuFlyoutItemAutomationPeer, IMenuFlyoutItemAutomationPeer_Ptr);
   begin
      if this.m_IMenuFlyoutItemAutomationPeer /= null then
         if this.m_IMenuFlyoutItemAutomationPeer.all /= null then
            RefCount := this.m_IMenuFlyoutItemAutomationPeer.all.Release;
            Free (this.m_IMenuFlyoutItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MenuFlyoutItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MenuFlyoutItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MenuFlyoutItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MenuFlyoutItemAutomationPeer");
      m_Factory    : access IMenuFlyoutItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMenuFlyoutItemAutomationPeer;
   begin
      return RetVal : MenuFlyoutItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMenuFlyoutItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IMenuFlyoutItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMenuFlyoutItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMenuFlyoutItemAutomationPeer;
            Retval.m_IMenuFlyoutItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MenuFlyoutItemAutomationPeer

   procedure Invoke
   (
      this : in out MenuFlyoutItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IMenuFlyoutItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMenuFlyoutItemAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MenuFlyoutPresenterAutomationPeer

   procedure Initialize (this : in out MenuFlyoutPresenterAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MenuFlyoutPresenterAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMenuFlyoutPresenterAutomationPeer, IMenuFlyoutPresenterAutomationPeer_Ptr);
   begin
      if this.m_IMenuFlyoutPresenterAutomationPeer /= null then
         if this.m_IMenuFlyoutPresenterAutomationPeer.all /= null then
            RefCount := this.m_IMenuFlyoutPresenterAutomationPeer.all.Release;
            Free (this.m_IMenuFlyoutPresenterAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MenuFlyoutPresenterAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.MenuFlyoutPresenter'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MenuFlyoutPresenterAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.MenuFlyoutPresenterAutomationPeer");
      m_Factory    : access IMenuFlyoutPresenterAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IMenuFlyoutPresenterAutomationPeer;
   begin
      return RetVal : MenuFlyoutPresenterAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IMenuFlyoutPresenterAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IMenuFlyoutPresenter.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMenuFlyoutPresenterAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IMenuFlyoutPresenterAutomationPeer;
            Retval.m_IMenuFlyoutPresenterAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MenuFlyoutPresenterAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NavigationViewItemAutomationPeer

   procedure Initialize (this : in out NavigationViewItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out NavigationViewItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INavigationViewItemAutomationPeer, INavigationViewItemAutomationPeer_Ptr);
   begin
      if this.m_INavigationViewItemAutomationPeer /= null then
         if this.m_INavigationViewItemAutomationPeer.all /= null then
            RefCount := this.m_INavigationViewItemAutomationPeer.all.Release;
            Free (this.m_INavigationViewItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NavigationViewItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.NavigationViewItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return NavigationViewItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.NavigationViewItemAutomationPeer");
      m_Factory    : access INavigationViewItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.INavigationViewItemAutomationPeer;
   begin
      return RetVal : NavigationViewItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_INavigationViewItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_INavigationViewItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_INavigationViewItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.INavigationViewItemAutomationPeer;
            Retval.m_INavigationViewItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NavigationViewItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PasswordBoxAutomationPeer

   procedure Initialize (this : in out PasswordBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out PasswordBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPasswordBoxAutomationPeer, IPasswordBoxAutomationPeer_Ptr);
   begin
      if this.m_IPasswordBoxAutomationPeer /= null then
         if this.m_IPasswordBoxAutomationPeer.all /= null then
            RefCount := this.m_IPasswordBoxAutomationPeer.all.Release;
            Free (this.m_IPasswordBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PasswordBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.PasswordBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return PasswordBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.PasswordBoxAutomationPeer");
      m_Factory    : access IPasswordBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IPasswordBoxAutomationPeer;
   begin
      return RetVal : PasswordBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IPasswordBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IPasswordBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPasswordBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IPasswordBoxAutomationPeer;
            Retval.m_IPasswordBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PasswordBoxAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PersonPictureAutomationPeer

   procedure Initialize (this : in out PersonPictureAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out PersonPictureAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPersonPictureAutomationPeer, IPersonPictureAutomationPeer_Ptr);
   begin
      if this.m_IPersonPictureAutomationPeer /= null then
         if this.m_IPersonPictureAutomationPeer.all /= null then
            RefCount := this.m_IPersonPictureAutomationPeer.all.Release;
            Free (this.m_IPersonPictureAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PersonPictureAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.PersonPicture'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return PersonPictureAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.PersonPictureAutomationPeer");
      m_Factory    : access IPersonPictureAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IPersonPictureAutomationPeer;
   begin
      return RetVal : PersonPictureAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IPersonPictureAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IPersonPicture.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPersonPictureAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IPersonPictureAutomationPeer;
            Retval.m_IPersonPictureAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PersonPictureAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PickerFlyoutPresenterAutomationPeer

   procedure Initialize (this : in out PickerFlyoutPresenterAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out PickerFlyoutPresenterAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPickerFlyoutPresenterAutomationPeer, IPickerFlyoutPresenterAutomationPeer_Ptr);
   begin
      if this.m_IPickerFlyoutPresenterAutomationPeer /= null then
         if this.m_IPickerFlyoutPresenterAutomationPeer.all /= null then
            RefCount := this.m_IPickerFlyoutPresenterAutomationPeer.all.Release;
            Free (this.m_IPickerFlyoutPresenterAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PickerFlyoutPresenterAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PivotAutomationPeer

   procedure Initialize (this : in out PivotAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out PivotAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPivotAutomationPeer, IPivotAutomationPeer_Ptr);
   begin
      if this.m_IPivotAutomationPeer /= null then
         if this.m_IPivotAutomationPeer.all /= null then
            RefCount := this.m_IPivotAutomationPeer.all.Release;
            Free (this.m_IPivotAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PivotAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Pivot'Class
   )
   return PivotAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.PivotAutomationPeer");
      m_Factory    : access IPivotAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer;
   begin
      return RetVal : PivotAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IPivotAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IPivot.all, m_ComRetVal'Access);
            Retval.m_IPivotAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer;
            Retval.m_IPivotAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PivotAutomationPeer

   function get_CanSelectMultiple
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_CanSelectMultiple (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsSelectionRequired
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_IsSelectionRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- function GetSelection
   -- (
      -- this : in out PivotAutomationPeer
   -- )
   -- return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple_Array'Class is
   function get_HorizontallyScrollable
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_HorizontallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalScrollPercent
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_HorizontalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalViewSize
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_HorizontalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticallyScrollable
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_VerticallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalScrollPercent
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_VerticalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalViewSize
   (
      this : in out PivotAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.get_VerticalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Scroll
   (
      this : in out PivotAutomationPeer;
      horizontalAmount : Windows.UI.Xaml.Automation.ScrollAmount;
      verticalAmount : Windows.UI.Xaml.Automation.ScrollAmount
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.Scroll (horizontalAmount, verticalAmount);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetScrollPercent
   (
      this : in out PivotAutomationPeer;
      horizontalPercent : WinRt.Double;
      verticalPercent : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotAutomationPeer.all);
      Hr := m_Interface.SetScrollPercent (horizontalPercent, verticalPercent);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PivotItemAutomationPeer

   procedure Initialize (this : in out PivotItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out PivotItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPivotItemAutomationPeer, IPivotItemAutomationPeer_Ptr);
   begin
      if this.m_IPivotItemAutomationPeer /= null then
         if this.m_IPivotItemAutomationPeer.all /= null then
            RefCount := this.m_IPivotItemAutomationPeer.all.Release;
            Free (this.m_IPivotItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PivotItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.PivotItem'Class
   )
   return PivotItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.PivotItemAutomationPeer");
      m_Factory    : access IPivotItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IPivotItemAutomationPeer;
   begin
      return RetVal : PivotItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IPivotItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IPivotItem.all, m_ComRetVal'Access);
            Retval.m_IPivotItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IPivotItemAutomationPeer;
            Retval.m_IPivotItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PivotItemAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PivotItemDataAutomationPeer

   procedure Initialize (this : in out PivotItemDataAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out PivotItemDataAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPivotItemDataAutomationPeer, IPivotItemDataAutomationPeer_Ptr);
   begin
      if this.m_IPivotItemDataAutomationPeer /= null then
         if this.m_IPivotItemDataAutomationPeer.all /= null then
            RefCount := this.m_IPivotItemDataAutomationPeer.all.Release;
            Free (this.m_IPivotItemDataAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PivotItemDataAutomationPeer

   function Constructor
   (
      item : WinRt.IInspectable;
      parent : Windows.UI.Xaml.Automation.Peers.PivotAutomationPeer'Class
   )
   return PivotItemDataAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.PivotItemDataAutomationPeer");
      m_Factory    : access IPivotItemDataAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer;
   begin
      return RetVal : PivotItemDataAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IPivotItemDataAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithParentAndItem (item, parent.m_IPivotAutomationPeer.all, m_ComRetVal'Access);
            Retval.m_IPivotItemDataAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer;
            Retval.m_IPivotItemDataAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PivotItemDataAutomationPeer

   procedure ScrollIntoView
   (
      this : in out PivotItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
      Hr := m_Interface.ScrollIntoView;
      m_RefCount := m_Interface.Release;
   end;

   function get_IsSelected
   (
      this : in out PivotItemDataAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
      Hr := m_Interface.get_IsSelected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectionContainer
   (
      this : in out PivotItemDataAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
         Hr := m_Interface.get_SelectionContainer (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   procedure AddToSelection
   (
      this : in out PivotItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
      Hr := m_Interface.AddToSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveFromSelection
   (
      this : in out PivotItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
      Hr := m_Interface.RemoveFromSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure Select_x
   (
      this : in out PivotItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
      Hr := m_Interface.Select_x;
      m_RefCount := m_Interface.Release;
   end;

   procedure Realize
   (
      this : in out PivotItemDataAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IVirtualizedItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IPivotItemDataAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IVirtualizedItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IVirtualizedItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotItemDataAutomationPeer.all);
      Hr := m_Interface.Realize;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProgressBarAutomationPeer

   procedure Initialize (this : in out ProgressBarAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProgressBarAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProgressBarAutomationPeer, IProgressBarAutomationPeer_Ptr);
   begin
      if this.m_IProgressBarAutomationPeer /= null then
         if this.m_IProgressBarAutomationPeer.all /= null then
            RefCount := this.m_IProgressBarAutomationPeer.all.Release;
            Free (this.m_IProgressBarAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProgressBarAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ProgressBar'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ProgressBarAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ProgressBarAutomationPeer");
      m_Factory    : access IProgressBarAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IProgressBarAutomationPeer;
   begin
      return RetVal : ProgressBarAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IProgressBarAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IProgressBar.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IProgressBarAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IProgressBarAutomationPeer;
            Retval.m_IProgressBarAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProgressBarAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProgressRingAutomationPeer

   procedure Initialize (this : in out ProgressRingAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProgressRingAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProgressRingAutomationPeer, IProgressRingAutomationPeer_Ptr);
   begin
      if this.m_IProgressRingAutomationPeer /= null then
         if this.m_IProgressRingAutomationPeer.all /= null then
            RefCount := this.m_IProgressRingAutomationPeer.all.Release;
            Free (this.m_IProgressRingAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProgressRingAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ProgressRing'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ProgressRingAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ProgressRingAutomationPeer");
      m_Factory    : access IProgressRingAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IProgressRingAutomationPeer;
   begin
      return RetVal : ProgressRingAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IProgressRingAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IProgressRing.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IProgressRingAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IProgressRingAutomationPeer;
            Retval.m_IProgressRingAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProgressRingAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RadioButtonAutomationPeer

   procedure Initialize (this : in out RadioButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RadioButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRadioButtonAutomationPeer, IRadioButtonAutomationPeer_Ptr);
   begin
      if this.m_IRadioButtonAutomationPeer /= null then
         if this.m_IRadioButtonAutomationPeer.all /= null then
            RefCount := this.m_IRadioButtonAutomationPeer.all.Release;
            Free (this.m_IRadioButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RadioButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.RadioButton'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RadioButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer");
      m_Factory    : access IRadioButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer;
   begin
      return RetVal : RadioButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRadioButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRadioButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRadioButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer;
            Retval.m_IRadioButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RadioButtonAutomationPeer

   function get_IsSelected
   (
      this : in out RadioButtonAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRadioButtonAutomationPeer.all);
      Hr := m_Interface.get_IsSelected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectionContainer
   (
      this : in out RadioButtonAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple do
         m_Interface := QInterface (this.m_IRadioButtonAutomationPeer.all);
         Hr := m_Interface.get_SelectionContainer (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIRawElementProviderSimple := new Windows.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
         Retval.m_IIRawElementProviderSimple.all := m_ComRetVal;
      end return;
   end;

   procedure AddToSelection
   (
      this : in out RadioButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRadioButtonAutomationPeer.all);
      Hr := m_Interface.AddToSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveFromSelection
   (
      this : in out RadioButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRadioButtonAutomationPeer.all);
      Hr := m_Interface.RemoveFromSelection;
      m_RefCount := m_Interface.Release;
   end;

   procedure Select_x
   (
      this : in out RadioButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRadioButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_ISelectionItemProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRadioButtonAutomationPeer.all);
      Hr := m_Interface.Select_x;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RatingControlAutomationPeer

   procedure Initialize (this : in out RatingControlAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RatingControlAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRatingControlAutomationPeer, IRatingControlAutomationPeer_Ptr);
   begin
      if this.m_IRatingControlAutomationPeer /= null then
         if this.m_IRatingControlAutomationPeer.all /= null then
            RefCount := this.m_IRatingControlAutomationPeer.all.Release;
            Free (this.m_IRatingControlAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RatingControlAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.RatingControl'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RatingControlAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RatingControlAutomationPeer");
      m_Factory    : access IRatingControlAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRatingControlAutomationPeer;
   begin
      return RetVal : RatingControlAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRatingControlAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRatingControl.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRatingControlAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRatingControlAutomationPeer;
            Retval.m_IRatingControlAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RatingControlAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RepeatButtonAutomationPeer

   procedure Initialize (this : in out RepeatButtonAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RepeatButtonAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRepeatButtonAutomationPeer, IRepeatButtonAutomationPeer_Ptr);
   begin
      if this.m_IRepeatButtonAutomationPeer /= null then
         if this.m_IRepeatButtonAutomationPeer.all /= null then
            RefCount := this.m_IRepeatButtonAutomationPeer.all.Release;
            Free (this.m_IRepeatButtonAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RepeatButtonAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.RepeatButton'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RepeatButtonAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RepeatButtonAutomationPeer");
      m_Factory    : access IRepeatButtonAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRepeatButtonAutomationPeer;
   begin
      return RetVal : RepeatButtonAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRepeatButtonAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRepeatButton.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRepeatButtonAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRepeatButtonAutomationPeer;
            Retval.m_IRepeatButtonAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RepeatButtonAutomationPeer

   procedure Invoke
   (
      this : in out RepeatButtonAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IRepeatButtonAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IInvokeProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IInvokeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRepeatButtonAutomationPeer.all);
      Hr := m_Interface.Invoke;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RichEditBoxAutomationPeer

   procedure Initialize (this : in out RichEditBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RichEditBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRichEditBoxAutomationPeer, IRichEditBoxAutomationPeer_Ptr);
   begin
      if this.m_IRichEditBoxAutomationPeer /= null then
         if this.m_IRichEditBoxAutomationPeer.all /= null then
            RefCount := this.m_IRichEditBoxAutomationPeer.all.Release;
            Free (this.m_IRichEditBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RichEditBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.RichEditBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RichEditBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RichEditBoxAutomationPeer");
      m_Factory    : access IRichEditBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRichEditBoxAutomationPeer;
   begin
      return RetVal : RichEditBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRichEditBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRichEditBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRichEditBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRichEditBoxAutomationPeer;
            Retval.m_IRichEditBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RichEditBoxAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RichTextBlockAutomationPeer

   procedure Initialize (this : in out RichTextBlockAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RichTextBlockAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRichTextBlockAutomationPeer, IRichTextBlockAutomationPeer_Ptr);
   begin
      if this.m_IRichTextBlockAutomationPeer /= null then
         if this.m_IRichTextBlockAutomationPeer.all /= null then
            RefCount := this.m_IRichTextBlockAutomationPeer.all.Release;
            Free (this.m_IRichTextBlockAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RichTextBlockAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.RichTextBlock'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RichTextBlockAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RichTextBlockAutomationPeer");
      m_Factory    : access IRichTextBlockAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRichTextBlockAutomationPeer;
   begin
      return RetVal : RichTextBlockAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRichTextBlockAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRichTextBlock.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRichTextBlockAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRichTextBlockAutomationPeer;
            Retval.m_IRichTextBlockAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RichTextBlockAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RichTextBlockOverflowAutomationPeer

   procedure Initialize (this : in out RichTextBlockOverflowAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out RichTextBlockOverflowAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRichTextBlockOverflowAutomationPeer, IRichTextBlockOverflowAutomationPeer_Ptr);
   begin
      if this.m_IRichTextBlockOverflowAutomationPeer /= null then
         if this.m_IRichTextBlockOverflowAutomationPeer.all /= null then
            RefCount := this.m_IRichTextBlockOverflowAutomationPeer.all.Release;
            Free (this.m_IRichTextBlockOverflowAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RichTextBlockOverflowAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.RichTextBlockOverflow'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RichTextBlockOverflowAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.RichTextBlockOverflowAutomationPeer");
      m_Factory    : access IRichTextBlockOverflowAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IRichTextBlockOverflowAutomationPeer;
   begin
      return RetVal : RichTextBlockOverflowAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IRichTextBlockOverflowAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IRichTextBlockOverflow.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRichTextBlockOverflowAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IRichTextBlockOverflowAutomationPeer;
            Retval.m_IRichTextBlockOverflowAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RichTextBlockOverflowAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScrollBarAutomationPeer

   procedure Initialize (this : in out ScrollBarAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScrollBarAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScrollBarAutomationPeer, IScrollBarAutomationPeer_Ptr);
   begin
      if this.m_IScrollBarAutomationPeer /= null then
         if this.m_IScrollBarAutomationPeer.all /= null then
            RefCount := this.m_IScrollBarAutomationPeer.all.Release;
            Free (this.m_IScrollBarAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScrollBarAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.ScrollBar'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ScrollBarAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ScrollBarAutomationPeer");
      m_Factory    : access IScrollBarAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IScrollBarAutomationPeer;
   begin
      return RetVal : ScrollBarAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IScrollBarAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IScrollBar.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IScrollBarAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IScrollBarAutomationPeer;
            Retval.m_IScrollBarAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScrollBarAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScrollViewerAutomationPeer

   procedure Initialize (this : in out ScrollViewerAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScrollViewerAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScrollViewerAutomationPeer, IScrollViewerAutomationPeer_Ptr);
   begin
      if this.m_IScrollViewerAutomationPeer /= null then
         if this.m_IScrollViewerAutomationPeer.all /= null then
            RefCount := this.m_IScrollViewerAutomationPeer.all.Release;
            Free (this.m_IScrollViewerAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScrollViewerAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ScrollViewer'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ScrollViewerAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ScrollViewerAutomationPeer");
      m_Factory    : access IScrollViewerAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer;
   begin
      return RetVal : ScrollViewerAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IScrollViewerAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IScrollViewer.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IScrollViewerAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer;
            Retval.m_IScrollViewerAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScrollViewerAutomationPeer

   function get_HorizontallyScrollable
   (
      this : in out ScrollViewerAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.get_HorizontallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalScrollPercent
   (
      this : in out ScrollViewerAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.get_HorizontalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HorizontalViewSize
   (
      this : in out ScrollViewerAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.get_HorizontalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticallyScrollable
   (
      this : in out ScrollViewerAutomationPeer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.get_VerticallyScrollable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalScrollPercent
   (
      this : in out ScrollViewerAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.get_VerticalScrollPercent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VerticalViewSize
   (
      this : in out ScrollViewerAutomationPeer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.get_VerticalViewSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Scroll
   (
      this : in out ScrollViewerAutomationPeer;
      horizontalAmount : Windows.UI.Xaml.Automation.ScrollAmount;
      verticalAmount : Windows.UI.Xaml.Automation.ScrollAmount
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.Scroll (horizontalAmount, verticalAmount);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetScrollPercent
   (
      this : in out ScrollViewerAutomationPeer;
      horizontalPercent : WinRt.Double;
      verticalPercent : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IScrollProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IScrollProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScrollViewerAutomationPeer.all);
      Hr := m_Interface.SetScrollPercent (horizontalPercent, verticalPercent);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchBoxAutomationPeer

   procedure Initialize (this : in out SearchBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchBoxAutomationPeer, ISearchBoxAutomationPeer_Ptr);
   begin
      if this.m_ISearchBoxAutomationPeer /= null then
         if this.m_ISearchBoxAutomationPeer.all /= null then
            RefCount := this.m_ISearchBoxAutomationPeer.all.Release;
            Free (this.m_ISearchBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SearchBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.SearchBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SearchBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.SearchBoxAutomationPeer");
      m_Factory    : access ISearchBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ISearchBoxAutomationPeer;
   begin
      return RetVal : SearchBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ISearchBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ISearchBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISearchBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ISearchBoxAutomationPeer;
            Retval.m_ISearchBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchBoxAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SemanticZoomAutomationPeer

   procedure Initialize (this : in out SemanticZoomAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SemanticZoomAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISemanticZoomAutomationPeer, ISemanticZoomAutomationPeer_Ptr);
   begin
      if this.m_ISemanticZoomAutomationPeer /= null then
         if this.m_ISemanticZoomAutomationPeer.all /= null then
            RefCount := this.m_ISemanticZoomAutomationPeer.all.Release;
            Free (this.m_ISemanticZoomAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SemanticZoomAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.SemanticZoom'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SemanticZoomAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.SemanticZoomAutomationPeer");
      m_Factory    : access ISemanticZoomAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ISemanticZoomAutomationPeer;
   begin
      return RetVal : SemanticZoomAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ISemanticZoomAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ISemanticZoom.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISemanticZoomAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ISemanticZoomAutomationPeer;
            Retval.m_ISemanticZoomAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SemanticZoomAutomationPeer

   function get_ToggleState
   (
      this : in out SemanticZoomAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ToggleState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ToggleState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISemanticZoomAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISemanticZoomAutomationPeer.all);
      Hr := m_Interface.get_ToggleState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Toggle
   (
      this : in out SemanticZoomAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ISemanticZoomAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISemanticZoomAutomationPeer.all);
      Hr := m_Interface.Toggle;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SettingsFlyoutAutomationPeer

   procedure Initialize (this : in out SettingsFlyoutAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SettingsFlyoutAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISettingsFlyoutAutomationPeer, ISettingsFlyoutAutomationPeer_Ptr);
   begin
      if this.m_ISettingsFlyoutAutomationPeer /= null then
         if this.m_ISettingsFlyoutAutomationPeer.all /= null then
            RefCount := this.m_ISettingsFlyoutAutomationPeer.all.Release;
            Free (this.m_ISettingsFlyoutAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SettingsFlyoutAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.SettingsFlyout'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SettingsFlyoutAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.SettingsFlyoutAutomationPeer");
      m_Factory    : access ISettingsFlyoutAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ISettingsFlyoutAutomationPeer;
   begin
      return RetVal : SettingsFlyoutAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ISettingsFlyoutAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ISettingsFlyout.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISettingsFlyoutAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ISettingsFlyoutAutomationPeer;
            Retval.m_ISettingsFlyoutAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SettingsFlyoutAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextBlockAutomationPeer

   procedure Initialize (this : in out TextBlockAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextBlockAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextBlockAutomationPeer, ITextBlockAutomationPeer_Ptr);
   begin
      if this.m_ITextBlockAutomationPeer /= null then
         if this.m_ITextBlockAutomationPeer.all /= null then
            RefCount := this.m_ITextBlockAutomationPeer.all.Release;
            Free (this.m_ITextBlockAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextBlockAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.TextBlock'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TextBlockAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.TextBlockAutomationPeer");
      m_Factory    : access ITextBlockAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ITextBlockAutomationPeer;
   begin
      return RetVal : TextBlockAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ITextBlockAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ITextBlock.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITextBlockAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ITextBlockAutomationPeer;
            Retval.m_ITextBlockAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextBlockAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextBoxAutomationPeer

   procedure Initialize (this : in out TextBoxAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextBoxAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextBoxAutomationPeer, ITextBoxAutomationPeer_Ptr);
   begin
      if this.m_ITextBoxAutomationPeer /= null then
         if this.m_ITextBoxAutomationPeer.all /= null then
            RefCount := this.m_ITextBoxAutomationPeer.all.Release;
            Free (this.m_ITextBoxAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextBoxAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.TextBox'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TextBoxAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.TextBoxAutomationPeer");
      m_Factory    : access ITextBoxAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ITextBoxAutomationPeer;
   begin
      return RetVal : TextBoxAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ITextBoxAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ITextBox.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITextBoxAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ITextBoxAutomationPeer;
            Retval.m_ITextBoxAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextBoxAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ThumbAutomationPeer

   procedure Initialize (this : in out ThumbAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ThumbAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IThumbAutomationPeer, IThumbAutomationPeer_Ptr);
   begin
      if this.m_IThumbAutomationPeer /= null then
         if this.m_IThumbAutomationPeer.all /= null then
            RefCount := this.m_IThumbAutomationPeer.all.Release;
            Free (this.m_IThumbAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ThumbAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.Primitives.Thumb'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ThumbAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ThumbAutomationPeer");
      m_Factory    : access IThumbAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IThumbAutomationPeer;
   begin
      return RetVal : ThumbAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IThumbAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IThumb.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IThumbAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IThumbAutomationPeer;
            Retval.m_IThumbAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ThumbAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimePickerAutomationPeer

   procedure Initialize (this : in out TimePickerAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimePickerAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimePickerAutomationPeer, ITimePickerAutomationPeer_Ptr);
   begin
      if this.m_ITimePickerAutomationPeer /= null then
         if this.m_ITimePickerAutomationPeer.all /= null then
            RefCount := this.m_ITimePickerAutomationPeer.all.Release;
            Free (this.m_ITimePickerAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimePickerAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.TimePicker'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TimePickerAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.TimePickerAutomationPeer");
      m_Factory    : access ITimePickerAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ITimePickerAutomationPeer;
   begin
      return RetVal : TimePickerAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ITimePickerAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ITimePicker.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITimePickerAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ITimePickerAutomationPeer;
            Retval.m_ITimePickerAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimePickerAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimePickerFlyoutPresenterAutomationPeer

   procedure Initialize (this : in out TimePickerFlyoutPresenterAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimePickerFlyoutPresenterAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimePickerFlyoutPresenterAutomationPeer, ITimePickerFlyoutPresenterAutomationPeer_Ptr);
   begin
      if this.m_ITimePickerFlyoutPresenterAutomationPeer /= null then
         if this.m_ITimePickerFlyoutPresenterAutomationPeer.all /= null then
            RefCount := this.m_ITimePickerFlyoutPresenterAutomationPeer.all.Release;
            Free (this.m_ITimePickerFlyoutPresenterAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimePickerFlyoutPresenterAutomationPeer

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToggleMenuFlyoutItemAutomationPeer

   procedure Initialize (this : in out ToggleMenuFlyoutItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToggleMenuFlyoutItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToggleMenuFlyoutItemAutomationPeer, IToggleMenuFlyoutItemAutomationPeer_Ptr);
   begin
      if this.m_IToggleMenuFlyoutItemAutomationPeer /= null then
         if this.m_IToggleMenuFlyoutItemAutomationPeer.all /= null then
            RefCount := this.m_IToggleMenuFlyoutItemAutomationPeer.all.Release;
            Free (this.m_IToggleMenuFlyoutItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToggleMenuFlyoutItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ToggleMenuFlyoutItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ToggleMenuFlyoutItemAutomationPeer");
      m_Factory    : access IToggleMenuFlyoutItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IToggleMenuFlyoutItemAutomationPeer;
   begin
      return RetVal : ToggleMenuFlyoutItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IToggleMenuFlyoutItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IToggleMenuFlyoutItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IToggleMenuFlyoutItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IToggleMenuFlyoutItemAutomationPeer;
            Retval.m_IToggleMenuFlyoutItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToggleMenuFlyoutItemAutomationPeer

   function get_ToggleState
   (
      this : in out ToggleMenuFlyoutItemAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ToggleState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ToggleState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IToggleMenuFlyoutItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleMenuFlyoutItemAutomationPeer.all);
      Hr := m_Interface.get_ToggleState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Toggle
   (
      this : in out ToggleMenuFlyoutItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IToggleMenuFlyoutItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleMenuFlyoutItemAutomationPeer.all);
      Hr := m_Interface.Toggle;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToggleSwitchAutomationPeer

   procedure Initialize (this : in out ToggleSwitchAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToggleSwitchAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToggleSwitchAutomationPeer, IToggleSwitchAutomationPeer_Ptr);
   begin
      if this.m_IToggleSwitchAutomationPeer /= null then
         if this.m_IToggleSwitchAutomationPeer.all /= null then
            RefCount := this.m_IToggleSwitchAutomationPeer.all.Release;
            Free (this.m_IToggleSwitchAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToggleSwitchAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.ToggleSwitch'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ToggleSwitchAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.ToggleSwitchAutomationPeer");
      m_Factory    : access IToggleSwitchAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.IToggleSwitchAutomationPeer;
   begin
      return RetVal : ToggleSwitchAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_IToggleSwitchAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_IToggleSwitch.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IToggleSwitchAutomationPeer := new Windows.UI.Xaml.Automation.Peers.IToggleSwitchAutomationPeer;
            Retval.m_IToggleSwitchAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToggleSwitchAutomationPeer

   function get_ToggleState
   (
      this : in out ToggleSwitchAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ToggleState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ToggleState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IToggleSwitchAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleSwitchAutomationPeer.all);
      Hr := m_Interface.get_ToggleState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Toggle
   (
      this : in out ToggleSwitchAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.IToggleSwitchAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IToggleProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IToggleProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleSwitchAutomationPeer.all);
      Hr := m_Interface.Toggle;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TreeViewItemAutomationPeer

   procedure Initialize (this : in out TreeViewItemAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TreeViewItemAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITreeViewItemAutomationPeer, ITreeViewItemAutomationPeer_Ptr);
   begin
      if this.m_ITreeViewItemAutomationPeer /= null then
         if this.m_ITreeViewItemAutomationPeer.all /= null then
            RefCount := this.m_ITreeViewItemAutomationPeer.all.Release;
            Free (this.m_ITreeViewItemAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TreeViewItemAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.TreeViewItem'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TreeViewItemAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.TreeViewItemAutomationPeer");
      m_Factory    : access ITreeViewItemAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ITreeViewItemAutomationPeer;
   begin
      return RetVal : TreeViewItemAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ITreeViewItemAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ITreeViewItem.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITreeViewItemAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ITreeViewItemAutomationPeer;
            Retval.m_ITreeViewItemAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TreeViewItemAutomationPeer

   function get_ExpandCollapseState
   (
      this : in out TreeViewItemAutomationPeer
   )
   return WinRt.Windows.UI.Xaml.Automation.ExpandCollapseState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Automation.ExpandCollapseState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ITreeViewItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITreeViewItemAutomationPeer.all);
      Hr := m_Interface.get_ExpandCollapseState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Collapse
   (
      this : in out TreeViewItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ITreeViewItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITreeViewItemAutomationPeer.all);
      Hr := m_Interface.Collapse;
      m_RefCount := m_Interface.Release;
   end;

   procedure Expand
   (
      this : in out TreeViewItemAutomationPeer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Automation.Peers.ITreeViewItemAutomationPeer_Interface, WinRt.Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider, WinRt.Windows.UI.Xaml.Automation.Provider.IID_IExpandCollapseProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITreeViewItemAutomationPeer.all);
      Hr := m_Interface.Expand;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TreeViewListAutomationPeer

   procedure Initialize (this : in out TreeViewListAutomationPeer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TreeViewListAutomationPeer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITreeViewListAutomationPeer, ITreeViewListAutomationPeer_Ptr);
   begin
      if this.m_ITreeViewListAutomationPeer /= null then
         if this.m_ITreeViewListAutomationPeer.all /= null then
            RefCount := this.m_ITreeViewListAutomationPeer.all.Release;
            Free (this.m_ITreeViewListAutomationPeer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TreeViewListAutomationPeer

   function Constructor
   (
      owner : Windows.UI.Xaml.Controls.TreeViewList'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TreeViewListAutomationPeer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Automation.Peers.TreeViewListAutomationPeer");
      m_Factory    : access ITreeViewListAutomationPeerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Automation.Peers.ITreeViewListAutomationPeer;
   begin
      return RetVal : TreeViewListAutomationPeer do
         Hr := RoGetActivationFactory (m_hString, IID_ITreeViewListAutomationPeerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithOwner (owner.m_ITreeViewList.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITreeViewListAutomationPeer := new Windows.UI.Xaml.Automation.Peers.ITreeViewListAutomationPeer;
            Retval.m_ITreeViewListAutomationPeer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TreeViewListAutomationPeer

end;

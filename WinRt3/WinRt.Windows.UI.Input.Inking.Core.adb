--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.UI.Composition;
with WinRt.Windows.UI.Core;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Input.Inking.Core is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreIncrementalInkStroke

   procedure Initialize (this : in out CoreIncrementalInkStroke) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreIncrementalInkStroke) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreIncrementalInkStroke, ICoreIncrementalInkStroke_Ptr);
   begin
      if this.m_ICoreIncrementalInkStroke /= null then
         if this.m_ICoreIncrementalInkStroke.all /= null then
            RefCount := this.m_ICoreIncrementalInkStroke.all.Release;
            Free (this.m_ICoreIncrementalInkStroke);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CoreIncrementalInkStroke

   function Constructor
   (
      drawingAttributes : Windows.UI.Input.Inking.InkDrawingAttributes'Class;
      pointTransform : Windows.Foundation.Numerics.Matrix3x2
   )
   return CoreIncrementalInkStroke is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Input.Inking.Core.CoreIncrementalInkStroke");
      m_Factory    : access ICoreIncrementalInkStrokeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Input.Inking.Core.ICoreIncrementalInkStroke;
   begin
      return RetVal : CoreIncrementalInkStroke do
         Hr := RoGetActivationFactory (m_hString, IID_ICoreIncrementalInkStrokeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (drawingAttributes.m_IInkDrawingAttributes.all, pointTransform, m_ComRetVal'Access);
            Retval.m_ICoreIncrementalInkStroke := new Windows.UI.Input.Inking.Core.ICoreIncrementalInkStroke;
            Retval.m_ICoreIncrementalInkStroke.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreIncrementalInkStroke

   function AppendInkPoints
   (
      this : in out CoreIncrementalInkStroke;
      inkPoints : GenericObject
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICoreIncrementalInkStroke.all.AppendInkPoints (inkPoints, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateInkStroke
   (
      this : in out CoreIncrementalInkStroke
   )
   return WinRt.Windows.UI.Input.Inking.InkStroke'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.IInkStroke;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.InkStroke do
         Hr := this.m_ICoreIncrementalInkStroke.all.CreateInkStroke (m_ComRetVal'Access);
         Retval.m_IInkStroke := new Windows.UI.Input.Inking.IInkStroke;
         Retval.m_IInkStroke.all := m_ComRetVal;
      end return;
   end;

   function get_DrawingAttributes
   (
      this : in out CoreIncrementalInkStroke
   )
   return WinRt.Windows.UI.Input.Inking.InkDrawingAttributes'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.IInkDrawingAttributes;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.InkDrawingAttributes do
         Hr := this.m_ICoreIncrementalInkStroke.all.get_DrawingAttributes (m_ComRetVal'Access);
         Retval.m_IInkDrawingAttributes := new Windows.UI.Input.Inking.IInkDrawingAttributes;
         Retval.m_IInkDrawingAttributes.all := m_ComRetVal;
      end return;
   end;

   function get_PointTransform
   (
      this : in out CoreIncrementalInkStroke
   )
   return WinRt.Windows.Foundation.Numerics.Matrix3x2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix3x2;
   begin
      Hr := this.m_ICoreIncrementalInkStroke.all.get_PointTransform (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out CoreIncrementalInkStroke
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICoreIncrementalInkStroke.all.get_BoundingRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreInkIndependentInputSource

   procedure Initialize (this : in out CoreInkIndependentInputSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreInkIndependentInputSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreInkIndependentInputSource, ICoreInkIndependentInputSource_Ptr);
   begin
      if this.m_ICoreInkIndependentInputSource /= null then
         if this.m_ICoreInkIndependentInputSource.all /= null then
            RefCount := this.m_ICoreInkIndependentInputSource.all.Release;
            Free (this.m_ICoreInkIndependentInputSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CoreInkIndependentInputSource

   function Create
   (
      inkPresenter : Windows.UI.Input.Inking.InkPresenter'Class
   )
   return WinRt.Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource");
      m_Factory        : access WinRt.Windows.UI.Input.Inking.Core.ICoreInkIndependentInputSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Core.ICoreInkIndependentInputSource;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource do
         Hr := RoGetActivationFactory (m_hString, IID_ICoreInkIndependentInputSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (inkPresenter.m_IInkPresenter.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICoreInkIndependentInputSource := new Windows.UI.Input.Inking.Core.ICoreInkIndependentInputSource;
            Retval.m_ICoreInkIndependentInputSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreInkIndependentInputSource

   function add_PointerEntering
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerEntering (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerEntering
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerEntering (cookie);
   end;

   function add_PointerHovering
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerHovering (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerHovering
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerHovering (cookie);
   end;

   function add_PointerExiting
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerExiting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerExiting
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerExiting (cookie);
   end;

   function add_PointerPressing
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerPressing (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerPressing
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerPressing (cookie);
   end;

   function add_PointerMoving
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerMoving (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerMoving
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerMoving (cookie);
   end;

   function add_PointerReleasing
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerReleasing (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerReleasing
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerReleasing (cookie);
   end;

   function add_PointerLost
   (
      this : in out CoreInkIndependentInputSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.add_PointerLost (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PointerLost
   (
      this : in out CoreInkIndependentInputSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkIndependentInputSource.all.remove_PointerLost (cookie);
   end;

   function get_InkPresenter
   (
      this : in out CoreInkIndependentInputSource
   )
   return WinRt.Windows.UI.Input.Inking.InkPresenter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.IInkPresenter;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.InkPresenter do
         Hr := this.m_ICoreInkIndependentInputSource.all.get_InkPresenter (m_ComRetVal'Access);
         Retval.m_IInkPresenter := new Windows.UI.Input.Inking.IInkPresenter;
         Retval.m_IInkPresenter.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreInkPresenterHost

   procedure Initialize (this : in out CoreInkPresenterHost) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreInkPresenterHost) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreInkPresenterHost, ICoreInkPresenterHost_Ptr);
   begin
      if this.m_ICoreInkPresenterHost /= null then
         if this.m_ICoreInkPresenterHost.all /= null then
            RefCount := this.m_ICoreInkPresenterHost.all.Release;
            Free (this.m_ICoreInkPresenterHost);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CoreInkPresenterHost

   function Constructor return CoreInkPresenterHost is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Input.Inking.Core.CoreInkPresenterHost");
      m_ComRetVal  : aliased Windows.UI.Input.Inking.Core.ICoreInkPresenterHost;
   begin
      return RetVal : CoreInkPresenterHost do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICoreInkPresenterHost := new Windows.UI.Input.Inking.Core.ICoreInkPresenterHost;
            Retval.m_ICoreInkPresenterHost.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreInkPresenterHost

   function get_InkPresenter
   (
      this : in out CoreInkPresenterHost
   )
   return WinRt.Windows.UI.Input.Inking.InkPresenter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.IInkPresenter;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.InkPresenter do
         Hr := this.m_ICoreInkPresenterHost.all.get_InkPresenter (m_ComRetVal'Access);
         Retval.m_IInkPresenter := new Windows.UI.Input.Inking.IInkPresenter;
         Retval.m_IInkPresenter.all := m_ComRetVal;
      end return;
   end;

   function get_RootVisual
   (
      this : in out CoreInkPresenterHost
   )
   return WinRt.Windows.UI.Composition.ContainerVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IContainerVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ContainerVisual do
         Hr := this.m_ICoreInkPresenterHost.all.get_RootVisual (m_ComRetVal'Access);
         Retval.m_IContainerVisual := new Windows.UI.Composition.IContainerVisual;
         Retval.m_IContainerVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_RootVisual
   (
      this : in out CoreInkPresenterHost;
      value : Windows.UI.Composition.ContainerVisual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreInkPresenterHost.all.put_RootVisual (value.m_IContainerVisual.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreWetStrokeUpdateEventArgs

   procedure Initialize (this : in out CoreWetStrokeUpdateEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreWetStrokeUpdateEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreWetStrokeUpdateEventArgs, ICoreWetStrokeUpdateEventArgs_Ptr);
   begin
      if this.m_ICoreWetStrokeUpdateEventArgs /= null then
         if this.m_ICoreWetStrokeUpdateEventArgs.all /= null then
            RefCount := this.m_ICoreWetStrokeUpdateEventArgs.all.Release;
            Free (this.m_ICoreWetStrokeUpdateEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreWetStrokeUpdateEventArgs

   function get_NewInkPoints
   (
      this : in out CoreWetStrokeUpdateEventArgs
   )
   return IVector_IInkPoint.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IInkPoint.Kind;
   begin
      Hr := this.m_ICoreWetStrokeUpdateEventArgs.all.get_NewInkPoints (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IInkPoint (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PointerId
   (
      this : in out CoreWetStrokeUpdateEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICoreWetStrokeUpdateEventArgs.all.get_PointerId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Disposition
   (
      this : in out CoreWetStrokeUpdateEventArgs
   )
   return WinRt.Windows.UI.Input.Inking.Core.CoreWetStrokeDisposition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Core.CoreWetStrokeDisposition;
   begin
      Hr := this.m_ICoreWetStrokeUpdateEventArgs.all.get_Disposition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Disposition
   (
      this : in out CoreWetStrokeUpdateEventArgs;
      value : Windows.UI.Input.Inking.Core.CoreWetStrokeDisposition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreWetStrokeUpdateEventArgs.all.put_Disposition (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreWetStrokeUpdateSource

   procedure Initialize (this : in out CoreWetStrokeUpdateSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreWetStrokeUpdateSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreWetStrokeUpdateSource, ICoreWetStrokeUpdateSource_Ptr);
   begin
      if this.m_ICoreWetStrokeUpdateSource /= null then
         if this.m_ICoreWetStrokeUpdateSource.all /= null then
            RefCount := this.m_ICoreWetStrokeUpdateSource.all.Release;
            Free (this.m_ICoreWetStrokeUpdateSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CoreWetStrokeUpdateSource

   function Create
   (
      inkPresenter : Windows.UI.Input.Inking.InkPresenter'Class
   )
   return WinRt.Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource");
      m_Factory        : access WinRt.Windows.UI.Input.Inking.Core.ICoreWetStrokeUpdateSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Core.ICoreWetStrokeUpdateSource;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource do
         Hr := RoGetActivationFactory (m_hString, IID_ICoreWetStrokeUpdateSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (inkPresenter.m_IInkPresenter.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICoreWetStrokeUpdateSource := new Windows.UI.Input.Inking.Core.ICoreWetStrokeUpdateSource;
            Retval.m_ICoreWetStrokeUpdateSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreWetStrokeUpdateSource

   function add_WetStrokeStarting
   (
      this : in out CoreWetStrokeUpdateSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.add_WetStrokeStarting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WetStrokeStarting
   (
      this : in out CoreWetStrokeUpdateSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.remove_WetStrokeStarting (cookie);
   end;

   function add_WetStrokeContinuing
   (
      this : in out CoreWetStrokeUpdateSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.add_WetStrokeContinuing (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WetStrokeContinuing
   (
      this : in out CoreWetStrokeUpdateSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.remove_WetStrokeContinuing (cookie);
   end;

   function add_WetStrokeStopping
   (
      this : in out CoreWetStrokeUpdateSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.add_WetStrokeStopping (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WetStrokeStopping
   (
      this : in out CoreWetStrokeUpdateSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.remove_WetStrokeStopping (cookie);
   end;

   function add_WetStrokeCompleted
   (
      this : in out CoreWetStrokeUpdateSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.add_WetStrokeCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WetStrokeCompleted
   (
      this : in out CoreWetStrokeUpdateSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.remove_WetStrokeCompleted (cookie);
   end;

   function add_WetStrokeCanceled
   (
      this : in out CoreWetStrokeUpdateSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.add_WetStrokeCanceled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WetStrokeCanceled
   (
      this : in out CoreWetStrokeUpdateSource;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreWetStrokeUpdateSource.all.remove_WetStrokeCanceled (cookie);
   end;

   function get_InkPresenter
   (
      this : in out CoreWetStrokeUpdateSource
   )
   return WinRt.Windows.UI.Input.Inking.InkPresenter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.IInkPresenter;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.InkPresenter do
         Hr := this.m_ICoreWetStrokeUpdateSource.all.get_InkPresenter (m_ComRetVal'Access);
         Retval.m_IInkPresenter := new Windows.UI.Input.Inking.IInkPresenter;
         Retval.m_IInkPresenter.all := m_ComRetVal;
      end return;
   end;

end;

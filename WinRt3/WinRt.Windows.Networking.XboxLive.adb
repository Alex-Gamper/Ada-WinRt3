--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.XboxLive is

   package IAsyncOperation_XboxLiveEndpointPairCreationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult);
   package AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveDeviceAddress

   procedure Initialize (this : in out XboxLiveDeviceAddress) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveDeviceAddress) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveDeviceAddress, IXboxLiveDeviceAddress_Ptr);
   begin
      if this.m_IXboxLiveDeviceAddress /= null then
         if this.m_IXboxLiveDeviceAddress.all /= null then
            RefCount := this.m_IXboxLiveDeviceAddress.all.Release;
            Free (this.m_IXboxLiveDeviceAddress);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XboxLiveDeviceAddress

   function CreateFromSnapshotBase64
   (
      base64 : WinRt.WString
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveDeviceAddress");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveDeviceAddressStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
      HStr_base64 : WinRt.HString := To_HString (base64);
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveDeviceAddressStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSnapshotBase64 (HStr_base64, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
            Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_base64);
      end return;
   end;

   function CreateFromSnapshotBuffer
   (
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveDeviceAddress");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveDeviceAddressStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveDeviceAddressStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSnapshotBuffer (buffer, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
            Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromSnapshotBytes
   (
      buffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveDeviceAddress");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveDeviceAddressStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
      function Convert_buffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveDeviceAddressStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSnapshotBytes (WinRt.UInt32(buffer'Length), Convert_buffer (buffer (buffer'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
            Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetLocal
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveDeviceAddress");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveDeviceAddressStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveDeviceAddressStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetLocal (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
            Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MaxSnapshotBytesSize
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveDeviceAddress");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveDeviceAddressStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveDeviceAddressStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxSnapshotBytesSize (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveDeviceAddress

   function add_SnapshotChanged
   (
      this : in out XboxLiveDeviceAddress;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.add_SnapshotChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SnapshotChanged
   (
      this : in out XboxLiveDeviceAddress;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.remove_SnapshotChanged (token);
   end;

   function GetSnapshotAsBase64
   (
      this : in out XboxLiveDeviceAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.GetSnapshotAsBase64 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetSnapshotAsBuffer
   (
      this : in out XboxLiveDeviceAddress
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.GetSnapshotAsBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetSnapshotAsBytes
   (
      this : in out XboxLiveDeviceAddress;
      buffer : WinRt.Byte_Array;
      bytesWritten : WinRt.UInt32_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_buffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.GetSnapshotAsBytes (WinRt.UInt32(buffer'Length), Convert_buffer (buffer (buffer'First)'Address), bytesWritten);
   end;

   function Compare
   (
      this : in out XboxLiveDeviceAddress;
      otherDeviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.Compare (otherDeviceAddress.m_IXboxLiveDeviceAddress.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsValid
   (
      this : in out XboxLiveDeviceAddress
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.get_IsValid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsLocal
   (
      this : in out XboxLiveDeviceAddress
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.get_IsLocal (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkAccessKind
   (
      this : in out XboxLiveDeviceAddress
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveNetworkAccessKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveNetworkAccessKind;
   begin
      Hr := this.m_IXboxLiveDeviceAddress.all.get_NetworkAccessKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveEndpointPair

   procedure Initialize (this : in out XboxLiveEndpointPair) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveEndpointPair) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveEndpointPair, IXboxLiveEndpointPair_Ptr);
   begin
      if this.m_IXboxLiveEndpointPair /= null then
         if this.m_IXboxLiveEndpointPair.all /= null then
            RefCount := this.m_IXboxLiveEndpointPair.all.Release;
            Free (this.m_IXboxLiveEndpointPair);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XboxLiveEndpointPair

   function FindEndpointPairBySocketAddressBytes
   (
      localSocketAddress : WinRt.Byte_Array;
      remoteSocketAddress : WinRt.Byte_Array
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveEndpointPair");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveEndpointPair;
      function Convert_localSocketAddress is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_remoteSocketAddress is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveEndpointPairStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindEndpointPairBySocketAddressBytes (WinRt.UInt32(localSocketAddress'Length), Convert_localSocketAddress (localSocketAddress (localSocketAddress'First)'Address), WinRt.UInt32(remoteSocketAddress'Length), Convert_remoteSocketAddress (remoteSocketAddress (remoteSocketAddress'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveEndpointPair := new Windows.Networking.XboxLive.IXboxLiveEndpointPair;
            Retval.m_IXboxLiveEndpointPair.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindEndpointPairByHostNamesAndPorts
   (
      localHostName : Windows.Networking.HostName'Class;
      localPort : WinRt.WString;
      remoteHostName : Windows.Networking.HostName'Class;
      remotePort : WinRt.WString
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveEndpointPair");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveEndpointPair;
      HStr_localPort : WinRt.HString := To_HString (localPort);
      HStr_remotePort : WinRt.HString := To_HString (remotePort);
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveEndpointPairStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindEndpointPairByHostNamesAndPorts (localHostName.m_IHostName.all, HStr_localPort, remoteHostName.m_IHostName.all, HStr_remotePort, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveEndpointPair := new Windows.Networking.XboxLive.IXboxLiveEndpointPair;
            Retval.m_IXboxLiveEndpointPair.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_localPort);
         Hr := WindowsDeleteString (HStr_remotePort);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveEndpointPair

   function add_StateChanged
   (
      this : in out XboxLiveEndpointPair;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out XboxLiveEndpointPair;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.remove_StateChanged (token);
   end;

   procedure DeleteAsync
   (
      this : in out XboxLiveEndpointPair
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IXboxLiveEndpointPair.all.DeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure GetRemoteSocketAddressBytes
   (
      this : in out XboxLiveEndpointPair;
      socketAddress : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_socketAddress is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.GetRemoteSocketAddressBytes (WinRt.UInt32(socketAddress'Length), Convert_socketAddress (socketAddress (socketAddress'First)'Address));
   end;

   procedure GetLocalSocketAddressBytes
   (
      this : in out XboxLiveEndpointPair;
      socketAddress : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_socketAddress is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.GetLocalSocketAddressBytes (WinRt.UInt32(socketAddress'Length), Convert_socketAddress (socketAddress (socketAddress'First)'Address));
   end;

   function get_State
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveEndpointPairState;
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Template
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate do
         Hr := this.m_IXboxLiveEndpointPair.all.get_Template (m_ComRetVal'Access);
         Retval.m_IXboxLiveEndpointPairTemplate := new Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate;
         Retval.m_IXboxLiveEndpointPairTemplate.all := m_ComRetVal;
      end return;
   end;

   function get_RemoteDeviceAddress
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := this.m_IXboxLiveEndpointPair.all.get_RemoteDeviceAddress (m_ComRetVal'Access);
         Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
         Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
      end return;
   end;

   function get_RemoteHostName
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IXboxLiveEndpointPair.all.get_RemoteHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_RemotePort
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.get_RemotePort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LocalHostName
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IXboxLiveEndpointPair.all.get_LocalHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_LocalPort
   (
      this : in out XboxLiveEndpointPair
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXboxLiveEndpointPair.all.get_LocalPort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveEndpointPairCreationResult

   procedure Initialize (this : in out XboxLiveEndpointPairCreationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveEndpointPairCreationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveEndpointPairCreationResult, IXboxLiveEndpointPairCreationResult_Ptr);
   begin
      if this.m_IXboxLiveEndpointPairCreationResult /= null then
         if this.m_IXboxLiveEndpointPairCreationResult.all /= null then
            RefCount := this.m_IXboxLiveEndpointPairCreationResult.all.Release;
            Free (this.m_IXboxLiveEndpointPairCreationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveEndpointPairCreationResult

   function get_DeviceAddress
   (
      this : in out XboxLiveEndpointPairCreationResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := this.m_IXboxLiveEndpointPairCreationResult.all.get_DeviceAddress (m_ComRetVal'Access);
         Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
         Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out XboxLiveEndpointPairCreationResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus;
   begin
      Hr := this.m_IXboxLiveEndpointPairCreationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsExistingPathEvaluation
   (
      this : in out XboxLiveEndpointPairCreationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXboxLiveEndpointPairCreationResult.all.get_IsExistingPathEvaluation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EndpointPair
   (
      this : in out XboxLiveEndpointPairCreationResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveEndpointPair;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair do
         Hr := this.m_IXboxLiveEndpointPairCreationResult.all.get_EndpointPair (m_ComRetVal'Access);
         Retval.m_IXboxLiveEndpointPair := new Windows.Networking.XboxLive.IXboxLiveEndpointPair;
         Retval.m_IXboxLiveEndpointPair.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveEndpointPairStateChangedEventArgs

   procedure Initialize (this : in out XboxLiveEndpointPairStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveEndpointPairStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveEndpointPairStateChangedEventArgs, IXboxLiveEndpointPairStateChangedEventArgs_Ptr);
   begin
      if this.m_IXboxLiveEndpointPairStateChangedEventArgs /= null then
         if this.m_IXboxLiveEndpointPairStateChangedEventArgs.all /= null then
            RefCount := this.m_IXboxLiveEndpointPairStateChangedEventArgs.all.Release;
            Free (this.m_IXboxLiveEndpointPairStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveEndpointPairStateChangedEventArgs

   function get_OldState
   (
      this : in out XboxLiveEndpointPairStateChangedEventArgs
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveEndpointPairState;
   begin
      Hr := this.m_IXboxLiveEndpointPairStateChangedEventArgs.all.get_OldState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewState
   (
      this : in out XboxLiveEndpointPairStateChangedEventArgs
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveEndpointPairState;
   begin
      Hr := this.m_IXboxLiveEndpointPairStateChangedEventArgs.all.get_NewState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveEndpointPairTemplate

   procedure Initialize (this : in out XboxLiveEndpointPairTemplate) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveEndpointPairTemplate) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveEndpointPairTemplate, IXboxLiveEndpointPairTemplate_Ptr);
   begin
      if this.m_IXboxLiveEndpointPairTemplate /= null then
         if this.m_IXboxLiveEndpointPairTemplate.all /= null then
            RefCount := this.m_IXboxLiveEndpointPairTemplate.all.Release;
            Free (this.m_IXboxLiveEndpointPairTemplate);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XboxLiveEndpointPairTemplate

   function GetTemplateByName
   (
      name : WinRt.WString
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplateStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate do
         Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveEndpointPairTemplateStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetTemplateByName (HStr_name, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IXboxLiveEndpointPairTemplate := new Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate;
            Retval.m_IXboxLiveEndpointPairTemplate.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function get_Templates
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplateStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveEndpointPairTemplateStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Templates (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveEndpointPairTemplate

   function add_InboundEndpointPairCreated
   (
      this : in out XboxLiveEndpointPairTemplate;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.add_InboundEndpointPairCreated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_InboundEndpointPairCreated
   (
      this : in out XboxLiveEndpointPairTemplate;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.remove_InboundEndpointPairCreated (token);
   end;

   function CreateEndpointPairAsync
   (
      this : in out XboxLiveEndpointPairTemplate;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
      m_IID            : aliased WinRt.IID := (2763641886, 19244, 23545, (161, 157, 237, 57, 91, 35, 130, 60 )); -- Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (2908224029, 56091, 24053, (150, 148, 247, 27, 155, 213, 98, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind := new AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult do
         Hr := this.m_IXboxLiveEndpointPairTemplate.all.CreateEndpointPairAsync (deviceAddress.m_IXboxLiveDeviceAddress.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IXboxLiveEndpointPairCreationResult := new Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
                  Retval.m_IXboxLiveEndpointPairCreationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateEndpointPairAsync
   (
      this : in out XboxLiveEndpointPairTemplate;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class;
      behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
      m_IID            : aliased WinRt.IID := (2763641886, 19244, 23545, (161, 157, 237, 57, 91, 35, 130, 60 )); -- Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (2908224029, 56091, 24053, (150, 148, 247, 27, 155, 213, 98, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind := new AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult do
         Hr := this.m_IXboxLiveEndpointPairTemplate.all.CreateEndpointPairAsync (deviceAddress.m_IXboxLiveDeviceAddress.all, behaviors, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IXboxLiveEndpointPairCreationResult := new Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
                  Retval.m_IXboxLiveEndpointPairCreationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateEndpointPairForPortsAsync
   (
      this : in out XboxLiveEndpointPairTemplate;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class;
      initiatorPort : WinRt.WString;
      acceptorPort : WinRt.WString
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_initiatorPort : WinRt.HString := To_HString (initiatorPort);
      HStr_acceptorPort : WinRt.HString := To_HString (acceptorPort);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
      m_IID            : aliased WinRt.IID := (2763641886, 19244, 23545, (161, 157, 237, 57, 91, 35, 130, 60 )); -- Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (2908224029, 56091, 24053, (150, 148, 247, 27, 155, 213, 98, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind := new AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult do
         Hr := this.m_IXboxLiveEndpointPairTemplate.all.CreateEndpointPairForPortsAsync (deviceAddress.m_IXboxLiveDeviceAddress.all, HStr_initiatorPort, HStr_acceptorPort, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IXboxLiveEndpointPairCreationResult := new Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
                  Retval.m_IXboxLiveEndpointPairCreationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_initiatorPort);
         Hr := WindowsDeleteString (HStr_acceptorPort);
      end return;
   end;

   function CreateEndpointPairForPortsAsync
   (
      this : in out XboxLiveEndpointPairTemplate;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class;
      initiatorPort : WinRt.WString;
      acceptorPort : WinRt.WString;
      behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_initiatorPort : WinRt.HString := To_HString (initiatorPort);
      HStr_acceptorPort : WinRt.HString := To_HString (acceptorPort);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
      m_IID            : aliased WinRt.IID := (2763641886, 19244, 23545, (161, 157, 237, 57, 91, 35, 130, 60 )); -- Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (2908224029, 56091, 24053, (150, 148, 247, 27, 155, 213, 98, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind := new AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XboxLiveEndpointPairCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_XboxLiveEndpointPairCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult do
         Hr := this.m_IXboxLiveEndpointPairTemplate.all.CreateEndpointPairForPortsAsync (deviceAddress.m_IXboxLiveDeviceAddress.all, HStr_initiatorPort, HStr_acceptorPort, behaviors, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IXboxLiveEndpointPairCreationResult := new Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
                  Retval.m_IXboxLiveEndpointPairCreationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_initiatorPort);
         Hr := WindowsDeleteString (HStr_acceptorPort);
      end return;
   end;

   function get_Name
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SocketKind
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveSocketKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveSocketKind;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_SocketKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InitiatorBoundPortRangeLower
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_InitiatorBoundPortRangeLower (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InitiatorBoundPortRangeUpper
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_InitiatorBoundPortRangeUpper (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AcceptorBoundPortRangeLower
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_AcceptorBoundPortRangeLower (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AcceptorBoundPortRangeUpper
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_AcceptorBoundPortRangeUpper (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EndpointPairs
   (
      this : in out XboxLiveEndpointPairTemplate
   )
   return IVectorView_IXboxLiveEndpointPair.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IXboxLiveEndpointPair.Kind;
   begin
      Hr := this.m_IXboxLiveEndpointPairTemplate.all.get_EndpointPairs (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IXboxLiveEndpointPair (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveInboundEndpointPairCreatedEventArgs

   procedure Initialize (this : in out XboxLiveInboundEndpointPairCreatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveInboundEndpointPairCreatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveInboundEndpointPairCreatedEventArgs, IXboxLiveInboundEndpointPairCreatedEventArgs_Ptr);
   begin
      if this.m_IXboxLiveInboundEndpointPairCreatedEventArgs /= null then
         if this.m_IXboxLiveInboundEndpointPairCreatedEventArgs.all /= null then
            RefCount := this.m_IXboxLiveInboundEndpointPairCreatedEventArgs.all.Release;
            Free (this.m_IXboxLiveInboundEndpointPairCreatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveInboundEndpointPairCreatedEventArgs

   function get_EndpointPair
   (
      this : in out XboxLiveInboundEndpointPairCreatedEventArgs
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveEndpointPair;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveEndpointPair do
         Hr := this.m_IXboxLiveInboundEndpointPairCreatedEventArgs.all.get_EndpointPair (m_ComRetVal'Access);
         Retval.m_IXboxLiveEndpointPair := new Windows.Networking.XboxLive.IXboxLiveEndpointPair;
         Retval.m_IXboxLiveEndpointPair.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveQualityOfServiceMeasurement

   procedure Initialize (this : in out XboxLiveQualityOfServiceMeasurement) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveQualityOfServiceMeasurement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurement_Ptr);
   begin
      if this.m_IXboxLiveQualityOfServiceMeasurement /= null then
         if this.m_IXboxLiveQualityOfServiceMeasurement.all /= null then
            RefCount := this.m_IXboxLiveQualityOfServiceMeasurement.all.Release;
            Free (this.m_IXboxLiveQualityOfServiceMeasurement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XboxLiveQualityOfServiceMeasurement

   function Constructor return XboxLiveQualityOfServiceMeasurement is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_ComRetVal  : aliased Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement;
   begin
      return RetVal : XboxLiveQualityOfServiceMeasurement do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IXboxLiveQualityOfServiceMeasurement := new Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement;
            Retval.m_IXboxLiveQualityOfServiceMeasurement.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XboxLiveQualityOfServiceMeasurement

   procedure PublishPrivatePayloadBytes
   (
      payload : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_payload is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.PublishPrivatePayloadBytes (WinRt.UInt32(payload'Length), Convert_payload (payload (payload'First)'Address));
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ClearPrivatePayload is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ClearPrivatePayload;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_MaxSimultaneousProbeConnections
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxSimultaneousProbeConnections (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_MaxSimultaneousProbeConnections
   (
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_MaxSimultaneousProbeConnections (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_IsSystemOutboundBandwidthConstrained
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSystemOutboundBandwidthConstrained (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_IsSystemOutboundBandwidthConstrained
   (
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_IsSystemOutboundBandwidthConstrained (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_IsSystemInboundBandwidthConstrained
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSystemInboundBandwidthConstrained (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_IsSystemInboundBandwidthConstrained
   (
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_IsSystemInboundBandwidthConstrained (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_PublishedPrivatePayload
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PublishedPrivatePayload (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_PublishedPrivatePayload
   (
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_PublishedPrivatePayload (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_MaxPrivatePayloadSize
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement");
      m_Factory        : access WinRt.Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXboxLiveQualityOfServiceMeasurementStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxPrivatePayloadSize (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveQualityOfServiceMeasurement

   procedure MeasureAsync
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.MeasureAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetMetricResultsForDevice
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class
   )
   return IVectorView_IXboxLiveQualityOfServiceMetricResult.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IXboxLiveQualityOfServiceMetricResult.Kind;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.GetMetricResultsForDevice (deviceAddress.m_IXboxLiveDeviceAddress.all, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IXboxLiveQualityOfServiceMetricResult (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetMetricResultsForMetric
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric
   )
   return IVectorView_IXboxLiveQualityOfServiceMetricResult.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IXboxLiveQualityOfServiceMetricResult.Kind;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.GetMetricResultsForMetric (metric, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IXboxLiveQualityOfServiceMetricResult (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetMetricResult
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class;
      metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult do
         Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.GetMetricResult (deviceAddress.m_IXboxLiveDeviceAddress.all, metric, m_ComRetVal'Access);
         Retval.m_IXboxLiveQualityOfServiceMetricResult := new Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult;
         Retval.m_IXboxLiveQualityOfServiceMetricResult.all := m_ComRetVal;
      end return;
   end;

   function GetPrivatePayloadResult
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      deviceAddress : Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult do
         Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.GetPrivatePayloadResult (deviceAddress.m_IXboxLiveDeviceAddress.all, m_ComRetVal'Access);
         Retval.m_IXboxLiveQualityOfServicePrivatePayloadResult := new Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult;
         Retval.m_IXboxLiveQualityOfServicePrivatePayloadResult.all := m_ComRetVal;
      end return;
   end;

   function get_Metrics
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return IVector_XboxLiveQualityOfServiceMetric.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_XboxLiveQualityOfServiceMetric.Kind;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_Metrics (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_XboxLiveQualityOfServiceMetric (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DeviceAddresses
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return IVector_IXboxLiveDeviceAddress.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IXboxLiveDeviceAddress.Kind;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_DeviceAddresses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IXboxLiveDeviceAddress (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ShouldRequestPrivatePayloads
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_ShouldRequestPrivatePayloads (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShouldRequestPrivatePayloads
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.put_ShouldRequestPrivatePayloads (value);
   end;

   function get_TimeoutInMilliseconds
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_TimeoutInMilliseconds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TimeoutInMilliseconds
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.put_TimeoutInMilliseconds (value);
   end;

   function get_NumberOfProbesToAttempt
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_NumberOfProbesToAttempt (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_NumberOfProbesToAttempt
   (
      this : in out XboxLiveQualityOfServiceMeasurement;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.put_NumberOfProbesToAttempt (value);
   end;

   function get_NumberOfResultsPending
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_NumberOfResultsPending (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MetricResults
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return IVectorView_IXboxLiveQualityOfServiceMetricResult.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IXboxLiveQualityOfServiceMetricResult.Kind;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_MetricResults (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IXboxLiveQualityOfServiceMetricResult (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PrivatePayloadResults
   (
      this : in out XboxLiveQualityOfServiceMeasurement
   )
   return IVectorView_IXboxLiveQualityOfServicePrivatePayloadResult.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IXboxLiveQualityOfServicePrivatePayloadResult.Kind;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMeasurement.all.get_PrivatePayloadResults (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IXboxLiveQualityOfServicePrivatePayloadResult (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveQualityOfServiceMetricResult

   procedure Initialize (this : in out XboxLiveQualityOfServiceMetricResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveQualityOfServiceMetricResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveQualityOfServiceMetricResult, IXboxLiveQualityOfServiceMetricResult_Ptr);
   begin
      if this.m_IXboxLiveQualityOfServiceMetricResult /= null then
         if this.m_IXboxLiveQualityOfServiceMetricResult.all /= null then
            RefCount := this.m_IXboxLiveQualityOfServiceMetricResult.all.Release;
            Free (this.m_IXboxLiveQualityOfServiceMetricResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveQualityOfServiceMetricResult

   function get_Status
   (
      this : in out XboxLiveQualityOfServiceMetricResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMetricResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceAddress
   (
      this : in out XboxLiveQualityOfServiceMetricResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := this.m_IXboxLiveQualityOfServiceMetricResult.all.get_DeviceAddress (m_ComRetVal'Access);
         Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
         Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
      end return;
   end;

   function get_Metric
   (
      this : in out XboxLiveQualityOfServiceMetricResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMetricResult.all.get_Metric (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out XboxLiveQualityOfServiceMetricResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IXboxLiveQualityOfServiceMetricResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XboxLiveQualityOfServicePrivatePayloadResult

   procedure Initialize (this : in out XboxLiveQualityOfServicePrivatePayloadResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out XboxLiveQualityOfServicePrivatePayloadResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXboxLiveQualityOfServicePrivatePayloadResult, IXboxLiveQualityOfServicePrivatePayloadResult_Ptr);
   begin
      if this.m_IXboxLiveQualityOfServicePrivatePayloadResult /= null then
         if this.m_IXboxLiveQualityOfServicePrivatePayloadResult.all /= null then
            RefCount := this.m_IXboxLiveQualityOfServicePrivatePayloadResult.all.Release;
            Free (this.m_IXboxLiveQualityOfServicePrivatePayloadResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XboxLiveQualityOfServicePrivatePayloadResult

   function get_Status
   (
      this : in out XboxLiveQualityOfServicePrivatePayloadResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus;
   begin
      Hr := this.m_IXboxLiveQualityOfServicePrivatePayloadResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceAddress
   (
      this : in out XboxLiveQualityOfServicePrivatePayloadResult
   )
   return WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
   begin
      return RetVal : WinRt.Windows.Networking.XboxLive.XboxLiveDeviceAddress do
         Hr := this.m_IXboxLiveQualityOfServicePrivatePayloadResult.all.get_DeviceAddress (m_ComRetVal'Access);
         Retval.m_IXboxLiveDeviceAddress := new Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
         Retval.m_IXboxLiveDeviceAddress.all := m_ComRetVal;
      end return;
   end;

   function get_Value
   (
      this : in out XboxLiveQualityOfServicePrivatePayloadResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IXboxLiveQualityOfServicePrivatePayloadResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Collections;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.System.Diagnostics.TraceReporting is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IPlatformDiagnosticActionsStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IPlatformDiagnosticActionsStatics is access IPlatformDiagnosticActionsStatics_Interface'Class;

   type IPlatformDiagnosticTraceInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IPlatformDiagnosticTraceInfo is access IPlatformDiagnosticTraceInfo_Interface'Class;
   type IPlatformDiagnosticTraceInfo_Ptr is access all IPlatformDiagnosticTraceInfo;

   type IPlatformDiagnosticTraceRuntimeInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IPlatformDiagnosticTraceRuntimeInfo is access IPlatformDiagnosticTraceRuntimeInfo_Interface'Class;
   type IPlatformDiagnosticTraceRuntimeInfo_Ptr is access all IPlatformDiagnosticTraceRuntimeInfo;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type PlatformDiagnosticTraceInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IPlatformDiagnosticTraceInfo : access Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceInfo;
      end record;
   type PlatformDiagnosticTraceInfo_Ptr is access all PlatformDiagnosticTraceInfo;

   type PlatformDiagnosticTraceRuntimeInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IPlatformDiagnosticTraceRuntimeInfo : access Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceRuntimeInfo;
      end record;
   type PlatformDiagnosticTraceRuntimeInfo_Ptr is access all PlatformDiagnosticTraceRuntimeInfo;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type PlatformDiagnosticActionState is (
      Success_e,
      FreeNetworkNotAvailable_e,
      ACPowerNotAvailable_e
   );
   for PlatformDiagnosticActionState use (
      Success_e => 0,
      FreeNetworkNotAvailable_e => 1,
      ACPowerNotAvailable_e => 2
   );
   type PlatformDiagnosticActionState_Ptr is access PlatformDiagnosticActionState;

   type PlatformDiagnosticEscalationType is (
      OnCompletion_e,
      OnFailure_e
   );
   for PlatformDiagnosticEscalationType use (
      OnCompletion_e => 0,
      OnFailure_e => 1
   );
   type PlatformDiagnosticEscalationType_Ptr is access PlatformDiagnosticEscalationType;

   type PlatformDiagnosticEventBufferLatencies is (
      Normal_e,
      CostDeferred_e,
      Realtime_e
   );
   for PlatformDiagnosticEventBufferLatencies use (
      Normal_e => 1,
      CostDeferred_e => 2,
      Realtime_e => 4
   );
   type PlatformDiagnosticEventBufferLatencies_Ptr is access PlatformDiagnosticEventBufferLatencies;

   type PlatformDiagnosticTracePriority is (
      Normal_e,
      UserElevated_e
   );
   for PlatformDiagnosticTracePriority use (
      Normal_e => 0,
      UserElevated_e => 1
   );
   type PlatformDiagnosticTracePriority_Ptr is access PlatformDiagnosticTracePriority;

   type PlatformDiagnosticTraceSlotState is (
      NotRunning_e,
      Running_e,
      Throttled_e
   );
   for PlatformDiagnosticTraceSlotState use (
      NotRunning_e => 0,
      Running_e => 1,
      Throttled_e => 2
   );
   type PlatformDiagnosticTraceSlotState_Ptr is access PlatformDiagnosticTraceSlotState;

   type PlatformDiagnosticTraceSlotType is (
      Alternative_e,
      AlwaysOn_e,
      Mini_e
   );
   for PlatformDiagnosticTraceSlotType use (
      Alternative_e => 0,
      AlwaysOn_e => 1,
      Mini_e => 2
   );
   type PlatformDiagnosticTraceSlotType_Ptr is access PlatformDiagnosticTraceSlotType;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IPlatformDiagnosticActionsStatics is interface and WinRt.IInspectable;

      function IsScenarioEnabled
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         scenarioId : WinRt.Guid;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function TryEscalateScenario
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         scenarioId : WinRt.Guid;
         escalationType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticEscalationType;
         outputDirectory : WinRt.HString;
         timestampOutputDirectory : WinRt.Boolean;
         forceEscalationUpload : WinRt.Boolean;
         triggers : GenericObject;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function DownloadLatestSettingsForNamespace
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         partner : WinRt.HString;
         feature : WinRt.HString;
         isScenarioNamespace : WinRt.Boolean;
         downloadOverCostedNetwork : WinRt.Boolean;
         downloadOverBattery : WinRt.Boolean;
         RetVal : access Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState
      )
      return WinRt.Hresult is abstract;

      function GetActiveScenarioList
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function ForceUpload
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         latency : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticEventBufferLatencies;
         uploadOverCostedNetwork : WinRt.Boolean;
         uploadOverBattery : WinRt.Boolean;
         RetVal : access Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState
      )
      return WinRt.Hresult is abstract;

      function IsTraceRunning
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType;
         scenarioId : WinRt.Guid;
         traceProfileHash : WinRt.UInt64;
         RetVal : access Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotState
      )
      return WinRt.Hresult is abstract;

      function GetActiveTraceRuntime
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType;
         RetVal : access Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceRuntimeInfo
      )
      return WinRt.Hresult is abstract;

      function GetKnownTraceList
      (
         this : access IPlatformDiagnosticActionsStatics_Interface;
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IPlatformDiagnosticActionsStatics : aliased WinRt.IID := (3239337210, 37522, 16999, (137, 10, 158, 163, 237, 7, 35, 18 ));

   -----------------------------------------------------------------------------
   -- type IPlatformDiagnosticTraceInfo is interface and WinRt.IInspectable;

      function get_ScenarioId
      (
         this : access IPlatformDiagnosticTraceInfo_Interface;
         RetVal : access WinRt.Guid
      )
      return WinRt.Hresult is abstract;

      function get_ProfileHash
      (
         this : access IPlatformDiagnosticTraceInfo_Interface;
         RetVal : access WinRt.UInt64
      )
      return WinRt.Hresult is abstract;

      function get_IsExclusive
      (
         this : access IPlatformDiagnosticTraceInfo_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_IsAutoLogger
      (
         this : access IPlatformDiagnosticTraceInfo_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_MaxTraceDurationFileTime
      (
         this : access IPlatformDiagnosticTraceInfo_Interface;
         RetVal : access WinRt.Int64
      )
      return WinRt.Hresult is abstract;

      function get_Priority
      (
         this : access IPlatformDiagnosticTraceInfo_Interface;
         RetVal : access Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTracePriority
      )
      return WinRt.Hresult is abstract;

      IID_IPlatformDiagnosticTraceInfo : aliased WinRt.IID := (4168150423, 54679, 19447, (136, 220, 207, 92, 125, 194, 161, 210 ));

   -----------------------------------------------------------------------------
   -- type IPlatformDiagnosticTraceRuntimeInfo is interface and WinRt.IInspectable;

      function get_RuntimeFileTime
      (
         this : access IPlatformDiagnosticTraceRuntimeInfo_Interface;
         RetVal : access WinRt.Int64
      )
      return WinRt.Hresult is abstract;

      function get_EtwRuntimeFileTime
      (
         this : access IPlatformDiagnosticTraceRuntimeInfo_Interface;
         RetVal : access WinRt.Int64
      )
      return WinRt.Hresult is abstract;

      IID_IPlatformDiagnosticTraceRuntimeInfo : aliased WinRt.IID := (1028480557, 472, 18280, (133, 84, 30, 177, 202, 97, 9, 134 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package PlatformDiagnosticActions is

      function IsScenarioEnabled
      (
         scenarioId : WinRt.Guid
      )
      return WinRt.Boolean;

      function TryEscalateScenario
      (
         scenarioId : WinRt.Guid;
         escalationType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticEscalationType;
         outputDirectory : WinRt.WString;
         timestampOutputDirectory : WinRt.Boolean;
         forceEscalationUpload : WinRt.Boolean;
         triggers : GenericObject
      )
      return WinRt.Boolean;

      function DownloadLatestSettingsForNamespace
      (
         partner : WinRt.WString;
         feature : WinRt.WString;
         isScenarioNamespace : WinRt.Boolean;
         downloadOverCostedNetwork : WinRt.Boolean;
         downloadOverBattery : WinRt.Boolean
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState;

      function GetActiveScenarioList
      return WinRt.GenericObject;

      function ForceUpload
      (
         latency : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticEventBufferLatencies;
         uploadOverCostedNetwork : WinRt.Boolean;
         uploadOverBattery : WinRt.Boolean
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState;

      function IsTraceRunning
      (
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType;
         scenarioId : WinRt.Guid;
         traceProfileHash : WinRt.UInt64
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotState;

      function GetActiveTraceRuntime
      (
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceRuntimeInfo;

      function GetKnownTraceList
      (
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType
      )
      return WinRt.GenericObject;

   end PlatformDiagnosticActions;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlatformDiagnosticTraceInfo

   overriding procedure Initialize (this : in out PlatformDiagnosticTraceInfo);
   overriding procedure Finalize (this : in out PlatformDiagnosticTraceInfo);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlatformDiagnosticTraceInfo

   function get_ScenarioId
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Guid;

   function get_ProfileHash
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.UInt64;

   function get_IsExclusive
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Boolean;

   function get_IsAutoLogger
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Boolean;

   function get_MaxTraceDurationFileTime
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Int64;

   function get_Priority
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTracePriority;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlatformDiagnosticTraceRuntimeInfo

   overriding procedure Initialize (this : in out PlatformDiagnosticTraceRuntimeInfo);
   overriding procedure Finalize (this : in out PlatformDiagnosticTraceRuntimeInfo);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlatformDiagnosticTraceRuntimeInfo

   function get_RuntimeFileTime
   (
      this : in out PlatformDiagnosticTraceRuntimeInfo
   )
   return WinRt.Int64;

   function get_EtwRuntimeFileTime
   (
      this : in out PlatformDiagnosticTraceRuntimeInfo
   )
   return WinRt.Int64;

end;

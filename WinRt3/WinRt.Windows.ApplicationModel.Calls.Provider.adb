--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Calls.Provider is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallOrigin

   procedure Initialize (this : in out PhoneCallOrigin) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallOrigin) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallOrigin, IPhoneCallOrigin_Ptr);
   begin
      if this.m_IPhoneCallOrigin /= null then
         if this.m_IPhoneCallOrigin.all /= null then
            RefCount := this.m_IPhoneCallOrigin.all.Release;
            Free (this.m_IPhoneCallOrigin);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PhoneCallOrigin

   function Constructor return PhoneCallOrigin is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.Provider.PhoneCallOrigin");
      m_ComRetVal  : aliased Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin;
   begin
      return RetVal : PhoneCallOrigin do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPhoneCallOrigin := new Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin;
            Retval.m_IPhoneCallOrigin.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallOrigin

   function get_Category
   (
      this : in out PhoneCallOrigin
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallOrigin.all.get_Category (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Category
   (
      this : in out PhoneCallOrigin;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallOrigin.all.put_Category (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CategoryDescription
   (
      this : in out PhoneCallOrigin
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallOrigin.all.get_CategoryDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CategoryDescription
   (
      this : in out PhoneCallOrigin;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallOrigin.all.put_CategoryDescription (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Location
   (
      this : in out PhoneCallOrigin
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallOrigin.all.get_Location (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Location
   (
      this : in out PhoneCallOrigin;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallOrigin.all.put_Location (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out PhoneCallOrigin
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin_Interface, WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin2, WinRt.Windows.ApplicationModel.Calls.Provider.IID_IPhoneCallOrigin2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneCallOrigin.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out PhoneCallOrigin;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin_Interface, WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin2, WinRt.Windows.ApplicationModel.Calls.Provider.IID_IPhoneCallOrigin2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneCallOrigin.all);
      Hr := m_Interface.put_DisplayName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayPicture
   (
      this : in out PhoneCallOrigin
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin_Interface, WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin3, WinRt.Windows.ApplicationModel.Calls.Provider.IID_IPhoneCallOrigin3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IPhoneCallOrigin.all);
         Hr := m_Interface.get_DisplayPicture (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   procedure put_DisplayPicture
   (
      this : in out PhoneCallOrigin;
      value : Windows.Storage.StorageFile'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin_Interface, WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOrigin3, WinRt.Windows.ApplicationModel.Calls.Provider.IID_IPhoneCallOrigin3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneCallOrigin.all);
      Hr := m_Interface.put_DisplayPicture (value.m_IStorageFile.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PhoneCallOriginManager is

      function get_IsCurrentAppActiveCallOriginApp
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.Provider.PhoneCallOriginManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOriginManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallOriginManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsCurrentAppActiveCallOriginApp (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ShowPhoneCallOriginSettingsUI is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.Provider.PhoneCallOriginManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOriginManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallOriginManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowPhoneCallOriginSettingsUI;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SetCallOrigin
      (
         requestId : WinRt.Guid;
         callOrigin : Windows.ApplicationModel.Calls.Provider.PhoneCallOrigin'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.Provider.PhoneCallOriginManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOriginManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallOriginManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetCallOrigin (requestId, callOrigin.m_IPhoneCallOrigin.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_IsSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.Provider.PhoneCallOriginManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOriginManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallOriginManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function RequestSetAsActiveCallOriginAppAsync
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.Provider.PhoneCallOriginManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.Provider.IPhoneCallOriginManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallOriginManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestSetAsActiveCallOriginAppAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end PhoneCallOriginManager;

end;
